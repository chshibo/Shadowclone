	.text
	.file	"rdopt.c"
	.globl	clear_rdopt             # -- Begin function clear_rdopt
	.p2align	4, 0x90
	.type	clear_rdopt,@function
clear_rdopt:                            # @clear_rdopt
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cofDC, %rdi
	callq	free_mem_DCcoeff
	movq	cofAC, %rdi
	callq	free_mem_ACcoeff
	movq	cofAC8x8, %rdi
	callq	free_mem_ACcoeff
	movq	cofAC4x4intern, %rdi
	callq	free_mem_ACcoeff
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB0_2
# %bb.1:                                # %if.then
	movq	cofAC_8x8ts, %rdi
	callq	free_mem_ACcoeff
.LBB0_2:                                # %if.end
	movq	cs_mb, %rdi
	callq	delete_coding_state
	movq	cs_b8, %rdi
	callq	delete_coding_state
	movq	cs_cm, %rdi
	callq	delete_coding_state
	movq	cs_imb, %rdi
	callq	delete_coding_state
	movq	cs_ib8, %rdi
	callq	delete_coding_state
	movq	cs_ib4, %rdi
	callq	delete_coding_state
	movq	cs_pc, %rdi
	callq	delete_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end0:
	.size	clear_rdopt, .Lfunc_end0-clear_rdopt
	.cfi_endproc
                                        # -- End function
	.globl	init_rdopt              # -- Begin function init_rdopt
	.p2align	4, 0x90
	.type	init_rdopt,@function
init_rdopt:                             # @init_rdopt
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	$0, rdopt
	movabsq	$cofDC, %rdi
	callq	get_mem_DCcoeff
	movabsq	$cofAC, %rdi
	callq	get_mem_ACcoeff
	movabsq	$cofAC8x8, %rdi
	callq	get_mem_ACcoeff
	movabsq	$cofAC4x4intern, %rdi
	callq	get_mem_ACcoeff
	movq	cofAC4x4intern, %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, cofAC4x4
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB1_2
# %bb.1:                                # %if.then
	movabsq	$cofAC_8x8ts, %rdi
	callq	get_mem_ACcoeff
.LBB1_2:                                # %if.end
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_mb
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_b8
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_cm
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_imb
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_ib8
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_ib4
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_pc
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	init_rdopt, .Lfunc_end1-init_rdopt
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap          # -- Begin function UpdatePixelMap
	.p2align	4, 0x90
	.type	UpdatePixelMap,@function
UpdatePixelMap:                         # @UpdatePixelMap
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_5
# %bb.1:                                # %func_UpdatePixelMap.5
	callq	UpdatePixelMap.5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_UpdatePixelMap.12
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.12
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_UpdatePixelMap.27
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.27
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_UpdatePixelMap.32
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.32
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
	jmp	.LBB2_4
.Lfunc_end2:
	.size	UpdatePixelMap, .Lfunc_end2-UpdatePixelMap
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef   # -- Begin function CheckReliabilityOfRef
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef,@function
CheckReliabilityOfRef:                  # @CheckReliabilityOfRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movl	%edx, %r15d
	movl	%esi, %r12d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_5
# %bb.1:                                # %func_CheckReliabilityOfRef.52
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.52
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_CheckReliabilityOfRef.62
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.62
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_CheckReliabilityOfRef.69
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.69
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_CheckReliabilityOfRef.89
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.89
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
	jmp	.LBB3_4
.Lfunc_end3:
	.size	CheckReliabilityOfRef, .Lfunc_end3-CheckReliabilityOfRef
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks # -- Begin function RDCost_for_4x4IntraBlocks
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks,@function
RDCost_for_4x4IntraBlocks:              # @RDCost_for_4x4IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	vmovsd	%xmm1, -56(%rbp)        # 8-byte Spill
	vmovsd	%xmm0, -48(%rbp)        # 8-byte Spill
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_5
# %bb.1:                                # %func_RDCost_for_4x4IntraBlocks.21
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	vmovsd	-48(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.21
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_RDCost_for_4x4IntraBlocks.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.44
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_RDCost_for_4x4IntraBlocks.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.68
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_RDCost_for_4x4IntraBlocks.74
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.74
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-48(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
	jmp	.LBB4_4
.Lfunc_end4:
	.size	RDCost_for_4x4IntraBlocks, .Lfunc_end4-RDCost_for_4x4IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma # -- Begin function RDCost_for_4x4Blocks_Chroma
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma,@function
RDCost_for_4x4Blocks_Chroma:            # @RDCost_for_4x4Blocks_Chroma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_5
# %bb.1:                                # %func_RDCost_for_4x4Blocks_Chroma.22
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.22
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_RDCost_for_4x4Blocks_Chroma.31
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.31
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_RDCost_for_4x4Blocks_Chroma.41
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.41
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_RDCost_for_4x4Blocks_Chroma.42
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.42
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
	jmp	.LBB5_4
.Lfunc_end5:
	.size	RDCost_for_4x4Blocks_Chroma, .Lfunc_end5-RDCost_for_4x4Blocks_Chroma
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_4x4IntraBlocks # -- Begin function Mode_Decision_for_4x4IntraBlocks
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks,@function
Mode_Decision_for_4x4IntraBlocks:       # @Mode_Decision_for_4x4IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_5
# %bb.1:                                # %func_Mode_Decision_for_4x4IntraBlocks.78
	movl	%ebx, %edi
	movl	%r15d, %esi
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.78
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Mode_Decision_for_4x4IntraBlocks.81
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.81
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Mode_Decision_for_4x4IntraBlocks.86
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.86
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Mode_Decision_for_4x4IntraBlocks.95
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.95
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
	jmp	.LBB6_4
.Lfunc_end6:
	.size	Mode_Decision_for_4x4IntraBlocks, .Lfunc_end6-Mode_Decision_for_4x4IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_8x8IntraBlocks # -- Begin function Mode_Decision_for_8x8IntraBlocks
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks,@function
Mode_Decision_for_8x8IntraBlocks:       # @Mode_Decision_for_8x8IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	vmovsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_5
# %bb.1:                                # %func_Mode_Decision_for_8x8IntraBlocks.8
	movl	%ebx, %edi
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.8
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_Mode_Decision_for_8x8IntraBlocks.26
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.26
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_Mode_Decision_for_8x8IntraBlocks.47
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.47
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_Mode_Decision_for_8x8IntraBlocks.51
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.51
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
	jmp	.LBB7_4
.Lfunc_end7:
	.size	Mode_Decision_for_8x8IntraBlocks, .Lfunc_end7-Mode_Decision_for_8x8IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock # -- Begin function Mode_Decision_for_Intra4x4Macroblock
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock,@function
Mode_Decision_for_Intra4x4Macroblock:   # @Mode_Decision_for_Intra4x4Macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	vmovsd	%xmm0, -16(%rbp)        # 8-byte Spill
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB8_5
# %bb.1:                                # %func_Mode_Decision_for_Intra4x4Macroblock.20
	vmovsd	-16(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.20
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_Mode_Decision_for_Intra4x4Macroblock.97
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.97
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_Mode_Decision_for_Intra4x4Macroblock.99
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.99
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_Mode_Decision_for_Intra4x4Macroblock.100
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.100
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-16(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
	jmp	.LBB8_4
.Lfunc_end8:
	.size	Mode_Decision_for_Intra4x4Macroblock, .Lfunc_end8-Mode_Decision_for_Intra4x4Macroblock
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_8x8blocks    # -- Begin function RDCost_for_8x8blocks
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks,@function
RDCost_for_8x8blocks:                   # @RDCost_for_8x8blocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movq	%rsi, %r15
	movq	%rdi, %r14
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB9_5
# %bb.1:                                # %func_RDCost_for_8x8blocks.2
	movq	%r14, %rdi
	movq	%r15, %rsi
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movswl	%r12w, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.2
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_RDCost_for_8x8blocks.23
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.23
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_RDCost_for_8x8blocks.36
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.36
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_RDCost_for_8x8blocks.84
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.84
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rsi
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movw	16(%rbp), %r10w
	movl	-44(%rbp), %r15d        # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r13d, %ecx
	movl	%ebx, %edx
	je	.LBB9_3
	jmp	.LBB9_4
.Lfunc_end9:
	.size	RDCost_for_8x8blocks, .Lfunc_end9-RDCost_for_8x8blocks
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset               # -- Begin function I16Offset
	.p2align	4, 0x90
	.type	I16Offset,@function
I16Offset:                              # @I16Offset
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB10_2
# %bb.1:                                # %func_I16Offset.35
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	I16Offset.35
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_I16Offset.40
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	I16Offset.40
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end10:
	.size	I16Offset, .Lfunc_end10-I16Offset
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks # -- Begin function SetModesAndRefframeForBlocks
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks,@function
SetModesAndRefframeForBlocks:           # @SetModesAndRefframeForBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB11_5
# %bb.1:                                # %func_SetModesAndRefframeForBlocks.7
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.7
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_SetModesAndRefframeForBlocks.11
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.11
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_SetModesAndRefframeForBlocks.24
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.24
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_SetModesAndRefframeForBlocks.33
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.33
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
	jmp	.LBB11_4
.Lfunc_end11:
	.size	SetModesAndRefframeForBlocks, .Lfunc_end11-SetModesAndRefframeForBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision # -- Begin function Intra16x16_Mode_Decision
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision,@function
Intra16x16_Mode_Decision:               # @Intra16x16_Mode_Decision
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB12_5
# %bb.1:                                # %func_Intra16x16_Mode_Decision.9
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.9
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_Intra16x16_Mode_Decision.28
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.28
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_Intra16x16_Mode_Decision.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.37
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_Intra16x16_Mode_Decision.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.39
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
	jmp	.LBB12_4
.Lfunc_end12:
	.size	Intra16x16_Mode_Decision, .Lfunc_end12-Intra16x16_Mode_Decision
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8 # -- Begin function SetCoeffAndReconstruction8x8
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8,@function
SetCoeffAndReconstruction8x8:           # @SetCoeffAndReconstruction8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB13_5
# %bb.1:                                # %func_SetCoeffAndReconstruction8x8.13
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.13
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_SetCoeffAndReconstruction8x8.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.45
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_SetCoeffAndReconstruction8x8.87
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.87
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_SetCoeffAndReconstruction8x8.94
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.94
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB13_3
	jmp	.LBB13_4
.Lfunc_end13:
	.size	SetCoeffAndReconstruction8x8, .Lfunc_end13-SetCoeffAndReconstruction8x8
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8              # -- Begin function StoreMV8x8
	.p2align	4, 0x90
	.type	StoreMV8x8,@function
StoreMV8x8:                             # @StoreMV8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB14_5
# %bb.1:                                # %func_StoreMV8x8.10
	movl	%ebx, %edi
	callq	StoreMV8x8.10
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_StoreMV8x8.85
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.85
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_StoreMV8x8.91
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.91
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_StoreMV8x8.92
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.92
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB14_3
	jmp	.LBB14_4
.Lfunc_end14:
	.size	StoreMV8x8, .Lfunc_end14-StoreMV8x8
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8            # -- Begin function RestoreMV8x8
	.p2align	4, 0x90
	.type	RestoreMV8x8,@function
RestoreMV8x8:                           # @RestoreMV8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB15_5
# %bb.1:                                # %func_RestoreMV8x8.3
	movl	%ebx, %edi
	callq	RestoreMV8x8.3
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_RestoreMV8x8.46
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.46
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_RestoreMV8x8.67
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.67
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_RestoreMV8x8.83
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.83
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
	jmp	.LBB15_4
.Lfunc_end15:
	.size	RestoreMV8x8, .Lfunc_end15-RestoreMV8x8
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB      # -- Begin function SetMotionVectorsMB
	.p2align	4, 0x90
	.type	SetMotionVectorsMB,@function
SetMotionVectorsMB:                     # @SetMotionVectorsMB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB16_5
# %bb.1:                                # %func_SetMotionVectorsMB.15
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.15
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_SetMotionVectorsMB.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.56
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_SetMotionVectorsMB.65
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.65
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_SetMotionVectorsMB.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.66
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB16_3
	jmp	.LBB16_4
.Lfunc_end16:
	.size	SetMotionVectorsMB, .Lfunc_end16-SetMotionVectorsMB
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_macroblocks  # -- Begin function RDCost_for_macroblocks
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks,@function
RDCost_for_macroblocks:                 # @RDCost_for_macroblocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movq	%rsi, %r15
	movl	%edi, %ebx
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB17_5
# %bb.1:                                # %func_RDCost_for_macroblocks.6
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.6
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_RDCost_for_macroblocks.18
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.18
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_RDCost_for_macroblocks.25
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.25
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_RDCost_for_macroblocks.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.54
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB17_3
	jmp	.LBB17_4
.Lfunc_end17:
	.size	RDCost_for_macroblocks, .Lfunc_end17-RDCost_for_macroblocks
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters # -- Begin function store_macroblock_parameters
	.p2align	4, 0x90
	.type	store_macroblock_parameters,@function
store_macroblock_parameters:            # @store_macroblock_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB18_5
# %bb.1:                                # %func_store_macroblock_parameters.48
	movl	%ebx, %edi
	callq	store_macroblock_parameters.48
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_store_macroblock_parameters.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.50
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_store_macroblock_parameters.53
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.53
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_store_macroblock_parameters.77
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.77
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
	jmp	.LBB18_4
.Lfunc_end18:
	.size	store_macroblock_parameters, .Lfunc_end18-store_macroblock_parameters
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters # -- Begin function set_stored_macroblock_parameters
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters,@function
set_stored_macroblock_parameters:       # @set_stored_macroblock_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB19_5
# %bb.1:                                # %func_set_stored_macroblock_parameters.14
	callq	set_stored_macroblock_parameters.14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_set_stored_macroblock_parameters.17
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.17
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_set_stored_macroblock_parameters.29
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.29
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_set_stored_macroblock_parameters.76
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.76
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
	jmp	.LBB19_4
.Lfunc_end19:
	.size	set_stored_macroblock_parameters, .Lfunc_end19-set_stored_macroblock_parameters
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors  # -- Begin function SetRefAndMotionVectors
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors,@function
SetRefAndMotionVectors:                 # @SetRefAndMotionVectors
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB20_5
# %bb.1:                                # %func_SetRefAndMotionVectors.43
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.43
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_SetRefAndMotionVectors.71
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.71
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_SetRefAndMotionVectors.82
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.82
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_SetRefAndMotionVectors.93
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.93
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
	jmp	.LBB20_4
.Lfunc_end20:
	.size	SetRefAndMotionVectors, .Lfunc_end20-SetRefAndMotionVectors
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference    # -- Begin function field_flag_inference
	.p2align	4, 0x90
	.type	field_flag_inference,@function
field_flag_inference:                   # @field_flag_inference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB21_2
# %bb.1:                                # %func_field_flag_inference.1
	callq	field_flag_inference.1
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_field_flag_inference.4
	.cfi_def_cfa %rbp, 16
	callq	field_flag_inference.4
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end21:
	.size	field_flag_inference, .Lfunc_end21-field_flag_inference
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8         # -- Begin function StoreMVBlock8x8
	.p2align	4, 0x90
	.type	StoreMVBlock8x8,@function
StoreMVBlock8x8:                        # @StoreMVBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB22_5
# %bb.1:                                # %func_StoreMVBlock8x8.38
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.38
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_StoreMVBlock8x8.57
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	StoreMVBlock8x8.57
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_StoreMVBlock8x8.70
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.70
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_StoreMVBlock8x8.79
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.79
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB22_3
	jmp	.LBB22_4
.Lfunc_end22:
	.size	StoreMVBlock8x8, .Lfunc_end22-StoreMVBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8       # -- Begin function RestoreMVBlock8x8
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8,@function
RestoreMVBlock8x8:                      # @RestoreMVBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB23_5
# %bb.1:                                # %func_RestoreMVBlock8x8.16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.16
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_RestoreMVBlock8x8.55
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	RestoreMVBlock8x8.55
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_RestoreMVBlock8x8.58
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.58
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_RestoreMVBlock8x8.75
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.75
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB23_3
	jmp	.LBB23_4
.Lfunc_end23:
	.size	RestoreMVBlock8x8, .Lfunc_end23-RestoreMVBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8 # -- Begin function StoreNewMotionVectorsBlock8x8
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8,@function
StoreNewMotionVectorsBlock8x8:          # @StoreNewMotionVectorsBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB24_5
# %bb.1:                                # %func_StoreNewMotionVectorsBlock8x8.30
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.30
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_StoreNewMotionVectorsBlock8x8.34
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.34
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_StoreNewMotionVectorsBlock8x8.49
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.49
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_StoreNewMotionVectorsBlock8x8.60
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.60
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB24_3
	jmp	.LBB24_4
.Lfunc_end24:
	.size	StoreNewMotionVectorsBlock8x8, .Lfunc_end24-StoreNewMotionVectorsBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8    # -- Begin function GetBestTransformP8x8
	.p2align	4, 0x90
	.type	GetBestTransformP8x8,@function
GetBestTransformP8x8:                   # @GetBestTransformP8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB25_5
# %bb.1:                                # %func_GetBestTransformP8x8.19
	callq	GetBestTransformP8x8.19
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_GetBestTransformP8x8.63
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.63
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_GetBestTransformP8x8.72
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.72
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_GetBestTransformP8x8.88
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.88
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
	jmp	.LBB25_4
.Lfunc_end25:
	.size	GetBestTransformP8x8, .Lfunc_end25-GetBestTransformP8x8
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_macroblock   # -- Begin function encode_one_macroblock
	.p2align	4, 0x90
	.type	encode_one_macroblock,@function
encode_one_macroblock:                  # @encode_one_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB26_5
# %bb.1:                                # %func_encode_one_macroblock.64
	callq	encode_one_macroblock.64
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_encode_one_macroblock.73
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.73
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_3:                               # %func_encode_one_macroblock.90
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.90
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_4:                               # %func_encode_one_macroblock.96
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.96
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB26_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB26_3
	jmp	.LBB26_4
.Lfunc_end26:
	.size	encode_one_macroblock, .Lfunc_end26-encode_one_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters    # -- Begin function set_mbaff_parameters
	.p2align	4, 0x90
	.type	set_mbaff_parameters,@function
set_mbaff_parameters:                   # @set_mbaff_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB27_5
# %bb.1:                                # %func_set_mbaff_parameters.59
	callq	set_mbaff_parameters.59
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_2:                               # %func_set_mbaff_parameters.61
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.61
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_3:                               # %func_set_mbaff_parameters.80
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.80
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_4:                               # %func_set_mbaff_parameters.98
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.98
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB27_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB27_3
	jmp	.LBB27_4
.Lfunc_end27:
	.size	set_mbaff_parameters, .Lfunc_end27-set_mbaff_parameters
	.cfi_endproc
                                        # -- End function
	.globl	store_coding_state_cs_cm # -- Begin function store_coding_state_cs_cm
	.p2align	4, 0x90
	.type	store_coding_state_cs_cm,@function
store_coding_state_cs_cm:               # @store_coding_state_cs_cm
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cs_cm, %rdi
	callq	store_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end28:
	.size	store_coding_state_cs_cm, .Lfunc_end28-store_coding_state_cs_cm
	.cfi_endproc
                                        # -- End function
	.globl	reset_coding_state_cs_cm # -- Begin function reset_coding_state_cs_cm
	.p2align	4, 0x90
	.type	reset_coding_state_cs_cm,@function
reset_coding_state_cs_cm:               # @reset_coding_state_cs_cm
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cs_cm, %rdi
	callq	reset_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end29:
	.size	reset_coding_state_cs_cm, .Lfunc_end29-reset_coding_state_cs_cm
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference.1  # -- Begin function field_flag_inference.1
	.p2align	4, 0x90
	.type	field_flag_inference.1,@function
field_flag_inference.1:                 # @field_flag_inference.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1370047229, -28(%rbp)  # imm = 0x51A942FD
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 552(%rax)
	je	.LBB30_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	536(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_6
.LBB30_2:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$0, 556(%rax)
	je	.LBB30_4
# %bb.3:                                # %if.then6
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	540(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_5
.LBB30_4:                               # %if.else11
	movl	$0, -12(%rbp)
.LBB30_5:                               # %if.end
	jmp	.LBB30_6
.LBB30_6:                               # %if.end12
	movl	-12(%rbp), %ebx
	cmpl	$1370047229, -28(%rbp)  # imm = 0x51A942FD
	jne	.LBB30_8
.LBB30_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_7
.Lfunc_end30:
	.size	field_flag_inference.1, .Lfunc_end30-field_flag_inference.1
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.2
.LCPI31_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.2
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.2,@function
RDCost_for_8x8blocks.2:                 # @RDCost_for_8x8blocks.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$375626235, -160(%rbp)  # imm = 0x166399FB
	movq	%rdi, -136(%rbp)
	movq	%rsi, -200(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -124(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -164(%rbp)
	cmpl	$0, -164(%rbp)
	je	.LBB31_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -40(%rbp)
	sete	%r10b
.LBB31_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -120(%rbp)
	movl	-40(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -192(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -120(%rbp)
	je	.LBB31_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB31_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI31_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	%xmm0, -208(%rbp)
	jmp	.LBB31_139
.LBB31_5:                               # %if.else
	xorl	%r8d, %r8d
	movq	-200(%rbp), %rsi
	movl	-36(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB31_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB31_8
.LBB31_7:                               # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB31_8:                               # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-124(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB31_19
.LBB31_10:                              # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB31_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB31_13
.LBB31_12:                              # %cond.true69
	movl	-40(%rbp), %eax
	jmp	.LBB31_14
.LBB31_13:                              # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB31_14
.LBB31_14:                              # %cond.end71
	movl	%eax, -172(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB31_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB31_17
.LBB31_16:                              # %cond.true80
	movl	-40(%rbp), %eax
	jmp	.LBB31_18
.LBB31_17:                              # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB31_18
.LBB31_18:                              # %cond.end82
	movl	%eax, -168(%rbp)
	movq	-200(%rbp), %rsi
	movl	-36(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-172(%rbp), %r8d
	movl	-168(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-124(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB31_19:                              # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB31_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB31_21:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_23 Depth 2
                                        #       Child Loop BB31_25 Depth 3
                                        #     Child Loop BB31_31 Depth 2
                                        #       Child Loop BB31_33 Depth 3
                                        #     Child Loop BB31_39 Depth 2
                                        #       Child Loop BB31_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB31_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB31_21 Depth=1
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	$0, -16(%rbp)
.LBB31_23:                              # %for.cond96
                                        #   Parent Loop BB31_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_25 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB31_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB31_23 Depth=2
	movl	$0, -12(%rbp)
.LBB31_25:                              # %for.cond100
                                        #   Parent Loop BB31_21 Depth=1
                                        #     Parent Loop BB31_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB31_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB31_25 Depth=3
	movl	-12(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB31_25 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_25
.LBB31_28:                              # %for.end
                                        #   in Loop: Header=BB31_23 Depth=2
	jmp	.LBB31_29
.LBB31_29:                              # %for.inc114
                                        #   in Loop: Header=BB31_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_23
.LBB31_30:                              # %for.end116
                                        #   in Loop: Header=BB31_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB31_31:                              # %for.cond120
                                        #   Parent Loop BB31_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB31_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB31_31 Depth=2
	movl	$0, -12(%rbp)
.LBB31_33:                              # %for.cond124
                                        #   Parent Loop BB31_21 Depth=1
                                        #     Parent Loop BB31_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB31_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB31_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-12(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB31_33 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_33
.LBB31_36:                              # %for.end152
                                        #   in Loop: Header=BB31_31 Depth=2
	jmp	.LBB31_37
.LBB31_37:                              # %for.inc153
                                        #   in Loop: Header=BB31_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_31
.LBB31_38:                              # %for.end155
                                        #   in Loop: Header=BB31_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB31_39:                              # %for.cond159
                                        #   Parent Loop BB31_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB31_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB31_39 Depth=2
	movl	$0, -12(%rbp)
.LBB31_41:                              # %for.cond163
                                        #   Parent Loop BB31_21 Depth=1
                                        #     Parent Loop BB31_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB31_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB31_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB31_41 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_41
.LBB31_44:                              # %for.end180
                                        #   in Loop: Header=BB31_39 Depth=2
	jmp	.LBB31_45
.LBB31_45:                              # %for.inc181
                                        #   in Loop: Header=BB31_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_39
.LBB31_46:                              # %for.end183
                                        #   in Loop: Header=BB31_21 Depth=1
	jmp	.LBB31_47
.LBB31_47:                              # %for.inc184
                                        #   in Loop: Header=BB31_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB31_21
.LBB31_48:                              # %for.end186
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB31_49:                              # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_51 Depth 2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB31_49 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB31_51:                              # %for.cond192
                                        #   Parent Loop BB31_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -116(%rbp)
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-16(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-116(%rbp), %edx
	movl	%edx, -88(%rbp)
	movl	-116(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -76(%rbp)
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-16(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -84(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-76(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-16(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB31_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB31_55
.LBB31_54:                              # %cond.false229
                                        #   in Loop: Header=BB31_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB31_55:                              # %cond.end235
                                        #   in Loop: Header=BB31_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB31_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB31_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB31_61
.LBB31_57:                              # %cond.false241
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB31_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB31_60
.LBB31_59:                              # %cond.false250
                                        #   in Loop: Header=BB31_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB31_60:                              # %cond.end256
                                        #   in Loop: Header=BB31_51 Depth=2
.LBB31_61:                              # %cond.end258
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-88(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB31_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB31_64
.LBB31_63:                              # %cond.false276
                                        #   in Loop: Header=BB31_51 Depth=2
	movl	-88(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB31_64:                              # %cond.end282
                                        #   in Loop: Header=BB31_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB31_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB31_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_70
.LBB31_66:                              # %cond.false288
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%eax, %eax
	movl	-88(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB31_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB31_69
.LBB31_68:                              # %cond.false297
                                        #   in Loop: Header=BB31_51 Depth=2
	movl	-88(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB31_69:                              # %cond.end303
                                        #   in Loop: Header=BB31_51 Depth=2
.LBB31_70:                              # %cond.end305
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-84(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-16(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB31_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB31_73
.LBB31_72:                              # %cond.false325
                                        #   in Loop: Header=BB31_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-84(%rbp), %ecx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB31_73:                              # %cond.end331
                                        #   in Loop: Header=BB31_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB31_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB31_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB31_79
.LBB31_75:                              # %cond.false337
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-84(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB31_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB31_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB31_78
.LBB31_77:                              # %cond.false346
                                        #   in Loop: Header=BB31_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-84(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB31_78:                              # %cond.end352
                                        #   in Loop: Header=BB31_51 Depth=2
.LBB31_79:                              # %cond.end354
                                        #   in Loop: Header=BB31_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB31_51 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_51
.LBB31_81:                              # %for.end369
                                        #   in Loop: Header=BB31_49 Depth=1
	jmp	.LBB31_82
.LBB31_82:                              # %for.inc370
                                        #   in Loop: Header=BB31_49 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_49
.LBB31_83:                              # %for.end372
	jmp	.LBB31_84
.LBB31_84:                              # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB31_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB31_87
# %bb.86:                               # %if.then379
	movl	-36(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB31_87:                              # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB31_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB31_102
# %bb.89:                               # %if.then388
	movl	$0, -72(%rbp)
.LBB31_90:                              # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_92 Depth 2
                                        #       Child Loop BB31_94 Depth 3
	movl	-72(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB31_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB31_90 Depth=1
	movl	-72(%rbp), %edi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB31_92:                              # %for.cond395
                                        #   Parent Loop BB31_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_94 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB31_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB31_94:                              # %for.cond403
                                        #   Parent Loop BB31_90 Depth=1
                                        #     Parent Loop BB31_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB31_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB31_94 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_94
.LBB31_97:                              # %for.end429
                                        #   in Loop: Header=BB31_92 Depth=2
	jmp	.LBB31_98
.LBB31_98:                              # %for.inc430
                                        #   in Loop: Header=BB31_92 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_92
.LBB31_99:                              # %for.end432
                                        #   in Loop: Header=BB31_90 Depth=1
	jmp	.LBB31_100
.LBB31_100:                             # %for.inc433
                                        #   in Loop: Header=BB31_90 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB31_90
.LBB31_101:                             # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB31_113
.LBB31_102:                             # %if.else439
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB31_103:                             # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_105 Depth 2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB31_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB31_105:                             # %for.cond447
                                        #   Parent Loop BB31_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB31_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB31_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB31_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB31_108:                             # %if.end524
                                        #   in Loop: Header=BB31_105 Depth=2
	jmp	.LBB31_109
.LBB31_109:                             # %for.inc525
                                        #   in Loop: Header=BB31_105 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_105
.LBB31_110:                             # %for.end527
                                        #   in Loop: Header=BB31_103 Depth=1
	jmp	.LBB31_111
.LBB31_111:                             # %for.inc528
                                        #   in Loop: Header=BB31_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_103
.LBB31_112:                             # %for.end530
	jmp	.LBB31_113
.LBB31_113:                             # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB31_115
# %bb.114:                              # %if.then534
	movl	-128(%rbp), %edi
	movl	-156(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-156(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB31_116
.LBB31_115:                             # %if.else536
	movl	-128(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-184(%rbp), %rax
	movq	24(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-144(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB31_116:                             # %if.end547
	cmpl	$0, -120(%rbp)
	jne	.LBB31_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB31_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB31_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB31_121
.LBB31_120:                             # %if.then560
	movl	-40(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB31_121:                             # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB31_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB31_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB31_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB31_126
.LBB31_125:                             # %if.then579
	movl	-40(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB31_126:                             # %if.end583
	jmp	.LBB31_127
.LBB31_127:                             # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB31_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB31_130
.LBB31_129:                             # %if.then592
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-40(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB31_130:                             # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB31_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB31_133
.LBB31_132:                             # %if.then606
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-40(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB31_133:                             # %if.end612
	jmp	.LBB31_134
.LBB31_134:                             # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB31_136
# %bb.135:                              # %if.then617
	movq	-184(%rbp), %rax
	movq	24(%rax), %rax
	movq	-192(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -68(%rbp)
	movl	-36(%rbp), %edi
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB31_136:                             # %if.end629
	movq	-136(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB31_138
# %bb.137:                              # %if.then631
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB31_138:                             # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp)
.LBB31_139:                             # %return
	vmovsd	-208(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$375626235, -160(%rbp)  # imm = 0x166399FB
	jne	.LBB31_141
.LBB31_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB31_140
.Lfunc_end31:
	.size	RDCost_for_8x8blocks.2, .Lfunc_end31-RDCost_for_8x8blocks.2
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.3          # -- Begin function RestoreMV8x8.3
	.p2align	4, 0x90
	.type	RestoreMV8x8.3,@function
RestoreMV8x8.3:                         # @RestoreMV8x8.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1801436106, -16(%rbp)  # imm = 0x6B5FBBCA
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB32_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-12(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_1
.LBB32_4:                               # %for.end
	cmpl	$1801436106, -16(%rbp)  # imm = 0x6B5FBBCA
	jne	.LBB32_6
.LBB32_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_5
.Lfunc_end32:
	.size	RestoreMV8x8.3, .Lfunc_end32-RestoreMV8x8.3
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference.4  # -- Begin function field_flag_inference.4
	.p2align	4, 0x90
	.type	field_flag_inference.4,@function
field_flag_inference.4:                 # @field_flag_inference.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1018488230, -28(%rbp)  # imm = 0x3CB4E5A6
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 552(%rax)
	je	.LBB33_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	536(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_6
.LBB33_2:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$0, 556(%rax)
	je	.LBB33_4
# %bb.3:                                # %if.then6
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	540(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_5
.LBB33_4:                               # %if.else11
	movl	$0, -12(%rbp)
.LBB33_5:                               # %if.end
	jmp	.LBB33_6
.LBB33_6:                               # %if.end12
	movl	-12(%rbp), %ebx
	cmpl	$1018488230, -28(%rbp)  # imm = 0x3CB4E5A6
	jne	.LBB33_8
.LBB33_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_7
.Lfunc_end33:
	.size	field_flag_inference.4, .Lfunc_end33-field_flag_inference.4
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.5        # -- Begin function UpdatePixelMap.5
	.p2align	4, 0x90
	.type	UpdatePixelMap.5,@function
UpdatePixelMap.5:                       # @UpdatePixelMap.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1968756231, -28(%rbp)  # imm = 0x7558D607
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB34_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_4 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB34_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB34_2 Depth=1
	movl	$0, -8(%rbp)
.LBB34_4:                               # %for.cond2
                                        #   Parent Loop BB34_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB34_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB34_4 Depth=2
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB34_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_4
.LBB34_7:                               # %for.end
                                        #   in Loop: Header=BB34_2 Depth=1
	jmp	.LBB34_8
.LBB34_8:                               # %for.inc7
                                        #   in Loop: Header=BB34_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_2
.LBB34_9:                               # %for.end9
	jmp	.LBB34_41
.LBB34_10:                              # %if.else
	movl	$0, -12(%rbp)
.LBB34_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_13 Depth 2
                                        #       Child Loop BB34_16 Depth 3
                                        #         Child Loop BB34_18 Depth 4
                                        #       Child Loop BB34_25 Depth 3
                                        #         Child Loop BB34_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB34_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB34_11 Depth=1
	movl	$0, -16(%rbp)
.LBB34_13:                              # %for.cond14
                                        #   Parent Loop BB34_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_16 Depth 3
                                        #         Child Loop BB34_18 Depth 4
                                        #       Child Loop BB34_25 Depth 3
                                        #         Child Loop BB34_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB34_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB34_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movq	refresh_map, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB34_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB34_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB34_16:                              # %for.cond27
                                        #   Parent Loop BB34_11 Depth=1
                                        #     Parent Loop BB34_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_18 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB34_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB34_16 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB34_18:                              # %for.cond31
                                        #   Parent Loop BB34_11 Depth=1
                                        #     Parent Loop BB34_13 Depth=2
                                        #       Parent Loop BB34_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB34_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB34_18 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB34_18 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_18
.LBB34_21:                              # %for.end40
                                        #   in Loop: Header=BB34_16 Depth=3
	jmp	.LBB34_22
.LBB34_22:                              # %for.inc41
                                        #   in Loop: Header=BB34_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_16
.LBB34_23:                              # %for.end43
                                        #   in Loop: Header=BB34_13 Depth=2
	jmp	.LBB34_36
.LBB34_24:                              # %if.else44
                                        #   in Loop: Header=BB34_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB34_25:                              # %for.cond46
                                        #   Parent Loop BB34_11 Depth=1
                                        #     Parent Loop BB34_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_27 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB34_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB34_25 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB34_27:                              # %for.cond50
                                        #   Parent Loop BB34_11 Depth=1
                                        #     Parent Loop BB34_13 Depth=2
                                        #       Parent Loop BB34_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB34_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB34_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB34_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB34_31
.LBB34_30:                              # %cond.false
                                        #   in Loop: Header=BB34_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB34_31:                              # %cond.end
                                        #   in Loop: Header=BB34_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB34_27 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_27
.LBB34_33:                              # %for.end76
                                        #   in Loop: Header=BB34_25 Depth=3
	jmp	.LBB34_34
.LBB34_34:                              # %for.inc77
                                        #   in Loop: Header=BB34_25 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_25
.LBB34_35:                              # %for.end79
                                        #   in Loop: Header=BB34_13 Depth=2
	jmp	.LBB34_36
.LBB34_36:                              # %if.end
                                        #   in Loop: Header=BB34_13 Depth=2
	jmp	.LBB34_37
.LBB34_37:                              # %for.inc80
                                        #   in Loop: Header=BB34_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_13
.LBB34_38:                              # %for.end82
                                        #   in Loop: Header=BB34_11 Depth=1
	jmp	.LBB34_39
.LBB34_39:                              # %for.inc83
                                        #   in Loop: Header=BB34_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_11
.LBB34_40:                              # %for.end85
	jmp	.LBB34_41
.LBB34_41:                              # %if.end86
	cmpl	$1968756231, -28(%rbp)  # imm = 0x7558D607
	jne	.LBB34_43
.LBB34_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_42
.Lfunc_end34:
	.size	UpdatePixelMap.5, .Lfunc_end34-UpdatePixelMap.5
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.6
.LCPI35_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.6
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.6,@function
RDCost_for_macroblocks.6:               # @RDCost_for_macroblocks.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1053423287, -96(%rbp)  # imm = 0x3EC9F6B7
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -24(%rbp)
	movq	%rsi, -128(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -28(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB35_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB35_3
.LBB35_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB35_3
.LBB35_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -112(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB35_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB35_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -92(%rbp)
	movl	$0, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -72(%rbp)
	je	.LBB35_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -24(%rbp)
	jne	.LBB35_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
.LBB35_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_10 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB35_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB35_8 Depth=1
	movl	$0, -16(%rbp)
.LBB35_10:                              # %for.cond17
                                        #   Parent Loop BB35_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB35_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB35_10 Depth=2
	movq	direct_pdir, %rax
	movl	-100(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-104(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB35_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB35_177
.LBB35_13:                              # %if.end
                                        #   in Loop: Header=BB35_10 Depth=2
	jmp	.LBB35_14
.LBB35_14:                              # %for.inc
                                        #   in Loop: Header=BB35_10 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_10
.LBB35_15:                              # %for.end
                                        #   in Loop: Header=BB35_8 Depth=1
	jmp	.LBB35_16
.LBB35_16:                              # %for.inc30
                                        #   in Loop: Header=BB35_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_8
.LBB35_17:                              # %for.end32
	jmp	.LBB35_18
.LBB35_18:                              # %if.end33
	cmpl	$8, -24(%rbp)
	jge	.LBB35_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -24(%rbp)
	jne	.LBB35_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB35_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB35_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB35_177
.LBB35_23:                              # %if.end46
	jmp	.LBB35_76
.LBB35_24:                              # %if.else
	cmpl	$8, -24(%rbp)
	jne	.LBB35_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB35_75
.LBB35_26:                              # %if.else50
	cmpl	$9, -24(%rbp)
	jne	.LBB35_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB35_47
# %bb.28:                               # %if.then56
	movl	$0, -12(%rbp)
.LBB35_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_31 Depth 2
                                        #       Child Loop BB35_33 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB35_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB35_29 Depth=1
	movl	$0, -16(%rbp)
.LBB35_31:                              # %for.cond61
                                        #   Parent Loop BB35_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB35_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB35_31 Depth=2
	movl	$0, -20(%rbp)
.LBB35_33:                              # %for.cond65
                                        #   Parent Loop BB35_29 Depth=1
                                        #     Parent Loop BB35_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB35_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB35_33 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB35_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB35_33 Depth=3
	movl	$2, -40(%rbp)
.LBB35_36:                              # %if.end77
                                        #   in Loop: Header=BB35_33 Depth=3
	jmp	.LBB35_37
.LBB35_37:                              # %for.inc78
                                        #   in Loop: Header=BB35_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB35_33
.LBB35_38:                              # %for.end80
                                        #   in Loop: Header=BB35_31 Depth=2
	jmp	.LBB35_39
.LBB35_39:                              # %for.inc81
                                        #   in Loop: Header=BB35_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_31
.LBB35_40:                              # %for.end83
                                        #   in Loop: Header=BB35_29 Depth=1
	jmp	.LBB35_41
.LBB35_41:                              # %for.inc84
                                        #   in Loop: Header=BB35_29 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_29
.LBB35_42:                              # %for.end86
	movl	$0, -36(%rbp)
.LBB35_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -36(%rbp)
	jge	.LBB35_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB35_43 Depth=1
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB35_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB35_43
.LBB35_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB35_47:                              # %if.end97
	jmp	.LBB35_74
.LBB35_48:                              # %if.else98
	cmpl	$10, -24(%rbp)
	jne	.LBB35_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB35_73
.LBB35_50:                              # %if.else102
	cmpl	$13, -24(%rbp)
	jne	.LBB35_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB35_71
# %bb.52:                               # %if.then110
	movl	$0, -12(%rbp)
.LBB35_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_55 Depth 2
                                        #       Child Loop BB35_57 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB35_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB35_53 Depth=1
	movl	$0, -16(%rbp)
.LBB35_55:                              # %for.cond115
                                        #   Parent Loop BB35_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_57 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB35_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB35_55 Depth=2
	movl	$0, -20(%rbp)
.LBB35_57:                              # %for.cond119
                                        #   Parent Loop BB35_53 Depth=1
                                        #     Parent Loop BB35_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB35_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB35_57 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB35_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB35_57 Depth=3
	movl	$2, -40(%rbp)
.LBB35_60:                              # %if.end131
                                        #   in Loop: Header=BB35_57 Depth=3
	jmp	.LBB35_61
.LBB35_61:                              # %for.inc132
                                        #   in Loop: Header=BB35_57 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB35_57
.LBB35_62:                              # %for.end134
                                        #   in Loop: Header=BB35_55 Depth=2
	jmp	.LBB35_63
.LBB35_63:                              # %for.inc135
                                        #   in Loop: Header=BB35_55 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_55
.LBB35_64:                              # %for.end137
                                        #   in Loop: Header=BB35_53 Depth=1
	jmp	.LBB35_65
.LBB35_65:                              # %for.inc138
                                        #   in Loop: Header=BB35_53 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_53
.LBB35_66:                              # %for.end140
	movl	$0, -36(%rbp)
.LBB35_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -36(%rbp)
	jge	.LBB35_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB35_67 Depth=1
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB35_67 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB35_67
.LBB35_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB35_71:                              # %if.end152
	jmp	.LBB35_72
.LBB35_72:                              # %if.end153
	jmp	.LBB35_73
.LBB35_73:                              # %if.end154
	jmp	.LBB35_74
.LBB35_74:                              # %if.end155
	jmp	.LBB35_75
.LBB35_75:                              # %if.end156
	jmp	.LBB35_76
.LBB35_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB35_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB35_82
# %bb.78:                               # %if.then164
	cmpl	$10, -24(%rbp)
	jne	.LBB35_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB35_81
.LBB35_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB35_81
.LBB35_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB35_82:                              # %if.end171
	cmpl	$10, -24(%rbp)
	jne	.LBB35_92
# %bb.83:                               # %if.then174
	movl	$0, -12(%rbp)
.LBB35_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_86 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB35_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB35_84 Depth=1
	movl	$0, -16(%rbp)
.LBB35_86:                              # %for.cond179
                                        #   Parent Loop BB35_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB35_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB35_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB35_86 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_86
.LBB35_89:                              # %for.end196
                                        #   in Loop: Header=BB35_84 Depth=1
	jmp	.LBB35_90
.LBB35_90:                              # %for.inc197
                                        #   in Loop: Header=BB35_84 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_84
.LBB35_91:                              # %for.end199
	jmp	.LBB35_101
.LBB35_92:                              # %if.else200
	movl	$0, -12(%rbp)
.LBB35_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_95 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB35_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB35_93 Depth=1
	movl	$0, -16(%rbp)
.LBB35_95:                              # %for.cond205
                                        #   Parent Loop BB35_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB35_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB35_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB35_95 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_95
.LBB35_98:                              # %for.end220
                                        #   in Loop: Header=BB35_93 Depth=1
	jmp	.LBB35_99
.LBB35_99:                              # %for.inc221
                                        #   in Loop: Header=BB35_93 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_93
.LBB35_100:                             # %for.end223
	jmp	.LBB35_101
.LBB35_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB35_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -24(%rbp)
	je	.LBB35_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -24(%rbp)
	je	.LBB35_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -24(%rbp)
	je	.LBB35_107
.LBB35_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB35_107
# %bb.106:                              # %if.then238
	leaq	-32(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB35_107:                             # %if.end239
	cmpl	$10, -24(%rbp)
	jne	.LBB35_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB35_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB35_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB35_124
# %bb.111:                              # %if.then254
	movl	$0, -20(%rbp)
.LBB35_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_114 Depth 2
                                        #       Child Loop BB35_116 Depth 3
	movl	-20(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB35_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB35_112 Depth=1
	movl	-20(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -16(%rbp)
.LBB35_114:                             # %for.cond259
                                        #   Parent Loop BB35_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_116 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB35_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB35_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB35_116:                             # %for.cond263
                                        #   Parent Loop BB35_112 Depth=1
                                        #     Parent Loop BB35_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB35_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB35_116 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_116
.LBB35_119:                             # %for.end291
                                        #   in Loop: Header=BB35_114 Depth=2
	jmp	.LBB35_120
.LBB35_120:                             # %for.inc292
                                        #   in Loop: Header=BB35_114 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_114
.LBB35_121:                             # %for.end294
                                        #   in Loop: Header=BB35_112 Depth=1
	jmp	.LBB35_122
.LBB35_122:                             # %for.inc295
                                        #   in Loop: Header=BB35_112 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB35_112
.LBB35_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB35_133
.LBB35_124:                             # %if.else300
	movl	$0, -16(%rbp)
.LBB35_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_127 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB35_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB35_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB35_127:                             # %for.cond306
                                        #   Parent Loop BB35_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB35_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB35_127 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_127
.LBB35_130:                             # %for.end334
                                        #   in Loop: Header=BB35_125 Depth=1
	jmp	.LBB35_131
.LBB35_131:                             # %for.inc335
                                        #   in Loop: Header=BB35_125 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_125
.LBB35_132:                             # %for.end337
	jmp	.LBB35_133
.LBB35_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB35_143
# %bb.134:                              # %if.then342
	movl	$0, -16(%rbp)
.LBB35_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_137 Depth 2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB35_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB35_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB35_137:                             # %for.cond347
                                        #   Parent Loop BB35_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB35_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB35_137 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_137
.LBB35_140:                             # %for.end398
                                        #   in Loop: Header=BB35_135 Depth=1
	jmp	.LBB35_141
.LBB35_141:                             # %for.inc399
                                        #   in Loop: Header=BB35_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_135
.LBB35_142:                             # %for.end401
	jmp	.LBB35_143
.LBB35_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -92(%rbp)
	je	.LBB35_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB35_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -72(%rbp)
	je	.LBB35_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB35_148
.LBB35_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -28(%rbp)
	movl	-76(%rbp), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB35_149
.LBB35_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-32(%rbp), %esi
	leaq	-28(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
.LBB35_149:                             # %if.end422
	jmp	.LBB35_151
.LBB35_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -28(%rbp)
.LBB35_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI35_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB35_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI35_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB35_154
.LBB35_153:                             # %cond.false431
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm2
.LBB35_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -120(%rbp)
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-128(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB35_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB35_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB35_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB35_159
.LBB35_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB35_177
.LBB35_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB35_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -24(%rbp)
	je	.LBB35_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB35_165
	jmp	.LBB35_176
.LBB35_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB35_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB35_176
	jmp	.LBB35_165
.LBB35_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB35_165
	jmp	.LBB35_176
.LBB35_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB35_175
# %bb.166:                              # %if.then465
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB35_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB35_171
	jmp	.LBB35_174
.LBB35_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB35_170
# %bb.169:                              # %cond.true473
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB35_174
	jmp	.LBB35_171
.LBB35_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB35_171
	jmp	.LBB35_174
.LBB35_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB35_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB35_177
.LBB35_173:                             # %if.end482
	jmp	.LBB35_174
.LBB35_174:                             # %if.end483
	jmp	.LBB35_175
.LBB35_175:                             # %if.end484
	jmp	.LBB35_176
.LBB35_176:                             # %if.end485
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-128(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB35_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$1053423287, -96(%rbp)  # imm = 0x3EC9F6B7
	jne	.LBB35_179
.LBB35_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_178
.Lfunc_end35:
	.size	RDCost_for_macroblocks.6, .Lfunc_end35-RDCost_for_macroblocks.6
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.7 # -- Begin function SetModesAndRefframeForBlocks.7
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.7,@function
SetModesAndRefframeForBlocks.7:         # @SetModesAndRefframeForBlocks.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1158351687, -40(%rbp)  # imm = 0x450B0B47
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB36_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB36_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB36_4
.LBB36_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB36_4
.LBB36_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB36_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB36_7
.LBB36_6:                               # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB36_7:                               # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB36_42
# %bb.8:                                # %if.end
	movq	.LJTI36_0(,%rax,8), %rax
	jmpq	*%rax
.LBB36_9:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB36_10:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB36_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB36_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB36_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB36_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB36_14
.LBB36_13:                              # %cond.false26
                                        #   in Loop: Header=BB36_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB36_14
.LBB36_14:                              # %cond.end27
                                        #   in Loop: Header=BB36_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB36_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_10
.LBB36_16:                              # %for.end
	jmp	.LBB36_43
.LBB36_17:                              # %sw.bb31
	movl	$0, -4(%rbp)
.LBB36_18:                              # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB36_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB36_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB36_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_18
.LBB36_21:                              # %for.end49
	jmp	.LBB36_43
.LBB36_22:                              # %sw.bb50
	movl	$0, -4(%rbp)
.LBB36_23:                              # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB36_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB36_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB36_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_23
.LBB36_26:                              # %for.end71
	jmp	.LBB36_43
.LBB36_27:                              # %sw.bb72
	movl	$0, -4(%rbp)
.LBB36_28:                              # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB36_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB36_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB36_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_28
.LBB36_31:                              # %for.end85
	jmp	.LBB36_43
.LBB36_32:                              # %sw.bb86
	movl	$0, -4(%rbp)
.LBB36_33:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB36_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB36_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB36_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_33
.LBB36_36:                              # %for.end99
	jmp	.LBB36_43
.LBB36_37:                              # %sw.bb100
	movl	$0, -4(%rbp)
.LBB36_38:                              # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB36_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB36_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB36_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_38
.LBB36_41:                              # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB36_43
.LBB36_42:                              # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB36_43:                              # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB36_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB36_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB36_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB36_70
.LBB36_47:                              # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB36_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB36_49:                              # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB36_49 Depth=1
	movl	$0, -4(%rbp)
.LBB36_51:                              # %for.cond131
                                        #   Parent Loop BB36_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB36_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB36_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB36_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB36_55
.LBB36_54:                              # %if.else174
                                        #   in Loop: Header=BB36_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB36_55:                              # %if.end195
                                        #   in Loop: Header=BB36_51 Depth=2
	jmp	.LBB36_56
.LBB36_56:                              # %for.inc196
                                        #   in Loop: Header=BB36_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_51
.LBB36_57:                              # %for.end198
                                        #   in Loop: Header=BB36_49 Depth=1
	jmp	.LBB36_58
.LBB36_58:                              # %for.inc199
                                        #   in Loop: Header=BB36_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_49
.LBB36_59:                              # %for.end201
	jmp	.LBB36_69
.LBB36_60:                              # %if.else202
	movl	$0, -8(%rbp)
.LBB36_61:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB36_61 Depth=1
	movl	$0, -4(%rbp)
.LBB36_63:                              # %for.cond207
                                        #   Parent Loop BB36_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB36_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB36_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_63
.LBB36_66:                              # %for.end227
                                        #   in Loop: Header=BB36_61 Depth=1
	jmp	.LBB36_67
.LBB36_67:                              # %for.inc228
                                        #   in Loop: Header=BB36_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_61
.LBB36_68:                              # %for.end230
	jmp	.LBB36_69
.LBB36_69:                              # %if.end231
	jmp	.LBB36_127
.LBB36_70:                              # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB36_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB36_72:                              # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB36_72 Depth=1
	movl	$0, -4(%rbp)
.LBB36_74:                              # %for.cond239
                                        #   Parent Loop BB36_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB36_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB36_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB36_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB36_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB36_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB36_105
.LBB36_78:                              # %if.else298
                                        #   in Loop: Header=BB36_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB36_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB36_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB36_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB36_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB36_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB36_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB36_90
.LBB36_82:                              # %land.lhs.true320
                                        #   in Loop: Header=BB36_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB36_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB36_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB36_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB36_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB36_90
.LBB36_85:                              # %land.lhs.true331
                                        #   in Loop: Header=BB36_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB36_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB36_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB36_90
.LBB36_87:                              # %land.lhs.true347
                                        #   in Loop: Header=BB36_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB36_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB36_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB36_90
.LBB36_89:                              # %if.then356
                                        #   in Loop: Header=BB36_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB36_104
.LBB36_90:                              # %if.else377
                                        #   in Loop: Header=BB36_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB36_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB36_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB36_96
.LBB36_92:                              # %land.lhs.true393
                                        #   in Loop: Header=BB36_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB36_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB36_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB36_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB36_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB36_96
.LBB36_95:                              # %cond.true404
                                        #   in Loop: Header=BB36_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB36_97
.LBB36_96:                              # %cond.false410
                                        #   in Loop: Header=BB36_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_97
.LBB36_97:                              # %cond.end411
                                        #   in Loop: Header=BB36_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB36_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB36_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB36_102
.LBB36_99:                              # %land.lhs.true439
                                        #   in Loop: Header=BB36_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB36_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB36_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB36_102
.LBB36_101:                             # %cond.true448
                                        #   in Loop: Header=BB36_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB36_103
.LBB36_102:                             # %cond.false454
                                        #   in Loop: Header=BB36_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_103
.LBB36_103:                             # %cond.end455
                                        #   in Loop: Header=BB36_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB36_104:                             # %if.end468
                                        #   in Loop: Header=BB36_74 Depth=2
	jmp	.LBB36_105
.LBB36_105:                             # %if.end469
                                        #   in Loop: Header=BB36_74 Depth=2
	jmp	.LBB36_106
.LBB36_106:                             # %for.inc470
                                        #   in Loop: Header=BB36_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_74
.LBB36_107:                             # %for.end472
                                        #   in Loop: Header=BB36_72 Depth=1
	jmp	.LBB36_108
.LBB36_108:                             # %for.inc473
                                        #   in Loop: Header=BB36_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_72
.LBB36_109:                             # %for.end475
	jmp	.LBB36_126
.LBB36_110:                             # %if.else476
	movl	$0, -8(%rbp)
.LBB36_111:                             # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB36_111 Depth=1
	movl	$0, -4(%rbp)
.LBB36_113:                             # %for.cond481
                                        #   Parent Loop BB36_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB36_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB36_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB36_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB36_120
.LBB36_116:                             # %land.lhs.true508
                                        #   in Loop: Header=BB36_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB36_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB36_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB36_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB36_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB36_120
.LBB36_119:                             # %cond.true519
                                        #   in Loop: Header=BB36_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB36_121
.LBB36_120:                             # %cond.false525
                                        #   in Loop: Header=BB36_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_121
.LBB36_121:                             # %cond.end526
                                        #   in Loop: Header=BB36_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB36_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_113
.LBB36_123:                             # %for.end541
                                        #   in Loop: Header=BB36_111 Depth=1
	jmp	.LBB36_124
.LBB36_124:                             # %for.inc542
                                        #   in Loop: Header=BB36_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_111
.LBB36_125:                             # %for.end544
	jmp	.LBB36_126
.LBB36_126:                             # %if.end545
	jmp	.LBB36_127
.LBB36_127:                             # %if.end546
	movl	$0, -8(%rbp)
.LBB36_128:                             # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB36_128 Depth=1
	movl	$0, -4(%rbp)
.LBB36_130:                             # %for.cond551
                                        #   Parent Loop BB36_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB36_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB36_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB36_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB36_134
.LBB36_133:                             # %cond.false584
                                        #   in Loop: Header=BB36_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB36_134
.LBB36_134:                             # %cond.end585
                                        #   in Loop: Header=BB36_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB36_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_130
.LBB36_136:                             # %for.end598
                                        #   in Loop: Header=BB36_128 Depth=1
	jmp	.LBB36_137
.LBB36_137:                             # %for.inc599
                                        #   in Loop: Header=BB36_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_128
.LBB36_138:                             # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB36_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB36_140:                             # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB36_140 Depth=1
	movl	$0, -4(%rbp)
.LBB36_142:                             # %for.cond608
                                        #   Parent Loop BB36_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB36_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB36_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB36_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB36_146
.LBB36_145:                             # %cond.false642
                                        #   in Loop: Header=BB36_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB36_146
.LBB36_146:                             # %cond.end643
                                        #   in Loop: Header=BB36_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB36_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_142
.LBB36_148:                             # %for.end657
                                        #   in Loop: Header=BB36_140 Depth=1
	jmp	.LBB36_149
.LBB36_149:                             # %for.inc658
                                        #   in Loop: Header=BB36_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_140
.LBB36_150:                             # %for.end660
	jmp	.LBB36_151
.LBB36_151:                             # %if.end661
	cmpl	$1158351687, -40(%rbp)  # imm = 0x450B0B47
	jne	.LBB36_153
.LBB36_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_153:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_152
.Lfunc_end36:
	.size	SetModesAndRefframeForBlocks.7, .Lfunc_end36-SetModesAndRefframeForBlocks.7
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI36_0:
	.quad	.LBB36_9
	.quad	.LBB36_17
	.quad	.LBB36_17
	.quad	.LBB36_17
	.quad	.LBB36_42
	.quad	.LBB36_42
	.quad	.LBB36_42
	.quad	.LBB36_42
	.quad	.LBB36_22
	.quad	.LBB36_27
	.quad	.LBB36_32
	.quad	.LBB36_42
	.quad	.LBB36_42
	.quad	.LBB36_37
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.8
.LCPI37_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI37_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.8
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.8,@function
Mode_Decision_for_8x8IntraBlocks.8:     # @Mode_Decision_for_8x8IntraBlocks.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI37_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI37_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$244294146, -20(%rbp)   # imm = 0xE8FA202
	movl	%edi, -28(%rbp)
	vmovsd	%xmm0, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-48(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB37_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB37_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-28(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-24(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB37_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$1, -16(%rbp)
.LBB37_4:                               # %if.end
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_1
.LBB37_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$244294146, -20(%rbp)   # imm = 0xE8FA202
	jne	.LBB37_8
.LBB37_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_7
.Lfunc_end37:
	.size	Mode_Decision_for_8x8IntraBlocks.8, .Lfunc_end37-Mode_Decision_for_8x8IntraBlocks.8
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.9 # -- Begin function Intra16x16_Mode_Decision.9
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.9,@function
Intra16x16_Mode_Decision.9:             # @Intra16x16_Mode_Decision.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1491603186, -56(%rbp)  # imm = 0x58E80EF2
	movq	%rdi, -72(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -64(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB38_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB38_2:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB38_12
# %bb.3:                                # %if.then3
	movl	$0, -4(%rbp)
.LBB38_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_6 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB38_4 Depth=1
	movl	$0, -8(%rbp)
.LBB38_6:                               # %for.cond4
                                        #   Parent Loop BB38_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB38_6 Depth=2
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-32(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB38_6 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_6
.LBB38_9:                               # %for.end
                                        #   in Loop: Header=BB38_4 Depth=1
	jmp	.LBB38_10
.LBB38_10:                              # %for.inc87
                                        #   in Loop: Header=BB38_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_4
.LBB38_11:                              # %for.end89
	jmp	.LBB38_12
.LBB38_12:                              # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-72(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB38_73
# %bb.13:                               # %if.then94
	movl	$0, -4(%rbp)
.LBB38_14:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_16 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB38_14 Depth=1
	movl	$0, -8(%rbp)
.LBB38_16:                              # %for.cond99
                                        #   Parent Loop BB38_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB38_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB38_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_16
.LBB38_19:                              # %for.end123
                                        #   in Loop: Header=BB38_14 Depth=1
	jmp	.LBB38_20
.LBB38_20:                              # %for.inc124
                                        #   in Loop: Header=BB38_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_14
.LBB38_21:                              # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB38_22:                              # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_24 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB38_22 Depth=1
	movl	$0, -8(%rbp)
.LBB38_24:                              # %for.cond132
                                        #   Parent Loop BB38_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB38_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB38_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_24
.LBB38_27:                              # %for.end156
                                        #   in Loop: Header=BB38_22 Depth=1
	jmp	.LBB38_28
.LBB38_28:                              # %for.inc157
                                        #   in Loop: Header=BB38_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_22
.LBB38_29:                              # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB38_30:                              # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_32 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB38_30 Depth=1
	movl	$0, -8(%rbp)
.LBB38_32:                              # %for.cond165
                                        #   Parent Loop BB38_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB38_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB38_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_32
.LBB38_35:                              # %for.end180
                                        #   in Loop: Header=BB38_30 Depth=1
	jmp	.LBB38_36
.LBB38_36:                              # %for.inc181
                                        #   in Loop: Header=BB38_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_30
.LBB38_37:                              # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-72(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -4(%rbp)
.LBB38_38:                              # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_40 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB38_38 Depth=1
	movl	$0, -8(%rbp)
.LBB38_40:                              # %for.cond190
                                        #   Parent Loop BB38_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB38_40 Depth=2
	xorl	%eax, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -32(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -28(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB38_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB38_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB38_44
.LBB38_43:                              # %cond.false
                                        #   in Loop: Header=BB38_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB38_44:                              # %cond.end
                                        #   in Loop: Header=BB38_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB38_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB38_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB38_50
.LBB38_46:                              # %cond.false246
                                        #   in Loop: Header=BB38_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB38_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB38_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB38_49
.LBB38_48:                              # %cond.false260
                                        #   in Loop: Header=BB38_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB38_49:                              # %cond.end271
                                        #   in Loop: Header=BB38_40 Depth=2
.LBB38_50:                              # %cond.end273
                                        #   in Loop: Header=BB38_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-24(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-32(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB38_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB38_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB38_53
.LBB38_52:                              # %cond.false295
                                        #   in Loop: Header=BB38_40 Depth=2
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB38_53:                              # %cond.end305
                                        #   in Loop: Header=BB38_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB38_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB38_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB38_59
.LBB38_55:                              # %cond.false311
                                        #   in Loop: Header=BB38_40 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB38_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB38_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB38_58
.LBB38_57:                              # %cond.false324
                                        #   in Loop: Header=BB38_40 Depth=2
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB38_58:                              # %cond.end334
                                        #   in Loop: Header=BB38_40 Depth=2
.LBB38_59:                              # %cond.end336
                                        #   in Loop: Header=BB38_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-24(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB38_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB38_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB38_62
.LBB38_61:                              # %cond.false359
                                        #   in Loop: Header=BB38_40 Depth=2
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB38_62:                              # %cond.end370
                                        #   in Loop: Header=BB38_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB38_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB38_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB38_68
.LBB38_64:                              # %cond.false376
                                        #   in Loop: Header=BB38_40 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB38_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB38_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB38_67
.LBB38_66:                              # %cond.false390
                                        #   in Loop: Header=BB38_40 Depth=2
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB38_67:                              # %cond.end401
                                        #   in Loop: Header=BB38_40 Depth=2
.LBB38_68:                              # %cond.end403
                                        #   in Loop: Header=BB38_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-20(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-24(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB38_40 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_40
.LBB38_70:                              # %for.end416
                                        #   in Loop: Header=BB38_38 Depth=1
	jmp	.LBB38_71
.LBB38_71:                              # %for.inc417
                                        #   in Loop: Header=BB38_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_38
.LBB38_72:                              # %for.end419
	jmp	.LBB38_73
.LBB38_73:                              # %if.end420
	cmpl	$1491603186, -56(%rbp)  # imm = 0x58E80EF2
	jne	.LBB38_75
.LBB38_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_74
.Lfunc_end38:
	.size	Intra16x16_Mode_Decision.9, .Lfunc_end38-Intra16x16_Mode_Decision.9
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.10           # -- Begin function StoreMV8x8.10
	.p2align	4, 0x90
	.type	StoreMV8x8.10,@function
StoreMV8x8.10:                          # @StoreMV8x8.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1101342751, -8(%rbp)   # imm = 0x41A5281F
	movl	%edi, -12(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB39_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-12(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_1
.LBB39_4:                               # %for.end
	cmpl	$1101342751, -8(%rbp)   # imm = 0x41A5281F
	jne	.LBB39_6
.LBB39_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_5
.Lfunc_end39:
	.size	StoreMV8x8.10, .Lfunc_end39-StoreMV8x8.10
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.11 # -- Begin function SetModesAndRefframeForBlocks.11
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.11,@function
SetModesAndRefframeForBlocks.11:        # @SetModesAndRefframeForBlocks.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1042227846, -36(%rbp)  # imm = 0x3E1F2286
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB40_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB40_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB40_4
.LBB40_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB40_4
.LBB40_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB40_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB40_7
.LBB40_6:                               # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB40_7:                               # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB40_42
# %bb.8:                                # %if.end
	movq	.LJTI40_0(,%rax,8), %rax
	jmpq	*%rax
.LBB40_9:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB40_10:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB40_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB40_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB40_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB40_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB40_14
.LBB40_13:                              # %cond.false26
                                        #   in Loop: Header=BB40_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_14
.LBB40_14:                              # %cond.end27
                                        #   in Loop: Header=BB40_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB40_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_10
.LBB40_16:                              # %for.end
	jmp	.LBB40_43
.LBB40_17:                              # %sw.bb31
	movl	$0, -4(%rbp)
.LBB40_18:                              # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB40_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB40_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB40_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_18
.LBB40_21:                              # %for.end49
	jmp	.LBB40_43
.LBB40_22:                              # %sw.bb50
	movl	$0, -4(%rbp)
.LBB40_23:                              # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB40_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB40_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB40_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_23
.LBB40_26:                              # %for.end71
	jmp	.LBB40_43
.LBB40_27:                              # %sw.bb72
	movl	$0, -4(%rbp)
.LBB40_28:                              # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB40_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB40_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB40_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_28
.LBB40_31:                              # %for.end85
	jmp	.LBB40_43
.LBB40_32:                              # %sw.bb86
	movl	$0, -4(%rbp)
.LBB40_33:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB40_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB40_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB40_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_33
.LBB40_36:                              # %for.end99
	jmp	.LBB40_43
.LBB40_37:                              # %sw.bb100
	movl	$0, -4(%rbp)
.LBB40_38:                              # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB40_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB40_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB40_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_38
.LBB40_41:                              # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB40_43
.LBB40_42:                              # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB40_43:                              # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB40_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB40_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB40_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB40_70
.LBB40_47:                              # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB40_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB40_49:                              # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB40_49 Depth=1
	movl	$0, -4(%rbp)
.LBB40_51:                              # %for.cond131
                                        #   Parent Loop BB40_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB40_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB40_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB40_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB40_55
.LBB40_54:                              # %if.else174
                                        #   in Loop: Header=BB40_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB40_55:                              # %if.end195
                                        #   in Loop: Header=BB40_51 Depth=2
	jmp	.LBB40_56
.LBB40_56:                              # %for.inc196
                                        #   in Loop: Header=BB40_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_51
.LBB40_57:                              # %for.end198
                                        #   in Loop: Header=BB40_49 Depth=1
	jmp	.LBB40_58
.LBB40_58:                              # %for.inc199
                                        #   in Loop: Header=BB40_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_49
.LBB40_59:                              # %for.end201
	jmp	.LBB40_69
.LBB40_60:                              # %if.else202
	movl	$0, -8(%rbp)
.LBB40_61:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB40_61 Depth=1
	movl	$0, -4(%rbp)
.LBB40_63:                              # %for.cond207
                                        #   Parent Loop BB40_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB40_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB40_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_63
.LBB40_66:                              # %for.end227
                                        #   in Loop: Header=BB40_61 Depth=1
	jmp	.LBB40_67
.LBB40_67:                              # %for.inc228
                                        #   in Loop: Header=BB40_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_61
.LBB40_68:                              # %for.end230
	jmp	.LBB40_69
.LBB40_69:                              # %if.end231
	jmp	.LBB40_127
.LBB40_70:                              # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB40_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB40_72:                              # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB40_72 Depth=1
	movl	$0, -4(%rbp)
.LBB40_74:                              # %for.cond239
                                        #   Parent Loop BB40_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB40_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB40_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB40_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB40_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB40_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB40_105
.LBB40_78:                              # %if.else298
                                        #   in Loop: Header=BB40_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB40_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB40_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB40_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB40_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB40_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB40_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB40_90
.LBB40_82:                              # %land.lhs.true320
                                        #   in Loop: Header=BB40_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB40_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB40_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB40_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB40_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB40_90
.LBB40_85:                              # %land.lhs.true331
                                        #   in Loop: Header=BB40_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB40_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB40_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB40_90
.LBB40_87:                              # %land.lhs.true347
                                        #   in Loop: Header=BB40_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB40_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB40_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB40_90
.LBB40_89:                              # %if.then356
                                        #   in Loop: Header=BB40_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB40_104
.LBB40_90:                              # %if.else377
                                        #   in Loop: Header=BB40_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB40_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB40_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB40_96
.LBB40_92:                              # %land.lhs.true393
                                        #   in Loop: Header=BB40_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB40_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB40_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB40_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB40_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB40_96
.LBB40_95:                              # %cond.true404
                                        #   in Loop: Header=BB40_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB40_97
.LBB40_96:                              # %cond.false410
                                        #   in Loop: Header=BB40_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB40_97
.LBB40_97:                              # %cond.end411
                                        #   in Loop: Header=BB40_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB40_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB40_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB40_102
.LBB40_99:                              # %land.lhs.true439
                                        #   in Loop: Header=BB40_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB40_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB40_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB40_102
.LBB40_101:                             # %cond.true448
                                        #   in Loop: Header=BB40_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB40_103
.LBB40_102:                             # %cond.false454
                                        #   in Loop: Header=BB40_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB40_103
.LBB40_103:                             # %cond.end455
                                        #   in Loop: Header=BB40_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB40_104:                             # %if.end468
                                        #   in Loop: Header=BB40_74 Depth=2
	jmp	.LBB40_105
.LBB40_105:                             # %if.end469
                                        #   in Loop: Header=BB40_74 Depth=2
	jmp	.LBB40_106
.LBB40_106:                             # %for.inc470
                                        #   in Loop: Header=BB40_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_74
.LBB40_107:                             # %for.end472
                                        #   in Loop: Header=BB40_72 Depth=1
	jmp	.LBB40_108
.LBB40_108:                             # %for.inc473
                                        #   in Loop: Header=BB40_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_72
.LBB40_109:                             # %for.end475
	jmp	.LBB40_126
.LBB40_110:                             # %if.else476
	movl	$0, -8(%rbp)
.LBB40_111:                             # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB40_111 Depth=1
	movl	$0, -4(%rbp)
.LBB40_113:                             # %for.cond481
                                        #   Parent Loop BB40_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB40_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB40_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB40_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB40_120
.LBB40_116:                             # %land.lhs.true508
                                        #   in Loop: Header=BB40_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB40_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB40_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB40_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB40_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB40_120
.LBB40_119:                             # %cond.true519
                                        #   in Loop: Header=BB40_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB40_121
.LBB40_120:                             # %cond.false525
                                        #   in Loop: Header=BB40_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB40_121
.LBB40_121:                             # %cond.end526
                                        #   in Loop: Header=BB40_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB40_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_113
.LBB40_123:                             # %for.end541
                                        #   in Loop: Header=BB40_111 Depth=1
	jmp	.LBB40_124
.LBB40_124:                             # %for.inc542
                                        #   in Loop: Header=BB40_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_111
.LBB40_125:                             # %for.end544
	jmp	.LBB40_126
.LBB40_126:                             # %if.end545
	jmp	.LBB40_127
.LBB40_127:                             # %if.end546
	movl	$0, -8(%rbp)
.LBB40_128:                             # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB40_128 Depth=1
	movl	$0, -4(%rbp)
.LBB40_130:                             # %for.cond551
                                        #   Parent Loop BB40_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB40_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB40_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB40_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB40_134
.LBB40_133:                             # %cond.false584
                                        #   in Loop: Header=BB40_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB40_134
.LBB40_134:                             # %cond.end585
                                        #   in Loop: Header=BB40_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB40_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_130
.LBB40_136:                             # %for.end598
                                        #   in Loop: Header=BB40_128 Depth=1
	jmp	.LBB40_137
.LBB40_137:                             # %for.inc599
                                        #   in Loop: Header=BB40_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_128
.LBB40_138:                             # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB40_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB40_140:                             # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB40_140 Depth=1
	movl	$0, -4(%rbp)
.LBB40_142:                             # %for.cond608
                                        #   Parent Loop BB40_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB40_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB40_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB40_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB40_146
.LBB40_145:                             # %cond.false642
                                        #   in Loop: Header=BB40_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB40_146
.LBB40_146:                             # %cond.end643
                                        #   in Loop: Header=BB40_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB40_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_142
.LBB40_148:                             # %for.end657
                                        #   in Loop: Header=BB40_140 Depth=1
	jmp	.LBB40_149
.LBB40_149:                             # %for.inc658
                                        #   in Loop: Header=BB40_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_140
.LBB40_150:                             # %for.end660
	jmp	.LBB40_151
.LBB40_151:                             # %if.end661
	cmpl	$1042227846, -36(%rbp)  # imm = 0x3E1F2286
	jne	.LBB40_153
.LBB40_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_153:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_152
.Lfunc_end40:
	.size	SetModesAndRefframeForBlocks.11, .Lfunc_end40-SetModesAndRefframeForBlocks.11
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI40_0:
	.quad	.LBB40_9
	.quad	.LBB40_17
	.quad	.LBB40_17
	.quad	.LBB40_17
	.quad	.LBB40_42
	.quad	.LBB40_42
	.quad	.LBB40_42
	.quad	.LBB40_42
	.quad	.LBB40_22
	.quad	.LBB40_27
	.quad	.LBB40_32
	.quad	.LBB40_42
	.quad	.LBB40_42
	.quad	.LBB40_37
                                        # -- End function
	.text
	.globl	UpdatePixelMap.12       # -- Begin function UpdatePixelMap.12
	.p2align	4, 0x90
	.type	UpdatePixelMap.12,@function
UpdatePixelMap.12:                      # @UpdatePixelMap.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1524788798, -28(%rbp)  # imm = 0x5AE26E3E
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB41_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_4 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB41_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB41_2 Depth=1
	movl	$0, -4(%rbp)
.LBB41_4:                               # %for.cond2
                                        #   Parent Loop BB41_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB41_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB41_4 Depth=2
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB41_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_4
.LBB41_7:                               # %for.end
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_8
.LBB41_8:                               # %for.inc7
                                        #   in Loop: Header=BB41_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_2
.LBB41_9:                               # %for.end9
	jmp	.LBB41_41
.LBB41_10:                              # %if.else
	movl	$0, -16(%rbp)
.LBB41_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_13 Depth 2
                                        #       Child Loop BB41_16 Depth 3
                                        #         Child Loop BB41_18 Depth 4
                                        #       Child Loop BB41_25 Depth 3
                                        #         Child Loop BB41_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB41_11 Depth=1
	movl	$0, -12(%rbp)
.LBB41_13:                              # %for.cond14
                                        #   Parent Loop BB41_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_16 Depth 3
                                        #         Child Loop BB41_18 Depth 4
                                        #       Child Loop BB41_25 Depth 3
                                        #         Child Loop BB41_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB41_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movq	refresh_map, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB41_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB41_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB41_16:                              # %for.cond27
                                        #   Parent Loop BB41_11 Depth=1
                                        #     Parent Loop BB41_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_18 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB41_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB41_16 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB41_18:                              # %for.cond31
                                        #   Parent Loop BB41_11 Depth=1
                                        #     Parent Loop BB41_13 Depth=2
                                        #       Parent Loop BB41_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB41_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB41_18 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB41_18 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_18
.LBB41_21:                              # %for.end40
                                        #   in Loop: Header=BB41_16 Depth=3
	jmp	.LBB41_22
.LBB41_22:                              # %for.inc41
                                        #   in Loop: Header=BB41_16 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_16
.LBB41_23:                              # %for.end43
                                        #   in Loop: Header=BB41_13 Depth=2
	jmp	.LBB41_36
.LBB41_24:                              # %if.else44
                                        #   in Loop: Header=BB41_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB41_25:                              # %for.cond46
                                        #   Parent Loop BB41_11 Depth=1
                                        #     Parent Loop BB41_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_27 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB41_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB41_25 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB41_27:                              # %for.cond50
                                        #   Parent Loop BB41_11 Depth=1
                                        #     Parent Loop BB41_13 Depth=2
                                        #       Parent Loop BB41_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB41_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB41_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB41_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB41_31
.LBB41_30:                              # %cond.false
                                        #   in Loop: Header=BB41_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB41_31:                              # %cond.end
                                        #   in Loop: Header=BB41_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB41_27 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_27
.LBB41_33:                              # %for.end76
                                        #   in Loop: Header=BB41_25 Depth=3
	jmp	.LBB41_34
.LBB41_34:                              # %for.inc77
                                        #   in Loop: Header=BB41_25 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_25
.LBB41_35:                              # %for.end79
                                        #   in Loop: Header=BB41_13 Depth=2
	jmp	.LBB41_36
.LBB41_36:                              # %if.end
                                        #   in Loop: Header=BB41_13 Depth=2
	jmp	.LBB41_37
.LBB41_37:                              # %for.inc80
                                        #   in Loop: Header=BB41_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_13
.LBB41_38:                              # %for.end82
                                        #   in Loop: Header=BB41_11 Depth=1
	jmp	.LBB41_39
.LBB41_39:                              # %for.inc83
                                        #   in Loop: Header=BB41_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_11
.LBB41_40:                              # %for.end85
	jmp	.LBB41_41
.LBB41_41:                              # %if.end86
	cmpl	$1524788798, -28(%rbp)  # imm = 0x5AE26E3E
	jne	.LBB41_43
.LBB41_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_42
.Lfunc_end41:
	.size	UpdatePixelMap.12, .Lfunc_end41-UpdatePixelMap.12
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.13 # -- Begin function SetCoeffAndReconstruction8x8.13
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.13,@function
SetCoeffAndReconstruction8x8.13:        # @SetCoeffAndReconstruction8x8.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2072909147, -36(%rbp)  # imm = 0x7B8E155B
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB42_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB42_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB42_4
.LBB42_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB42_4
.LBB42_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB42_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB42_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB42_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB42_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB42_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_6
.LBB42_9:                               # %for.end
	cmpl	$0, -28(%rbp)
	je	.LBB42_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB42_11:                              # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB42_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB42_11 Depth=1
	movl	$0, -4(%rbp)
.LBB42_13:                              # %for.cond20
                                        #   Parent Loop BB42_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB42_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB42_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_13
.LBB42_16:                              # %for.end52
                                        #   in Loop: Header=BB42_11 Depth=1
	jmp	.LBB42_17
.LBB42_17:                              # %for.inc53
                                        #   in Loop: Header=BB42_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_11
.LBB42_18:                              # %for.end55
	jmp	.LBB42_28
.LBB42_19:                              # %if.else
	movl	$0, -8(%rbp)
.LBB42_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB42_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB42_20 Depth=1
	movl	$0, -4(%rbp)
.LBB42_22:                              # %for.cond60
                                        #   Parent Loop BB42_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB42_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB42_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_22
.LBB42_25:                              # %for.end86
                                        #   in Loop: Header=BB42_20 Depth=1
	jmp	.LBB42_26
.LBB42_26:                              # %for.inc87
                                        #   in Loop: Header=BB42_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_20
.LBB42_27:                              # %for.end89
	jmp	.LBB42_28
.LBB42_28:                              # %if.end
	movl	$0, -8(%rbp)
.LBB42_29:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB42_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB42_29 Depth=1
	movl	$0, -4(%rbp)
.LBB42_31:                              # %for.cond94
                                        #   Parent Loop BB42_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB42_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB42_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB42_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB42_35
.LBB42_34:                              # %cond.false127
                                        #   in Loop: Header=BB42_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB42_35
.LBB42_35:                              # %cond.end128
                                        #   in Loop: Header=BB42_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB42_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_31
.LBB42_37:                              # %for.end141
                                        #   in Loop: Header=BB42_29 Depth=1
	jmp	.LBB42_38
.LBB42_38:                              # %for.inc142
                                        #   in Loop: Header=BB42_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_29
.LBB42_39:                              # %for.end144
	cmpl	$0, -28(%rbp)
	je	.LBB42_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB42_41:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB42_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	$0, -4(%rbp)
.LBB42_43:                              # %for.cond151
                                        #   Parent Loop BB42_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB42_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB42_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB42_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB42_47
.LBB42_46:                              # %cond.false185
                                        #   in Loop: Header=BB42_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB42_47
.LBB42_47:                              # %cond.end186
                                        #   in Loop: Header=BB42_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB42_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_43
.LBB42_49:                              # %for.end200
                                        #   in Loop: Header=BB42_41 Depth=1
	jmp	.LBB42_50
.LBB42_50:                              # %for.inc201
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_41
.LBB42_51:                              # %for.end203
	jmp	.LBB42_52
.LBB42_52:                              # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB42_53:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_55 Depth 2
                                        #       Child Loop BB42_57 Depth 3
                                        #         Child Loop BB42_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB42_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB42_53 Depth=1
	movl	$0, -12(%rbp)
.LBB42_55:                              # %for.cond209
                                        #   Parent Loop BB42_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_57 Depth 3
                                        #         Child Loop BB42_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB42_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB42_55 Depth=2
	movl	$0, -8(%rbp)
.LBB42_57:                              # %for.cond213
                                        #   Parent Loop BB42_53 Depth=1
                                        #     Parent Loop BB42_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB42_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB42_57 Depth=3
	movl	$0, -4(%rbp)
.LBB42_59:                              # %for.cond217
                                        #   Parent Loop BB42_53 Depth=1
                                        #     Parent Loop BB42_55 Depth=2
                                        #       Parent Loop BB42_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB42_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB42_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB42_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_59
.LBB42_62:                              # %for.end239
                                        #   in Loop: Header=BB42_57 Depth=3
	jmp	.LBB42_63
.LBB42_63:                              # %for.inc240
                                        #   in Loop: Header=BB42_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_57
.LBB42_64:                              # %for.end242
                                        #   in Loop: Header=BB42_55 Depth=2
	jmp	.LBB42_65
.LBB42_65:                              # %for.inc243
                                        #   in Loop: Header=BB42_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_55
.LBB42_66:                              # %for.end245
                                        #   in Loop: Header=BB42_53 Depth=1
	jmp	.LBB42_67
.LBB42_67:                              # %for.inc246
                                        #   in Loop: Header=BB42_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_53
.LBB42_68:                              # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB42_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB42_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB42_83
.LBB42_71:                              # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB42_72:                              # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB42_72 Depth=1
	movl	$0, -4(%rbp)
.LBB42_74:                              # %for.cond262
                                        #   Parent Loop BB42_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB42_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB42_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB42_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB42_78
.LBB42_77:                              # %if.else278
                                        #   in Loop: Header=BB42_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB42_78:                              # %if.end283
                                        #   in Loop: Header=BB42_74 Depth=2
	jmp	.LBB42_79
.LBB42_79:                              # %for.inc284
                                        #   in Loop: Header=BB42_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_74
.LBB42_80:                              # %for.end286
                                        #   in Loop: Header=BB42_72 Depth=1
	jmp	.LBB42_81
.LBB42_81:                              # %for.inc287
                                        #   in Loop: Header=BB42_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_72
.LBB42_82:                              # %for.end289
	jmp	.LBB42_95
.LBB42_83:                              # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB42_84:                              # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB42_84 Depth=1
	movl	$0, -4(%rbp)
.LBB42_86:                              # %for.cond297
                                        #   Parent Loop BB42_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB42_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB42_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB42_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB42_90
.LBB42_89:                              # %if.else317
                                        #   in Loop: Header=BB42_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB42_90:                              # %if.end326
                                        #   in Loop: Header=BB42_86 Depth=2
	jmp	.LBB42_91
.LBB42_91:                              # %for.inc327
                                        #   in Loop: Header=BB42_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_86
.LBB42_92:                              # %for.end329
                                        #   in Loop: Header=BB42_84 Depth=1
	jmp	.LBB42_93
.LBB42_93:                              # %for.inc330
                                        #   in Loop: Header=BB42_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_84
.LBB42_94:                              # %for.end332
	jmp	.LBB42_95
.LBB42_95:                              # %if.end333
	movl	$0, -8(%rbp)
.LBB42_96:                              # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB42_96 Depth=1
	movl	$0, -4(%rbp)
.LBB42_98:                              # %for.cond338
                                        #   Parent Loop BB42_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB42_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB42_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_98
.LBB42_101:                             # %for.end384
                                        #   in Loop: Header=BB42_96 Depth=1
	jmp	.LBB42_102
.LBB42_102:                             # %for.inc385
                                        #   in Loop: Header=BB42_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_96
.LBB42_103:                             # %for.end387
	jmp	.LBB42_157
.LBB42_104:                             # %if.else388
	movl	$0, -16(%rbp)
.LBB42_105:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_107 Depth 2
                                        #       Child Loop BB42_109 Depth 3
                                        #         Child Loop BB42_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB42_105 Depth=1
	movl	$0, -12(%rbp)
.LBB42_107:                             # %for.cond394
                                        #   Parent Loop BB42_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_109 Depth 3
                                        #         Child Loop BB42_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB42_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB42_107 Depth=2
	movl	$0, -8(%rbp)
.LBB42_109:                             # %for.cond398
                                        #   Parent Loop BB42_105 Depth=1
                                        #     Parent Loop BB42_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB42_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB42_109 Depth=3
	movl	$0, -4(%rbp)
.LBB42_111:                             # %for.cond402
                                        #   Parent Loop BB42_105 Depth=1
                                        #     Parent Loop BB42_107 Depth=2
                                        #       Parent Loop BB42_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB42_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB42_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB42_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_111
.LBB42_114:                             # %for.end425
                                        #   in Loop: Header=BB42_109 Depth=3
	jmp	.LBB42_115
.LBB42_115:                             # %for.inc426
                                        #   in Loop: Header=BB42_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_109
.LBB42_116:                             # %for.end428
                                        #   in Loop: Header=BB42_107 Depth=2
	jmp	.LBB42_117
.LBB42_117:                             # %for.inc429
                                        #   in Loop: Header=BB42_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_107
.LBB42_118:                             # %for.end431
                                        #   in Loop: Header=BB42_105 Depth=1
	jmp	.LBB42_119
.LBB42_119:                             # %for.inc432
                                        #   in Loop: Header=BB42_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_105
.LBB42_120:                             # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB42_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB42_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB42_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB42_136
.LBB42_124:                             # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB42_125:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB42_125 Depth=1
	movl	$0, -4(%rbp)
.LBB42_127:                             # %for.cond458
                                        #   Parent Loop BB42_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB42_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB42_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB42_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB42_131
.LBB42_130:                             # %if.else478
                                        #   in Loop: Header=BB42_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB42_131:                             # %if.end483
                                        #   in Loop: Header=BB42_127 Depth=2
	jmp	.LBB42_132
.LBB42_132:                             # %for.inc484
                                        #   in Loop: Header=BB42_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_127
.LBB42_133:                             # %for.end486
                                        #   in Loop: Header=BB42_125 Depth=1
	jmp	.LBB42_134
.LBB42_134:                             # %for.inc487
                                        #   in Loop: Header=BB42_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_125
.LBB42_135:                             # %for.end489
	jmp	.LBB42_148
.LBB42_136:                             # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB42_137:                             # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB42_137 Depth=1
	movl	$0, -4(%rbp)
.LBB42_139:                             # %for.cond498
                                        #   Parent Loop BB42_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB42_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB42_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB42_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB42_143
.LBB42_142:                             # %if.else518
                                        #   in Loop: Header=BB42_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB42_143:                             # %if.end527
                                        #   in Loop: Header=BB42_139 Depth=2
	jmp	.LBB42_144
.LBB42_144:                             # %for.inc528
                                        #   in Loop: Header=BB42_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_139
.LBB42_145:                             # %for.end530
                                        #   in Loop: Header=BB42_137 Depth=1
	jmp	.LBB42_146
.LBB42_146:                             # %for.inc531
                                        #   in Loop: Header=BB42_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_137
.LBB42_147:                             # %for.end533
	jmp	.LBB42_148
.LBB42_148:                             # %if.end534
	movl	$0, -8(%rbp)
.LBB42_149:                             # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB42_149 Depth=1
	movl	$0, -4(%rbp)
.LBB42_151:                             # %for.cond539
                                        #   Parent Loop BB42_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB42_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB42_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_151
.LBB42_154:                             # %for.end585
                                        #   in Loop: Header=BB42_149 Depth=1
	jmp	.LBB42_155
.LBB42_155:                             # %for.inc586
                                        #   in Loop: Header=BB42_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_149
.LBB42_156:                             # %for.end588
	jmp	.LBB42_157
.LBB42_157:                             # %if.end589
	cmpl	$2072909147, -36(%rbp)  # imm = 0x7B8E155B
	jne	.LBB42_159
.LBB42_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_159:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_158
.Lfunc_end42:
	.size	SetCoeffAndReconstruction8x8.13, .Lfunc_end42-SetCoeffAndReconstruction8x8.13
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.14 # -- Begin function set_stored_macroblock_parameters.14
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.14,@function
set_stored_macroblock_parameters.14:    # @set_stored_macroblock_parameters.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$303649196, -52(%rbp)   # imm = 0x121951AC
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB43_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB43_4
.LBB43_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB43_4
.LBB43_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB43_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB43_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB43_5 Depth=1
	movl	$0, -4(%rbp)
.LBB43_7:                               # %for.cond9
                                        #   Parent Loop BB43_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB43_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB43_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-104(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB43_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB43_10:                              # %if.end
                                        #   in Loop: Header=BB43_7 Depth=2
	jmp	.LBB43_11
.LBB43_11:                              # %for.inc
                                        #   in Loop: Header=BB43_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_7
.LBB43_12:                              # %for.end
                                        #   in Loop: Header=BB43_5 Depth=1
	jmp	.LBB43_13
.LBB43_13:                              # %for.inc33
                                        #   in Loop: Header=BB43_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_5
.LBB43_14:                              # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB43_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB43_16:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB43_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB43_16 Depth=1
	movl	$0, -4(%rbp)
.LBB43_18:                              # %for.cond43
                                        #   Parent Loop BB43_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB43_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB43_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB43_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB43_21:                              # %if.end92
                                        #   in Loop: Header=BB43_18 Depth=2
	jmp	.LBB43_22
.LBB43_22:                              # %for.inc93
                                        #   in Loop: Header=BB43_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_18
.LBB43_23:                              # %for.end95
                                        #   in Loop: Header=BB43_16 Depth=1
	jmp	.LBB43_24
.LBB43_24:                              # %for.inc96
                                        #   in Loop: Header=BB43_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_16
.LBB43_25:                              # %for.end98
	jmp	.LBB43_26
.LBB43_26:                              # %if.end99
	movq	cofAC, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-88(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-96(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB43_28:                              # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_30 Depth 2
                                        #       Child Loop BB43_32 Depth 3
                                        #         Child Loop BB43_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB43_28 Depth=1
	movl	$0, -8(%rbp)
.LBB43_30:                              # %for.cond118
                                        #   Parent Loop BB43_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_32 Depth 3
                                        #         Child Loop BB43_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB43_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB43_30 Depth=2
	movl	$0, -12(%rbp)
.LBB43_32:                              # %for.cond122
                                        #   Parent Loop BB43_28 Depth=1
                                        #     Parent Loop BB43_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB43_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB43_32 Depth=3
	movl	$0, -28(%rbp)
.LBB43_34:                              # %for.cond126
                                        #   Parent Loop BB43_28 Depth=1
                                        #     Parent Loop BB43_30 Depth=2
                                        #       Parent Loop BB43_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB43_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB43_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB43_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB43_34
.LBB43_37:                              # %for.end150
                                        #   in Loop: Header=BB43_32 Depth=3
	jmp	.LBB43_38
.LBB43_38:                              # %for.inc151
                                        #   in Loop: Header=BB43_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_32
.LBB43_39:                              # %for.end153
                                        #   in Loop: Header=BB43_30 Depth=2
	jmp	.LBB43_40
.LBB43_40:                              # %for.inc154
                                        #   in Loop: Header=BB43_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_30
.LBB43_41:                              # %for.end156
                                        #   in Loop: Header=BB43_28 Depth=1
	jmp	.LBB43_42
.LBB43_42:                              # %for.inc157
                                        #   in Loop: Header=BB43_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_28
.LBB43_43:                              # %for.end159
	movl	$0, -4(%rbp)
.LBB43_44:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_46 Depth 2
                                        #       Child Loop BB43_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB43_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB43_44 Depth=1
	movl	$0, -12(%rbp)
.LBB43_46:                              # %for.cond164
                                        #   Parent Loop BB43_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB43_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB43_46 Depth=2
	movl	$0, -28(%rbp)
.LBB43_48:                              # %for.cond168
                                        #   Parent Loop BB43_44 Depth=1
                                        #     Parent Loop BB43_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB43_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB43_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB43_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB43_48
.LBB43_51:                              # %for.end188
                                        #   in Loop: Header=BB43_46 Depth=2
	jmp	.LBB43_52
.LBB43_52:                              # %for.inc189
                                        #   in Loop: Header=BB43_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_46
.LBB43_53:                              # %for.end191
                                        #   in Loop: Header=BB43_44 Depth=1
	jmp	.LBB43_54
.LBB43_54:                              # %for.inc192
                                        #   in Loop: Header=BB43_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_44
.LBB43_55:                              # %for.end194
	jmp	.LBB43_56
.LBB43_56:                              # %if.end195
	movl	$0, -4(%rbp)
.LBB43_57:                              # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB43_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB43_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB43_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB43_60:                              # %if.end225
                                        #   in Loop: Header=BB43_57 Depth=1
	jmp	.LBB43_61
.LBB43_61:                              # %for.inc226
                                        #   in Loop: Header=BB43_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_57
.LBB43_62:                              # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB43_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB43_65
.LBB43_64:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB43_65:                              # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB43_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB43_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB43_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB43_69:                              # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB43_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB43_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB43_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB43_74
.LBB43_73:                              # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB43_74:                              # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB43_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB43_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB43_77:                              # %if.end271
	movl	$0, -8(%rbp)
.LBB43_78:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB43_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB43_78 Depth=1
	movl	$0, -4(%rbp)
.LBB43_80:                              # %for.cond276
                                        #   Parent Loop BB43_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB43_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB43_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB43_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB43_88
.LBB43_85:                              # %if.then299
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB43_87:                              # %if.end345
                                        #   in Loop: Header=BB43_80 Depth=2
	jmp	.LBB43_101
.LBB43_88:                              # %if.else346
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB43_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB43_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB43_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB43_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB43_94
.LBB43_93:                              # %cond.false368
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB43_94:                              # %cond.end369
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	%rax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB43_96:                              # %if.end458
                                        #   in Loop: Header=BB43_80 Depth=2
	jmp	.LBB43_100
.LBB43_97:                              # %if.else459
                                        #   in Loop: Header=BB43_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB43_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB43_99:                              # %if.end578
                                        #   in Loop: Header=BB43_80 Depth=2
	jmp	.LBB43_100
.LBB43_100:                             # %if.end579
                                        #   in Loop: Header=BB43_80 Depth=2
	jmp	.LBB43_101
.LBB43_101:                             # %if.end580
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB43_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB43_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB43_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB43_108
.LBB43_105:                             # %if.then602
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB43_107:                             # %if.end654
                                        #   in Loop: Header=BB43_80 Depth=2
	jmp	.LBB43_108
.LBB43_108:                             # %if.end655
                                        #   in Loop: Header=BB43_80 Depth=2
	jmp	.LBB43_109
.LBB43_109:                             # %for.inc656
                                        #   in Loop: Header=BB43_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_80
.LBB43_110:                             # %for.end658
                                        #   in Loop: Header=BB43_78 Depth=1
	jmp	.LBB43_111
.LBB43_111:                             # %for.inc659
                                        #   in Loop: Header=BB43_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_78
.LBB43_112:                             # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB43_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB43_114:                             # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB43_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB43_114 Depth=1
	movl	$0, -4(%rbp)
.LBB43_116:                             # %for.cond668
                                        #   Parent Loop BB43_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB43_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB43_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB43_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB43_124
.LBB43_121:                             # %if.then693
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB43_123:                             # %if.end745
                                        #   in Loop: Header=BB43_116 Depth=2
	jmp	.LBB43_137
.LBB43_124:                             # %if.else746
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB43_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB43_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB43_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB43_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB43_130
.LBB43_129:                             # %cond.false770
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB43_130:                             # %cond.end772
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	%rax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB43_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB43_132:                             # %if.end862
                                        #   in Loop: Header=BB43_116 Depth=2
	jmp	.LBB43_136
.LBB43_133:                             # %if.else863
                                        #   in Loop: Header=BB43_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB43_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB43_135:                             # %if.end983
                                        #   in Loop: Header=BB43_116 Depth=2
	jmp	.LBB43_136
.LBB43_136:                             # %if.end984
                                        #   in Loop: Header=BB43_116 Depth=2
	jmp	.LBB43_137
.LBB43_137:                             # %if.end985
                                        #   in Loop: Header=BB43_116 Depth=2
	jmp	.LBB43_138
.LBB43_138:                             # %for.inc986
                                        #   in Loop: Header=BB43_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_116
.LBB43_139:                             # %for.end988
                                        #   in Loop: Header=BB43_114 Depth=1
	jmp	.LBB43_140
.LBB43_140:                             # %for.inc989
                                        #   in Loop: Header=BB43_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_114
.LBB43_141:                             # %for.end991
	jmp	.LBB43_142
.LBB43_142:                             # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB43_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB43_144:                             # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB43_144 Depth=1
	movl	$0, -8(%rbp)
.LBB43_146:                             # %for.cond1002
                                        #   Parent Loop BB43_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB43_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB43_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_146
.LBB43_149:                             # %for.end1030
                                        #   in Loop: Header=BB43_144 Depth=1
	jmp	.LBB43_150
.LBB43_150:                             # %for.inc1031
                                        #   in Loop: Header=BB43_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_144
.LBB43_151:                             # %for.end1033
	jmp	.LBB43_175
.LBB43_152:                             # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB43_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB43_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB43_155:                             # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB43_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB43_157:                             # %for.cond1049
                                        #   Parent Loop BB43_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB43_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB43_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_157
.LBB43_160:                             # %for.end1065
                                        #   in Loop: Header=BB43_155 Depth=1
	jmp	.LBB43_161
.LBB43_161:                             # %for.inc1066
                                        #   in Loop: Header=BB43_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_155
.LBB43_162:                             # %for.end1068
	jmp	.LBB43_174
.LBB43_163:                             # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB43_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB43_165:                             # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB43_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB43_167:                             # %for.cond1081
                                        #   Parent Loop BB43_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB43_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB43_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_167
.LBB43_170:                             # %for.end1101
                                        #   in Loop: Header=BB43_165 Depth=1
	jmp	.LBB43_171
.LBB43_171:                             # %for.inc1102
                                        #   in Loop: Header=BB43_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_165
.LBB43_172:                             # %for.end1104
	jmp	.LBB43_173
.LBB43_173:                             # %if.end1105
	jmp	.LBB43_174
.LBB43_174:                             # %if.end1106
	jmp	.LBB43_175
.LBB43_175:                             # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB43_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB43_177:                             # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB43_177 Depth=1
	movl	$0, -8(%rbp)
.LBB43_179:                             # %for.cond1116
                                        #   Parent Loop BB43_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB43_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB43_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB43_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_179
.LBB43_182:                             # %for.end1141
                                        #   in Loop: Header=BB43_177 Depth=1
	jmp	.LBB43_183
.LBB43_183:                             # %for.inc1142
                                        #   in Loop: Header=BB43_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_177
.LBB43_184:                             # %for.end1144
	jmp	.LBB43_185
.LBB43_185:                             # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB43_187:                             # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB43_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB43_189:                             # %for.cond1157
                                        #   Parent Loop BB43_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB43_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB43_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_189
.LBB43_192:                             # %for.end1181
                                        #   in Loop: Header=BB43_187 Depth=1
	jmp	.LBB43_193
.LBB43_193:                             # %for.inc1182
                                        #   in Loop: Header=BB43_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_187
.LBB43_194:                             # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB43_195:                             # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$303649196, -52(%rbp)   # imm = 0x121951AC
	jne	.LBB43_197
.LBB43_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_197:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_196
.Lfunc_end43:
	.size	set_stored_macroblock_parameters.14, .Lfunc_end43-set_stored_macroblock_parameters.14
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.15   # -- Begin function SetMotionVectorsMB.15
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.15,@function
SetMotionVectorsMB.15:                  # @SetMotionVectorsMB.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1230318096, -72(%rbp)  # imm = 0x49552A10
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB44_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -4(%rbp)
.LBB44_3:                               # %for.cond3
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB44_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB44_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB44_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB44_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB44_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB44_10
.LBB44_9:                               # %cond.false
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB44_10:                              # %cond.end
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB44_11:                              # %if.end
                                        #   in Loop: Header=BB44_3 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB44_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB44_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB44_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB44_15
.LBB44_14:                              # %if.else
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB44_15:                              # %if.end89
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_29
.LBB44_16:                              # %if.else90
                                        #   in Loop: Header=BB44_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB44_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB44_28
.LBB44_18:                              # %if.else122
                                        #   in Loop: Header=BB44_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB44_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB44_27
.LBB44_20:                              # %if.else174
                                        #   in Loop: Header=BB44_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB44_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB44_26
.LBB44_22:                              # %if.else226
                                        #   in Loop: Header=BB44_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB44_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB44_25
.LBB44_24:                              # %if.else298
                                        #   in Loop: Header=BB44_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB44_25:                              # %if.end299
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_26
.LBB44_26:                              # %if.end300
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_27
.LBB44_27:                              # %if.end301
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_28
.LBB44_28:                              # %if.end302
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_29
.LBB44_29:                              # %if.end303
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_30
.LBB44_30:                              # %for.inc
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_3
.LBB44_31:                              # %for.end
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_32
.LBB44_32:                              # %for.inc304
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_1
.LBB44_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB44_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB44_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_37 Depth 2
                                        #       Child Loop BB44_39 Depth 3
                                        #         Child Loop BB44_41 Depth 4
                                        #           Child Loop BB44_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB44_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB44_35 Depth=1
	movl	$0, -8(%rbp)
.LBB44_37:                              # %for.cond313
                                        #   Parent Loop BB44_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_39 Depth 3
                                        #         Child Loop BB44_41 Depth 4
                                        #           Child Loop BB44_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB44_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB44_37 Depth=2
	movl	$0, -20(%rbp)
.LBB44_39:                              # %for.cond317
                                        #   Parent Loop BB44_35 Depth=1
                                        #     Parent Loop BB44_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_41 Depth 4
                                        #           Child Loop BB44_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB44_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB44_39 Depth=3
	movl	$0, -24(%rbp)
.LBB44_41:                              # %for.cond321
                                        #   Parent Loop BB44_35 Depth=1
                                        #     Parent Loop BB44_37 Depth=2
                                        #       Parent Loop BB44_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB44_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB44_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB44_41 Depth=4
	movl	$0, -28(%rbp)
.LBB44_43:                              # %for.cond325
                                        #   Parent Loop BB44_35 Depth=1
                                        #     Parent Loop BB44_37 Depth=2
                                        #       Parent Loop BB44_39 Depth=3
                                        #         Parent Loop BB44_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB44_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB44_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB44_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB44_43
.LBB44_46:                              # %for.end423
                                        #   in Loop: Header=BB44_41 Depth=4
	jmp	.LBB44_47
.LBB44_47:                              # %for.inc424
                                        #   in Loop: Header=BB44_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_41
.LBB44_48:                              # %for.end426
                                        #   in Loop: Header=BB44_39 Depth=3
	jmp	.LBB44_49
.LBB44_49:                              # %for.inc427
                                        #   in Loop: Header=BB44_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_39
.LBB44_50:                              # %for.end429
                                        #   in Loop: Header=BB44_37 Depth=2
	jmp	.LBB44_51
.LBB44_51:                              # %for.inc430
                                        #   in Loop: Header=BB44_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_37
.LBB44_52:                              # %for.end432
                                        #   in Loop: Header=BB44_35 Depth=1
	jmp	.LBB44_53
.LBB44_53:                              # %for.inc433
                                        #   in Loop: Header=BB44_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_35
.LBB44_54:                              # %for.end435
	jmp	.LBB44_55
.LBB44_55:                              # %if.end436
	cmpl	$1230318096, -72(%rbp)  # imm = 0x49552A10
	jne	.LBB44_57
.LBB44_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_56
.Lfunc_end44:
	.size	SetMotionVectorsMB.15, .Lfunc_end44-SetMotionVectorsMB.15
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.16    # -- Begin function RestoreMVBlock8x8.16
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.16,@function
RestoreMVBlock8x8.16:                   # @RestoreMVBlock8x8.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1255560251, -68(%rbp)  # imm = 0x4AD6543B
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -56(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB45_12
# %bb.1:                                # %if.then
	cmpl	$0, -56(%rbp)
	jl	.LBB45_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB45_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB45_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_5:                               # %for.cond7
                                        #   Parent Loop BB45_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB45_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB45_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB45_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_5
.LBB45_8:                               # %for.end
                                        #   in Loop: Header=BB45_3 Depth=1
	jmp	.LBB45_9
.LBB45_9:                               # %for.inc76
                                        #   in Loop: Header=BB45_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_3
.LBB45_10:                              # %for.end78
	jmp	.LBB45_11
.LBB45_11:                              # %if.end
	jmp	.LBB45_46
.LBB45_12:                              # %if.else
	cmpl	$0, -56(%rbp)
	jne	.LBB45_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB45_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB45_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_16:                              # %for.cond84
                                        #   Parent Loop BB45_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB45_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB45_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB45_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_16
.LBB45_19:                              # %for.end161
                                        #   in Loop: Header=BB45_14 Depth=1
	jmp	.LBB45_20
.LBB45_20:                              # %for.inc162
                                        #   in Loop: Header=BB45_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_14
.LBB45_21:                              # %for.end164
	jmp	.LBB45_45
.LBB45_22:                              # %if.else165
	cmpl	$1, -56(%rbp)
	jne	.LBB45_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB45_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB45_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_26:                              # %for.cond171
                                        #   Parent Loop BB45_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB45_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB45_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB45_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_26
.LBB45_29:                              # %for.end248
                                        #   in Loop: Header=BB45_24 Depth=1
	jmp	.LBB45_30
.LBB45_30:                              # %for.inc249
                                        #   in Loop: Header=BB45_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_24
.LBB45_31:                              # %for.end251
	jmp	.LBB45_44
.LBB45_32:                              # %if.else252
	cmpl	$2, -56(%rbp)
	jne	.LBB45_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB45_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB45_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_36:                              # %for.cond258
                                        #   Parent Loop BB45_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB45_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB45_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB45_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_36
.LBB45_39:                              # %for.end407
                                        #   in Loop: Header=BB45_34 Depth=1
	jmp	.LBB45_40
.LBB45_40:                              # %for.inc408
                                        #   in Loop: Header=BB45_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_34
.LBB45_41:                              # %for.end410
	jmp	.LBB45_43
.LBB45_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB45_43:                              # %if.end412
	jmp	.LBB45_44
.LBB45_44:                              # %if.end413
	jmp	.LBB45_45
.LBB45_45:                              # %if.end414
	jmp	.LBB45_46
.LBB45_46:                              # %if.end415
	cmpl	$1255560251, -68(%rbp)  # imm = 0x4AD6543B
	jne	.LBB45_48
.LBB45_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_47
.Lfunc_end45:
	.size	RestoreMVBlock8x8.16, .Lfunc_end45-RestoreMVBlock8x8.16
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.17 # -- Begin function set_stored_macroblock_parameters.17
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.17,@function
set_stored_macroblock_parameters.17:    # @set_stored_macroblock_parameters.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1225493209, -52(%rbp)  # imm = 0x490B8AD9
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB46_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB46_4
.LBB46_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB46_4
.LBB46_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB46_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB46_5 Depth=1
	movl	$0, -4(%rbp)
.LBB46_7:                               # %for.cond9
                                        #   Parent Loop BB46_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB46_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-104(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB46_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB46_10:                              # %if.end
                                        #   in Loop: Header=BB46_7 Depth=2
	jmp	.LBB46_11
.LBB46_11:                              # %for.inc
                                        #   in Loop: Header=BB46_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_7
.LBB46_12:                              # %for.end
                                        #   in Loop: Header=BB46_5 Depth=1
	jmp	.LBB46_13
.LBB46_13:                              # %for.inc33
                                        #   in Loop: Header=BB46_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_5
.LBB46_14:                              # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB46_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB46_16:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB46_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB46_16 Depth=1
	movl	$0, -4(%rbp)
.LBB46_18:                              # %for.cond43
                                        #   Parent Loop BB46_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB46_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB46_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB46_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB46_21:                              # %if.end92
                                        #   in Loop: Header=BB46_18 Depth=2
	jmp	.LBB46_22
.LBB46_22:                              # %for.inc93
                                        #   in Loop: Header=BB46_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_18
.LBB46_23:                              # %for.end95
                                        #   in Loop: Header=BB46_16 Depth=1
	jmp	.LBB46_24
.LBB46_24:                              # %for.inc96
                                        #   in Loop: Header=BB46_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_16
.LBB46_25:                              # %for.end98
	jmp	.LBB46_26
.LBB46_26:                              # %if.end99
	movq	cofAC, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-96(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-88(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB46_28:                              # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_30 Depth 2
                                        #       Child Loop BB46_32 Depth 3
                                        #         Child Loop BB46_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB46_28 Depth=1
	movl	$0, -8(%rbp)
.LBB46_30:                              # %for.cond118
                                        #   Parent Loop BB46_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_32 Depth 3
                                        #         Child Loop BB46_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB46_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB46_30 Depth=2
	movl	$0, -12(%rbp)
.LBB46_32:                              # %for.cond122
                                        #   Parent Loop BB46_28 Depth=1
                                        #     Parent Loop BB46_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB46_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB46_32 Depth=3
	movl	$0, -28(%rbp)
.LBB46_34:                              # %for.cond126
                                        #   Parent Loop BB46_28 Depth=1
                                        #     Parent Loop BB46_30 Depth=2
                                        #       Parent Loop BB46_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB46_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB46_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB46_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB46_34
.LBB46_37:                              # %for.end150
                                        #   in Loop: Header=BB46_32 Depth=3
	jmp	.LBB46_38
.LBB46_38:                              # %for.inc151
                                        #   in Loop: Header=BB46_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_32
.LBB46_39:                              # %for.end153
                                        #   in Loop: Header=BB46_30 Depth=2
	jmp	.LBB46_40
.LBB46_40:                              # %for.inc154
                                        #   in Loop: Header=BB46_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_30
.LBB46_41:                              # %for.end156
                                        #   in Loop: Header=BB46_28 Depth=1
	jmp	.LBB46_42
.LBB46_42:                              # %for.inc157
                                        #   in Loop: Header=BB46_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_28
.LBB46_43:                              # %for.end159
	movl	$0, -4(%rbp)
.LBB46_44:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_46 Depth 2
                                        #       Child Loop BB46_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB46_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB46_44 Depth=1
	movl	$0, -12(%rbp)
.LBB46_46:                              # %for.cond164
                                        #   Parent Loop BB46_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB46_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB46_46 Depth=2
	movl	$0, -28(%rbp)
.LBB46_48:                              # %for.cond168
                                        #   Parent Loop BB46_44 Depth=1
                                        #     Parent Loop BB46_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB46_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB46_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB46_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB46_48
.LBB46_51:                              # %for.end188
                                        #   in Loop: Header=BB46_46 Depth=2
	jmp	.LBB46_52
.LBB46_52:                              # %for.inc189
                                        #   in Loop: Header=BB46_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_46
.LBB46_53:                              # %for.end191
                                        #   in Loop: Header=BB46_44 Depth=1
	jmp	.LBB46_54
.LBB46_54:                              # %for.inc192
                                        #   in Loop: Header=BB46_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_44
.LBB46_55:                              # %for.end194
	jmp	.LBB46_56
.LBB46_56:                              # %if.end195
	movl	$0, -4(%rbp)
.LBB46_57:                              # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB46_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB46_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB46_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB46_60:                              # %if.end225
                                        #   in Loop: Header=BB46_57 Depth=1
	jmp	.LBB46_61
.LBB46_61:                              # %for.inc226
                                        #   in Loop: Header=BB46_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_57
.LBB46_62:                              # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB46_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB46_65
.LBB46_64:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB46_65:                              # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB46_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB46_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB46_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB46_69:                              # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB46_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB46_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB46_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB46_74
.LBB46_73:                              # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB46_74:                              # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB46_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB46_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB46_77:                              # %if.end271
	movl	$0, -8(%rbp)
.LBB46_78:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB46_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB46_78 Depth=1
	movl	$0, -4(%rbp)
.LBB46_80:                              # %for.cond276
                                        #   Parent Loop BB46_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB46_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB46_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB46_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB46_88
.LBB46_85:                              # %if.then299
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB46_87:                              # %if.end345
                                        #   in Loop: Header=BB46_80 Depth=2
	jmp	.LBB46_101
.LBB46_88:                              # %if.else346
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB46_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB46_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB46_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB46_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB46_94
.LBB46_93:                              # %cond.false368
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB46_94:                              # %cond.end369
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	%rax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB46_96:                              # %if.end458
                                        #   in Loop: Header=BB46_80 Depth=2
	jmp	.LBB46_100
.LBB46_97:                              # %if.else459
                                        #   in Loop: Header=BB46_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB46_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB46_99:                              # %if.end578
                                        #   in Loop: Header=BB46_80 Depth=2
	jmp	.LBB46_100
.LBB46_100:                             # %if.end579
                                        #   in Loop: Header=BB46_80 Depth=2
	jmp	.LBB46_101
.LBB46_101:                             # %if.end580
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB46_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB46_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB46_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB46_108
.LBB46_105:                             # %if.then602
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB46_107:                             # %if.end654
                                        #   in Loop: Header=BB46_80 Depth=2
	jmp	.LBB46_108
.LBB46_108:                             # %if.end655
                                        #   in Loop: Header=BB46_80 Depth=2
	jmp	.LBB46_109
.LBB46_109:                             # %for.inc656
                                        #   in Loop: Header=BB46_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_80
.LBB46_110:                             # %for.end658
                                        #   in Loop: Header=BB46_78 Depth=1
	jmp	.LBB46_111
.LBB46_111:                             # %for.inc659
                                        #   in Loop: Header=BB46_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_78
.LBB46_112:                             # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB46_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB46_114:                             # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB46_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB46_114 Depth=1
	movl	$0, -4(%rbp)
.LBB46_116:                             # %for.cond668
                                        #   Parent Loop BB46_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB46_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB46_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB46_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB46_124
.LBB46_121:                             # %if.then693
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB46_123:                             # %if.end745
                                        #   in Loop: Header=BB46_116 Depth=2
	jmp	.LBB46_137
.LBB46_124:                             # %if.else746
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB46_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB46_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB46_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB46_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB46_130
.LBB46_129:                             # %cond.false770
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB46_130:                             # %cond.end772
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	%rax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB46_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB46_132:                             # %if.end862
                                        #   in Loop: Header=BB46_116 Depth=2
	jmp	.LBB46_136
.LBB46_133:                             # %if.else863
                                        #   in Loop: Header=BB46_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB46_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB46_135:                             # %if.end983
                                        #   in Loop: Header=BB46_116 Depth=2
	jmp	.LBB46_136
.LBB46_136:                             # %if.end984
                                        #   in Loop: Header=BB46_116 Depth=2
	jmp	.LBB46_137
.LBB46_137:                             # %if.end985
                                        #   in Loop: Header=BB46_116 Depth=2
	jmp	.LBB46_138
.LBB46_138:                             # %for.inc986
                                        #   in Loop: Header=BB46_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_116
.LBB46_139:                             # %for.end988
                                        #   in Loop: Header=BB46_114 Depth=1
	jmp	.LBB46_140
.LBB46_140:                             # %for.inc989
                                        #   in Loop: Header=BB46_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_114
.LBB46_141:                             # %for.end991
	jmp	.LBB46_142
.LBB46_142:                             # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB46_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB46_144:                             # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB46_144 Depth=1
	movl	$0, -8(%rbp)
.LBB46_146:                             # %for.cond1002
                                        #   Parent Loop BB46_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB46_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB46_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB46_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_146
.LBB46_149:                             # %for.end1030
                                        #   in Loop: Header=BB46_144 Depth=1
	jmp	.LBB46_150
.LBB46_150:                             # %for.inc1031
                                        #   in Loop: Header=BB46_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_144
.LBB46_151:                             # %for.end1033
	jmp	.LBB46_175
.LBB46_152:                             # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB46_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB46_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB46_155:                             # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB46_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB46_157:                             # %for.cond1049
                                        #   Parent Loop BB46_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB46_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB46_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_157
.LBB46_160:                             # %for.end1065
                                        #   in Loop: Header=BB46_155 Depth=1
	jmp	.LBB46_161
.LBB46_161:                             # %for.inc1066
                                        #   in Loop: Header=BB46_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_155
.LBB46_162:                             # %for.end1068
	jmp	.LBB46_174
.LBB46_163:                             # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB46_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB46_165:                             # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB46_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB46_167:                             # %for.cond1081
                                        #   Parent Loop BB46_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB46_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB46_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_167
.LBB46_170:                             # %for.end1101
                                        #   in Loop: Header=BB46_165 Depth=1
	jmp	.LBB46_171
.LBB46_171:                             # %for.inc1102
                                        #   in Loop: Header=BB46_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_165
.LBB46_172:                             # %for.end1104
	jmp	.LBB46_173
.LBB46_173:                             # %if.end1105
	jmp	.LBB46_174
.LBB46_174:                             # %if.end1106
	jmp	.LBB46_175
.LBB46_175:                             # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB46_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB46_177:                             # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB46_177 Depth=1
	movl	$0, -8(%rbp)
.LBB46_179:                             # %for.cond1116
                                        #   Parent Loop BB46_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB46_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB46_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB46_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_179
.LBB46_182:                             # %for.end1141
                                        #   in Loop: Header=BB46_177 Depth=1
	jmp	.LBB46_183
.LBB46_183:                             # %for.inc1142
                                        #   in Loop: Header=BB46_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_177
.LBB46_184:                             # %for.end1144
	jmp	.LBB46_185
.LBB46_185:                             # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB46_187:                             # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB46_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB46_189:                             # %for.cond1157
                                        #   Parent Loop BB46_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB46_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB46_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_189
.LBB46_192:                             # %for.end1181
                                        #   in Loop: Header=BB46_187 Depth=1
	jmp	.LBB46_193
.LBB46_193:                             # %for.inc1182
                                        #   in Loop: Header=BB46_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_187
.LBB46_194:                             # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB46_195:                             # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$1225493209, -52(%rbp)  # imm = 0x490B8AD9
	jne	.LBB46_197
.LBB46_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_197:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_196
.Lfunc_end46:
	.size	set_stored_macroblock_parameters.17, .Lfunc_end46-set_stored_macroblock_parameters.17
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.18
.LCPI47_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.18
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.18,@function
RDCost_for_macroblocks.18:              # @RDCost_for_macroblocks.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1237834666, -104(%rbp) # imm = 0x49C7DBAA
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -20(%rbp)
	movq	%rsi, -128(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -36(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB47_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB47_3
.LBB47_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB47_3
.LBB47_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -120(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB47_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB47_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -92(%rbp)
	movl	$0, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -76(%rbp)
	je	.LBB47_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -20(%rbp)
	jne	.LBB47_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -16(%rbp)
.LBB47_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_10 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB47_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB47_8 Depth=1
	movl	$0, -12(%rbp)
.LBB47_10:                              # %for.cond17
                                        #   Parent Loop BB47_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB47_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB47_10 Depth=2
	movq	direct_pdir, %rax
	movl	-96(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-100(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB47_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB47_177
.LBB47_13:                              # %if.end
                                        #   in Loop: Header=BB47_10 Depth=2
	jmp	.LBB47_14
.LBB47_14:                              # %for.inc
                                        #   in Loop: Header=BB47_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_10
.LBB47_15:                              # %for.end
                                        #   in Loop: Header=BB47_8 Depth=1
	jmp	.LBB47_16
.LBB47_16:                              # %for.inc30
                                        #   in Loop: Header=BB47_8 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_8
.LBB47_17:                              # %for.end32
	jmp	.LBB47_18
.LBB47_18:                              # %if.end33
	cmpl	$8, -20(%rbp)
	jge	.LBB47_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -20(%rbp)
	jne	.LBB47_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB47_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB47_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB47_177
.LBB47_23:                              # %if.end46
	jmp	.LBB47_76
.LBB47_24:                              # %if.else
	cmpl	$8, -20(%rbp)
	jne	.LBB47_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB47_75
.LBB47_26:                              # %if.else50
	cmpl	$9, -20(%rbp)
	jne	.LBB47_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB47_47
# %bb.28:                               # %if.then56
	movl	$0, -16(%rbp)
.LBB47_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_31 Depth 2
                                        #       Child Loop BB47_33 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB47_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB47_29 Depth=1
	movl	$0, -12(%rbp)
.LBB47_31:                              # %for.cond61
                                        #   Parent Loop BB47_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB47_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB47_31 Depth=2
	movl	$0, -24(%rbp)
.LBB47_33:                              # %for.cond65
                                        #   Parent Loop BB47_29 Depth=1
                                        #     Parent Loop BB47_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB47_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB47_33 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB47_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB47_33 Depth=3
	movl	$2, -40(%rbp)
.LBB47_36:                              # %if.end77
                                        #   in Loop: Header=BB47_33 Depth=3
	jmp	.LBB47_37
.LBB47_37:                              # %for.inc78
                                        #   in Loop: Header=BB47_33 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB47_33
.LBB47_38:                              # %for.end80
                                        #   in Loop: Header=BB47_31 Depth=2
	jmp	.LBB47_39
.LBB47_39:                              # %for.inc81
                                        #   in Loop: Header=BB47_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_31
.LBB47_40:                              # %for.end83
                                        #   in Loop: Header=BB47_29 Depth=1
	jmp	.LBB47_41
.LBB47_41:                              # %for.inc84
                                        #   in Loop: Header=BB47_29 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_29
.LBB47_42:                              # %for.end86
	movl	$0, -28(%rbp)
.LBB47_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB47_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB47_43 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB47_43 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB47_43
.LBB47_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB47_47:                              # %if.end97
	jmp	.LBB47_74
.LBB47_48:                              # %if.else98
	cmpl	$10, -20(%rbp)
	jne	.LBB47_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB47_73
.LBB47_50:                              # %if.else102
	cmpl	$13, -20(%rbp)
	jne	.LBB47_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB47_71
# %bb.52:                               # %if.then110
	movl	$0, -16(%rbp)
.LBB47_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_55 Depth 2
                                        #       Child Loop BB47_57 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB47_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB47_53 Depth=1
	movl	$0, -12(%rbp)
.LBB47_55:                              # %for.cond115
                                        #   Parent Loop BB47_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_57 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB47_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB47_55 Depth=2
	movl	$0, -24(%rbp)
.LBB47_57:                              # %for.cond119
                                        #   Parent Loop BB47_53 Depth=1
                                        #     Parent Loop BB47_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB47_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB47_57 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB47_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB47_57 Depth=3
	movl	$2, -40(%rbp)
.LBB47_60:                              # %if.end131
                                        #   in Loop: Header=BB47_57 Depth=3
	jmp	.LBB47_61
.LBB47_61:                              # %for.inc132
                                        #   in Loop: Header=BB47_57 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB47_57
.LBB47_62:                              # %for.end134
                                        #   in Loop: Header=BB47_55 Depth=2
	jmp	.LBB47_63
.LBB47_63:                              # %for.inc135
                                        #   in Loop: Header=BB47_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_55
.LBB47_64:                              # %for.end137
                                        #   in Loop: Header=BB47_53 Depth=1
	jmp	.LBB47_65
.LBB47_65:                              # %for.inc138
                                        #   in Loop: Header=BB47_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_53
.LBB47_66:                              # %for.end140
	movl	$0, -28(%rbp)
.LBB47_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB47_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB47_67 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB47_67 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB47_67
.LBB47_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB47_71:                              # %if.end152
	jmp	.LBB47_72
.LBB47_72:                              # %if.end153
	jmp	.LBB47_73
.LBB47_73:                              # %if.end154
	jmp	.LBB47_74
.LBB47_74:                              # %if.end155
	jmp	.LBB47_75
.LBB47_75:                              # %if.end156
	jmp	.LBB47_76
.LBB47_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB47_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB47_82
# %bb.78:                               # %if.then164
	cmpl	$10, -20(%rbp)
	jne	.LBB47_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB47_81
.LBB47_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB47_81
.LBB47_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB47_82:                              # %if.end171
	cmpl	$10, -20(%rbp)
	jne	.LBB47_92
# %bb.83:                               # %if.then174
	movl	$0, -16(%rbp)
.LBB47_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_86 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB47_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB47_84 Depth=1
	movl	$0, -12(%rbp)
.LBB47_86:                              # %for.cond179
                                        #   Parent Loop BB47_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB47_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB47_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB47_86 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_86
.LBB47_89:                              # %for.end196
                                        #   in Loop: Header=BB47_84 Depth=1
	jmp	.LBB47_90
.LBB47_90:                              # %for.inc197
                                        #   in Loop: Header=BB47_84 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_84
.LBB47_91:                              # %for.end199
	jmp	.LBB47_101
.LBB47_92:                              # %if.else200
	movl	$0, -16(%rbp)
.LBB47_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_95 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB47_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB47_93 Depth=1
	movl	$0, -12(%rbp)
.LBB47_95:                              # %for.cond205
                                        #   Parent Loop BB47_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB47_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB47_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB47_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_95
.LBB47_98:                              # %for.end220
                                        #   in Loop: Header=BB47_93 Depth=1
	jmp	.LBB47_99
.LBB47_99:                              # %for.inc221
                                        #   in Loop: Header=BB47_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_93
.LBB47_100:                             # %for.end223
	jmp	.LBB47_101
.LBB47_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB47_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -20(%rbp)
	je	.LBB47_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -20(%rbp)
	je	.LBB47_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -20(%rbp)
	je	.LBB47_107
.LBB47_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB47_107
# %bb.106:                              # %if.then238
	leaq	-32(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB47_107:                             # %if.end239
	cmpl	$10, -20(%rbp)
	jne	.LBB47_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB47_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB47_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB47_124
# %bb.111:                              # %if.then254
	movl	$0, -24(%rbp)
.LBB47_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_114 Depth 2
                                        #       Child Loop BB47_116 Depth 3
	movl	-24(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB47_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB47_112 Depth=1
	movl	-24(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -12(%rbp)
.LBB47_114:                             # %for.cond259
                                        #   Parent Loop BB47_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_116 Depth 3
	cmpl	$16, -12(%rbp)
	jge	.LBB47_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB47_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB47_116:                             # %for.cond263
                                        #   Parent Loop BB47_112 Depth=1
                                        #     Parent Loop BB47_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB47_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB47_116 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_116
.LBB47_119:                             # %for.end291
                                        #   in Loop: Header=BB47_114 Depth=2
	jmp	.LBB47_120
.LBB47_120:                             # %for.inc292
                                        #   in Loop: Header=BB47_114 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_114
.LBB47_121:                             # %for.end294
                                        #   in Loop: Header=BB47_112 Depth=1
	jmp	.LBB47_122
.LBB47_122:                             # %for.inc295
                                        #   in Loop: Header=BB47_112 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB47_112
.LBB47_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB47_133
.LBB47_124:                             # %if.else300
	movl	$0, -12(%rbp)
.LBB47_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_127 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB47_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB47_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB47_127:                             # %for.cond306
                                        #   Parent Loop BB47_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB47_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB47_127 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_127
.LBB47_130:                             # %for.end334
                                        #   in Loop: Header=BB47_125 Depth=1
	jmp	.LBB47_131
.LBB47_131:                             # %for.inc335
                                        #   in Loop: Header=BB47_125 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_125
.LBB47_132:                             # %for.end337
	jmp	.LBB47_133
.LBB47_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB47_143
# %bb.134:                              # %if.then342
	movl	$0, -12(%rbp)
.LBB47_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_137 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB47_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB47_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB47_137:                             # %for.cond347
                                        #   Parent Loop BB47_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB47_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB47_137 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_137
.LBB47_140:                             # %for.end398
                                        #   in Loop: Header=BB47_135 Depth=1
	jmp	.LBB47_141
.LBB47_141:                             # %for.inc399
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_135
.LBB47_142:                             # %for.end401
	jmp	.LBB47_143
.LBB47_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -92(%rbp)
	je	.LBB47_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB47_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -76(%rbp)
	je	.LBB47_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB47_148
.LBB47_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
	movl	-72(%rbp), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB47_149
.LBB47_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-32(%rbp), %esi
	leaq	-36(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
.LBB47_149:                             # %if.end422
	jmp	.LBB47_151
.LBB47_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
.LBB47_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI47_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB47_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI47_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB47_154
.LBB47_153:                             # %cond.false431
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm2
.LBB47_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -112(%rbp)
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-128(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB47_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB47_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB47_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB47_159
.LBB47_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB47_177
.LBB47_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB47_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -20(%rbp)
	je	.LBB47_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB47_165
	jmp	.LBB47_176
.LBB47_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB47_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB47_176
	jmp	.LBB47_165
.LBB47_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB47_165
	jmp	.LBB47_176
.LBB47_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB47_175
# %bb.166:                              # %if.then465
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB47_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB47_171
	jmp	.LBB47_174
.LBB47_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB47_170
# %bb.169:                              # %cond.true473
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB47_174
	jmp	.LBB47_171
.LBB47_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB47_171
	jmp	.LBB47_174
.LBB47_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB47_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB47_177
.LBB47_173:                             # %if.end482
	jmp	.LBB47_174
.LBB47_174:                             # %if.end483
	jmp	.LBB47_175
.LBB47_175:                             # %if.end484
	jmp	.LBB47_176
.LBB47_176:                             # %if.end485
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-128(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB47_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$1237834666, -104(%rbp) # imm = 0x49C7DBAA
	jne	.LBB47_179
.LBB47_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_178
.Lfunc_end47:
	.size	RDCost_for_macroblocks.18, .Lfunc_end47-RDCost_for_macroblocks.18
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.19 # -- Begin function GetBestTransformP8x8.19
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.19,@function
GetBestTransformP8x8.19:                # @GetBestTransformP8x8.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$87111108, -64(%rbp)    # imm = 0x53135C4
	movl	$0, -44(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB48_2
# %bb.1:                                # %if.then
	movl	$1, -40(%rbp)
	jmp	.LBB48_25
.LBB48_2:                               # %if.end
	movl	$0, -28(%rbp)
.LBB48_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_5 Depth 2
                                        #       Child Loop BB48_7 Depth 3
                                        #         Child Loop BB48_9 Depth 4
                                        #           Child Loop BB48_11 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB48_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB48_3 Depth=1
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -32(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB48_5:                               # %for.cond3
                                        #   Parent Loop BB48_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_7 Depth 3
                                        #         Child Loop BB48_9 Depth 4
                                        #           Child Loop BB48_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB48_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB48_7:                               # %for.cond7
                                        #   Parent Loop BB48_3 Depth=1
                                        #     Parent Loop BB48_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_9 Depth 4
                                        #           Child Loop BB48_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB48_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-336(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB48_9:                               # %for.cond12
                                        #   Parent Loop BB48_3 Depth=1
                                        #     Parent Loop BB48_5 Depth=2
                                        #       Parent Loop BB48_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB48_11 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB48_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB48_9 Depth=4
	movl	$0, -16(%rbp)
.LBB48_11:                              # %for.cond15
                                        #   Parent Loop BB48_3 Depth=1
                                        #     Parent Loop BB48_5 Depth=2
                                        #       Parent Loop BB48_7 Depth=3
                                        #         Parent Loop BB48_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB48_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB48_11 Depth=5
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB48_11 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB48_11
.LBB48_14:                              # %for.end
                                        #   in Loop: Header=BB48_9 Depth=4
	jmp	.LBB48_15
.LBB48_15:                              # %for.inc51
                                        #   in Loop: Header=BB48_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_9
.LBB48_16:                              # %for.end53
                                        #   in Loop: Header=BB48_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB48_7 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_7
.LBB48_18:                              # %for.end57
                                        #   in Loop: Header=BB48_5 Depth=2
	jmp	.LBB48_19
.LBB48_19:                              # %for.inc58
                                        #   in Loop: Header=BB48_5 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB48_5
.LBB48_20:                              # %for.end60
                                        #   in Loop: Header=BB48_3 Depth=1
	leaq	-592(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB48_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB48_3
.LBB48_22:                              # %for.end66
	movl	-44(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB48_24
# %bb.23:                               # %if.then69
	movl	$1, -40(%rbp)
	jmp	.LBB48_25
.LBB48_24:                              # %if.else
	movl	$0, -40(%rbp)
.LBB48_25:                              # %return
	movl	-40(%rbp), %ebx
	cmpl	$87111108, -64(%rbp)    # imm = 0x53135C4
	jne	.LBB48_27
.LBB48_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_26
.Lfunc_end48:
	.size	GetBestTransformP8x8.19, .Lfunc_end48-GetBestTransformP8x8.19
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.20 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.20
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.20,@function
Mode_Decision_for_Intra4x4Macroblock.20: # @Mode_Decision_for_Intra4x4Macroblock.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$916692319, -24(%rbp)   # imm = 0x36A39D5F
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB49_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB49_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB49_4:                               # %if.end
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_1
.LBB49_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$916692319, -24(%rbp)   # imm = 0x36A39D5F
	jne	.LBB49_8
.LBB49_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_7
.Lfunc_end49:
	.size	Mode_Decision_for_Intra4x4Macroblock.20, .Lfunc_end49-Mode_Decision_for_Intra4x4Macroblock.20
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.21 # -- Begin function RDCost_for_4x4IntraBlocks.21
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.21,@function
RDCost_for_4x4IntraBlocks.21:           # @RDCost_for_4x4IntraBlocks.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$25245838, -72(%rbp)    # imm = 0x181388E
	movq	%rdi, -112(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -8(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -152(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -52(%rbp)
	movl	$0, -44(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -76(%rbp)
	movl	-56(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-76(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB50_10
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB50_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_4 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB50_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB50_4:                               # %for.cond15
                                        #   Parent Loop BB50_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB50_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-80(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-136(%rbp), %rdx
	movl	-68(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB50_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_4
.LBB50_7:                               # %for.end
                                        #   in Loop: Header=BB50_2 Depth=1
	jmp	.LBB50_8
.LBB50_8:                               # %for.inc33
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_2
.LBB50_9:                               # %for.end35
	jmp	.LBB50_10
.LBB50_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-52(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB50_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB50_16
.LBB50_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB50_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB50_15
.LBB50_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB50_15:                              # %cond.end
.LBB50_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB50_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB50_18:                              # %if.end50
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB50_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB50_21
.LBB50_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB50_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB50_23
# %bb.22:                               # %if.then66
	movl	-20(%rbp), %esi
	movl	-8(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_24
.LBB50_23:                              # %if.else69
	movl	-20(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB50_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm0
	vmovsd	-152(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -128(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB50_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -88(%rbp)
	jmp	.LBB50_27
.LBB50_26:                              # %if.else81
	vmovsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -88(%rbp)
.LBB50_27:                              # %return
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$25245838, -72(%rbp)    # imm = 0x181388E
	jne	.LBB50_29
.LBB50_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB50_28
.Lfunc_end50:
	.size	RDCost_for_4x4IntraBlocks.21, .Lfunc_end50-RDCost_for_4x4IntraBlocks.21
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.22 # -- Begin function RDCost_for_4x4Blocks_Chroma.22
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.22,@function
RDCost_for_4x4Blocks_Chroma.22:         # @RDCost_for_4x4Blocks_Chroma.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1559202293, -56(%rbp)  # imm = 0x5CEF89F5
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB51_2
# %bb.1:                                # %if.then
	movl	$1, -32(%rbp)
	jmp	.LBB51_3
.LBB51_2:                               # %if.else
	movl	$0, -32(%rbp)
.LBB51_3:                               # %if.end
	movl	-60(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB51_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB51_18
.LBB51_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -28(%rbp)
.LBB51_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -28(%rbp)
	jge	.LBB51_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB51_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB51_8:                               # %land.end
                                        #   in Loop: Header=BB51_6 Depth=1
	testb	$1, %al
	jne	.LBB51_9
	jmp	.LBB51_17
.LBB51_9:                               # %for.body
                                        #   in Loop: Header=BB51_6 Depth=1
	movq	-104(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB51_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB51_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB51_12
.LBB51_11:                              # %if.else54
                                        #   in Loop: Header=BB51_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB51_12:                              # %if.end55
                                        #   in Loop: Header=BB51_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB51_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB51_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB51_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB51_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB51_15:                              # %lor.end
                                        #   in Loop: Header=BB51_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB51_6 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB51_6
.LBB51_17:                              # %for.end
	jmp	.LBB51_18
.LBB51_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$1559202293, -56(%rbp)  # imm = 0x5CEF89F5
	jne	.LBB51_20
.LBB51_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_19
.Lfunc_end51:
	.size	RDCost_for_4x4Blocks_Chroma.22, .Lfunc_end51-RDCost_for_4x4Blocks_Chroma.22
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.23
.LCPI52_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.23
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.23,@function
RDCost_for_8x8blocks.23:                # @RDCost_for_8x8blocks.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$118857143, -164(%rbp)  # imm = 0x7159DB7
	movq	%rdi, -144(%rbp)
	movq	%rsi, -184(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -128(%rbp)
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -160(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB52_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -36(%rbp)
	sete	%r10b
.LBB52_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	movl	-36(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -120(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -116(%rbp)
	je	.LBB52_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB52_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI52_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	%xmm0, -200(%rbp)
	jmp	.LBB52_139
.LBB52_5:                               # %if.else
	xorl	%r8d, %r8d
	movq	-184(%rbp), %rsi
	movl	-40(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB52_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB52_8
.LBB52_7:                               # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB52_8:                               # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-128(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB52_19
.LBB52_10:                              # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB52_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB52_13
.LBB52_12:                              # %cond.true69
	movl	-36(%rbp), %eax
	jmp	.LBB52_14
.LBB52_13:                              # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB52_14
.LBB52_14:                              # %cond.end71
	movl	%eax, -156(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB52_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB52_17
.LBB52_16:                              # %cond.true80
	movl	-36(%rbp), %eax
	jmp	.LBB52_18
.LBB52_17:                              # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB52_18
.LBB52_18:                              # %cond.end82
	movl	%eax, -168(%rbp)
	movq	-184(%rbp), %rsi
	movl	-40(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-156(%rbp), %r8d
	movl	-168(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-128(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB52_19:                              # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB52_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB52_21:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_23 Depth 2
                                        #       Child Loop BB52_25 Depth 3
                                        #     Child Loop BB52_31 Depth 2
                                        #       Child Loop BB52_33 Depth 3
                                        #     Child Loop BB52_39 Depth 2
                                        #       Child Loop BB52_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB52_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB52_21 Depth=1
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	$0, -16(%rbp)
.LBB52_23:                              # %for.cond96
                                        #   Parent Loop BB52_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_25 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB52_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB52_23 Depth=2
	movl	$0, -12(%rbp)
.LBB52_25:                              # %for.cond100
                                        #   Parent Loop BB52_21 Depth=1
                                        #     Parent Loop BB52_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB52_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB52_25 Depth=3
	movl	-12(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB52_25 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_25
.LBB52_28:                              # %for.end
                                        #   in Loop: Header=BB52_23 Depth=2
	jmp	.LBB52_29
.LBB52_29:                              # %for.inc114
                                        #   in Loop: Header=BB52_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_23
.LBB52_30:                              # %for.end116
                                        #   in Loop: Header=BB52_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB52_31:                              # %for.cond120
                                        #   Parent Loop BB52_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB52_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB52_31 Depth=2
	movl	$0, -12(%rbp)
.LBB52_33:                              # %for.cond124
                                        #   Parent Loop BB52_21 Depth=1
                                        #     Parent Loop BB52_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB52_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB52_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-12(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB52_33 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_33
.LBB52_36:                              # %for.end152
                                        #   in Loop: Header=BB52_31 Depth=2
	jmp	.LBB52_37
.LBB52_37:                              # %for.inc153
                                        #   in Loop: Header=BB52_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_31
.LBB52_38:                              # %for.end155
                                        #   in Loop: Header=BB52_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB52_39:                              # %for.cond159
                                        #   Parent Loop BB52_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB52_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB52_39 Depth=2
	movl	$0, -12(%rbp)
.LBB52_41:                              # %for.cond163
                                        #   Parent Loop BB52_21 Depth=1
                                        #     Parent Loop BB52_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB52_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB52_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB52_41 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_41
.LBB52_44:                              # %for.end180
                                        #   in Loop: Header=BB52_39 Depth=2
	jmp	.LBB52_45
.LBB52_45:                              # %for.inc181
                                        #   in Loop: Header=BB52_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_39
.LBB52_46:                              # %for.end183
                                        #   in Loop: Header=BB52_21 Depth=1
	jmp	.LBB52_47
.LBB52_47:                              # %for.inc184
                                        #   in Loop: Header=BB52_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB52_21
.LBB52_48:                              # %for.end186
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB52_49:                              # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_51 Depth 2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB52_49 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB52_51:                              # %for.cond192
                                        #   Parent Loop BB52_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB52_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -124(%rbp)
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-16(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-124(%rbp), %edx
	movl	%edx, -92(%rbp)
	movl	-124(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -68(%rbp)
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-16(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -84(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-68(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-16(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB52_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB52_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB52_55
.LBB52_54:                              # %cond.false229
                                        #   in Loop: Header=BB52_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %eax
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB52_55:                              # %cond.end235
                                        #   in Loop: Header=BB52_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB52_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB52_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB52_61
.LBB52_57:                              # %cond.false241
                                        #   in Loop: Header=BB52_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB52_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB52_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB52_60
.LBB52_59:                              # %cond.false250
                                        #   in Loop: Header=BB52_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB52_60:                              # %cond.end256
                                        #   in Loop: Header=BB52_51 Depth=2
.LBB52_61:                              # %cond.end258
                                        #   in Loop: Header=BB52_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-92(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB52_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB52_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB52_64
.LBB52_63:                              # %cond.false276
                                        #   in Loop: Header=BB52_51 Depth=2
	movl	-92(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB52_64:                              # %cond.end282
                                        #   in Loop: Header=BB52_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB52_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB52_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_70
.LBB52_66:                              # %cond.false288
                                        #   in Loop: Header=BB52_51 Depth=2
	xorl	%eax, %eax
	movl	-92(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB52_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB52_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB52_69
.LBB52_68:                              # %cond.false297
                                        #   in Loop: Header=BB52_51 Depth=2
	movl	-92(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB52_69:                              # %cond.end303
                                        #   in Loop: Header=BB52_51 Depth=2
.LBB52_70:                              # %cond.end305
                                        #   in Loop: Header=BB52_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-84(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-16(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB52_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB52_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB52_73
.LBB52_72:                              # %cond.false325
                                        #   in Loop: Header=BB52_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-84(%rbp), %ecx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB52_73:                              # %cond.end331
                                        #   in Loop: Header=BB52_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB52_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB52_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB52_79
.LBB52_75:                              # %cond.false337
                                        #   in Loop: Header=BB52_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-84(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB52_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB52_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB52_78
.LBB52_77:                              # %cond.false346
                                        #   in Loop: Header=BB52_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-84(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB52_78:                              # %cond.end352
                                        #   in Loop: Header=BB52_51 Depth=2
.LBB52_79:                              # %cond.end354
                                        #   in Loop: Header=BB52_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB52_51 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_51
.LBB52_81:                              # %for.end369
                                        #   in Loop: Header=BB52_49 Depth=1
	jmp	.LBB52_82
.LBB52_82:                              # %for.inc370
                                        #   in Loop: Header=BB52_49 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_49
.LBB52_83:                              # %for.end372
	jmp	.LBB52_84
.LBB52_84:                              # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB52_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB52_87
# %bb.86:                               # %if.then379
	movl	-40(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB52_87:                              # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB52_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB52_102
# %bb.89:                               # %if.then388
	movl	$0, -72(%rbp)
.LBB52_90:                              # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_92 Depth 2
                                        #       Child Loop BB52_94 Depth 3
	movl	-72(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB52_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB52_90 Depth=1
	movl	-72(%rbp), %edi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB52_92:                              # %for.cond395
                                        #   Parent Loop BB52_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_94 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB52_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB52_94:                              # %for.cond403
                                        #   Parent Loop BB52_90 Depth=1
                                        #     Parent Loop BB52_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB52_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB52_94 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_94
.LBB52_97:                              # %for.end429
                                        #   in Loop: Header=BB52_92 Depth=2
	jmp	.LBB52_98
.LBB52_98:                              # %for.inc430
                                        #   in Loop: Header=BB52_92 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_92
.LBB52_99:                              # %for.end432
                                        #   in Loop: Header=BB52_90 Depth=1
	jmp	.LBB52_100
.LBB52_100:                             # %for.inc433
                                        #   in Loop: Header=BB52_90 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB52_90
.LBB52_101:                             # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB52_113
.LBB52_102:                             # %if.else439
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB52_103:                             # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_105 Depth 2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB52_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB52_105:                             # %for.cond447
                                        #   Parent Loop BB52_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB52_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB52_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB52_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB52_108:                             # %if.end524
                                        #   in Loop: Header=BB52_105 Depth=2
	jmp	.LBB52_109
.LBB52_109:                             # %for.inc525
                                        #   in Loop: Header=BB52_105 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_105
.LBB52_110:                             # %for.end527
                                        #   in Loop: Header=BB52_103 Depth=1
	jmp	.LBB52_111
.LBB52_111:                             # %for.inc528
                                        #   in Loop: Header=BB52_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_103
.LBB52_112:                             # %for.end530
	jmp	.LBB52_113
.LBB52_113:                             # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB52_115
# %bb.114:                              # %if.then534
	movl	-120(%rbp), %edi
	movl	-172(%rbp), %esi
	leaq	-76(%rbp), %rdx
	leaq	-172(%rbp), %rcx
	callq	ue_linfo
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_116
.LBB52_115:                             # %if.else536
	movl	-120(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-192(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-136(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB52_116:                             # %if.end547
	cmpl	$0, -116(%rbp)
	jne	.LBB52_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB52_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB52_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB52_121
.LBB52_120:                             # %if.then560
	movl	-36(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB52_121:                             # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB52_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB52_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB52_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB52_126
.LBB52_125:                             # %if.then579
	movl	-36(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB52_126:                             # %if.end583
	jmp	.LBB52_127
.LBB52_127:                             # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB52_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB52_130
.LBB52_129:                             # %if.then592
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-36(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB52_130:                             # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB52_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB52_133
.LBB52_132:                             # %if.then606
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-36(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB52_133:                             # %if.end612
	jmp	.LBB52_134
.LBB52_134:                             # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB52_136
# %bb.135:                              # %if.then617
	movq	-192(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -76(%rbp)
	movl	-40(%rbp), %edi
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-76(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB52_136:                             # %if.end629
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB52_138
# %bb.137:                              # %if.then631
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB52_138:                             # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
.LBB52_139:                             # %return
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$118857143, -164(%rbp)  # imm = 0x7159DB7
	jne	.LBB52_141
.LBB52_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB52_140
.Lfunc_end52:
	.size	RDCost_for_8x8blocks.23, .Lfunc_end52-RDCost_for_8x8blocks.23
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.24 # -- Begin function SetModesAndRefframeForBlocks.24
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.24,@function
SetModesAndRefframeForBlocks.24:        # @SetModesAndRefframeForBlocks.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$649397804, -36(%rbp)   # imm = 0x26B5062C
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB53_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB53_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB53_4
.LBB53_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB53_4
.LBB53_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB53_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB53_7
.LBB53_6:                               # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB53_7:                               # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB53_42
# %bb.8:                                # %if.end
	movq	.LJTI53_0(,%rax,8), %rax
	jmpq	*%rax
.LBB53_9:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB53_10:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB53_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB53_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB53_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB53_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB53_14
.LBB53_13:                              # %cond.false26
                                        #   in Loop: Header=BB53_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB53_14
.LBB53_14:                              # %cond.end27
                                        #   in Loop: Header=BB53_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB53_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_10
.LBB53_16:                              # %for.end
	jmp	.LBB53_43
.LBB53_17:                              # %sw.bb31
	movl	$0, -4(%rbp)
.LBB53_18:                              # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB53_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB53_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB53_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_18
.LBB53_21:                              # %for.end49
	jmp	.LBB53_43
.LBB53_22:                              # %sw.bb50
	movl	$0, -4(%rbp)
.LBB53_23:                              # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB53_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB53_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB53_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_23
.LBB53_26:                              # %for.end71
	jmp	.LBB53_43
.LBB53_27:                              # %sw.bb72
	movl	$0, -4(%rbp)
.LBB53_28:                              # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB53_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB53_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB53_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_28
.LBB53_31:                              # %for.end85
	jmp	.LBB53_43
.LBB53_32:                              # %sw.bb86
	movl	$0, -4(%rbp)
.LBB53_33:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB53_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB53_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB53_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_33
.LBB53_36:                              # %for.end99
	jmp	.LBB53_43
.LBB53_37:                              # %sw.bb100
	movl	$0, -4(%rbp)
.LBB53_38:                              # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB53_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB53_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB53_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_38
.LBB53_41:                              # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB53_43
.LBB53_42:                              # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB53_43:                              # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB53_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB53_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB53_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB53_70
.LBB53_47:                              # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB53_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB53_49:                              # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB53_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB53_49 Depth=1
	movl	$0, -4(%rbp)
.LBB53_51:                              # %for.cond131
                                        #   Parent Loop BB53_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB53_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB53_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB53_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB53_55
.LBB53_54:                              # %if.else174
                                        #   in Loop: Header=BB53_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB53_55:                              # %if.end195
                                        #   in Loop: Header=BB53_51 Depth=2
	jmp	.LBB53_56
.LBB53_56:                              # %for.inc196
                                        #   in Loop: Header=BB53_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_51
.LBB53_57:                              # %for.end198
                                        #   in Loop: Header=BB53_49 Depth=1
	jmp	.LBB53_58
.LBB53_58:                              # %for.inc199
                                        #   in Loop: Header=BB53_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_49
.LBB53_59:                              # %for.end201
	jmp	.LBB53_69
.LBB53_60:                              # %if.else202
	movl	$0, -8(%rbp)
.LBB53_61:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB53_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB53_61 Depth=1
	movl	$0, -4(%rbp)
.LBB53_63:                              # %for.cond207
                                        #   Parent Loop BB53_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB53_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB53_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_63
.LBB53_66:                              # %for.end227
                                        #   in Loop: Header=BB53_61 Depth=1
	jmp	.LBB53_67
.LBB53_67:                              # %for.inc228
                                        #   in Loop: Header=BB53_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_61
.LBB53_68:                              # %for.end230
	jmp	.LBB53_69
.LBB53_69:                              # %if.end231
	jmp	.LBB53_127
.LBB53_70:                              # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB53_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB53_72:                              # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB53_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB53_72 Depth=1
	movl	$0, -4(%rbp)
.LBB53_74:                              # %for.cond239
                                        #   Parent Loop BB53_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB53_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB53_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB53_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB53_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB53_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB53_105
.LBB53_78:                              # %if.else298
                                        #   in Loop: Header=BB53_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB53_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB53_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB53_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB53_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB53_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB53_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB53_90
.LBB53_82:                              # %land.lhs.true320
                                        #   in Loop: Header=BB53_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB53_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB53_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB53_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB53_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB53_90
.LBB53_85:                              # %land.lhs.true331
                                        #   in Loop: Header=BB53_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB53_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB53_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB53_90
.LBB53_87:                              # %land.lhs.true347
                                        #   in Loop: Header=BB53_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB53_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB53_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB53_90
.LBB53_89:                              # %if.then356
                                        #   in Loop: Header=BB53_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB53_104
.LBB53_90:                              # %if.else377
                                        #   in Loop: Header=BB53_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB53_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB53_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB53_96
.LBB53_92:                              # %land.lhs.true393
                                        #   in Loop: Header=BB53_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB53_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB53_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB53_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB53_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB53_96
.LBB53_95:                              # %cond.true404
                                        #   in Loop: Header=BB53_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB53_97
.LBB53_96:                              # %cond.false410
                                        #   in Loop: Header=BB53_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB53_97
.LBB53_97:                              # %cond.end411
                                        #   in Loop: Header=BB53_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB53_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB53_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB53_102
.LBB53_99:                              # %land.lhs.true439
                                        #   in Loop: Header=BB53_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB53_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB53_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB53_102
.LBB53_101:                             # %cond.true448
                                        #   in Loop: Header=BB53_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB53_103
.LBB53_102:                             # %cond.false454
                                        #   in Loop: Header=BB53_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB53_103
.LBB53_103:                             # %cond.end455
                                        #   in Loop: Header=BB53_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB53_104:                             # %if.end468
                                        #   in Loop: Header=BB53_74 Depth=2
	jmp	.LBB53_105
.LBB53_105:                             # %if.end469
                                        #   in Loop: Header=BB53_74 Depth=2
	jmp	.LBB53_106
.LBB53_106:                             # %for.inc470
                                        #   in Loop: Header=BB53_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_74
.LBB53_107:                             # %for.end472
                                        #   in Loop: Header=BB53_72 Depth=1
	jmp	.LBB53_108
.LBB53_108:                             # %for.inc473
                                        #   in Loop: Header=BB53_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_72
.LBB53_109:                             # %for.end475
	jmp	.LBB53_126
.LBB53_110:                             # %if.else476
	movl	$0, -8(%rbp)
.LBB53_111:                             # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB53_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB53_111 Depth=1
	movl	$0, -4(%rbp)
.LBB53_113:                             # %for.cond481
                                        #   Parent Loop BB53_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB53_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB53_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB53_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB53_120
.LBB53_116:                             # %land.lhs.true508
                                        #   in Loop: Header=BB53_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB53_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB53_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB53_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB53_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB53_120
.LBB53_119:                             # %cond.true519
                                        #   in Loop: Header=BB53_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB53_121
.LBB53_120:                             # %cond.false525
                                        #   in Loop: Header=BB53_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB53_121
.LBB53_121:                             # %cond.end526
                                        #   in Loop: Header=BB53_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB53_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_113
.LBB53_123:                             # %for.end541
                                        #   in Loop: Header=BB53_111 Depth=1
	jmp	.LBB53_124
.LBB53_124:                             # %for.inc542
                                        #   in Loop: Header=BB53_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_111
.LBB53_125:                             # %for.end544
	jmp	.LBB53_126
.LBB53_126:                             # %if.end545
	jmp	.LBB53_127
.LBB53_127:                             # %if.end546
	movl	$0, -8(%rbp)
.LBB53_128:                             # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB53_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB53_128 Depth=1
	movl	$0, -4(%rbp)
.LBB53_130:                             # %for.cond551
                                        #   Parent Loop BB53_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB53_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB53_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB53_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB53_134
.LBB53_133:                             # %cond.false584
                                        #   in Loop: Header=BB53_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB53_134
.LBB53_134:                             # %cond.end585
                                        #   in Loop: Header=BB53_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB53_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_130
.LBB53_136:                             # %for.end598
                                        #   in Loop: Header=BB53_128 Depth=1
	jmp	.LBB53_137
.LBB53_137:                             # %for.inc599
                                        #   in Loop: Header=BB53_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_128
.LBB53_138:                             # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB53_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB53_140:                             # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB53_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB53_140 Depth=1
	movl	$0, -4(%rbp)
.LBB53_142:                             # %for.cond608
                                        #   Parent Loop BB53_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB53_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB53_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB53_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB53_146
.LBB53_145:                             # %cond.false642
                                        #   in Loop: Header=BB53_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB53_146
.LBB53_146:                             # %cond.end643
                                        #   in Loop: Header=BB53_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB53_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_142
.LBB53_148:                             # %for.end657
                                        #   in Loop: Header=BB53_140 Depth=1
	jmp	.LBB53_149
.LBB53_149:                             # %for.inc658
                                        #   in Loop: Header=BB53_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_140
.LBB53_150:                             # %for.end660
	jmp	.LBB53_151
.LBB53_151:                             # %if.end661
	cmpl	$649397804, -36(%rbp)   # imm = 0x26B5062C
	jne	.LBB53_153
.LBB53_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_153:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_152
.Lfunc_end53:
	.size	SetModesAndRefframeForBlocks.24, .Lfunc_end53-SetModesAndRefframeForBlocks.24
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI53_0:
	.quad	.LBB53_9
	.quad	.LBB53_17
	.quad	.LBB53_17
	.quad	.LBB53_17
	.quad	.LBB53_42
	.quad	.LBB53_42
	.quad	.LBB53_42
	.quad	.LBB53_42
	.quad	.LBB53_22
	.quad	.LBB53_27
	.quad	.LBB53_32
	.quad	.LBB53_42
	.quad	.LBB53_42
	.quad	.LBB53_37
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.25
.LCPI54_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.25
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.25,@function
RDCost_for_macroblocks.25:              # @RDCost_for_macroblocks.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$2033657683, -100(%rbp) # imm = 0x79372753
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -20(%rbp)
	movq	%rsi, -120(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -28(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB54_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB54_3
.LBB54_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB54_3
.LBB54_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB54_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB54_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -72(%rbp)
	je	.LBB54_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -20(%rbp)
	jne	.LBB54_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -92(%rbp)
	movl	$0, -12(%rbp)
.LBB54_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_10 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB54_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB54_8 Depth=1
	movl	$0, -16(%rbp)
.LBB54_10:                              # %for.cond17
                                        #   Parent Loop BB54_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB54_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB54_10 Depth=2
	movq	direct_pdir, %rax
	movl	-96(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-92(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB54_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB54_177
.LBB54_13:                              # %if.end
                                        #   in Loop: Header=BB54_10 Depth=2
	jmp	.LBB54_14
.LBB54_14:                              # %for.inc
                                        #   in Loop: Header=BB54_10 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_10
.LBB54_15:                              # %for.end
                                        #   in Loop: Header=BB54_8 Depth=1
	jmp	.LBB54_16
.LBB54_16:                              # %for.inc30
                                        #   in Loop: Header=BB54_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_8
.LBB54_17:                              # %for.end32
	jmp	.LBB54_18
.LBB54_18:                              # %if.end33
	cmpl	$8, -20(%rbp)
	jge	.LBB54_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -20(%rbp)
	jne	.LBB54_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB54_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB54_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB54_177
.LBB54_23:                              # %if.end46
	jmp	.LBB54_76
.LBB54_24:                              # %if.else
	cmpl	$8, -20(%rbp)
	jne	.LBB54_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB54_75
.LBB54_26:                              # %if.else50
	cmpl	$9, -20(%rbp)
	jne	.LBB54_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-36(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB54_47
# %bb.28:                               # %if.then56
	movl	$0, -12(%rbp)
.LBB54_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_31 Depth 2
                                        #       Child Loop BB54_33 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB54_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB54_29 Depth=1
	movl	$0, -16(%rbp)
.LBB54_31:                              # %for.cond61
                                        #   Parent Loop BB54_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB54_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB54_31 Depth=2
	movl	$0, -24(%rbp)
.LBB54_33:                              # %for.cond65
                                        #   Parent Loop BB54_29 Depth=1
                                        #     Parent Loop BB54_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB54_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB54_33 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB54_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB54_33 Depth=3
	movl	$2, -40(%rbp)
.LBB54_36:                              # %if.end77
                                        #   in Loop: Header=BB54_33 Depth=3
	jmp	.LBB54_37
.LBB54_37:                              # %for.inc78
                                        #   in Loop: Header=BB54_33 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB54_33
.LBB54_38:                              # %for.end80
                                        #   in Loop: Header=BB54_31 Depth=2
	jmp	.LBB54_39
.LBB54_39:                              # %for.inc81
                                        #   in Loop: Header=BB54_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_31
.LBB54_40:                              # %for.end83
                                        #   in Loop: Header=BB54_29 Depth=1
	jmp	.LBB54_41
.LBB54_41:                              # %for.inc84
                                        #   in Loop: Header=BB54_29 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_29
.LBB54_42:                              # %for.end86
	movl	$0, -32(%rbp)
.LBB54_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -32(%rbp)
	jge	.LBB54_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB54_43 Depth=1
	movl	-32(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB54_43 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB54_43
.LBB54_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB54_47:                              # %if.end97
	jmp	.LBB54_74
.LBB54_48:                              # %if.else98
	cmpl	$10, -20(%rbp)
	jne	.LBB54_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB54_73
.LBB54_50:                              # %if.else102
	cmpl	$13, -20(%rbp)
	jne	.LBB54_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-36(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB54_71
# %bb.52:                               # %if.then110
	movl	$0, -12(%rbp)
.LBB54_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_55 Depth 2
                                        #       Child Loop BB54_57 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB54_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB54_53 Depth=1
	movl	$0, -16(%rbp)
.LBB54_55:                              # %for.cond115
                                        #   Parent Loop BB54_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_57 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB54_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB54_55 Depth=2
	movl	$0, -24(%rbp)
.LBB54_57:                              # %for.cond119
                                        #   Parent Loop BB54_53 Depth=1
                                        #     Parent Loop BB54_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB54_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB54_57 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB54_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB54_57 Depth=3
	movl	$2, -40(%rbp)
.LBB54_60:                              # %if.end131
                                        #   in Loop: Header=BB54_57 Depth=3
	jmp	.LBB54_61
.LBB54_61:                              # %for.inc132
                                        #   in Loop: Header=BB54_57 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB54_57
.LBB54_62:                              # %for.end134
                                        #   in Loop: Header=BB54_55 Depth=2
	jmp	.LBB54_63
.LBB54_63:                              # %for.inc135
                                        #   in Loop: Header=BB54_55 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_55
.LBB54_64:                              # %for.end137
                                        #   in Loop: Header=BB54_53 Depth=1
	jmp	.LBB54_65
.LBB54_65:                              # %for.inc138
                                        #   in Loop: Header=BB54_53 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_53
.LBB54_66:                              # %for.end140
	movl	$0, -32(%rbp)
.LBB54_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -32(%rbp)
	jge	.LBB54_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB54_67 Depth=1
	movl	-32(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB54_67 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB54_67
.LBB54_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB54_71:                              # %if.end152
	jmp	.LBB54_72
.LBB54_72:                              # %if.end153
	jmp	.LBB54_73
.LBB54_73:                              # %if.end154
	jmp	.LBB54_74
.LBB54_74:                              # %if.end155
	jmp	.LBB54_75
.LBB54_75:                              # %if.end156
	jmp	.LBB54_76
.LBB54_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB54_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB54_82
# %bb.78:                               # %if.then164
	cmpl	$10, -20(%rbp)
	jne	.LBB54_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB54_81
.LBB54_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB54_81
.LBB54_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB54_82:                              # %if.end171
	cmpl	$10, -20(%rbp)
	jne	.LBB54_92
# %bb.83:                               # %if.then174
	movl	$0, -12(%rbp)
.LBB54_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_86 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB54_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB54_84 Depth=1
	movl	$0, -16(%rbp)
.LBB54_86:                              # %for.cond179
                                        #   Parent Loop BB54_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB54_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB54_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB54_86 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_86
.LBB54_89:                              # %for.end196
                                        #   in Loop: Header=BB54_84 Depth=1
	jmp	.LBB54_90
.LBB54_90:                              # %for.inc197
                                        #   in Loop: Header=BB54_84 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_84
.LBB54_91:                              # %for.end199
	jmp	.LBB54_101
.LBB54_92:                              # %if.else200
	movl	$0, -12(%rbp)
.LBB54_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_95 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB54_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB54_93 Depth=1
	movl	$0, -16(%rbp)
.LBB54_95:                              # %for.cond205
                                        #   Parent Loop BB54_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB54_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB54_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB54_95 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_95
.LBB54_98:                              # %for.end220
                                        #   in Loop: Header=BB54_93 Depth=1
	jmp	.LBB54_99
.LBB54_99:                              # %for.inc221
                                        #   in Loop: Header=BB54_93 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_93
.LBB54_100:                             # %for.end223
	jmp	.LBB54_101
.LBB54_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB54_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -20(%rbp)
	je	.LBB54_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -20(%rbp)
	je	.LBB54_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -20(%rbp)
	je	.LBB54_107
.LBB54_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB54_107
# %bb.106:                              # %if.then238
	leaq	-36(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB54_107:                             # %if.end239
	cmpl	$10, -20(%rbp)
	jne	.LBB54_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB54_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB54_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB54_124
# %bb.111:                              # %if.then254
	movl	$0, -24(%rbp)
.LBB54_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_114 Depth 2
                                        #       Child Loop BB54_116 Depth 3
	movl	-24(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB54_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB54_112 Depth=1
	movl	-24(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -16(%rbp)
.LBB54_114:                             # %for.cond259
                                        #   Parent Loop BB54_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_116 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB54_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB54_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB54_116:                             # %for.cond263
                                        #   Parent Loop BB54_112 Depth=1
                                        #     Parent Loop BB54_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB54_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB54_116 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_116
.LBB54_119:                             # %for.end291
                                        #   in Loop: Header=BB54_114 Depth=2
	jmp	.LBB54_120
.LBB54_120:                             # %for.inc292
                                        #   in Loop: Header=BB54_114 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_114
.LBB54_121:                             # %for.end294
                                        #   in Loop: Header=BB54_112 Depth=1
	jmp	.LBB54_122
.LBB54_122:                             # %for.inc295
                                        #   in Loop: Header=BB54_112 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB54_112
.LBB54_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB54_133
.LBB54_124:                             # %if.else300
	movl	$0, -16(%rbp)
.LBB54_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_127 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB54_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB54_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB54_127:                             # %for.cond306
                                        #   Parent Loop BB54_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB54_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB54_127 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_127
.LBB54_130:                             # %for.end334
                                        #   in Loop: Header=BB54_125 Depth=1
	jmp	.LBB54_131
.LBB54_131:                             # %for.inc335
                                        #   in Loop: Header=BB54_125 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_125
.LBB54_132:                             # %for.end337
	jmp	.LBB54_133
.LBB54_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB54_143
# %bb.134:                              # %if.then342
	movl	$0, -16(%rbp)
.LBB54_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_137 Depth 2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB54_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB54_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB54_137:                             # %for.cond347
                                        #   Parent Loop BB54_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB54_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB54_137 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_137
.LBB54_140:                             # %for.end398
                                        #   in Loop: Header=BB54_135 Depth=1
	jmp	.LBB54_141
.LBB54_141:                             # %for.inc399
                                        #   in Loop: Header=BB54_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_135
.LBB54_142:                             # %for.end401
	jmp	.LBB54_143
.LBB54_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -104(%rbp)
	je	.LBB54_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB54_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -72(%rbp)
	je	.LBB54_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB54_148
.LBB54_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -28(%rbp)
	movl	-76(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB54_149
.LBB54_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-36(%rbp), %esi
	leaq	-28(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-36(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
.LBB54_149:                             # %if.end422
	jmp	.LBB54_151
.LBB54_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -28(%rbp)
.LBB54_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI54_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB54_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI54_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB54_154
.LBB54_153:                             # %cond.false431
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm2
.LBB54_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -112(%rbp)
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-120(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB54_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB54_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB54_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB54_159
.LBB54_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB54_177
.LBB54_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB54_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -20(%rbp)
	je	.LBB54_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB54_165
	jmp	.LBB54_176
.LBB54_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB54_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB54_176
	jmp	.LBB54_165
.LBB54_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB54_165
	jmp	.LBB54_176
.LBB54_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB54_175
# %bb.166:                              # %if.then465
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB54_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB54_171
	jmp	.LBB54_174
.LBB54_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB54_170
# %bb.169:                              # %cond.true473
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB54_174
	jmp	.LBB54_171
.LBB54_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB54_171
	jmp	.LBB54_174
.LBB54_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB54_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB54_177
.LBB54_173:                             # %if.end482
	jmp	.LBB54_174
.LBB54_174:                             # %if.end483
	jmp	.LBB54_175
.LBB54_175:                             # %if.end484
	jmp	.LBB54_176
.LBB54_176:                             # %if.end485
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-120(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB54_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$2033657683, -100(%rbp) # imm = 0x79372753
	jne	.LBB54_179
.LBB54_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_178
.Lfunc_end54:
	.size	RDCost_for_macroblocks.25, .Lfunc_end54-RDCost_for_macroblocks.25
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.26
.LCPI55_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI55_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.26
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.26,@function
Mode_Decision_for_8x8IntraBlocks.26:    # @Mode_Decision_for_8x8IntraBlocks.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI55_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI55_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$597578245, -24(%rbp)   # imm = 0x239E5205
	movl	%edi, -28(%rbp)
	vmovsd	%xmm0, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-40(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB55_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-28(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB55_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$1, -16(%rbp)
.LBB55_4:                               # %if.end
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-48(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_1
.LBB55_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$597578245, -24(%rbp)   # imm = 0x239E5205
	jne	.LBB55_8
.LBB55_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_7
.Lfunc_end55:
	.size	Mode_Decision_for_8x8IntraBlocks.26, .Lfunc_end55-Mode_Decision_for_8x8IntraBlocks.26
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.27       # -- Begin function UpdatePixelMap.27
	.p2align	4, 0x90
	.type	UpdatePixelMap.27,@function
UpdatePixelMap.27:                      # @UpdatePixelMap.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$872922148, -28(%rbp)   # imm = 0x3407BC24
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB56_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_4 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB56_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB56_2 Depth=1
	movl	$0, -4(%rbp)
.LBB56_4:                               # %for.cond2
                                        #   Parent Loop BB56_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB56_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB56_4 Depth=2
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB56_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_4
.LBB56_7:                               # %for.end
                                        #   in Loop: Header=BB56_2 Depth=1
	jmp	.LBB56_8
.LBB56_8:                               # %for.inc7
                                        #   in Loop: Header=BB56_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_2
.LBB56_9:                               # %for.end9
	jmp	.LBB56_41
.LBB56_10:                              # %if.else
	movl	$0, -16(%rbp)
.LBB56_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_13 Depth 2
                                        #       Child Loop BB56_16 Depth 3
                                        #         Child Loop BB56_18 Depth 4
                                        #       Child Loop BB56_25 Depth 3
                                        #         Child Loop BB56_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB56_11 Depth=1
	movl	$0, -12(%rbp)
.LBB56_13:                              # %for.cond14
                                        #   Parent Loop BB56_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_16 Depth 3
                                        #         Child Loop BB56_18 Depth 4
                                        #       Child Loop BB56_25 Depth 3
                                        #         Child Loop BB56_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB56_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movq	refresh_map, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB56_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB56_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB56_16:                              # %for.cond27
                                        #   Parent Loop BB56_11 Depth=1
                                        #     Parent Loop BB56_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_18 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB56_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB56_16 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB56_18:                              # %for.cond31
                                        #   Parent Loop BB56_11 Depth=1
                                        #     Parent Loop BB56_13 Depth=2
                                        #       Parent Loop BB56_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB56_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB56_18 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB56_18 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_18
.LBB56_21:                              # %for.end40
                                        #   in Loop: Header=BB56_16 Depth=3
	jmp	.LBB56_22
.LBB56_22:                              # %for.inc41
                                        #   in Loop: Header=BB56_16 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_16
.LBB56_23:                              # %for.end43
                                        #   in Loop: Header=BB56_13 Depth=2
	jmp	.LBB56_36
.LBB56_24:                              # %if.else44
                                        #   in Loop: Header=BB56_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB56_25:                              # %for.cond46
                                        #   Parent Loop BB56_11 Depth=1
                                        #     Parent Loop BB56_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_27 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB56_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB56_25 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB56_27:                              # %for.cond50
                                        #   Parent Loop BB56_11 Depth=1
                                        #     Parent Loop BB56_13 Depth=2
                                        #       Parent Loop BB56_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB56_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB56_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB56_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB56_31
.LBB56_30:                              # %cond.false
                                        #   in Loop: Header=BB56_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB56_31:                              # %cond.end
                                        #   in Loop: Header=BB56_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB56_27 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_27
.LBB56_33:                              # %for.end76
                                        #   in Loop: Header=BB56_25 Depth=3
	jmp	.LBB56_34
.LBB56_34:                              # %for.inc77
                                        #   in Loop: Header=BB56_25 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_25
.LBB56_35:                              # %for.end79
                                        #   in Loop: Header=BB56_13 Depth=2
	jmp	.LBB56_36
.LBB56_36:                              # %if.end
                                        #   in Loop: Header=BB56_13 Depth=2
	jmp	.LBB56_37
.LBB56_37:                              # %for.inc80
                                        #   in Loop: Header=BB56_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_13
.LBB56_38:                              # %for.end82
                                        #   in Loop: Header=BB56_11 Depth=1
	jmp	.LBB56_39
.LBB56_39:                              # %for.inc83
                                        #   in Loop: Header=BB56_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_11
.LBB56_40:                              # %for.end85
	jmp	.LBB56_41
.LBB56_41:                              # %if.end86
	cmpl	$872922148, -28(%rbp)   # imm = 0x3407BC24
	jne	.LBB56_43
.LBB56_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_42
.Lfunc_end56:
	.size	UpdatePixelMap.27, .Lfunc_end56-UpdatePixelMap.27
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.28 # -- Begin function Intra16x16_Mode_Decision.28
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.28,@function
Intra16x16_Mode_Decision.28:            # @Intra16x16_Mode_Decision.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$385033754, -56(%rbp)   # imm = 0x16F3261A
	movq	%rdi, -72(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -64(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB57_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB57_2:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB57_12
# %bb.3:                                # %if.then3
	movl	$0, -8(%rbp)
.LBB57_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_6 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB57_4 Depth=1
	movl	$0, -4(%rbp)
.LBB57_6:                               # %for.cond4
                                        #   Parent Loop BB57_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB57_6 Depth=2
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-32(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB57_6 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_6
.LBB57_9:                               # %for.end
                                        #   in Loop: Header=BB57_4 Depth=1
	jmp	.LBB57_10
.LBB57_10:                              # %for.inc87
                                        #   in Loop: Header=BB57_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_4
.LBB57_11:                              # %for.end89
	jmp	.LBB57_12
.LBB57_12:                              # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-72(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB57_73
# %bb.13:                               # %if.then94
	movl	$0, -8(%rbp)
.LBB57_14:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_16 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB57_14 Depth=1
	movl	$0, -4(%rbp)
.LBB57_16:                              # %for.cond99
                                        #   Parent Loop BB57_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB57_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB57_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_16
.LBB57_19:                              # %for.end123
                                        #   in Loop: Header=BB57_14 Depth=1
	jmp	.LBB57_20
.LBB57_20:                              # %for.inc124
                                        #   in Loop: Header=BB57_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_14
.LBB57_21:                              # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB57_22:                              # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_24 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB57_22 Depth=1
	movl	$0, -4(%rbp)
.LBB57_24:                              # %for.cond132
                                        #   Parent Loop BB57_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB57_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB57_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_24
.LBB57_27:                              # %for.end156
                                        #   in Loop: Header=BB57_22 Depth=1
	jmp	.LBB57_28
.LBB57_28:                              # %for.inc157
                                        #   in Loop: Header=BB57_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_22
.LBB57_29:                              # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB57_30:                              # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_32 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB57_30 Depth=1
	movl	$0, -4(%rbp)
.LBB57_32:                              # %for.cond165
                                        #   Parent Loop BB57_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB57_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB57_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_32
.LBB57_35:                              # %for.end180
                                        #   in Loop: Header=BB57_30 Depth=1
	jmp	.LBB57_36
.LBB57_36:                              # %for.inc181
                                        #   in Loop: Header=BB57_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_30
.LBB57_37:                              # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-72(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -8(%rbp)
.LBB57_38:                              # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_40 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB57_38 Depth=1
	movl	$0, -4(%rbp)
.LBB57_40:                              # %for.cond190
                                        #   Parent Loop BB57_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB57_40 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -32(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB57_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB57_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB57_44
.LBB57_43:                              # %cond.false
                                        #   in Loop: Header=BB57_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB57_44:                              # %cond.end
                                        #   in Loop: Header=BB57_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB57_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB57_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB57_50
.LBB57_46:                              # %cond.false246
                                        #   in Loop: Header=BB57_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB57_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB57_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB57_49
.LBB57_48:                              # %cond.false260
                                        #   in Loop: Header=BB57_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB57_49:                              # %cond.end271
                                        #   in Loop: Header=BB57_40 Depth=2
.LBB57_50:                              # %cond.end273
                                        #   in Loop: Header=BB57_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-28(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-20(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-32(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB57_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB57_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB57_53
.LBB57_52:                              # %cond.false295
                                        #   in Loop: Header=BB57_40 Depth=2
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB57_53:                              # %cond.end305
                                        #   in Loop: Header=BB57_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB57_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB57_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB57_59
.LBB57_55:                              # %cond.false311
                                        #   in Loop: Header=BB57_40 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB57_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB57_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB57_58
.LBB57_57:                              # %cond.false324
                                        #   in Loop: Header=BB57_40 Depth=2
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB57_58:                              # %cond.end334
                                        #   in Loop: Header=BB57_40 Depth=2
.LBB57_59:                              # %cond.end336
                                        #   in Loop: Header=BB57_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-28(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-20(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-24(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB57_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB57_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB57_62
.LBB57_61:                              # %cond.false359
                                        #   in Loop: Header=BB57_40 Depth=2
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB57_62:                              # %cond.end370
                                        #   in Loop: Header=BB57_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB57_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB57_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB57_68
.LBB57_64:                              # %cond.false376
                                        #   in Loop: Header=BB57_40 Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB57_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB57_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB57_67
.LBB57_66:                              # %cond.false390
                                        #   in Loop: Header=BB57_40 Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB57_67:                              # %cond.end401
                                        #   in Loop: Header=BB57_40 Depth=2
.LBB57_68:                              # %cond.end403
                                        #   in Loop: Header=BB57_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-20(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB57_40 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_40
.LBB57_70:                              # %for.end416
                                        #   in Loop: Header=BB57_38 Depth=1
	jmp	.LBB57_71
.LBB57_71:                              # %for.inc417
                                        #   in Loop: Header=BB57_38 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_38
.LBB57_72:                              # %for.end419
	jmp	.LBB57_73
.LBB57_73:                              # %if.end420
	cmpl	$385033754, -56(%rbp)   # imm = 0x16F3261A
	jne	.LBB57_75
.LBB57_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_74
.Lfunc_end57:
	.size	Intra16x16_Mode_Decision.28, .Lfunc_end57-Intra16x16_Mode_Decision.28
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.29 # -- Begin function set_stored_macroblock_parameters.29
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.29,@function
set_stored_macroblock_parameters.29:    # @set_stored_macroblock_parameters.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1861713557, -52(%rbp)  # imm = 0x6EF77E95
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB58_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB58_4
.LBB58_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB58_4
.LBB58_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB58_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB58_5 Depth=1
	movl	$0, -4(%rbp)
.LBB58_7:                               # %for.cond9
                                        #   Parent Loop BB58_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB58_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-96(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB58_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_10:                              # %if.end
                                        #   in Loop: Header=BB58_7 Depth=2
	jmp	.LBB58_11
.LBB58_11:                              # %for.inc
                                        #   in Loop: Header=BB58_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_7
.LBB58_12:                              # %for.end
                                        #   in Loop: Header=BB58_5 Depth=1
	jmp	.LBB58_13
.LBB58_13:                              # %for.inc33
                                        #   in Loop: Header=BB58_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_5
.LBB58_14:                              # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB58_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB58_16:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB58_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB58_16 Depth=1
	movl	$0, -4(%rbp)
.LBB58_18:                              # %for.cond43
                                        #   Parent Loop BB58_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB58_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB58_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-80(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-80(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB58_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_21:                              # %if.end92
                                        #   in Loop: Header=BB58_18 Depth=2
	jmp	.LBB58_22
.LBB58_22:                              # %for.inc93
                                        #   in Loop: Header=BB58_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_18
.LBB58_23:                              # %for.end95
                                        #   in Loop: Header=BB58_16 Depth=1
	jmp	.LBB58_24
.LBB58_24:                              # %for.inc96
                                        #   in Loop: Header=BB58_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_16
.LBB58_25:                              # %for.end98
	jmp	.LBB58_26
.LBB58_26:                              # %if.end99
	movq	cofAC, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-88(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-104(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB58_28:                              # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_30 Depth 2
                                        #       Child Loop BB58_32 Depth 3
                                        #         Child Loop BB58_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB58_28 Depth=1
	movl	$0, -8(%rbp)
.LBB58_30:                              # %for.cond118
                                        #   Parent Loop BB58_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_32 Depth 3
                                        #         Child Loop BB58_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB58_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB58_30 Depth=2
	movl	$0, -12(%rbp)
.LBB58_32:                              # %for.cond122
                                        #   Parent Loop BB58_28 Depth=1
                                        #     Parent Loop BB58_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB58_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB58_32 Depth=3
	movl	$0, -28(%rbp)
.LBB58_34:                              # %for.cond126
                                        #   Parent Loop BB58_28 Depth=1
                                        #     Parent Loop BB58_30 Depth=2
                                        #       Parent Loop BB58_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB58_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB58_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB58_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB58_34
.LBB58_37:                              # %for.end150
                                        #   in Loop: Header=BB58_32 Depth=3
	jmp	.LBB58_38
.LBB58_38:                              # %for.inc151
                                        #   in Loop: Header=BB58_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_32
.LBB58_39:                              # %for.end153
                                        #   in Loop: Header=BB58_30 Depth=2
	jmp	.LBB58_40
.LBB58_40:                              # %for.inc154
                                        #   in Loop: Header=BB58_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_30
.LBB58_41:                              # %for.end156
                                        #   in Loop: Header=BB58_28 Depth=1
	jmp	.LBB58_42
.LBB58_42:                              # %for.inc157
                                        #   in Loop: Header=BB58_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_28
.LBB58_43:                              # %for.end159
	movl	$0, -4(%rbp)
.LBB58_44:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_46 Depth 2
                                        #       Child Loop BB58_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB58_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB58_44 Depth=1
	movl	$0, -12(%rbp)
.LBB58_46:                              # %for.cond164
                                        #   Parent Loop BB58_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB58_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB58_46 Depth=2
	movl	$0, -28(%rbp)
.LBB58_48:                              # %for.cond168
                                        #   Parent Loop BB58_44 Depth=1
                                        #     Parent Loop BB58_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB58_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB58_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB58_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB58_48
.LBB58_51:                              # %for.end188
                                        #   in Loop: Header=BB58_46 Depth=2
	jmp	.LBB58_52
.LBB58_52:                              # %for.inc189
                                        #   in Loop: Header=BB58_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_46
.LBB58_53:                              # %for.end191
                                        #   in Loop: Header=BB58_44 Depth=1
	jmp	.LBB58_54
.LBB58_54:                              # %for.inc192
                                        #   in Loop: Header=BB58_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_44
.LBB58_55:                              # %for.end194
	jmp	.LBB58_56
.LBB58_56:                              # %if.end195
	movl	$0, -4(%rbp)
.LBB58_57:                              # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB58_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB58_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB58_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB58_60:                              # %if.end225
                                        #   in Loop: Header=BB58_57 Depth=1
	jmp	.LBB58_61
.LBB58_61:                              # %for.inc226
                                        #   in Loop: Header=BB58_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_57
.LBB58_62:                              # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB58_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB58_65
.LBB58_64:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB58_65:                              # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB58_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB58_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB58_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB58_69:                              # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB58_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB58_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB58_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB58_74
.LBB58_73:                              # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB58_74:                              # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB58_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB58_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB58_77:                              # %if.end271
	movl	$0, -8(%rbp)
.LBB58_78:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB58_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB58_78 Depth=1
	movl	$0, -4(%rbp)
.LBB58_80:                              # %for.cond276
                                        #   Parent Loop BB58_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB58_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB58_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB58_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB58_88
.LBB58_85:                              # %if.then299
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB58_87:                              # %if.end345
                                        #   in Loop: Header=BB58_80 Depth=2
	jmp	.LBB58_101
.LBB58_88:                              # %if.else346
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB58_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB58_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB58_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB58_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB58_94
.LBB58_93:                              # %cond.false368
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB58_94:                              # %cond.end369
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	%rax, -64(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB58_96:                              # %if.end458
                                        #   in Loop: Header=BB58_80 Depth=2
	jmp	.LBB58_100
.LBB58_97:                              # %if.else459
                                        #   in Loop: Header=BB58_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB58_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB58_99:                              # %if.end578
                                        #   in Loop: Header=BB58_80 Depth=2
	jmp	.LBB58_100
.LBB58_100:                             # %if.end579
                                        #   in Loop: Header=BB58_80 Depth=2
	jmp	.LBB58_101
.LBB58_101:                             # %if.end580
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB58_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB58_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB58_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB58_108
.LBB58_105:                             # %if.then602
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB58_107:                             # %if.end654
                                        #   in Loop: Header=BB58_80 Depth=2
	jmp	.LBB58_108
.LBB58_108:                             # %if.end655
                                        #   in Loop: Header=BB58_80 Depth=2
	jmp	.LBB58_109
.LBB58_109:                             # %for.inc656
                                        #   in Loop: Header=BB58_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_80
.LBB58_110:                             # %for.end658
                                        #   in Loop: Header=BB58_78 Depth=1
	jmp	.LBB58_111
.LBB58_111:                             # %for.inc659
                                        #   in Loop: Header=BB58_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_78
.LBB58_112:                             # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB58_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB58_114:                             # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB58_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB58_114 Depth=1
	movl	$0, -4(%rbp)
.LBB58_116:                             # %for.cond668
                                        #   Parent Loop BB58_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB58_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB58_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB58_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB58_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB58_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB58_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB58_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB58_124
.LBB58_121:                             # %if.then693
                                        #   in Loop: Header=BB58_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB58_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB58_123:                             # %if.end745
                                        #   in Loop: Header=BB58_116 Depth=2
	jmp	.LBB58_137
.LBB58_124:                             # %if.else746
                                        #   in Loop: Header=BB58_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB58_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB58_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB58_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB58_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB58_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB58_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB58_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB58_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB58_130
.LBB58_129:                             # %cond.false770
                                        #   in Loop: Header=BB58_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB58_130:                             # %cond.end772
                                        #   in Loop: Header=BB58_116 Depth=2
	movq	%rax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB58_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB58_132:                             # %if.end862
                                        #   in Loop: Header=BB58_116 Depth=2
	jmp	.LBB58_136
.LBB58_133:                             # %if.else863
                                        #   in Loop: Header=BB58_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB58_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB58_135:                             # %if.end983
                                        #   in Loop: Header=BB58_116 Depth=2
	jmp	.LBB58_136
.LBB58_136:                             # %if.end984
                                        #   in Loop: Header=BB58_116 Depth=2
	jmp	.LBB58_137
.LBB58_137:                             # %if.end985
                                        #   in Loop: Header=BB58_116 Depth=2
	jmp	.LBB58_138
.LBB58_138:                             # %for.inc986
                                        #   in Loop: Header=BB58_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_116
.LBB58_139:                             # %for.end988
                                        #   in Loop: Header=BB58_114 Depth=1
	jmp	.LBB58_140
.LBB58_140:                             # %for.inc989
                                        #   in Loop: Header=BB58_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_114
.LBB58_141:                             # %for.end991
	jmp	.LBB58_142
.LBB58_142:                             # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB58_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB58_144:                             # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB58_144 Depth=1
	movl	$0, -8(%rbp)
.LBB58_146:                             # %for.cond1002
                                        #   Parent Loop BB58_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB58_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB58_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_146
.LBB58_149:                             # %for.end1030
                                        #   in Loop: Header=BB58_144 Depth=1
	jmp	.LBB58_150
.LBB58_150:                             # %for.inc1031
                                        #   in Loop: Header=BB58_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_144
.LBB58_151:                             # %for.end1033
	jmp	.LBB58_175
.LBB58_152:                             # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB58_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB58_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB58_155:                             # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB58_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB58_157:                             # %for.cond1049
                                        #   Parent Loop BB58_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB58_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB58_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_157
.LBB58_160:                             # %for.end1065
                                        #   in Loop: Header=BB58_155 Depth=1
	jmp	.LBB58_161
.LBB58_161:                             # %for.inc1066
                                        #   in Loop: Header=BB58_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_155
.LBB58_162:                             # %for.end1068
	jmp	.LBB58_174
.LBB58_163:                             # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB58_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB58_165:                             # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB58_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB58_167:                             # %for.cond1081
                                        #   Parent Loop BB58_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB58_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB58_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_167
.LBB58_170:                             # %for.end1101
                                        #   in Loop: Header=BB58_165 Depth=1
	jmp	.LBB58_171
.LBB58_171:                             # %for.inc1102
                                        #   in Loop: Header=BB58_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_165
.LBB58_172:                             # %for.end1104
	jmp	.LBB58_173
.LBB58_173:                             # %if.end1105
	jmp	.LBB58_174
.LBB58_174:                             # %if.end1106
	jmp	.LBB58_175
.LBB58_175:                             # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB58_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB58_177:                             # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB58_177 Depth=1
	movl	$0, -8(%rbp)
.LBB58_179:                             # %for.cond1116
                                        #   Parent Loop BB58_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB58_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB58_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB58_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_179
.LBB58_182:                             # %for.end1141
                                        #   in Loop: Header=BB58_177 Depth=1
	jmp	.LBB58_183
.LBB58_183:                             # %for.inc1142
                                        #   in Loop: Header=BB58_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_177
.LBB58_184:                             # %for.end1144
	jmp	.LBB58_185
.LBB58_185:                             # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB58_187:                             # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB58_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB58_189:                             # %for.cond1157
                                        #   Parent Loop BB58_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB58_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB58_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_189
.LBB58_192:                             # %for.end1181
                                        #   in Loop: Header=BB58_187 Depth=1
	jmp	.LBB58_193
.LBB58_193:                             # %for.inc1182
                                        #   in Loop: Header=BB58_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_187
.LBB58_194:                             # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB58_195:                             # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$1861713557, -52(%rbp)  # imm = 0x6EF77E95
	jne	.LBB58_197
.LBB58_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_197:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_196
.Lfunc_end58:
	.size	set_stored_macroblock_parameters.29, .Lfunc_end58-set_stored_macroblock_parameters.29
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.30 # -- Begin function StoreNewMotionVectorsBlock8x8.30
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.30,@function
StoreNewMotionVectorsBlock8x8.30:       # @StoreNewMotionVectorsBlock8x8.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1973232124, -72(%rbp)  # imm = 0x759D21FC
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -24(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB59_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB59_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB59_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_4:                               # %for.cond6
                                        #   Parent Loop BB59_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB59_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB59_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_4
.LBB59_7:                               # %for.end
                                        #   in Loop: Header=BB59_2 Depth=1
	jmp	.LBB59_8
.LBB59_8:                               # %for.inc39
                                        #   in Loop: Header=BB59_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_2
.LBB59_9:                               # %for.end41
	jmp	.LBB59_61
.LBB59_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB59_20
# %bb.11:                               # %if.then42
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_14 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB59_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB59_12 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_14:                              # %for.cond46
                                        #   Parent Loop BB59_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB59_14 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB59_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_14
.LBB59_17:                              # %for.end119
                                        #   in Loop: Header=BB59_12 Depth=1
	jmp	.LBB59_18
.LBB59_18:                              # %for.inc120
                                        #   in Loop: Header=BB59_12 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_12
.LBB59_19:                              # %for.end122
	jmp	.LBB59_61
.LBB59_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB59_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB59_31
.LBB59_22:                              # %if.then125
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_25 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB59_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_25:                              # %for.cond129
                                        #   Parent Loop BB59_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB59_25 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB59_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_25
.LBB59_28:                              # %for.end206
                                        #   in Loop: Header=BB59_23 Depth=1
	jmp	.LBB59_29
.LBB59_29:                              # %for.inc207
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_23
.LBB59_30:                              # %for.end209
	jmp	.LBB59_40
.LBB59_31:                              # %if.else210
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB59_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB59_32 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_34:                              # %for.cond214
                                        #   Parent Loop BB59_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB59_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB59_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_34
.LBB59_37:                              # %for.end235
                                        #   in Loop: Header=BB59_32 Depth=1
	jmp	.LBB59_38
.LBB59_38:                              # %for.inc236
                                        #   in Loop: Header=BB59_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_32
.LBB59_39:                              # %for.end238
	jmp	.LBB59_40
.LBB59_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB59_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB59_51
.LBB59_42:                              # %if.then243
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_45 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB59_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB59_43 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_45:                              # %for.cond247
                                        #   Parent Loop BB59_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB59_45 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB59_45 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_45
.LBB59_48:                              # %for.end324
                                        #   in Loop: Header=BB59_43 Depth=1
	jmp	.LBB59_49
.LBB59_49:                              # %for.inc325
                                        #   in Loop: Header=BB59_43 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_43
.LBB59_50:                              # %for.end327
	jmp	.LBB59_60
.LBB59_51:                              # %if.else328
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB59_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB59_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_54:                              # %for.cond332
                                        #   Parent Loop BB59_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB59_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB59_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_54
.LBB59_57:                              # %for.end353
                                        #   in Loop: Header=BB59_52 Depth=1
	jmp	.LBB59_58
.LBB59_58:                              # %for.inc354
                                        #   in Loop: Header=BB59_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_52
.LBB59_59:                              # %for.end356
	jmp	.LBB59_60
.LBB59_60:                              # %if.end357
	jmp	.LBB59_61
.LBB59_61:                              # %if.end358
	cmpl	$1973232124, -72(%rbp)  # imm = 0x759D21FC
	jne	.LBB59_63
.LBB59_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_62
.Lfunc_end59:
	.size	StoreNewMotionVectorsBlock8x8.30, .Lfunc_end59-StoreNewMotionVectorsBlock8x8.30
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.31 # -- Begin function RDCost_for_4x4Blocks_Chroma.31
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.31,@function
RDCost_for_4x4Blocks_Chroma.31:         # @RDCost_for_4x4Blocks_Chroma.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1447232769, -56(%rbp)  # imm = 0x56430501
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB60_2
# %bb.1:                                # %if.then
	movl	$1, -28(%rbp)
	jmp	.LBB60_3
.LBB60_2:                               # %if.else
	movl	$0, -28(%rbp)
.LBB60_3:                               # %if.end
	movl	-60(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB60_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB60_18
.LBB60_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -32(%rbp)
.LBB60_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -32(%rbp)
	jge	.LBB60_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB60_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB60_8:                               # %land.end
                                        #   in Loop: Header=BB60_6 Depth=1
	testb	$1, %al
	jne	.LBB60_9
	jmp	.LBB60_17
.LBB60_9:                               # %for.body
                                        #   in Loop: Header=BB60_6 Depth=1
	movq	-80(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-96(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB60_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB60_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB60_12
.LBB60_11:                              # %if.else54
                                        #   in Loop: Header=BB60_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB60_12:                              # %if.end55
                                        #   in Loop: Header=BB60_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB60_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB60_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB60_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB60_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB60_15:                              # %lor.end
                                        #   in Loop: Header=BB60_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB60_6 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB60_6
.LBB60_17:                              # %for.end
	jmp	.LBB60_18
.LBB60_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$1447232769, -56(%rbp)  # imm = 0x56430501
	jne	.LBB60_20
.LBB60_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_19
.Lfunc_end60:
	.size	RDCost_for_4x4Blocks_Chroma.31, .Lfunc_end60-RDCost_for_4x4Blocks_Chroma.31
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.32       # -- Begin function UpdatePixelMap.32
	.p2align	4, 0x90
	.type	UpdatePixelMap.32,@function
UpdatePixelMap.32:                      # @UpdatePixelMap.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$562053234, -28(%rbp)   # imm = 0x21804072
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB61_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_4 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB61_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB61_2 Depth=1
	movl	$0, -4(%rbp)
.LBB61_4:                               # %for.cond2
                                        #   Parent Loop BB61_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB61_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB61_4 Depth=2
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB61_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_4
.LBB61_7:                               # %for.end
                                        #   in Loop: Header=BB61_2 Depth=1
	jmp	.LBB61_8
.LBB61_8:                               # %for.inc7
                                        #   in Loop: Header=BB61_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_2
.LBB61_9:                               # %for.end9
	jmp	.LBB61_41
.LBB61_10:                              # %if.else
	movl	$0, -16(%rbp)
.LBB61_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_13 Depth 2
                                        #       Child Loop BB61_16 Depth 3
                                        #         Child Loop BB61_18 Depth 4
                                        #       Child Loop BB61_25 Depth 3
                                        #         Child Loop BB61_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB61_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB61_11 Depth=1
	movl	$0, -12(%rbp)
.LBB61_13:                              # %for.cond14
                                        #   Parent Loop BB61_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_16 Depth 3
                                        #         Child Loop BB61_18 Depth 4
                                        #       Child Loop BB61_25 Depth 3
                                        #         Child Loop BB61_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB61_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB61_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movq	refresh_map, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB61_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB61_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB61_16:                              # %for.cond27
                                        #   Parent Loop BB61_11 Depth=1
                                        #     Parent Loop BB61_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_18 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB61_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB61_16 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB61_18:                              # %for.cond31
                                        #   Parent Loop BB61_11 Depth=1
                                        #     Parent Loop BB61_13 Depth=2
                                        #       Parent Loop BB61_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB61_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB61_18 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB61_18 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_18
.LBB61_21:                              # %for.end40
                                        #   in Loop: Header=BB61_16 Depth=3
	jmp	.LBB61_22
.LBB61_22:                              # %for.inc41
                                        #   in Loop: Header=BB61_16 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_16
.LBB61_23:                              # %for.end43
                                        #   in Loop: Header=BB61_13 Depth=2
	jmp	.LBB61_36
.LBB61_24:                              # %if.else44
                                        #   in Loop: Header=BB61_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB61_25:                              # %for.cond46
                                        #   Parent Loop BB61_11 Depth=1
                                        #     Parent Loop BB61_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_27 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB61_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB61_25 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB61_27:                              # %for.cond50
                                        #   Parent Loop BB61_11 Depth=1
                                        #     Parent Loop BB61_13 Depth=2
                                        #       Parent Loop BB61_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB61_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB61_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB61_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB61_31
.LBB61_30:                              # %cond.false
                                        #   in Loop: Header=BB61_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB61_31:                              # %cond.end
                                        #   in Loop: Header=BB61_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB61_27 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_27
.LBB61_33:                              # %for.end76
                                        #   in Loop: Header=BB61_25 Depth=3
	jmp	.LBB61_34
.LBB61_34:                              # %for.inc77
                                        #   in Loop: Header=BB61_25 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_25
.LBB61_35:                              # %for.end79
                                        #   in Loop: Header=BB61_13 Depth=2
	jmp	.LBB61_36
.LBB61_36:                              # %if.end
                                        #   in Loop: Header=BB61_13 Depth=2
	jmp	.LBB61_37
.LBB61_37:                              # %for.inc80
                                        #   in Loop: Header=BB61_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_13
.LBB61_38:                              # %for.end82
                                        #   in Loop: Header=BB61_11 Depth=1
	jmp	.LBB61_39
.LBB61_39:                              # %for.inc83
                                        #   in Loop: Header=BB61_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_11
.LBB61_40:                              # %for.end85
	jmp	.LBB61_41
.LBB61_41:                              # %if.end86
	cmpl	$562053234, -28(%rbp)   # imm = 0x21804072
	jne	.LBB61_43
.LBB61_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_42
.Lfunc_end61:
	.size	UpdatePixelMap.32, .Lfunc_end61-UpdatePixelMap.32
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.33 # -- Begin function SetModesAndRefframeForBlocks.33
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.33,@function
SetModesAndRefframeForBlocks.33:        # @SetModesAndRefframeForBlocks.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1550665042, -40(%rbp)  # imm = 0x5C6D4552
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB62_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB62_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB62_4
.LBB62_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB62_4
.LBB62_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB62_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB62_7
.LBB62_6:                               # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB62_7:                               # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB62_42
# %bb.8:                                # %if.end
	movq	.LJTI62_0(,%rax,8), %rax
	jmpq	*%rax
.LBB62_9:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB62_10:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB62_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB62_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB62_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB62_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB62_14
.LBB62_13:                              # %cond.false26
                                        #   in Loop: Header=BB62_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB62_14
.LBB62_14:                              # %cond.end27
                                        #   in Loop: Header=BB62_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB62_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_10
.LBB62_16:                              # %for.end
	jmp	.LBB62_43
.LBB62_17:                              # %sw.bb31
	movl	$0, -4(%rbp)
.LBB62_18:                              # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB62_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB62_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB62_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_18
.LBB62_21:                              # %for.end49
	jmp	.LBB62_43
.LBB62_22:                              # %sw.bb50
	movl	$0, -4(%rbp)
.LBB62_23:                              # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB62_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB62_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB62_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_23
.LBB62_26:                              # %for.end71
	jmp	.LBB62_43
.LBB62_27:                              # %sw.bb72
	movl	$0, -4(%rbp)
.LBB62_28:                              # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB62_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB62_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB62_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_28
.LBB62_31:                              # %for.end85
	jmp	.LBB62_43
.LBB62_32:                              # %sw.bb86
	movl	$0, -4(%rbp)
.LBB62_33:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB62_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB62_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB62_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_33
.LBB62_36:                              # %for.end99
	jmp	.LBB62_43
.LBB62_37:                              # %sw.bb100
	movl	$0, -4(%rbp)
.LBB62_38:                              # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB62_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB62_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB62_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_38
.LBB62_41:                              # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB62_43
.LBB62_42:                              # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB62_43:                              # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB62_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB62_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB62_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB62_70
.LBB62_47:                              # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB62_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB62_49:                              # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB62_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB62_49 Depth=1
	movl	$0, -4(%rbp)
.LBB62_51:                              # %for.cond131
                                        #   Parent Loop BB62_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB62_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB62_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB62_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB62_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB62_55
.LBB62_54:                              # %if.else174
                                        #   in Loop: Header=BB62_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB62_55:                              # %if.end195
                                        #   in Loop: Header=BB62_51 Depth=2
	jmp	.LBB62_56
.LBB62_56:                              # %for.inc196
                                        #   in Loop: Header=BB62_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_51
.LBB62_57:                              # %for.end198
                                        #   in Loop: Header=BB62_49 Depth=1
	jmp	.LBB62_58
.LBB62_58:                              # %for.inc199
                                        #   in Loop: Header=BB62_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_49
.LBB62_59:                              # %for.end201
	jmp	.LBB62_69
.LBB62_60:                              # %if.else202
	movl	$0, -8(%rbp)
.LBB62_61:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB62_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB62_61 Depth=1
	movl	$0, -4(%rbp)
.LBB62_63:                              # %for.cond207
                                        #   Parent Loop BB62_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB62_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB62_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB62_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_63
.LBB62_66:                              # %for.end227
                                        #   in Loop: Header=BB62_61 Depth=1
	jmp	.LBB62_67
.LBB62_67:                              # %for.inc228
                                        #   in Loop: Header=BB62_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_61
.LBB62_68:                              # %for.end230
	jmp	.LBB62_69
.LBB62_69:                              # %if.end231
	jmp	.LBB62_127
.LBB62_70:                              # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB62_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB62_72:                              # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB62_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB62_72 Depth=1
	movl	$0, -4(%rbp)
.LBB62_74:                              # %for.cond239
                                        #   Parent Loop BB62_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB62_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB62_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB62_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB62_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB62_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB62_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB62_105
.LBB62_78:                              # %if.else298
                                        #   in Loop: Header=BB62_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB62_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB62_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB62_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB62_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB62_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB62_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB62_90
.LBB62_82:                              # %land.lhs.true320
                                        #   in Loop: Header=BB62_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB62_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB62_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB62_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB62_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB62_90
.LBB62_85:                              # %land.lhs.true331
                                        #   in Loop: Header=BB62_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB62_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB62_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB62_90
.LBB62_87:                              # %land.lhs.true347
                                        #   in Loop: Header=BB62_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB62_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB62_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB62_90
.LBB62_89:                              # %if.then356
                                        #   in Loop: Header=BB62_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB62_104
.LBB62_90:                              # %if.else377
                                        #   in Loop: Header=BB62_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB62_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB62_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB62_96
.LBB62_92:                              # %land.lhs.true393
                                        #   in Loop: Header=BB62_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB62_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB62_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB62_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB62_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB62_96
.LBB62_95:                              # %cond.true404
                                        #   in Loop: Header=BB62_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB62_97
.LBB62_96:                              # %cond.false410
                                        #   in Loop: Header=BB62_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB62_97
.LBB62_97:                              # %cond.end411
                                        #   in Loop: Header=BB62_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB62_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB62_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB62_102
.LBB62_99:                              # %land.lhs.true439
                                        #   in Loop: Header=BB62_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB62_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB62_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB62_102
.LBB62_101:                             # %cond.true448
                                        #   in Loop: Header=BB62_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB62_103
.LBB62_102:                             # %cond.false454
                                        #   in Loop: Header=BB62_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB62_103
.LBB62_103:                             # %cond.end455
                                        #   in Loop: Header=BB62_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB62_104:                             # %if.end468
                                        #   in Loop: Header=BB62_74 Depth=2
	jmp	.LBB62_105
.LBB62_105:                             # %if.end469
                                        #   in Loop: Header=BB62_74 Depth=2
	jmp	.LBB62_106
.LBB62_106:                             # %for.inc470
                                        #   in Loop: Header=BB62_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_74
.LBB62_107:                             # %for.end472
                                        #   in Loop: Header=BB62_72 Depth=1
	jmp	.LBB62_108
.LBB62_108:                             # %for.inc473
                                        #   in Loop: Header=BB62_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_72
.LBB62_109:                             # %for.end475
	jmp	.LBB62_126
.LBB62_110:                             # %if.else476
	movl	$0, -8(%rbp)
.LBB62_111:                             # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB62_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB62_111 Depth=1
	movl	$0, -4(%rbp)
.LBB62_113:                             # %for.cond481
                                        #   Parent Loop BB62_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB62_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB62_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB62_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB62_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB62_120
.LBB62_116:                             # %land.lhs.true508
                                        #   in Loop: Header=BB62_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB62_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB62_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB62_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB62_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB62_120
.LBB62_119:                             # %cond.true519
                                        #   in Loop: Header=BB62_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB62_121
.LBB62_120:                             # %cond.false525
                                        #   in Loop: Header=BB62_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB62_121
.LBB62_121:                             # %cond.end526
                                        #   in Loop: Header=BB62_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB62_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_113
.LBB62_123:                             # %for.end541
                                        #   in Loop: Header=BB62_111 Depth=1
	jmp	.LBB62_124
.LBB62_124:                             # %for.inc542
                                        #   in Loop: Header=BB62_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_111
.LBB62_125:                             # %for.end544
	jmp	.LBB62_126
.LBB62_126:                             # %if.end545
	jmp	.LBB62_127
.LBB62_127:                             # %if.end546
	movl	$0, -8(%rbp)
.LBB62_128:                             # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB62_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB62_128 Depth=1
	movl	$0, -4(%rbp)
.LBB62_130:                             # %for.cond551
                                        #   Parent Loop BB62_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB62_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB62_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB62_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB62_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB62_134
.LBB62_133:                             # %cond.false584
                                        #   in Loop: Header=BB62_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB62_134
.LBB62_134:                             # %cond.end585
                                        #   in Loop: Header=BB62_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB62_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_130
.LBB62_136:                             # %for.end598
                                        #   in Loop: Header=BB62_128 Depth=1
	jmp	.LBB62_137
.LBB62_137:                             # %for.inc599
                                        #   in Loop: Header=BB62_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_128
.LBB62_138:                             # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB62_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB62_140:                             # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB62_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB62_140 Depth=1
	movl	$0, -4(%rbp)
.LBB62_142:                             # %for.cond608
                                        #   Parent Loop BB62_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB62_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB62_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB62_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB62_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB62_146
.LBB62_145:                             # %cond.false642
                                        #   in Loop: Header=BB62_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB62_146
.LBB62_146:                             # %cond.end643
                                        #   in Loop: Header=BB62_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB62_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_142
.LBB62_148:                             # %for.end657
                                        #   in Loop: Header=BB62_140 Depth=1
	jmp	.LBB62_149
.LBB62_149:                             # %for.inc658
                                        #   in Loop: Header=BB62_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_140
.LBB62_150:                             # %for.end660
	jmp	.LBB62_151
.LBB62_151:                             # %if.end661
	cmpl	$1550665042, -40(%rbp)  # imm = 0x5C6D4552
	jne	.LBB62_153
.LBB62_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_153:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_152
.Lfunc_end62:
	.size	SetModesAndRefframeForBlocks.33, .Lfunc_end62-SetModesAndRefframeForBlocks.33
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI62_0:
	.quad	.LBB62_9
	.quad	.LBB62_17
	.quad	.LBB62_17
	.quad	.LBB62_17
	.quad	.LBB62_42
	.quad	.LBB62_42
	.quad	.LBB62_42
	.quad	.LBB62_42
	.quad	.LBB62_22
	.quad	.LBB62_27
	.quad	.LBB62_32
	.quad	.LBB62_42
	.quad	.LBB62_42
	.quad	.LBB62_37
                                        # -- End function
	.text
	.globl	StoreNewMotionVectorsBlock8x8.34 # -- Begin function StoreNewMotionVectorsBlock8x8.34
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.34,@function
StoreNewMotionVectorsBlock8x8.34:       # @StoreNewMotionVectorsBlock8x8.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$823954804, -72(%rbp)   # imm = 0x311C8D74
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -24(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB63_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB63_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB63_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_4:                               # %for.cond6
                                        #   Parent Loop BB63_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB63_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB63_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB63_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_4
.LBB63_7:                               # %for.end
                                        #   in Loop: Header=BB63_2 Depth=1
	jmp	.LBB63_8
.LBB63_8:                               # %for.inc39
                                        #   in Loop: Header=BB63_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_2
.LBB63_9:                               # %for.end41
	jmp	.LBB63_61
.LBB63_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB63_20
# %bb.11:                               # %if.then42
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_14 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB63_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB63_12 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_14:                              # %for.cond46
                                        #   Parent Loop BB63_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB63_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB63_14 Depth=2
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_14
.LBB63_17:                              # %for.end119
                                        #   in Loop: Header=BB63_12 Depth=1
	jmp	.LBB63_18
.LBB63_18:                              # %for.inc120
                                        #   in Loop: Header=BB63_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_12
.LBB63_19:                              # %for.end122
	jmp	.LBB63_61
.LBB63_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB63_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB63_31
.LBB63_22:                              # %if.then125
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_25 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB63_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB63_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_25:                              # %for.cond129
                                        #   Parent Loop BB63_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB63_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB63_25 Depth=2
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB63_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_25
.LBB63_28:                              # %for.end206
                                        #   in Loop: Header=BB63_23 Depth=1
	jmp	.LBB63_29
.LBB63_29:                              # %for.inc207
                                        #   in Loop: Header=BB63_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_23
.LBB63_30:                              # %for.end209
	jmp	.LBB63_40
.LBB63_31:                              # %if.else210
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB63_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_34:                              # %for.cond214
                                        #   Parent Loop BB63_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB63_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB63_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB63_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_34
.LBB63_37:                              # %for.end235
                                        #   in Loop: Header=BB63_32 Depth=1
	jmp	.LBB63_38
.LBB63_38:                              # %for.inc236
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_32
.LBB63_39:                              # %for.end238
	jmp	.LBB63_40
.LBB63_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB63_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB63_51
.LBB63_42:                              # %if.then243
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_45 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB63_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB63_43 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_45:                              # %for.cond247
                                        #   Parent Loop BB63_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB63_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB63_45 Depth=2
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB63_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_45
.LBB63_48:                              # %for.end324
                                        #   in Loop: Header=BB63_43 Depth=1
	jmp	.LBB63_49
.LBB63_49:                              # %for.inc325
                                        #   in Loop: Header=BB63_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_43
.LBB63_50:                              # %for.end327
	jmp	.LBB63_60
.LBB63_51:                              # %if.else328
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB63_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB63_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_54:                              # %for.cond332
                                        #   Parent Loop BB63_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB63_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB63_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB63_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_54
.LBB63_57:                              # %for.end353
                                        #   in Loop: Header=BB63_52 Depth=1
	jmp	.LBB63_58
.LBB63_58:                              # %for.inc354
                                        #   in Loop: Header=BB63_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_52
.LBB63_59:                              # %for.end356
	jmp	.LBB63_60
.LBB63_60:                              # %if.end357
	jmp	.LBB63_61
.LBB63_61:                              # %if.end358
	cmpl	$823954804, -72(%rbp)   # imm = 0x311C8D74
	jne	.LBB63_63
.LBB63_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_62
.Lfunc_end63:
	.size	StoreNewMotionVectorsBlock8x8.34, .Lfunc_end63-StoreNewMotionVectorsBlock8x8.34
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset.35            # -- Begin function I16Offset.35
	.p2align	4, 0x90
	.type	I16Offset.35,@function
I16Offset.35:                           # @I16Offset.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1366414945, -16(%rbp)  # imm = 0x5171D661
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movl	-12(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	movl	$13, %eax
	movl	$1, %ebx
	cmovnel	%eax, %ebx
	addl	-20(%rbp), %ebx
	movl	-12(%rbp), %eax
	andl	$48, %eax
	sarl	$2, %eax
	addl	%eax, %ebx
	cmpl	$1366414945, -16(%rbp)  # imm = 0x5171D661
	jne	.LBB64_2
.LBB64_1:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_1
.Lfunc_end64:
	.size	I16Offset.35, .Lfunc_end64-I16Offset.35
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.36
.LCPI65_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.36
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.36,@function
RDCost_for_8x8blocks.36:                # @RDCost_for_8x8blocks.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$1740565447, -172(%rbp) # imm = 0x67BEEBC7
	movq	%rdi, -136(%rbp)
	movq	%rsi, -184(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -120(%rbp)
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -168(%rbp)
	cmpl	$0, -168(%rbp)
	je	.LBB65_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -36(%rbp)
	sete	%r10b
.LBB65_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -124(%rbp)
	movl	-36(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -116(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -124(%rbp)
	je	.LBB65_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB65_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI65_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	%xmm0, -192(%rbp)
	jmp	.LBB65_139
.LBB65_5:                               # %if.else
	xorl	%r8d, %r8d
	movq	-184(%rbp), %rsi
	movl	-40(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB65_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB65_8
.LBB65_7:                               # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB65_8:                               # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-120(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB65_19
.LBB65_10:                              # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB65_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB65_13
.LBB65_12:                              # %cond.true69
	movl	-36(%rbp), %eax
	jmp	.LBB65_14
.LBB65_13:                              # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB65_14
.LBB65_14:                              # %cond.end71
	movl	%eax, -160(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB65_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB65_17
.LBB65_16:                              # %cond.true80
	movl	-36(%rbp), %eax
	jmp	.LBB65_18
.LBB65_17:                              # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB65_18
.LBB65_18:                              # %cond.end82
	movl	%eax, -164(%rbp)
	movq	-184(%rbp), %rsi
	movl	-40(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-160(%rbp), %r8d
	movl	-164(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-120(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB65_19:                              # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB65_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB65_21:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_23 Depth 2
                                        #       Child Loop BB65_25 Depth 3
                                        #     Child Loop BB65_31 Depth 2
                                        #       Child Loop BB65_33 Depth 3
                                        #     Child Loop BB65_39 Depth 2
                                        #       Child Loop BB65_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB65_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB65_21 Depth=1
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -84(%rbp)
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	$0, -12(%rbp)
.LBB65_23:                              # %for.cond96
                                        #   Parent Loop BB65_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_25 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB65_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB65_23 Depth=2
	movl	$0, -16(%rbp)
.LBB65_25:                              # %for.cond100
                                        #   Parent Loop BB65_21 Depth=1
                                        #     Parent Loop BB65_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB65_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB65_25 Depth=3
	movl	-16(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB65_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_25
.LBB65_28:                              # %for.end
                                        #   in Loop: Header=BB65_23 Depth=2
	jmp	.LBB65_29
.LBB65_29:                              # %for.inc114
                                        #   in Loop: Header=BB65_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_23
.LBB65_30:                              # %for.end116
                                        #   in Loop: Header=BB65_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB65_31:                              # %for.cond120
                                        #   Parent Loop BB65_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB65_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB65_31 Depth=2
	movl	$0, -16(%rbp)
.LBB65_33:                              # %for.cond124
                                        #   Parent Loop BB65_21 Depth=1
                                        #     Parent Loop BB65_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB65_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB65_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-16(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB65_33 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_33
.LBB65_36:                              # %for.end152
                                        #   in Loop: Header=BB65_31 Depth=2
	jmp	.LBB65_37
.LBB65_37:                              # %for.inc153
                                        #   in Loop: Header=BB65_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_31
.LBB65_38:                              # %for.end155
                                        #   in Loop: Header=BB65_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB65_39:                              # %for.cond159
                                        #   Parent Loop BB65_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB65_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB65_39 Depth=2
	movl	$0, -16(%rbp)
.LBB65_41:                              # %for.cond163
                                        #   Parent Loop BB65_21 Depth=1
                                        #     Parent Loop BB65_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB65_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB65_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB65_41 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_41
.LBB65_44:                              # %for.end180
                                        #   in Loop: Header=BB65_39 Depth=2
	jmp	.LBB65_45
.LBB65_45:                              # %for.inc181
                                        #   in Loop: Header=BB65_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_39
.LBB65_46:                              # %for.end183
                                        #   in Loop: Header=BB65_21 Depth=1
	jmp	.LBB65_47
.LBB65_47:                              # %for.inc184
                                        #   in Loop: Header=BB65_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB65_21
.LBB65_48:                              # %for.end186
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB65_49:                              # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_51 Depth 2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB65_49 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB65_51:                              # %for.cond192
                                        #   Parent Loop BB65_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -128(%rbp)
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-12(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-128(%rbp), %edx
	movl	%edx, -92(%rbp)
	movl	-128(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -72(%rbp)
	movl	-72(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-12(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -80(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-72(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-12(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB65_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_55
.LBB65_54:                              # %cond.false229
                                        #   in Loop: Header=BB65_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %eax
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB65_55:                              # %cond.end235
                                        #   in Loop: Header=BB65_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB65_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB65_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB65_61
.LBB65_57:                              # %cond.false241
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB65_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_60
.LBB65_59:                              # %cond.false250
                                        #   in Loop: Header=BB65_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB65_60:                              # %cond.end256
                                        #   in Loop: Header=BB65_51 Depth=2
.LBB65_61:                              # %cond.end258
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-92(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB65_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB65_64
.LBB65_63:                              # %cond.false276
                                        #   in Loop: Header=BB65_51 Depth=2
	movl	-92(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB65_64:                              # %cond.end282
                                        #   in Loop: Header=BB65_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB65_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB65_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_70
.LBB65_66:                              # %cond.false288
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%eax, %eax
	movl	-92(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB65_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_69
.LBB65_68:                              # %cond.false297
                                        #   in Loop: Header=BB65_51 Depth=2
	movl	-92(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB65_69:                              # %cond.end303
                                        #   in Loop: Header=BB65_51 Depth=2
.LBB65_70:                              # %cond.end305
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-80(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-12(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB65_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB65_73
.LBB65_72:                              # %cond.false325
                                        #   in Loop: Header=BB65_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-80(%rbp), %ecx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB65_73:                              # %cond.end331
                                        #   in Loop: Header=BB65_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB65_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB65_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB65_79
.LBB65_75:                              # %cond.false337
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB65_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_78
.LBB65_77:                              # %cond.false346
                                        #   in Loop: Header=BB65_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB65_78:                              # %cond.end352
                                        #   in Loop: Header=BB65_51 Depth=2
.LBB65_79:                              # %cond.end354
                                        #   in Loop: Header=BB65_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB65_51 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_51
.LBB65_81:                              # %for.end369
                                        #   in Loop: Header=BB65_49 Depth=1
	jmp	.LBB65_82
.LBB65_82:                              # %for.inc370
                                        #   in Loop: Header=BB65_49 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_49
.LBB65_83:                              # %for.end372
	jmp	.LBB65_84
.LBB65_84:                              # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB65_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB65_87
# %bb.86:                               # %if.then379
	movl	-40(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB65_87:                              # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB65_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB65_102
# %bb.89:                               # %if.then388
	movl	$0, -68(%rbp)
.LBB65_90:                              # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_92 Depth 2
                                        #       Child Loop BB65_94 Depth 3
	movl	-68(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB65_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB65_90 Depth=1
	movl	-68(%rbp), %edi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB65_92:                              # %for.cond395
                                        #   Parent Loop BB65_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_94 Depth 3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB65_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB65_94:                              # %for.cond403
                                        #   Parent Loop BB65_90 Depth=1
                                        #     Parent Loop BB65_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB65_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB65_94 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_94
.LBB65_97:                              # %for.end429
                                        #   in Loop: Header=BB65_92 Depth=2
	jmp	.LBB65_98
.LBB65_98:                              # %for.inc430
                                        #   in Loop: Header=BB65_92 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_92
.LBB65_99:                              # %for.end432
                                        #   in Loop: Header=BB65_90 Depth=1
	jmp	.LBB65_100
.LBB65_100:                             # %for.inc433
                                        #   in Loop: Header=BB65_90 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB65_90
.LBB65_101:                             # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB65_113
.LBB65_102:                             # %if.else439
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB65_103:                             # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_105 Depth 2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB65_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB65_105:                             # %for.cond447
                                        #   Parent Loop BB65_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB65_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB65_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB65_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB65_108:                             # %if.end524
                                        #   in Loop: Header=BB65_105 Depth=2
	jmp	.LBB65_109
.LBB65_109:                             # %for.inc525
                                        #   in Loop: Header=BB65_105 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_105
.LBB65_110:                             # %for.end527
                                        #   in Loop: Header=BB65_103 Depth=1
	jmp	.LBB65_111
.LBB65_111:                             # %for.inc528
                                        #   in Loop: Header=BB65_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_103
.LBB65_112:                             # %for.end530
	jmp	.LBB65_113
.LBB65_113:                             # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB65_115
# %bb.114:                              # %if.then534
	movl	-116(%rbp), %edi
	movl	-156(%rbp), %esi
	leaq	-76(%rbp), %rdx
	leaq	-156(%rbp), %rcx
	callq	ue_linfo
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_116
.LBB65_115:                             # %if.else536
	movl	-116(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-144(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB65_116:                             # %if.end547
	cmpl	$0, -124(%rbp)
	jne	.LBB65_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB65_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB65_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB65_121
.LBB65_120:                             # %if.then560
	movl	-36(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB65_121:                             # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB65_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB65_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB65_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB65_126
.LBB65_125:                             # %if.then579
	movl	-36(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB65_126:                             # %if.end583
	jmp	.LBB65_127
.LBB65_127:                             # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB65_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB65_130
.LBB65_129:                             # %if.then592
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-36(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB65_130:                             # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB65_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB65_133
.LBB65_132:                             # %if.then606
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-36(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB65_133:                             # %if.end612
	jmp	.LBB65_134
.LBB65_134:                             # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB65_136
# %bb.135:                              # %if.then617
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -76(%rbp)
	movl	-40(%rbp), %edi
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-76(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB65_136:                             # %if.end629
	movq	-136(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB65_138
# %bb.137:                              # %if.then631
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB65_138:                             # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
.LBB65_139:                             # %return
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$1740565447, -172(%rbp) # imm = 0x67BEEBC7
	jne	.LBB65_141
.LBB65_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB65_140
.Lfunc_end65:
	.size	RDCost_for_8x8blocks.36, .Lfunc_end65-RDCost_for_8x8blocks.36
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.37 # -- Begin function Intra16x16_Mode_Decision.37
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.37,@function
Intra16x16_Mode_Decision.37:            # @Intra16x16_Mode_Decision.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1693811678, -56(%rbp)  # imm = 0x64F583DE
	movq	%rdi, -72(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -64(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB66_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB66_2:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB66_12
# %bb.3:                                # %if.then3
	movl	$0, -8(%rbp)
.LBB66_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_6 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB66_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB66_4 Depth=1
	movl	$0, -4(%rbp)
.LBB66_6:                               # %for.cond4
                                        #   Parent Loop BB66_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB66_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB66_6 Depth=2
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-32(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB66_6 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_6
.LBB66_9:                               # %for.end
                                        #   in Loop: Header=BB66_4 Depth=1
	jmp	.LBB66_10
.LBB66_10:                              # %for.inc87
                                        #   in Loop: Header=BB66_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_4
.LBB66_11:                              # %for.end89
	jmp	.LBB66_12
.LBB66_12:                              # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-72(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB66_73
# %bb.13:                               # %if.then94
	movl	$0, -8(%rbp)
.LBB66_14:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_16 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB66_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB66_14 Depth=1
	movl	$0, -4(%rbp)
.LBB66_16:                              # %for.cond99
                                        #   Parent Loop BB66_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB66_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB66_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB66_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_16
.LBB66_19:                              # %for.end123
                                        #   in Loop: Header=BB66_14 Depth=1
	jmp	.LBB66_20
.LBB66_20:                              # %for.inc124
                                        #   in Loop: Header=BB66_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_14
.LBB66_21:                              # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB66_22:                              # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_24 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB66_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -4(%rbp)
.LBB66_24:                              # %for.cond132
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB66_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB66_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB66_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_24
.LBB66_27:                              # %for.end156
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_28
.LBB66_28:                              # %for.inc157
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_22
.LBB66_29:                              # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB66_30:                              # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_32 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB66_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB66_30 Depth=1
	movl	$0, -4(%rbp)
.LBB66_32:                              # %for.cond165
                                        #   Parent Loop BB66_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB66_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB66_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB66_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_32
.LBB66_35:                              # %for.end180
                                        #   in Loop: Header=BB66_30 Depth=1
	jmp	.LBB66_36
.LBB66_36:                              # %for.inc181
                                        #   in Loop: Header=BB66_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_30
.LBB66_37:                              # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-72(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -8(%rbp)
.LBB66_38:                              # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_40 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB66_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB66_38 Depth=1
	movl	$0, -4(%rbp)
.LBB66_40:                              # %for.cond190
                                        #   Parent Loop BB66_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB66_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB66_40 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -32(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -28(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB66_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB66_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_44
.LBB66_43:                              # %cond.false
                                        #   in Loop: Header=BB66_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB66_44:                              # %cond.end
                                        #   in Loop: Header=BB66_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB66_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB66_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB66_50
.LBB66_46:                              # %cond.false246
                                        #   in Loop: Header=BB66_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB66_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_49
.LBB66_48:                              # %cond.false260
                                        #   in Loop: Header=BB66_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_49:                              # %cond.end271
                                        #   in Loop: Header=BB66_40 Depth=2
.LBB66_50:                              # %cond.end273
                                        #   in Loop: Header=BB66_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-24(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-32(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB66_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB66_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB66_53
.LBB66_52:                              # %cond.false295
                                        #   in Loop: Header=BB66_40 Depth=2
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB66_53:                              # %cond.end305
                                        #   in Loop: Header=BB66_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB66_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB66_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_59
.LBB66_55:                              # %cond.false311
                                        #   in Loop: Header=BB66_40 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB66_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_58
.LBB66_57:                              # %cond.false324
                                        #   in Loop: Header=BB66_40 Depth=2
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_58:                              # %cond.end334
                                        #   in Loop: Header=BB66_40 Depth=2
.LBB66_59:                              # %cond.end336
                                        #   in Loop: Header=BB66_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-24(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB66_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB66_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB66_62
.LBB66_61:                              # %cond.false359
                                        #   in Loop: Header=BB66_40 Depth=2
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB66_62:                              # %cond.end370
                                        #   in Loop: Header=BB66_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB66_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB66_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB66_68
.LBB66_64:                              # %cond.false376
                                        #   in Loop: Header=BB66_40 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB66_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_67
.LBB66_66:                              # %cond.false390
                                        #   in Loop: Header=BB66_40 Depth=2
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_67:                              # %cond.end401
                                        #   in Loop: Header=BB66_40 Depth=2
.LBB66_68:                              # %cond.end403
                                        #   in Loop: Header=BB66_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-20(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-24(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB66_40 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_40
.LBB66_70:                              # %for.end416
                                        #   in Loop: Header=BB66_38 Depth=1
	jmp	.LBB66_71
.LBB66_71:                              # %for.inc417
                                        #   in Loop: Header=BB66_38 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_38
.LBB66_72:                              # %for.end419
	jmp	.LBB66_73
.LBB66_73:                              # %if.end420
	cmpl	$1693811678, -56(%rbp)  # imm = 0x64F583DE
	jne	.LBB66_75
.LBB66_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_74
.Lfunc_end66:
	.size	Intra16x16_Mode_Decision.37, .Lfunc_end66-Intra16x16_Mode_Decision.37
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.38      # -- Begin function StoreMVBlock8x8.38
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.38,@function
StoreMVBlock8x8.38:                     # @StoreMVBlock8x8.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$2029654917, -68(%rbp)  # imm = 0x78FA1385
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB67_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB67_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB67_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB67_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB67_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB67_5:                               # %for.cond7
                                        #   Parent Loop BB67_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB67_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB67_5 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB67_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_5
.LBB67_8:                               # %for.end
                                        #   in Loop: Header=BB67_3 Depth=1
	jmp	.LBB67_9
.LBB67_9:                               # %for.inc76
                                        #   in Loop: Header=BB67_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_3
.LBB67_10:                              # %for.end78
	jmp	.LBB67_11
.LBB67_11:                              # %if.end
	jmp	.LBB67_46
.LBB67_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB67_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB67_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB67_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB67_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB67_16:                              # %for.cond84
                                        #   Parent Loop BB67_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB67_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB67_16 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB67_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_16
.LBB67_19:                              # %for.end161
                                        #   in Loop: Header=BB67_14 Depth=1
	jmp	.LBB67_20
.LBB67_20:                              # %for.inc162
                                        #   in Loop: Header=BB67_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_14
.LBB67_21:                              # %for.end164
	jmp	.LBB67_45
.LBB67_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB67_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB67_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB67_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB67_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB67_26:                              # %for.cond171
                                        #   Parent Loop BB67_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB67_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB67_26 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB67_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_26
.LBB67_29:                              # %for.end248
                                        #   in Loop: Header=BB67_24 Depth=1
	jmp	.LBB67_30
.LBB67_30:                              # %for.inc249
                                        #   in Loop: Header=BB67_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_24
.LBB67_31:                              # %for.end251
	jmp	.LBB67_44
.LBB67_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB67_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB67_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB67_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB67_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB67_36:                              # %for.cond258
                                        #   Parent Loop BB67_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB67_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB67_36 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB67_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_36
.LBB67_39:                              # %for.end407
                                        #   in Loop: Header=BB67_34 Depth=1
	jmp	.LBB67_40
.LBB67_40:                              # %for.inc408
                                        #   in Loop: Header=BB67_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_34
.LBB67_41:                              # %for.end410
	jmp	.LBB67_43
.LBB67_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB67_43:                              # %if.end412
	jmp	.LBB67_44
.LBB67_44:                              # %if.end413
	jmp	.LBB67_45
.LBB67_45:                              # %if.end414
	jmp	.LBB67_46
.LBB67_46:                              # %if.end415
	cmpl	$2029654917, -68(%rbp)  # imm = 0x78FA1385
	jne	.LBB67_48
.LBB67_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_47
.Lfunc_end67:
	.size	StoreMVBlock8x8.38, .Lfunc_end67-StoreMVBlock8x8.38
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.39 # -- Begin function Intra16x16_Mode_Decision.39
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.39,@function
Intra16x16_Mode_Decision.39:            # @Intra16x16_Mode_Decision.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$927746440, -56(%rbp)   # imm = 0x374C4988
	movq	%rdi, -72(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -64(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB68_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB68_2:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB68_12
# %bb.3:                                # %if.then3
	movl	$0, -4(%rbp)
.LBB68_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_6 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB68_4 Depth=1
	movl	$0, -8(%rbp)
.LBB68_6:                               # %for.cond4
                                        #   Parent Loop BB68_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB68_6 Depth=2
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB68_6 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_6
.LBB68_9:                               # %for.end
                                        #   in Loop: Header=BB68_4 Depth=1
	jmp	.LBB68_10
.LBB68_10:                              # %for.inc87
                                        #   in Loop: Header=BB68_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_4
.LBB68_11:                              # %for.end89
	jmp	.LBB68_12
.LBB68_12:                              # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-72(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB68_73
# %bb.13:                               # %if.then94
	movl	$0, -4(%rbp)
.LBB68_14:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_16 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB68_14 Depth=1
	movl	$0, -8(%rbp)
.LBB68_16:                              # %for.cond99
                                        #   Parent Loop BB68_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB68_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB68_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_16
.LBB68_19:                              # %for.end123
                                        #   in Loop: Header=BB68_14 Depth=1
	jmp	.LBB68_20
.LBB68_20:                              # %for.inc124
                                        #   in Loop: Header=BB68_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_14
.LBB68_21:                              # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB68_22:                              # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_24 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	$0, -8(%rbp)
.LBB68_24:                              # %for.cond132
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB68_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB68_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_24
.LBB68_27:                              # %for.end156
                                        #   in Loop: Header=BB68_22 Depth=1
	jmp	.LBB68_28
.LBB68_28:                              # %for.inc157
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_22
.LBB68_29:                              # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB68_30:                              # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_32 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB68_30 Depth=1
	movl	$0, -8(%rbp)
.LBB68_32:                              # %for.cond165
                                        #   Parent Loop BB68_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB68_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB68_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_32
.LBB68_35:                              # %for.end180
                                        #   in Loop: Header=BB68_30 Depth=1
	jmp	.LBB68_36
.LBB68_36:                              # %for.inc181
                                        #   in Loop: Header=BB68_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_30
.LBB68_37:                              # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-72(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -4(%rbp)
.LBB68_38:                              # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_40 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB68_38 Depth=1
	movl	$0, -8(%rbp)
.LBB68_40:                              # %for.cond190
                                        #   Parent Loop BB68_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%eax, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -24(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -28(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB68_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_44
.LBB68_43:                              # %cond.false
                                        #   in Loop: Header=BB68_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB68_44:                              # %cond.end
                                        #   in Loop: Header=BB68_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB68_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB68_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB68_50
.LBB68_46:                              # %cond.false246
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB68_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_49
.LBB68_48:                              # %cond.false260
                                        #   in Loop: Header=BB68_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB68_49:                              # %cond.end271
                                        #   in Loop: Header=BB68_40 Depth=2
.LBB68_50:                              # %cond.end273
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-32(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-24(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB68_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB68_53
.LBB68_52:                              # %cond.false295
                                        #   in Loop: Header=BB68_40 Depth=2
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB68_53:                              # %cond.end305
                                        #   in Loop: Header=BB68_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB68_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB68_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_59
.LBB68_55:                              # %cond.false311
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB68_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_58
.LBB68_57:                              # %cond.false324
                                        #   in Loop: Header=BB68_40 Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB68_58:                              # %cond.end334
                                        #   in Loop: Header=BB68_40 Depth=2
.LBB68_59:                              # %cond.end336
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-32(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB68_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB68_62
.LBB68_61:                              # %cond.false359
                                        #   in Loop: Header=BB68_40 Depth=2
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB68_62:                              # %cond.end370
                                        #   in Loop: Header=BB68_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB68_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB68_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB68_68
.LBB68_64:                              # %cond.false376
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB68_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB68_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_67
.LBB68_66:                              # %cond.false390
                                        #   in Loop: Header=BB68_40 Depth=2
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB68_67:                              # %cond.end401
                                        #   in Loop: Header=BB68_40 Depth=2
.LBB68_68:                              # %cond.end403
                                        #   in Loop: Header=BB68_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-20(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB68_40 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_40
.LBB68_70:                              # %for.end416
                                        #   in Loop: Header=BB68_38 Depth=1
	jmp	.LBB68_71
.LBB68_71:                              # %for.inc417
                                        #   in Loop: Header=BB68_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_38
.LBB68_72:                              # %for.end419
	jmp	.LBB68_73
.LBB68_73:                              # %if.end420
	cmpl	$927746440, -56(%rbp)   # imm = 0x374C4988
	jne	.LBB68_75
.LBB68_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_74
.Lfunc_end68:
	.size	Intra16x16_Mode_Decision.39, .Lfunc_end68-Intra16x16_Mode_Decision.39
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset.40            # -- Begin function I16Offset.40
	.p2align	4, 0x90
	.type	I16Offset.40,@function
I16Offset.40:                           # @I16Offset.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1436180753, -20(%rbp)  # imm = 0x559A6111
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	-12(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	movl	$13, %eax
	movl	$1, %ebx
	cmovnel	%eax, %ebx
	addl	-16(%rbp), %ebx
	movl	-12(%rbp), %eax
	andl	$48, %eax
	sarl	$2, %eax
	addl	%eax, %ebx
	cmpl	$1436180753, -20(%rbp)  # imm = 0x559A6111
	jne	.LBB69_2
.LBB69_1:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_1
.Lfunc_end69:
	.size	I16Offset.40, .Lfunc_end69-I16Offset.40
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.41 # -- Begin function RDCost_for_4x4Blocks_Chroma.41
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.41,@function
RDCost_for_4x4Blocks_Chroma.41:         # @RDCost_for_4x4Blocks_Chroma.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1312387072, -60(%rbp)  # imm = 0x4E397000
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -56(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB70_2
# %bb.1:                                # %if.then
	movl	$1, -32(%rbp)
	jmp	.LBB70_3
.LBB70_2:                               # %if.else
	movl	$0, -32(%rbp)
.LBB70_3:                               # %if.end
	movl	-56(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB70_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB70_18
.LBB70_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -28(%rbp)
.LBB70_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -28(%rbp)
	jge	.LBB70_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB70_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB70_8:                               # %land.end
                                        #   in Loop: Header=BB70_6 Depth=1
	testb	$1, %al
	jne	.LBB70_9
	jmp	.LBB70_17
.LBB70_9:                               # %for.body
                                        #   in Loop: Header=BB70_6 Depth=1
	movq	-88(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-112(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB70_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB70_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB70_12
.LBB70_11:                              # %if.else54
                                        #   in Loop: Header=BB70_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB70_12:                              # %if.end55
                                        #   in Loop: Header=BB70_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB70_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB70_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB70_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB70_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB70_15:                              # %lor.end
                                        #   in Loop: Header=BB70_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB70_6 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB70_6
.LBB70_17:                              # %for.end
	jmp	.LBB70_18
.LBB70_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$1312387072, -60(%rbp)  # imm = 0x4E397000
	jne	.LBB70_20
.LBB70_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_19
.Lfunc_end70:
	.size	RDCost_for_4x4Blocks_Chroma.41, .Lfunc_end70-RDCost_for_4x4Blocks_Chroma.41
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.42 # -- Begin function RDCost_for_4x4Blocks_Chroma.42
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.42,@function
RDCost_for_4x4Blocks_Chroma.42:         # @RDCost_for_4x4Blocks_Chroma.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1219482982, -56(%rbp)  # imm = 0x48AFD566
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB71_2
# %bb.1:                                # %if.then
	movl	$1, -32(%rbp)
	jmp	.LBB71_3
.LBB71_2:                               # %if.else
	movl	$0, -32(%rbp)
.LBB71_3:                               # %if.end
	movl	-60(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB71_18
.LBB71_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -28(%rbp)
.LBB71_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -28(%rbp)
	jge	.LBB71_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB71_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB71_8:                               # %land.end
                                        #   in Loop: Header=BB71_6 Depth=1
	testb	$1, %al
	jne	.LBB71_9
	jmp	.LBB71_17
.LBB71_9:                               # %for.body
                                        #   in Loop: Header=BB71_6 Depth=1
	movq	-80(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-88(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB71_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB71_12
.LBB71_11:                              # %if.else54
                                        #   in Loop: Header=BB71_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB71_12:                              # %if.end55
                                        #   in Loop: Header=BB71_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB71_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB71_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB71_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB71_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB71_15:                              # %lor.end
                                        #   in Loop: Header=BB71_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB71_6 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB71_6
.LBB71_17:                              # %for.end
	jmp	.LBB71_18
.LBB71_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$1219482982, -56(%rbp)  # imm = 0x48AFD566
	jne	.LBB71_20
.LBB71_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_19
.Lfunc_end71:
	.size	RDCost_for_4x4Blocks_Chroma.42, .Lfunc_end71-RDCost_for_4x4Blocks_Chroma.42
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.43 # -- Begin function SetRefAndMotionVectors.43
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.43,@function
SetRefAndMotionVectors.43:              # @SetRefAndMotionVectors.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$874402646, -72(%rbp)   # imm = 0x341E5356
	movl	%edi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -36(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB72_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB72_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB72_4
.LBB72_3:                               # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB72_5
.LBB72_4:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB72_5
.LBB72_5:                               # %cond.end
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-32(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB72_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB72_9
.LBB72_8:                               # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB72_9
.LBB72_9:                               # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB72_19
# %bb.10:                               # %if.then
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB72_11:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB72_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB72_11 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB72_13:                              # %for.cond34
                                        #   Parent Loop BB72_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB72_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB72_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB72_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_13
.LBB72_16:                              # %for.end
                                        #   in Loop: Header=BB72_11 Depth=1
	jmp	.LBB72_17
.LBB72_17:                              # %for.inc117
                                        #   in Loop: Header=BB72_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_11
.LBB72_18:                              # %for.end119
	jmp	.LBB72_64
.LBB72_19:                              # %if.end
	cmpl	$0, -68(%rbp)
	jne	.LBB72_29
# %bb.20:                               # %if.then121
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB72_21:                              # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB72_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB72_21 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB72_23:                              # %for.cond126
                                        #   Parent Loop BB72_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB72_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB72_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB72_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_23
.LBB72_26:                              # %for.end211
                                        #   in Loop: Header=BB72_21 Depth=1
	jmp	.LBB72_27
.LBB72_27:                              # %for.inc212
                                        #   in Loop: Header=BB72_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_21
.LBB72_28:                              # %for.end214
	jmp	.LBB72_64
.LBB72_29:                              # %if.else
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB72_30:                              # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB72_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB72_30 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB72_32:                              # %for.cond219
                                        #   Parent Loop BB72_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB72_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB72_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB72_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
.LBB72_35:                              # %if.end255
                                        #   in Loop: Header=BB72_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB72_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB72_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB72_46
.LBB72_37:                              # %if.then261
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB72_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB72_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB72_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB72_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB72_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB72_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB72_43
.LBB72_42:                              # %cond.false274
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB72_43:                              # %cond.end275
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB72_45
.LBB72_44:                              # %if.else342
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB72_45:                              # %if.end424
                                        #   in Loop: Header=BB72_32 Depth=2
	jmp	.LBB72_47
.LBB72_46:                              # %if.else425
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB72_47:                              # %if.end468
                                        #   in Loop: Header=BB72_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB72_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB72_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB72_58
.LBB72_49:                              # %if.then474
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB72_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB72_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB72_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB72_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB72_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB72_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB72_55
.LBB72_54:                              # %cond.false490
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB72_55:                              # %cond.end492
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB72_57
.LBB72_56:                              # %if.else559
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-36(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB72_57:                              # %if.end641
                                        #   in Loop: Header=BB72_32 Depth=2
	jmp	.LBB72_59
.LBB72_58:                              # %if.else642
                                        #   in Loop: Header=BB72_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB72_59:                              # %if.end685
                                        #   in Loop: Header=BB72_32 Depth=2
	jmp	.LBB72_60
.LBB72_60:                              # %for.inc686
                                        #   in Loop: Header=BB72_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_32
.LBB72_61:                              # %for.end688
                                        #   in Loop: Header=BB72_30 Depth=1
	jmp	.LBB72_62
.LBB72_62:                              # %for.inc689
                                        #   in Loop: Header=BB72_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_30
.LBB72_63:                              # %for.end691
	jmp	.LBB72_64
.LBB72_64:                              # %if.end692
	cmpl	$874402646, -72(%rbp)   # imm = 0x341E5356
	jne	.LBB72_66
.LBB72_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_66:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_65
.Lfunc_end72:
	.size	SetRefAndMotionVectors.43, .Lfunc_end72-SetRefAndMotionVectors.43
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.44 # -- Begin function RDCost_for_4x4IntraBlocks.44
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.44,@function
RDCost_for_4x4IntraBlocks.44:           # @RDCost_for_4x4IntraBlocks.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$720590907, -72(%rbp)   # imm = 0x2AF3583B
	movq	%rdi, -120(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -8(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -56(%rbp)
	movl	$0, -44(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-88(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -76(%rbp)
	movl	-52(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-76(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-120(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB73_10
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB73_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_4 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB73_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB73_2 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB73_4:                               # %for.cond15
                                        #   Parent Loop BB73_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB73_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-68(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-112(%rbp), %rdx
	movl	-80(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB73_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_4
.LBB73_7:                               # %for.end
                                        #   in Loop: Header=BB73_2 Depth=1
	jmp	.LBB73_8
.LBB73_8:                               # %for.inc33
                                        #   in Loop: Header=BB73_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB73_2
.LBB73_9:                               # %for.end35
	jmp	.LBB73_10
.LBB73_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-56(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB73_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB73_16
.LBB73_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB73_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB73_15
.LBB73_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB73_15:                              # %cond.end
.LBB73_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB73_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB73_18:                              # %if.end50
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB73_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB73_21
.LBB73_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB73_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB73_23
# %bb.22:                               # %if.then66
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_24
.LBB73_23:                              # %if.else69
	movl	-12(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -144(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB73_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -96(%rbp)
	jmp	.LBB73_27
.LBB73_26:                              # %if.else81
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -96(%rbp)
.LBB73_27:                              # %return
	vmovsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$720590907, -72(%rbp)   # imm = 0x2AF3583B
	jne	.LBB73_29
.LBB73_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB73_28
.Lfunc_end73:
	.size	RDCost_for_4x4IntraBlocks.44, .Lfunc_end73-RDCost_for_4x4IntraBlocks.44
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.45 # -- Begin function SetCoeffAndReconstruction8x8.45
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.45,@function
SetCoeffAndReconstruction8x8.45:        # @SetCoeffAndReconstruction8x8.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$511383876, -36(%rbp)   # imm = 0x1E7B1944
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB74_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB74_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB74_4
.LBB74_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB74_4
.LBB74_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB74_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB74_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB74_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB74_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB74_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_6
.LBB74_9:                               # %for.end
	cmpl	$0, -32(%rbp)
	je	.LBB74_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB74_11:                              # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB74_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB74_11 Depth=1
	movl	$0, -4(%rbp)
.LBB74_13:                              # %for.cond20
                                        #   Parent Loop BB74_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB74_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB74_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_13
.LBB74_16:                              # %for.end52
                                        #   in Loop: Header=BB74_11 Depth=1
	jmp	.LBB74_17
.LBB74_17:                              # %for.inc53
                                        #   in Loop: Header=BB74_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_11
.LBB74_18:                              # %for.end55
	jmp	.LBB74_28
.LBB74_19:                              # %if.else
	movl	$0, -8(%rbp)
.LBB74_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB74_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB74_20 Depth=1
	movl	$0, -4(%rbp)
.LBB74_22:                              # %for.cond60
                                        #   Parent Loop BB74_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB74_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB74_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_22
.LBB74_25:                              # %for.end86
                                        #   in Loop: Header=BB74_20 Depth=1
	jmp	.LBB74_26
.LBB74_26:                              # %for.inc87
                                        #   in Loop: Header=BB74_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_20
.LBB74_27:                              # %for.end89
	jmp	.LBB74_28
.LBB74_28:                              # %if.end
	movl	$0, -8(%rbp)
.LBB74_29:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB74_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB74_29 Depth=1
	movl	$0, -4(%rbp)
.LBB74_31:                              # %for.cond94
                                        #   Parent Loop BB74_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB74_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB74_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB74_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB74_35
.LBB74_34:                              # %cond.false127
                                        #   in Loop: Header=BB74_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB74_35
.LBB74_35:                              # %cond.end128
                                        #   in Loop: Header=BB74_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB74_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_31
.LBB74_37:                              # %for.end141
                                        #   in Loop: Header=BB74_29 Depth=1
	jmp	.LBB74_38
.LBB74_38:                              # %for.inc142
                                        #   in Loop: Header=BB74_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_29
.LBB74_39:                              # %for.end144
	cmpl	$0, -32(%rbp)
	je	.LBB74_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB74_41:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB74_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	$0, -4(%rbp)
.LBB74_43:                              # %for.cond151
                                        #   Parent Loop BB74_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB74_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB74_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB74_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB74_47
.LBB74_46:                              # %cond.false185
                                        #   in Loop: Header=BB74_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB74_47
.LBB74_47:                              # %cond.end186
                                        #   in Loop: Header=BB74_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB74_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_43
.LBB74_49:                              # %for.end200
                                        #   in Loop: Header=BB74_41 Depth=1
	jmp	.LBB74_50
.LBB74_50:                              # %for.inc201
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_41
.LBB74_51:                              # %for.end203
	jmp	.LBB74_52
.LBB74_52:                              # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB74_53:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_55 Depth 2
                                        #       Child Loop BB74_57 Depth 3
                                        #         Child Loop BB74_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB74_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB74_53 Depth=1
	movl	$0, -12(%rbp)
.LBB74_55:                              # %for.cond209
                                        #   Parent Loop BB74_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_57 Depth 3
                                        #         Child Loop BB74_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB74_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB74_55 Depth=2
	movl	$0, -8(%rbp)
.LBB74_57:                              # %for.cond213
                                        #   Parent Loop BB74_53 Depth=1
                                        #     Parent Loop BB74_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB74_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB74_57 Depth=3
	movl	$0, -4(%rbp)
.LBB74_59:                              # %for.cond217
                                        #   Parent Loop BB74_53 Depth=1
                                        #     Parent Loop BB74_55 Depth=2
                                        #       Parent Loop BB74_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB74_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB74_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB74_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_59
.LBB74_62:                              # %for.end239
                                        #   in Loop: Header=BB74_57 Depth=3
	jmp	.LBB74_63
.LBB74_63:                              # %for.inc240
                                        #   in Loop: Header=BB74_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_57
.LBB74_64:                              # %for.end242
                                        #   in Loop: Header=BB74_55 Depth=2
	jmp	.LBB74_65
.LBB74_65:                              # %for.inc243
                                        #   in Loop: Header=BB74_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_55
.LBB74_66:                              # %for.end245
                                        #   in Loop: Header=BB74_53 Depth=1
	jmp	.LBB74_67
.LBB74_67:                              # %for.inc246
                                        #   in Loop: Header=BB74_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_53
.LBB74_68:                              # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB74_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB74_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB74_83
.LBB74_71:                              # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB74_72:                              # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB74_72 Depth=1
	movl	$0, -4(%rbp)
.LBB74_74:                              # %for.cond262
                                        #   Parent Loop BB74_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB74_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB74_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB74_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB74_78
.LBB74_77:                              # %if.else278
                                        #   in Loop: Header=BB74_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB74_78:                              # %if.end283
                                        #   in Loop: Header=BB74_74 Depth=2
	jmp	.LBB74_79
.LBB74_79:                              # %for.inc284
                                        #   in Loop: Header=BB74_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_74
.LBB74_80:                              # %for.end286
                                        #   in Loop: Header=BB74_72 Depth=1
	jmp	.LBB74_81
.LBB74_81:                              # %for.inc287
                                        #   in Loop: Header=BB74_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_72
.LBB74_82:                              # %for.end289
	jmp	.LBB74_95
.LBB74_83:                              # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB74_84:                              # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB74_84 Depth=1
	movl	$0, -4(%rbp)
.LBB74_86:                              # %for.cond297
                                        #   Parent Loop BB74_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB74_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB74_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB74_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB74_90
.LBB74_89:                              # %if.else317
                                        #   in Loop: Header=BB74_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB74_90:                              # %if.end326
                                        #   in Loop: Header=BB74_86 Depth=2
	jmp	.LBB74_91
.LBB74_91:                              # %for.inc327
                                        #   in Loop: Header=BB74_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_86
.LBB74_92:                              # %for.end329
                                        #   in Loop: Header=BB74_84 Depth=1
	jmp	.LBB74_93
.LBB74_93:                              # %for.inc330
                                        #   in Loop: Header=BB74_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_84
.LBB74_94:                              # %for.end332
	jmp	.LBB74_95
.LBB74_95:                              # %if.end333
	movl	$0, -8(%rbp)
.LBB74_96:                              # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB74_96 Depth=1
	movl	$0, -4(%rbp)
.LBB74_98:                              # %for.cond338
                                        #   Parent Loop BB74_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB74_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB74_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_98
.LBB74_101:                             # %for.end384
                                        #   in Loop: Header=BB74_96 Depth=1
	jmp	.LBB74_102
.LBB74_102:                             # %for.inc385
                                        #   in Loop: Header=BB74_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_96
.LBB74_103:                             # %for.end387
	jmp	.LBB74_157
.LBB74_104:                             # %if.else388
	movl	$0, -16(%rbp)
.LBB74_105:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_107 Depth 2
                                        #       Child Loop BB74_109 Depth 3
                                        #         Child Loop BB74_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB74_105 Depth=1
	movl	$0, -12(%rbp)
.LBB74_107:                             # %for.cond394
                                        #   Parent Loop BB74_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_109 Depth 3
                                        #         Child Loop BB74_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB74_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB74_107 Depth=2
	movl	$0, -8(%rbp)
.LBB74_109:                             # %for.cond398
                                        #   Parent Loop BB74_105 Depth=1
                                        #     Parent Loop BB74_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB74_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB74_109 Depth=3
	movl	$0, -4(%rbp)
.LBB74_111:                             # %for.cond402
                                        #   Parent Loop BB74_105 Depth=1
                                        #     Parent Loop BB74_107 Depth=2
                                        #       Parent Loop BB74_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB74_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB74_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB74_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_111
.LBB74_114:                             # %for.end425
                                        #   in Loop: Header=BB74_109 Depth=3
	jmp	.LBB74_115
.LBB74_115:                             # %for.inc426
                                        #   in Loop: Header=BB74_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_109
.LBB74_116:                             # %for.end428
                                        #   in Loop: Header=BB74_107 Depth=2
	jmp	.LBB74_117
.LBB74_117:                             # %for.inc429
                                        #   in Loop: Header=BB74_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_107
.LBB74_118:                             # %for.end431
                                        #   in Loop: Header=BB74_105 Depth=1
	jmp	.LBB74_119
.LBB74_119:                             # %for.inc432
                                        #   in Loop: Header=BB74_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_105
.LBB74_120:                             # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB74_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB74_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB74_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB74_136
.LBB74_124:                             # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB74_125:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB74_125 Depth=1
	movl	$0, -4(%rbp)
.LBB74_127:                             # %for.cond458
                                        #   Parent Loop BB74_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB74_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB74_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB74_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB74_131
.LBB74_130:                             # %if.else478
                                        #   in Loop: Header=BB74_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB74_131:                             # %if.end483
                                        #   in Loop: Header=BB74_127 Depth=2
	jmp	.LBB74_132
.LBB74_132:                             # %for.inc484
                                        #   in Loop: Header=BB74_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_127
.LBB74_133:                             # %for.end486
                                        #   in Loop: Header=BB74_125 Depth=1
	jmp	.LBB74_134
.LBB74_134:                             # %for.inc487
                                        #   in Loop: Header=BB74_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_125
.LBB74_135:                             # %for.end489
	jmp	.LBB74_148
.LBB74_136:                             # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB74_137:                             # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB74_137 Depth=1
	movl	$0, -4(%rbp)
.LBB74_139:                             # %for.cond498
                                        #   Parent Loop BB74_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB74_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB74_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB74_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB74_143
.LBB74_142:                             # %if.else518
                                        #   in Loop: Header=BB74_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB74_143:                             # %if.end527
                                        #   in Loop: Header=BB74_139 Depth=2
	jmp	.LBB74_144
.LBB74_144:                             # %for.inc528
                                        #   in Loop: Header=BB74_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_139
.LBB74_145:                             # %for.end530
                                        #   in Loop: Header=BB74_137 Depth=1
	jmp	.LBB74_146
.LBB74_146:                             # %for.inc531
                                        #   in Loop: Header=BB74_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_137
.LBB74_147:                             # %for.end533
	jmp	.LBB74_148
.LBB74_148:                             # %if.end534
	movl	$0, -8(%rbp)
.LBB74_149:                             # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB74_149 Depth=1
	movl	$0, -4(%rbp)
.LBB74_151:                             # %for.cond539
                                        #   Parent Loop BB74_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB74_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB74_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_151
.LBB74_154:                             # %for.end585
                                        #   in Loop: Header=BB74_149 Depth=1
	jmp	.LBB74_155
.LBB74_155:                             # %for.inc586
                                        #   in Loop: Header=BB74_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_149
.LBB74_156:                             # %for.end588
	jmp	.LBB74_157
.LBB74_157:                             # %if.end589
	cmpl	$511383876, -36(%rbp)   # imm = 0x1E7B1944
	jne	.LBB74_159
.LBB74_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_159:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_158
.Lfunc_end74:
	.size	SetCoeffAndReconstruction8x8.45, .Lfunc_end74-SetCoeffAndReconstruction8x8.45
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.46         # -- Begin function RestoreMV8x8.46
	.p2align	4, 0x90
	.type	RestoreMV8x8.46,@function
RestoreMV8x8.46:                        # @RestoreMV8x8.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1921346724, -12(%rbp)  # imm = 0x72856CA4
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB75_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB75_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_1
.LBB75_4:                               # %for.end
	cmpl	$1921346724, -12(%rbp)  # imm = 0x72856CA4
	jne	.LBB75_6
.LBB75_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_5
.Lfunc_end75:
	.size	RestoreMV8x8.46, .Lfunc_end75-RestoreMV8x8.46
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.47
.LCPI76_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI76_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.47
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.47,@function
Mode_Decision_for_8x8IntraBlocks.47:    # @Mode_Decision_for_8x8IntraBlocks.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI76_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI76_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$807432524, -24(%rbp)   # imm = 0x3020714C
	movl	%edi, -28(%rbp)
	vmovsd	%xmm0, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-40(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB76_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-28(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB76_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$1, -16(%rbp)
.LBB76_4:                               # %if.end
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-48(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_1
.LBB76_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$807432524, -24(%rbp)   # imm = 0x3020714C
	jne	.LBB76_8
.LBB76_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_7
.Lfunc_end76:
	.size	Mode_Decision_for_8x8IntraBlocks.47, .Lfunc_end76-Mode_Decision_for_8x8IntraBlocks.47
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.48 # -- Begin function store_macroblock_parameters.48
	.p2align	4, 0x90
	.type	store_macroblock_parameters.48,@function
store_macroblock_parameters.48:         # @store_macroblock_parameters.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$269705899, -36(%rbp)   # imm = 0x101362AB
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB77_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB77_3
.LBB77_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB77_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB77_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB77_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB77_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB77_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_4
.LBB77_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB77_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB77_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB77_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB77_10:                              # %for.cond20
                                        #   Parent Loop BB77_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB77_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB77_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB77_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_10
.LBB77_13:                              # %for.end39
                                        #   in Loop: Header=BB77_8 Depth=1
	jmp	.LBB77_14
.LBB77_14:                              # %for.inc40
                                        #   in Loop: Header=BB77_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_8
.LBB77_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB77_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB77_16 Depth=1
	movl	$0, -8(%rbp)
.LBB77_18:                              # %for.cond47
                                        #   Parent Loop BB77_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB77_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB77_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB77_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_18
.LBB77_21:                              # %for.end70
                                        #   in Loop: Header=BB77_16 Depth=1
	jmp	.LBB77_22
.LBB77_22:                              # %for.inc71
                                        #   in Loop: Header=BB77_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_16
.LBB77_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB77_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB77_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB77_24 Depth=1
	movl	$0, -4(%rbp)
.LBB77_26:                              # %for.cond78
                                        #   Parent Loop BB77_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB77_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB77_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB77_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_26
.LBB77_29:                              # %for.end94
                                        #   in Loop: Header=BB77_24 Depth=1
	jmp	.LBB77_30
.LBB77_30:                              # %for.inc95
                                        #   in Loop: Header=BB77_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_24
.LBB77_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB77_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB77_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB77_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB77_33 Depth=1
	movl	$0, -4(%rbp)
.LBB77_35:                              # %for.cond105
                                        #   Parent Loop BB77_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB77_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB77_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB77_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_35
.LBB77_38:                              # %for.end136
                                        #   in Loop: Header=BB77_33 Depth=1
	jmp	.LBB77_39
.LBB77_39:                              # %for.inc137
                                        #   in Loop: Header=BB77_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_33
.LBB77_40:                              # %for.end139
	jmp	.LBB77_41
.LBB77_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB77_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB77_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB77_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_46 Depth 2
                                        #       Child Loop BB77_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB77_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB77_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB77_46:                              # %for.cond152
                                        #   Parent Loop BB77_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB77_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB77_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB77_48:                              # %for.cond159
                                        #   Parent Loop BB77_44 Depth=1
                                        #     Parent Loop BB77_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB77_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB77_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB77_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_48
.LBB77_51:                              # %for.end179
                                        #   in Loop: Header=BB77_46 Depth=2
	jmp	.LBB77_52
.LBB77_52:                              # %for.inc180
                                        #   in Loop: Header=BB77_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_46
.LBB77_53:                              # %for.end182
                                        #   in Loop: Header=BB77_44 Depth=1
	jmp	.LBB77_54
.LBB77_54:                              # %for.inc183
                                        #   in Loop: Header=BB77_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_44
.LBB77_55:                              # %for.end185
	jmp	.LBB77_56
.LBB77_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB77_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB77_59
.LBB77_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB77_60
.LBB77_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB77_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB77_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB77_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB77_61 Depth=1
	movl	$0, -4(%rbp)
.LBB77_63:                              # %for.cond197
                                        #   Parent Loop BB77_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB77_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB77_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB77_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB77_66:                              # %if.end230
                                        #   in Loop: Header=BB77_63 Depth=2
	jmp	.LBB77_67
.LBB77_67:                              # %for.inc231
                                        #   in Loop: Header=BB77_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_63
.LBB77_68:                              # %for.end233
                                        #   in Loop: Header=BB77_61 Depth=1
	jmp	.LBB77_69
.LBB77_69:                              # %for.inc234
                                        #   in Loop: Header=BB77_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_61
.LBB77_70:                              # %for.end236
	cmpl	$269705899, -36(%rbp)   # imm = 0x101362AB
	jne	.LBB77_72
.LBB77_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_71
.Lfunc_end77:
	.size	store_macroblock_parameters.48, .Lfunc_end77-store_macroblock_parameters.48
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.49 # -- Begin function StoreNewMotionVectorsBlock8x8.49
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.49,@function
StoreNewMotionVectorsBlock8x8.49:       # @StoreNewMotionVectorsBlock8x8.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1489978516, -72(%rbp)  # imm = 0x58CF4494
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -24(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB78_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB78_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_4:                               # %for.cond6
                                        #   Parent Loop BB78_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB78_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB78_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_4
.LBB78_7:                               # %for.end
                                        #   in Loop: Header=BB78_2 Depth=1
	jmp	.LBB78_8
.LBB78_8:                               # %for.inc39
                                        #   in Loop: Header=BB78_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_2
.LBB78_9:                               # %for.end41
	jmp	.LBB78_61
.LBB78_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB78_20
# %bb.11:                               # %if.then42
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_14 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB78_12 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_14:                              # %for.cond46
                                        #   Parent Loop BB78_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB78_14 Depth=2
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB78_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_14
.LBB78_17:                              # %for.end119
                                        #   in Loop: Header=BB78_12 Depth=1
	jmp	.LBB78_18
.LBB78_18:                              # %for.inc120
                                        #   in Loop: Header=BB78_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_12
.LBB78_19:                              # %for.end122
	jmp	.LBB78_61
.LBB78_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB78_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB78_31
.LBB78_22:                              # %if.then125
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_25 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB78_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_25:                              # %for.cond129
                                        #   Parent Loop BB78_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB78_25 Depth=2
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB78_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_25
.LBB78_28:                              # %for.end206
                                        #   in Loop: Header=BB78_23 Depth=1
	jmp	.LBB78_29
.LBB78_29:                              # %for.inc207
                                        #   in Loop: Header=BB78_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_23
.LBB78_30:                              # %for.end209
	jmp	.LBB78_40
.LBB78_31:                              # %if.else210
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_34:                              # %for.cond214
                                        #   Parent Loop BB78_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB78_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB78_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_34
.LBB78_37:                              # %for.end235
                                        #   in Loop: Header=BB78_32 Depth=1
	jmp	.LBB78_38
.LBB78_38:                              # %for.inc236
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_32
.LBB78_39:                              # %for.end238
	jmp	.LBB78_40
.LBB78_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB78_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB78_51
.LBB78_42:                              # %if.then243
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_45 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB78_43 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_45:                              # %for.cond247
                                        #   Parent Loop BB78_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB78_45 Depth=2
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB78_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_45
.LBB78_48:                              # %for.end324
                                        #   in Loop: Header=BB78_43 Depth=1
	jmp	.LBB78_49
.LBB78_49:                              # %for.inc325
                                        #   in Loop: Header=BB78_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_43
.LBB78_50:                              # %for.end327
	jmp	.LBB78_60
.LBB78_51:                              # %if.else328
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB78_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_54:                              # %for.cond332
                                        #   Parent Loop BB78_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB78_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB78_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_54
.LBB78_57:                              # %for.end353
                                        #   in Loop: Header=BB78_52 Depth=1
	jmp	.LBB78_58
.LBB78_58:                              # %for.inc354
                                        #   in Loop: Header=BB78_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_52
.LBB78_59:                              # %for.end356
	jmp	.LBB78_60
.LBB78_60:                              # %if.end357
	jmp	.LBB78_61
.LBB78_61:                              # %if.end358
	cmpl	$1489978516, -72(%rbp)  # imm = 0x58CF4494
	jne	.LBB78_63
.LBB78_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_62
.Lfunc_end78:
	.size	StoreNewMotionVectorsBlock8x8.49, .Lfunc_end78-StoreNewMotionVectorsBlock8x8.49
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.50 # -- Begin function store_macroblock_parameters.50
	.p2align	4, 0x90
	.type	store_macroblock_parameters.50,@function
store_macroblock_parameters.50:         # @store_macroblock_parameters.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1431916527, -36(%rbp)  # imm = 0x55594FEF
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB79_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB79_3
.LBB79_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB79_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB79_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB79_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB79_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB79_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_4
.LBB79_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB79_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB79_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB79_10:                              # %for.cond20
                                        #   Parent Loop BB79_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB79_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB79_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_10
.LBB79_13:                              # %for.end39
                                        #   in Loop: Header=BB79_8 Depth=1
	jmp	.LBB79_14
.LBB79_14:                              # %for.inc40
                                        #   in Loop: Header=BB79_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_8
.LBB79_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB79_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB79_16 Depth=1
	movl	$0, -8(%rbp)
.LBB79_18:                              # %for.cond47
                                        #   Parent Loop BB79_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB79_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB79_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB79_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_18
.LBB79_21:                              # %for.end70
                                        #   in Loop: Header=BB79_16 Depth=1
	jmp	.LBB79_22
.LBB79_22:                              # %for.inc71
                                        #   in Loop: Header=BB79_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_16
.LBB79_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB79_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB79_24 Depth=1
	movl	$0, -4(%rbp)
.LBB79_26:                              # %for.cond78
                                        #   Parent Loop BB79_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB79_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB79_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_26
.LBB79_29:                              # %for.end94
                                        #   in Loop: Header=BB79_24 Depth=1
	jmp	.LBB79_30
.LBB79_30:                              # %for.inc95
                                        #   in Loop: Header=BB79_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_24
.LBB79_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB79_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB79_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB79_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB79_33 Depth=1
	movl	$0, -4(%rbp)
.LBB79_35:                              # %for.cond105
                                        #   Parent Loop BB79_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB79_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB79_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB79_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_35
.LBB79_38:                              # %for.end136
                                        #   in Loop: Header=BB79_33 Depth=1
	jmp	.LBB79_39
.LBB79_39:                              # %for.inc137
                                        #   in Loop: Header=BB79_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_33
.LBB79_40:                              # %for.end139
	jmp	.LBB79_41
.LBB79_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB79_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB79_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB79_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_46 Depth 2
                                        #       Child Loop BB79_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB79_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB79_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB79_46:                              # %for.cond152
                                        #   Parent Loop BB79_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB79_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB79_48:                              # %for.cond159
                                        #   Parent Loop BB79_44 Depth=1
                                        #     Parent Loop BB79_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB79_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB79_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_48
.LBB79_51:                              # %for.end179
                                        #   in Loop: Header=BB79_46 Depth=2
	jmp	.LBB79_52
.LBB79_52:                              # %for.inc180
                                        #   in Loop: Header=BB79_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_46
.LBB79_53:                              # %for.end182
                                        #   in Loop: Header=BB79_44 Depth=1
	jmp	.LBB79_54
.LBB79_54:                              # %for.inc183
                                        #   in Loop: Header=BB79_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_44
.LBB79_55:                              # %for.end185
	jmp	.LBB79_56
.LBB79_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB79_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB79_59
.LBB79_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB79_60
.LBB79_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB79_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB79_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB79_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB79_61 Depth=1
	movl	$0, -4(%rbp)
.LBB79_63:                              # %for.cond197
                                        #   Parent Loop BB79_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB79_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB79_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB79_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB79_66:                              # %if.end230
                                        #   in Loop: Header=BB79_63 Depth=2
	jmp	.LBB79_67
.LBB79_67:                              # %for.inc231
                                        #   in Loop: Header=BB79_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_63
.LBB79_68:                              # %for.end233
                                        #   in Loop: Header=BB79_61 Depth=1
	jmp	.LBB79_69
.LBB79_69:                              # %for.inc234
                                        #   in Loop: Header=BB79_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_61
.LBB79_70:                              # %for.end236
	cmpl	$1431916527, -36(%rbp)  # imm = 0x55594FEF
	jne	.LBB79_72
.LBB79_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_71
.Lfunc_end79:
	.size	store_macroblock_parameters.50, .Lfunc_end79-store_macroblock_parameters.50
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.51
.LCPI80_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI80_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.51
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.51,@function
Mode_Decision_for_8x8IntraBlocks.51:    # @Mode_Decision_for_8x8IntraBlocks.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI80_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI80_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1712463672, -24(%rbp)  # imm = 0x66121F38
	movl	%edi, -20(%rbp)
	vmovsd	%xmm0, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-48(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB80_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB80_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	-20(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB80_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$1, -16(%rbp)
.LBB80_4:                               # %if.end
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	-28(%rbp), %eax
	movq	-40(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_1
.LBB80_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1712463672, -24(%rbp)  # imm = 0x66121F38
	jne	.LBB80_8
.LBB80_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_7
.Lfunc_end80:
	.size	Mode_Decision_for_8x8IntraBlocks.51, .Lfunc_end80-Mode_Decision_for_8x8IntraBlocks.51
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.52 # -- Begin function CheckReliabilityOfRef.52
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.52,@function
CheckReliabilityOfRef.52:               # @CheckReliabilityOfRef.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$255756779, -104(%rbp)  # imm = 0xF3E89EB
	movl	%edi, -80(%rbp)
	movl	%esi, -96(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB81_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB81_6
.LBB81_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB81_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB81_5
.LBB81_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB81_5
.LBB81_5:                               # %cond.end
.LBB81_6:                               # %cond.end6
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB81_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB81_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB81_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB81_14
.LBB81_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB81_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB81_13
.LBB81_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB81_13
.LBB81_13:                              # %cond.end20
.LBB81_14:                              # %cond.end22
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB81_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB81_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -108(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB81_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_19 Depth 2
                                        #       Child Loop BB81_23 Depth 3
                                        #         Child Loop BB81_25 Depth 4
                                        #       Child Loop BB81_53 Depth 3
                                        #         Child Loop BB81_55 Depth 4
                                        #           Child Loop BB81_66 Depth 5
                                        #       Child Loop BB81_87 Depth 3
                                        #         Child Loop BB81_89 Depth 4
                                        #           Child Loop BB81_100 Depth 5
                                        #       Child Loop BB81_121 Depth 3
                                        #         Child Loop BB81_123 Depth 4
                                        #           Child Loop BB81_125 Depth 5
                                        #             Child Loop BB81_136 Depth 6
                                        #       Child Loop BB81_159 Depth 3
                                        #         Child Loop BB81_161 Depth 4
                                        #           Child Loop BB81_163 Depth 5
                                        #             Child Loop BB81_174 Depth 6
                                        #       Child Loop BB81_196 Depth 3
                                        #         Child Loop BB81_198 Depth 4
                                        #           Child Loop BB81_212 Depth 5
                                        #           Child Loop BB81_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB81_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB81_17 Depth=1
	movl	-92(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB81_19:                              # %for.cond31
                                        #   Parent Loop BB81_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_23 Depth 3
                                        #         Child Loop BB81_25 Depth 4
                                        #       Child Loop BB81_53 Depth 3
                                        #         Child Loop BB81_55 Depth 4
                                        #           Child Loop BB81_66 Depth 5
                                        #       Child Loop BB81_87 Depth 3
                                        #         Child Loop BB81_89 Depth 4
                                        #           Child Loop BB81_100 Depth 5
                                        #       Child Loop BB81_121 Depth 3
                                        #         Child Loop BB81_123 Depth 4
                                        #           Child Loop BB81_125 Depth 5
                                        #             Child Loop BB81_136 Depth 6
                                        #       Child Loop BB81_159 Depth 3
                                        #         Child Loop BB81_161 Depth 4
                                        #           Child Loop BB81_163 Depth 5
                                        #             Child Loop BB81_174 Depth 6
                                        #       Child Loop BB81_196 Depth 3
                                        #         Child Loop BB81_198 Depth 4
                                        #           Child Loop BB81_212 Depth 5
                                        #           Child Loop BB81_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB81_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB81_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-32(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	cmpl	$0, -72(%rbp)
	jne	.LBB81_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB81_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB81_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB81_19 Depth=2
	movl	$0, -12(%rbp)
.LBB81_23:                              # %for.cond75
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_25 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB81_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB81_23 Depth=3
	movl	$0, -16(%rbp)
.LBB81_25:                              # %for.cond79
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        #       Parent Loop BB81_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB81_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB81_25 Depth=4
	movq	pixel_map, %rax
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB81_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB81_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB81_29
.LBB81_28:                              # %cond.false87
                                        #   in Loop: Header=BB81_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB81_29:                              # %cond.end89
                                        #   in Loop: Header=BB81_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB81_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB81_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB81_35
.LBB81_31:                              # %cond.false94
                                        #   in Loop: Header=BB81_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB81_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB81_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB81_34
.LBB81_33:                              # %cond.false99
                                        #   in Loop: Header=BB81_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB81_34:                              # %cond.end101
                                        #   in Loop: Header=BB81_25 Depth=4
.LBB81_35:                              # %cond.end103
                                        #   in Loop: Header=BB81_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB81_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB81_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB81_38
.LBB81_37:                              # %cond.false111
                                        #   in Loop: Header=BB81_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB81_38:                              # %cond.end113
                                        #   in Loop: Header=BB81_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB81_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB81_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB81_44
.LBB81_40:                              # %cond.false118
                                        #   in Loop: Header=BB81_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB81_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB81_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB81_43
.LBB81_42:                              # %cond.false123
                                        #   in Loop: Header=BB81_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB81_43:                              # %cond.end125
                                        #   in Loop: Header=BB81_25 Depth=4
.LBB81_44:                              # %cond.end127
                                        #   in Loop: Header=BB81_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB81_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB81_267
.LBB81_46:                              # %if.end
                                        #   in Loop: Header=BB81_25 Depth=4
	jmp	.LBB81_47
.LBB81_47:                              # %for.inc
                                        #   in Loop: Header=BB81_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_25
.LBB81_48:                              # %for.end
                                        #   in Loop: Header=BB81_23 Depth=3
	jmp	.LBB81_49
.LBB81_49:                              # %for.inc135
                                        #   in Loop: Header=BB81_23 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_23
.LBB81_50:                              # %for.end137
                                        #   in Loop: Header=BB81_19 Depth=2
	jmp	.LBB81_262
.LBB81_51:                              # %if.else
                                        #   in Loop: Header=BB81_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB81_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB81_19 Depth=2
	movl	$0, -12(%rbp)
.LBB81_53:                              # %for.cond141
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_55 Depth 4
                                        #           Child Loop BB81_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB81_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB81_53 Depth=3
	movl	$0, -16(%rbp)
.LBB81_55:                              # %for.cond145
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        #       Parent Loop BB81_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB81_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB81_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB81_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB81_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB81_59
.LBB81_58:                              # %cond.false153
                                        #   in Loop: Header=BB81_55 Depth=4
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB81_59:                              # %cond.end155
                                        #   in Loop: Header=BB81_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB81_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB81_65
.LBB81_61:                              # %cond.false160
                                        #   in Loop: Header=BB81_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB81_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB81_64
.LBB81_63:                              # %cond.false165
                                        #   in Loop: Header=BB81_55 Depth=4
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB81_64:                              # %cond.end167
                                        #   in Loop: Header=BB81_55 Depth=4
.LBB81_65:                              # %cond.end169
                                        #   in Loop: Header=BB81_55 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -24(%rbp)
.LBB81_66:                              # %for.cond171
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        #       Parent Loop BB81_53 Depth=3
                                        #         Parent Loop BB81_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB81_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB81_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB81_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB81_70
.LBB81_69:                              # %cond.false180
                                        #   in Loop: Header=BB81_66 Depth=5
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
.LBB81_70:                              # %cond.end183
                                        #   in Loop: Header=BB81_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB81_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB81_76
.LBB81_72:                              # %cond.false188
                                        #   in Loop: Header=BB81_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB81_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB81_75
.LBB81_74:                              # %cond.false194
                                        #   in Loop: Header=BB81_66 Depth=5
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
.LBB81_75:                              # %cond.end197
                                        #   in Loop: Header=BB81_66 Depth=5
.LBB81_76:                              # %cond.end199
                                        #   in Loop: Header=BB81_66 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB81_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB81_267
.LBB81_78:                              # %if.end209
                                        #   in Loop: Header=BB81_66 Depth=5
	jmp	.LBB81_79
.LBB81_79:                              # %for.inc210
                                        #   in Loop: Header=BB81_66 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB81_66
.LBB81_80:                              # %for.end212
                                        #   in Loop: Header=BB81_55 Depth=4
	jmp	.LBB81_81
.LBB81_81:                              # %for.inc213
                                        #   in Loop: Header=BB81_55 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_55
.LBB81_82:                              # %for.end215
                                        #   in Loop: Header=BB81_53 Depth=3
	jmp	.LBB81_83
.LBB81_83:                              # %for.inc216
                                        #   in Loop: Header=BB81_53 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_53
.LBB81_84:                              # %for.end218
                                        #   in Loop: Header=BB81_19 Depth=2
	jmp	.LBB81_261
.LBB81_85:                              # %if.else219
                                        #   in Loop: Header=BB81_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB81_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB81_19 Depth=2
	movl	$0, -12(%rbp)
.LBB81_87:                              # %for.cond223
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_89 Depth 4
                                        #           Child Loop BB81_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB81_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB81_87 Depth=3
	movl	$0, -16(%rbp)
.LBB81_89:                              # %for.cond227
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        #       Parent Loop BB81_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB81_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB81_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB81_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB81_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB81_93
.LBB81_92:                              # %cond.false235
                                        #   in Loop: Header=BB81_89 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB81_93:                              # %cond.end237
                                        #   in Loop: Header=BB81_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB81_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB81_99
.LBB81_95:                              # %cond.false242
                                        #   in Loop: Header=BB81_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB81_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB81_98
.LBB81_97:                              # %cond.false247
                                        #   in Loop: Header=BB81_89 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB81_98:                              # %cond.end249
                                        #   in Loop: Header=BB81_89 Depth=4
.LBB81_99:                              # %cond.end251
                                        #   in Loop: Header=BB81_89 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB81_100:                             # %for.cond253
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        #       Parent Loop BB81_87 Depth=3
                                        #         Parent Loop BB81_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB81_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB81_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB81_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB81_104
.LBB81_103:                             # %cond.false262
                                        #   in Loop: Header=BB81_100 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB81_104:                             # %cond.end265
                                        #   in Loop: Header=BB81_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB81_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB81_110
.LBB81_106:                             # %cond.false270
                                        #   in Loop: Header=BB81_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB81_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB81_109
.LBB81_108:                             # %cond.false276
                                        #   in Loop: Header=BB81_100 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB81_109:                             # %cond.end279
                                        #   in Loop: Header=BB81_100 Depth=5
.LBB81_110:                             # %cond.end281
                                        #   in Loop: Header=BB81_100 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB81_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB81_267
.LBB81_112:                             # %if.end291
                                        #   in Loop: Header=BB81_100 Depth=5
	jmp	.LBB81_113
.LBB81_113:                             # %for.inc292
                                        #   in Loop: Header=BB81_100 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB81_100
.LBB81_114:                             # %for.end294
                                        #   in Loop: Header=BB81_89 Depth=4
	jmp	.LBB81_115
.LBB81_115:                             # %for.inc295
                                        #   in Loop: Header=BB81_89 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_89
.LBB81_116:                             # %for.end297
                                        #   in Loop: Header=BB81_87 Depth=3
	jmp	.LBB81_117
.LBB81_117:                             # %for.inc298
                                        #   in Loop: Header=BB81_87 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_87
.LBB81_118:                             # %for.end300
                                        #   in Loop: Header=BB81_19 Depth=2
	jmp	.LBB81_260
.LBB81_119:                             # %if.else301
                                        #   in Loop: Header=BB81_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB81_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB81_19 Depth=2
	movl	$0, -12(%rbp)
.LBB81_121:                             # %for.cond305
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_123 Depth 4
                                        #           Child Loop BB81_125 Depth 5
                                        #             Child Loop BB81_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB81_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB81_121 Depth=3
	movl	$0, -16(%rbp)
.LBB81_123:                             # %for.cond309
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        #       Parent Loop BB81_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB81_125 Depth 5
                                        #             Child Loop BB81_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB81_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB81_123 Depth=4
	movl	$-2, -28(%rbp)
.LBB81_125:                             # %for.cond313
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        #       Parent Loop BB81_121 Depth=3
                                        #         Parent Loop BB81_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB81_136 Depth 6
	cmpl	$4, -28(%rbp)
	jge	.LBB81_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB81_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB81_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB81_129
.LBB81_128:                             # %cond.false322
                                        #   in Loop: Header=BB81_125 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB81_129:                             # %cond.end325
                                        #   in Loop: Header=BB81_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB81_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB81_135
.LBB81_131:                             # %cond.false330
                                        #   in Loop: Header=BB81_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB81_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB81_134
.LBB81_133:                             # %cond.false336
                                        #   in Loop: Header=BB81_125 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB81_134:                             # %cond.end339
                                        #   in Loop: Header=BB81_125 Depth=5
.LBB81_135:                             # %cond.end341
                                        #   in Loop: Header=BB81_125 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -24(%rbp)
.LBB81_136:                             # %for.cond343
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        #       Parent Loop BB81_121 Depth=3
                                        #         Parent Loop BB81_123 Depth=4
                                        #           Parent Loop BB81_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -24(%rbp)
	jge	.LBB81_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB81_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB81_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB81_140
.LBB81_139:                             # %cond.false352
                                        #   in Loop: Header=BB81_136 Depth=6
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB81_140:                             # %cond.end355
                                        #   in Loop: Header=BB81_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB81_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB81_146
.LBB81_142:                             # %cond.false360
                                        #   in Loop: Header=BB81_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB81_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB81_145
.LBB81_144:                             # %cond.false366
                                        #   in Loop: Header=BB81_136 Depth=6
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB81_145:                             # %cond.end369
                                        #   in Loop: Header=BB81_136 Depth=6
.LBB81_146:                             # %cond.end371
                                        #   in Loop: Header=BB81_136 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB81_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB81_267
.LBB81_148:                             # %if.end381
                                        #   in Loop: Header=BB81_136 Depth=6
	jmp	.LBB81_149
.LBB81_149:                             # %for.inc382
                                        #   in Loop: Header=BB81_136 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB81_136
.LBB81_150:                             # %for.end384
                                        #   in Loop: Header=BB81_125 Depth=5
	jmp	.LBB81_151
.LBB81_151:                             # %for.inc385
                                        #   in Loop: Header=BB81_125 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB81_125
.LBB81_152:                             # %for.end387
                                        #   in Loop: Header=BB81_123 Depth=4
	jmp	.LBB81_153
.LBB81_153:                             # %for.inc388
                                        #   in Loop: Header=BB81_123 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_123
.LBB81_154:                             # %for.end390
                                        #   in Loop: Header=BB81_121 Depth=3
	jmp	.LBB81_155
.LBB81_155:                             # %for.inc391
                                        #   in Loop: Header=BB81_121 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_121
.LBB81_156:                             # %for.end393
                                        #   in Loop: Header=BB81_19 Depth=2
	jmp	.LBB81_259
.LBB81_157:                             # %if.else394
                                        #   in Loop: Header=BB81_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB81_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB81_19 Depth=2
	movl	$0, -12(%rbp)
.LBB81_159:                             # %for.cond398
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_161 Depth 4
                                        #           Child Loop BB81_163 Depth 5
                                        #             Child Loop BB81_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB81_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB81_159 Depth=3
	movl	$0, -16(%rbp)
.LBB81_161:                             # %for.cond402
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        #       Parent Loop BB81_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB81_163 Depth 5
                                        #             Child Loop BB81_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB81_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB81_161 Depth=4
	movl	$-2, -24(%rbp)
.LBB81_163:                             # %for.cond406
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        #       Parent Loop BB81_159 Depth=3
                                        #         Parent Loop BB81_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB81_174 Depth 6
	cmpl	$4, -24(%rbp)
	jge	.LBB81_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB81_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB81_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB81_167
.LBB81_166:                             # %cond.false415
                                        #   in Loop: Header=BB81_163 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB81_167:                             # %cond.end418
                                        #   in Loop: Header=BB81_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB81_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB81_173
.LBB81_169:                             # %cond.false423
                                        #   in Loop: Header=BB81_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB81_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB81_172
.LBB81_171:                             # %cond.false429
                                        #   in Loop: Header=BB81_163 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB81_172:                             # %cond.end432
                                        #   in Loop: Header=BB81_163 Depth=5
.LBB81_173:                             # %cond.end434
                                        #   in Loop: Header=BB81_163 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB81_174:                             # %for.cond436
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        #       Parent Loop BB81_159 Depth=3
                                        #         Parent Loop BB81_161 Depth=4
                                        #           Parent Loop BB81_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -28(%rbp)
	jge	.LBB81_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB81_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB81_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB81_178
.LBB81_177:                             # %cond.false445
                                        #   in Loop: Header=BB81_174 Depth=6
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB81_178:                             # %cond.end448
                                        #   in Loop: Header=BB81_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB81_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB81_184
.LBB81_180:                             # %cond.false453
                                        #   in Loop: Header=BB81_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB81_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB81_183
.LBB81_182:                             # %cond.false459
                                        #   in Loop: Header=BB81_174 Depth=6
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB81_183:                             # %cond.end462
                                        #   in Loop: Header=BB81_174 Depth=6
.LBB81_184:                             # %cond.end464
                                        #   in Loop: Header=BB81_174 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB81_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB81_267
.LBB81_186:                             # %if.end474
                                        #   in Loop: Header=BB81_174 Depth=6
	jmp	.LBB81_187
.LBB81_187:                             # %for.inc475
                                        #   in Loop: Header=BB81_174 Depth=6
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB81_174
.LBB81_188:                             # %for.end477
                                        #   in Loop: Header=BB81_163 Depth=5
	jmp	.LBB81_189
.LBB81_189:                             # %for.inc478
                                        #   in Loop: Header=BB81_163 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB81_163
.LBB81_190:                             # %for.end480
                                        #   in Loop: Header=BB81_161 Depth=4
	jmp	.LBB81_191
.LBB81_191:                             # %for.inc481
                                        #   in Loop: Header=BB81_161 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_161
.LBB81_192:                             # %for.end483
                                        #   in Loop: Header=BB81_159 Depth=3
	jmp	.LBB81_193
.LBB81_193:                             # %for.inc484
                                        #   in Loop: Header=BB81_159 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_159
.LBB81_194:                             # %for.end486
                                        #   in Loop: Header=BB81_19 Depth=2
	jmp	.LBB81_258
.LBB81_195:                             # %if.else487
                                        #   in Loop: Header=BB81_19 Depth=2
	movl	$0, -12(%rbp)
.LBB81_196:                             # %for.cond488
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_198 Depth 4
                                        #           Child Loop BB81_212 Depth 5
                                        #           Child Loop BB81_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB81_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB81_196 Depth=3
	movl	$0, -16(%rbp)
.LBB81_198:                             # %for.cond492
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        #       Parent Loop BB81_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB81_212 Depth 5
                                        #           Child Loop BB81_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB81_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB81_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB81_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB81_202
.LBB81_201:                             # %cond.false500
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB81_202:                             # %cond.end503
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB81_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB81_205
.LBB81_204:                             # %cond.false508
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	-44(%rbp), %eax
.LBB81_205:                             # %cond.end509
                                        #   in Loop: Header=BB81_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB81_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB81_211
.LBB81_207:                             # %cond.false514
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB81_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB81_210
.LBB81_209:                             # %cond.false518
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	-44(%rbp), %eax
.LBB81_210:                             # %cond.end519
                                        #   in Loop: Header=BB81_198 Depth=4
.LBB81_211:                             # %cond.end521
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -24(%rbp)
.LBB81_212:                             # %for.cond523
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        #       Parent Loop BB81_196 Depth=3
                                        #         Parent Loop BB81_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB81_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB81_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB81_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB81_216
.LBB81_215:                             # %cond.false532
                                        #   in Loop: Header=BB81_212 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB81_216:                             # %cond.end535
                                        #   in Loop: Header=BB81_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB81_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB81_222
.LBB81_218:                             # %cond.false540
                                        #   in Loop: Header=BB81_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB81_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB81_221
.LBB81_220:                             # %cond.false546
                                        #   in Loop: Header=BB81_212 Depth=5
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB81_221:                             # %cond.end549
                                        #   in Loop: Header=BB81_212 Depth=5
.LBB81_222:                             # %cond.end551
                                        #   in Loop: Header=BB81_212 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB81_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB81_267
.LBB81_224:                             # %if.end561
                                        #   in Loop: Header=BB81_212 Depth=5
	jmp	.LBB81_225
.LBB81_225:                             # %for.inc562
                                        #   in Loop: Header=BB81_212 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB81_212
.LBB81_226:                             # %for.end564
                                        #   in Loop: Header=BB81_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB81_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB81_229
.LBB81_228:                             # %cond.false569
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB81_229:                             # %cond.end572
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB81_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB81_232
.LBB81_231:                             # %cond.false577
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	-48(%rbp), %eax
.LBB81_232:                             # %cond.end578
                                        #   in Loop: Header=BB81_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB81_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB81_238
.LBB81_234:                             # %cond.false583
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB81_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB81_237
.LBB81_236:                             # %cond.false587
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	-48(%rbp), %eax
.LBB81_237:                             # %cond.end588
                                        #   in Loop: Header=BB81_198 Depth=4
.LBB81_238:                             # %cond.end590
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB81_239:                             # %for.cond592
                                        #   Parent Loop BB81_17 Depth=1
                                        #     Parent Loop BB81_19 Depth=2
                                        #       Parent Loop BB81_196 Depth=3
                                        #         Parent Loop BB81_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB81_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB81_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB81_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB81_243
.LBB81_242:                             # %cond.false601
                                        #   in Loop: Header=BB81_239 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB81_243:                             # %cond.end604
                                        #   in Loop: Header=BB81_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB81_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB81_249
.LBB81_245:                             # %cond.false609
                                        #   in Loop: Header=BB81_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB81_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB81_248
.LBB81_247:                             # %cond.false615
                                        #   in Loop: Header=BB81_239 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB81_248:                             # %cond.end618
                                        #   in Loop: Header=BB81_239 Depth=5
.LBB81_249:                             # %cond.end620
                                        #   in Loop: Header=BB81_239 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB81_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB81_267
.LBB81_251:                             # %if.end630
                                        #   in Loop: Header=BB81_239 Depth=5
	jmp	.LBB81_252
.LBB81_252:                             # %for.inc631
                                        #   in Loop: Header=BB81_239 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB81_239
.LBB81_253:                             # %for.end633
                                        #   in Loop: Header=BB81_198 Depth=4
	jmp	.LBB81_254
.LBB81_254:                             # %for.inc634
                                        #   in Loop: Header=BB81_198 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_198
.LBB81_255:                             # %for.end636
                                        #   in Loop: Header=BB81_196 Depth=3
	jmp	.LBB81_256
.LBB81_256:                             # %for.inc637
                                        #   in Loop: Header=BB81_196 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_196
.LBB81_257:                             # %for.end639
                                        #   in Loop: Header=BB81_19 Depth=2
	jmp	.LBB81_258
.LBB81_258:                             # %if.end640
                                        #   in Loop: Header=BB81_19 Depth=2
	jmp	.LBB81_259
.LBB81_259:                             # %if.end641
                                        #   in Loop: Header=BB81_19 Depth=2
	jmp	.LBB81_260
.LBB81_260:                             # %if.end642
                                        #   in Loop: Header=BB81_19 Depth=2
	jmp	.LBB81_261
.LBB81_261:                             # %if.end643
                                        #   in Loop: Header=BB81_19 Depth=2
	jmp	.LBB81_262
.LBB81_262:                             # %if.end644
                                        #   in Loop: Header=BB81_19 Depth=2
	jmp	.LBB81_263
.LBB81_263:                             # %for.inc645
                                        #   in Loop: Header=BB81_19 Depth=2
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB81_19
.LBB81_264:                             # %for.end647
                                        #   in Loop: Header=BB81_17 Depth=1
	jmp	.LBB81_265
.LBB81_265:                             # %for.inc648
                                        #   in Loop: Header=BB81_17 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB81_17
.LBB81_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB81_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$255756779, -104(%rbp)  # imm = 0xF3E89EB
	jne	.LBB81_269
.LBB81_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_268
.Lfunc_end81:
	.size	CheckReliabilityOfRef.52, .Lfunc_end81-CheckReliabilityOfRef.52
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.53 # -- Begin function store_macroblock_parameters.53
	.p2align	4, 0x90
	.type	store_macroblock_parameters.53,@function
store_macroblock_parameters.53:         # @store_macroblock_parameters.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1135757015, -36(%rbp)  # imm = 0x43B246D7
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB82_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB82_3
.LBB82_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB82_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB82_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB82_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB82_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB82_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_4
.LBB82_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB82_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB82_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB82_10:                              # %for.cond20
                                        #   Parent Loop BB82_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB82_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB82_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_10
.LBB82_13:                              # %for.end39
                                        #   in Loop: Header=BB82_8 Depth=1
	jmp	.LBB82_14
.LBB82_14:                              # %for.inc40
                                        #   in Loop: Header=BB82_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_8
.LBB82_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB82_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB82_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB82_16 Depth=1
	movl	$0, -8(%rbp)
.LBB82_18:                              # %for.cond47
                                        #   Parent Loop BB82_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB82_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB82_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB82_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_18
.LBB82_21:                              # %for.end70
                                        #   in Loop: Header=BB82_16 Depth=1
	jmp	.LBB82_22
.LBB82_22:                              # %for.inc71
                                        #   in Loop: Header=BB82_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_16
.LBB82_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB82_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB82_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB82_24 Depth=1
	movl	$0, -4(%rbp)
.LBB82_26:                              # %for.cond78
                                        #   Parent Loop BB82_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB82_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB82_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB82_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_26
.LBB82_29:                              # %for.end94
                                        #   in Loop: Header=BB82_24 Depth=1
	jmp	.LBB82_30
.LBB82_30:                              # %for.inc95
                                        #   in Loop: Header=BB82_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_24
.LBB82_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB82_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB82_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB82_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB82_33 Depth=1
	movl	$0, -4(%rbp)
.LBB82_35:                              # %for.cond105
                                        #   Parent Loop BB82_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB82_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB82_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB82_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_35
.LBB82_38:                              # %for.end136
                                        #   in Loop: Header=BB82_33 Depth=1
	jmp	.LBB82_39
.LBB82_39:                              # %for.inc137
                                        #   in Loop: Header=BB82_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_33
.LBB82_40:                              # %for.end139
	jmp	.LBB82_41
.LBB82_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB82_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB82_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB82_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_46 Depth 2
                                        #       Child Loop BB82_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB82_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB82_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB82_46:                              # %for.cond152
                                        #   Parent Loop BB82_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB82_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB82_48:                              # %for.cond159
                                        #   Parent Loop BB82_44 Depth=1
                                        #     Parent Loop BB82_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB82_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB82_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_48
.LBB82_51:                              # %for.end179
                                        #   in Loop: Header=BB82_46 Depth=2
	jmp	.LBB82_52
.LBB82_52:                              # %for.inc180
                                        #   in Loop: Header=BB82_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_46
.LBB82_53:                              # %for.end182
                                        #   in Loop: Header=BB82_44 Depth=1
	jmp	.LBB82_54
.LBB82_54:                              # %for.inc183
                                        #   in Loop: Header=BB82_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_44
.LBB82_55:                              # %for.end185
	jmp	.LBB82_56
.LBB82_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB82_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB82_59
.LBB82_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB82_60
.LBB82_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB82_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB82_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB82_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB82_61 Depth=1
	movl	$0, -4(%rbp)
.LBB82_63:                              # %for.cond197
                                        #   Parent Loop BB82_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB82_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB82_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB82_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB82_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB82_66:                              # %if.end230
                                        #   in Loop: Header=BB82_63 Depth=2
	jmp	.LBB82_67
.LBB82_67:                              # %for.inc231
                                        #   in Loop: Header=BB82_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_63
.LBB82_68:                              # %for.end233
                                        #   in Loop: Header=BB82_61 Depth=1
	jmp	.LBB82_69
.LBB82_69:                              # %for.inc234
                                        #   in Loop: Header=BB82_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_61
.LBB82_70:                              # %for.end236
	cmpl	$1135757015, -36(%rbp)  # imm = 0x43B246D7
	jne	.LBB82_72
.LBB82_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_71
.Lfunc_end82:
	.size	store_macroblock_parameters.53, .Lfunc_end82-store_macroblock_parameters.53
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.54
.LCPI83_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.54
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.54,@function
RDCost_for_macroblocks.54:              # @RDCost_for_macroblocks.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$271222682, -96(%rbp)   # imm = 0x102A879A
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -24(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -36(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB83_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB83_3
.LBB83_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB83_3
.LBB83_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB83_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB83_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -76(%rbp)
	je	.LBB83_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -24(%rbp)
	jne	.LBB83_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
.LBB83_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_10 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB83_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB83_8 Depth=1
	movl	$0, -16(%rbp)
.LBB83_10:                              # %for.cond17
                                        #   Parent Loop BB83_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB83_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB83_10 Depth=2
	movq	direct_pdir, %rax
	movl	-92(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-104(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB83_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB83_177
.LBB83_13:                              # %if.end
                                        #   in Loop: Header=BB83_10 Depth=2
	jmp	.LBB83_14
.LBB83_14:                              # %for.inc
                                        #   in Loop: Header=BB83_10 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_10
.LBB83_15:                              # %for.end
                                        #   in Loop: Header=BB83_8 Depth=1
	jmp	.LBB83_16
.LBB83_16:                              # %for.inc30
                                        #   in Loop: Header=BB83_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_8
.LBB83_17:                              # %for.end32
	jmp	.LBB83_18
.LBB83_18:                              # %if.end33
	cmpl	$8, -24(%rbp)
	jge	.LBB83_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -24(%rbp)
	jne	.LBB83_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB83_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB83_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB83_177
.LBB83_23:                              # %if.end46
	jmp	.LBB83_76
.LBB83_24:                              # %if.else
	cmpl	$8, -24(%rbp)
	jne	.LBB83_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB83_75
.LBB83_26:                              # %if.else50
	cmpl	$9, -24(%rbp)
	jne	.LBB83_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB83_47
# %bb.28:                               # %if.then56
	movl	$0, -12(%rbp)
.LBB83_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_31 Depth 2
                                        #       Child Loop BB83_33 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB83_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB83_29 Depth=1
	movl	$0, -16(%rbp)
.LBB83_31:                              # %for.cond61
                                        #   Parent Loop BB83_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB83_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB83_31 Depth=2
	movl	$0, -20(%rbp)
.LBB83_33:                              # %for.cond65
                                        #   Parent Loop BB83_29 Depth=1
                                        #     Parent Loop BB83_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB83_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB83_33 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB83_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB83_33 Depth=3
	movl	$2, -40(%rbp)
.LBB83_36:                              # %if.end77
                                        #   in Loop: Header=BB83_33 Depth=3
	jmp	.LBB83_37
.LBB83_37:                              # %for.inc78
                                        #   in Loop: Header=BB83_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB83_33
.LBB83_38:                              # %for.end80
                                        #   in Loop: Header=BB83_31 Depth=2
	jmp	.LBB83_39
.LBB83_39:                              # %for.inc81
                                        #   in Loop: Header=BB83_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_31
.LBB83_40:                              # %for.end83
                                        #   in Loop: Header=BB83_29 Depth=1
	jmp	.LBB83_41
.LBB83_41:                              # %for.inc84
                                        #   in Loop: Header=BB83_29 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_29
.LBB83_42:                              # %for.end86
	movl	$0, -28(%rbp)
.LBB83_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB83_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB83_43 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB83_43 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB83_43
.LBB83_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB83_47:                              # %if.end97
	jmp	.LBB83_74
.LBB83_48:                              # %if.else98
	cmpl	$10, -24(%rbp)
	jne	.LBB83_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB83_73
.LBB83_50:                              # %if.else102
	cmpl	$13, -24(%rbp)
	jne	.LBB83_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB83_71
# %bb.52:                               # %if.then110
	movl	$0, -12(%rbp)
.LBB83_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_55 Depth 2
                                        #       Child Loop BB83_57 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB83_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB83_53 Depth=1
	movl	$0, -16(%rbp)
.LBB83_55:                              # %for.cond115
                                        #   Parent Loop BB83_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_57 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB83_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB83_55 Depth=2
	movl	$0, -20(%rbp)
.LBB83_57:                              # %for.cond119
                                        #   Parent Loop BB83_53 Depth=1
                                        #     Parent Loop BB83_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB83_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB83_57 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB83_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB83_57 Depth=3
	movl	$2, -40(%rbp)
.LBB83_60:                              # %if.end131
                                        #   in Loop: Header=BB83_57 Depth=3
	jmp	.LBB83_61
.LBB83_61:                              # %for.inc132
                                        #   in Loop: Header=BB83_57 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB83_57
.LBB83_62:                              # %for.end134
                                        #   in Loop: Header=BB83_55 Depth=2
	jmp	.LBB83_63
.LBB83_63:                              # %for.inc135
                                        #   in Loop: Header=BB83_55 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_55
.LBB83_64:                              # %for.end137
                                        #   in Loop: Header=BB83_53 Depth=1
	jmp	.LBB83_65
.LBB83_65:                              # %for.inc138
                                        #   in Loop: Header=BB83_53 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_53
.LBB83_66:                              # %for.end140
	movl	$0, -28(%rbp)
.LBB83_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB83_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB83_67 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB83_67 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB83_67
.LBB83_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB83_71:                              # %if.end152
	jmp	.LBB83_72
.LBB83_72:                              # %if.end153
	jmp	.LBB83_73
.LBB83_73:                              # %if.end154
	jmp	.LBB83_74
.LBB83_74:                              # %if.end155
	jmp	.LBB83_75
.LBB83_75:                              # %if.end156
	jmp	.LBB83_76
.LBB83_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB83_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB83_82
# %bb.78:                               # %if.then164
	cmpl	$10, -24(%rbp)
	jne	.LBB83_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB83_81
.LBB83_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB83_81
.LBB83_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB83_82:                              # %if.end171
	cmpl	$10, -24(%rbp)
	jne	.LBB83_92
# %bb.83:                               # %if.then174
	movl	$0, -12(%rbp)
.LBB83_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_86 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB83_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB83_84 Depth=1
	movl	$0, -16(%rbp)
.LBB83_86:                              # %for.cond179
                                        #   Parent Loop BB83_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB83_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB83_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB83_86 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_86
.LBB83_89:                              # %for.end196
                                        #   in Loop: Header=BB83_84 Depth=1
	jmp	.LBB83_90
.LBB83_90:                              # %for.inc197
                                        #   in Loop: Header=BB83_84 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_84
.LBB83_91:                              # %for.end199
	jmp	.LBB83_101
.LBB83_92:                              # %if.else200
	movl	$0, -12(%rbp)
.LBB83_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_95 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB83_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB83_93 Depth=1
	movl	$0, -16(%rbp)
.LBB83_95:                              # %for.cond205
                                        #   Parent Loop BB83_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB83_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB83_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB83_95 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_95
.LBB83_98:                              # %for.end220
                                        #   in Loop: Header=BB83_93 Depth=1
	jmp	.LBB83_99
.LBB83_99:                              # %for.inc221
                                        #   in Loop: Header=BB83_93 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_93
.LBB83_100:                             # %for.end223
	jmp	.LBB83_101
.LBB83_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB83_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -24(%rbp)
	je	.LBB83_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -24(%rbp)
	je	.LBB83_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -24(%rbp)
	je	.LBB83_107
.LBB83_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB83_107
# %bb.106:                              # %if.then238
	leaq	-32(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB83_107:                             # %if.end239
	cmpl	$10, -24(%rbp)
	jne	.LBB83_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB83_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB83_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB83_124
# %bb.111:                              # %if.then254
	movl	$0, -20(%rbp)
.LBB83_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_114 Depth 2
                                        #       Child Loop BB83_116 Depth 3
	movl	-20(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB83_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB83_112 Depth=1
	movl	-20(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -16(%rbp)
.LBB83_114:                             # %for.cond259
                                        #   Parent Loop BB83_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_116 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB83_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB83_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB83_116:                             # %for.cond263
                                        #   Parent Loop BB83_112 Depth=1
                                        #     Parent Loop BB83_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB83_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB83_116 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_116
.LBB83_119:                             # %for.end291
                                        #   in Loop: Header=BB83_114 Depth=2
	jmp	.LBB83_120
.LBB83_120:                             # %for.inc292
                                        #   in Loop: Header=BB83_114 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_114
.LBB83_121:                             # %for.end294
                                        #   in Loop: Header=BB83_112 Depth=1
	jmp	.LBB83_122
.LBB83_122:                             # %for.inc295
                                        #   in Loop: Header=BB83_112 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB83_112
.LBB83_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB83_133
.LBB83_124:                             # %if.else300
	movl	$0, -16(%rbp)
.LBB83_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_127 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB83_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB83_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB83_127:                             # %for.cond306
                                        #   Parent Loop BB83_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB83_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB83_127 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_127
.LBB83_130:                             # %for.end334
                                        #   in Loop: Header=BB83_125 Depth=1
	jmp	.LBB83_131
.LBB83_131:                             # %for.inc335
                                        #   in Loop: Header=BB83_125 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_125
.LBB83_132:                             # %for.end337
	jmp	.LBB83_133
.LBB83_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB83_143
# %bb.134:                              # %if.then342
	movl	$0, -16(%rbp)
.LBB83_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_137 Depth 2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB83_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB83_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB83_137:                             # %for.cond347
                                        #   Parent Loop BB83_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB83_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB83_137 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_137
.LBB83_140:                             # %for.end398
                                        #   in Loop: Header=BB83_135 Depth=1
	jmp	.LBB83_141
.LBB83_141:                             # %for.inc399
                                        #   in Loop: Header=BB83_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_135
.LBB83_142:                             # %for.end401
	jmp	.LBB83_143
.LBB83_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -100(%rbp)
	je	.LBB83_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB83_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -76(%rbp)
	je	.LBB83_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB83_148
.LBB83_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
	movl	-72(%rbp), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB83_149
.LBB83_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-32(%rbp), %esi
	leaq	-36(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
.LBB83_149:                             # %if.end422
	jmp	.LBB83_151
.LBB83_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
.LBB83_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI83_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB83_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI83_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB83_154
.LBB83_153:                             # %cond.false431
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm2
.LBB83_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -120(%rbp)
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB83_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB83_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB83_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB83_159
.LBB83_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB83_177
.LBB83_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB83_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -24(%rbp)
	je	.LBB83_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB83_165
	jmp	.LBB83_176
.LBB83_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB83_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB83_176
	jmp	.LBB83_165
.LBB83_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB83_165
	jmp	.LBB83_176
.LBB83_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB83_175
# %bb.166:                              # %if.then465
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB83_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB83_171
	jmp	.LBB83_174
.LBB83_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB83_170
# %bb.169:                              # %cond.true473
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB83_174
	jmp	.LBB83_171
.LBB83_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB83_171
	jmp	.LBB83_174
.LBB83_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB83_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB83_177
.LBB83_173:                             # %if.end482
	jmp	.LBB83_174
.LBB83_174:                             # %if.end483
	jmp	.LBB83_175
.LBB83_175:                             # %if.end484
	jmp	.LBB83_176
.LBB83_176:                             # %if.end485
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB83_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$271222682, -96(%rbp)   # imm = 0x102A879A
	jne	.LBB83_179
.LBB83_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_178
.Lfunc_end83:
	.size	RDCost_for_macroblocks.54, .Lfunc_end83-RDCost_for_macroblocks.54
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.55    # -- Begin function RestoreMVBlock8x8.55
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.55,@function
RestoreMVBlock8x8.55:                   # @RestoreMVBlock8x8.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1468434298, -68(%rbp)  # imm = 0x5786877A
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB84_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB84_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB84_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB84_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB84_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB84_5:                               # %for.cond7
                                        #   Parent Loop BB84_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB84_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB84_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB84_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_5
.LBB84_8:                               # %for.end
                                        #   in Loop: Header=BB84_3 Depth=1
	jmp	.LBB84_9
.LBB84_9:                               # %for.inc76
                                        #   in Loop: Header=BB84_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_3
.LBB84_10:                              # %for.end78
	jmp	.LBB84_11
.LBB84_11:                              # %if.end
	jmp	.LBB84_46
.LBB84_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB84_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB84_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB84_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB84_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB84_16:                              # %for.cond84
                                        #   Parent Loop BB84_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB84_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB84_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB84_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_16
.LBB84_19:                              # %for.end161
                                        #   in Loop: Header=BB84_14 Depth=1
	jmp	.LBB84_20
.LBB84_20:                              # %for.inc162
                                        #   in Loop: Header=BB84_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_14
.LBB84_21:                              # %for.end164
	jmp	.LBB84_45
.LBB84_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB84_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB84_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB84_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB84_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB84_26:                              # %for.cond171
                                        #   Parent Loop BB84_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB84_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB84_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB84_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_26
.LBB84_29:                              # %for.end248
                                        #   in Loop: Header=BB84_24 Depth=1
	jmp	.LBB84_30
.LBB84_30:                              # %for.inc249
                                        #   in Loop: Header=BB84_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_24
.LBB84_31:                              # %for.end251
	jmp	.LBB84_44
.LBB84_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB84_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB84_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB84_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB84_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB84_36:                              # %for.cond258
                                        #   Parent Loop BB84_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB84_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB84_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB84_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_36
.LBB84_39:                              # %for.end407
                                        #   in Loop: Header=BB84_34 Depth=1
	jmp	.LBB84_40
.LBB84_40:                              # %for.inc408
                                        #   in Loop: Header=BB84_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_34
.LBB84_41:                              # %for.end410
	jmp	.LBB84_43
.LBB84_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB84_43:                              # %if.end412
	jmp	.LBB84_44
.LBB84_44:                              # %if.end413
	jmp	.LBB84_45
.LBB84_45:                              # %if.end414
	jmp	.LBB84_46
.LBB84_46:                              # %if.end415
	cmpl	$1468434298, -68(%rbp)  # imm = 0x5786877A
	jne	.LBB84_48
.LBB84_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_47
.Lfunc_end84:
	.size	RestoreMVBlock8x8.55, .Lfunc_end84-RestoreMVBlock8x8.55
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.56   # -- Begin function SetMotionVectorsMB.56
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.56,@function
SetMotionVectorsMB.56:                  # @SetMotionVectorsMB.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1625417004, -72(%rbp)  # imm = 0x60E1E52C
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB85_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB85_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -4(%rbp)
.LBB85_3:                               # %for.cond3
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB85_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB85_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB85_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB85_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB85_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB85_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB85_10
.LBB85_9:                               # %cond.false
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB85_10:                              # %cond.end
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB85_11:                              # %if.end
                                        #   in Loop: Header=BB85_3 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB85_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB85_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB85_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB85_15
.LBB85_14:                              # %if.else
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB85_15:                              # %if.end89
                                        #   in Loop: Header=BB85_3 Depth=2
	jmp	.LBB85_29
.LBB85_16:                              # %if.else90
                                        #   in Loop: Header=BB85_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB85_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB85_28
.LBB85_18:                              # %if.else122
                                        #   in Loop: Header=BB85_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB85_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB85_27
.LBB85_20:                              # %if.else174
                                        #   in Loop: Header=BB85_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB85_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB85_26
.LBB85_22:                              # %if.else226
                                        #   in Loop: Header=BB85_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB85_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB85_25
.LBB85_24:                              # %if.else298
                                        #   in Loop: Header=BB85_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB85_25:                              # %if.end299
                                        #   in Loop: Header=BB85_3 Depth=2
	jmp	.LBB85_26
.LBB85_26:                              # %if.end300
                                        #   in Loop: Header=BB85_3 Depth=2
	jmp	.LBB85_27
.LBB85_27:                              # %if.end301
                                        #   in Loop: Header=BB85_3 Depth=2
	jmp	.LBB85_28
.LBB85_28:                              # %if.end302
                                        #   in Loop: Header=BB85_3 Depth=2
	jmp	.LBB85_29
.LBB85_29:                              # %if.end303
                                        #   in Loop: Header=BB85_3 Depth=2
	jmp	.LBB85_30
.LBB85_30:                              # %for.inc
                                        #   in Loop: Header=BB85_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_3
.LBB85_31:                              # %for.end
                                        #   in Loop: Header=BB85_1 Depth=1
	jmp	.LBB85_32
.LBB85_32:                              # %for.inc304
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_1
.LBB85_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB85_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB85_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_37 Depth 2
                                        #       Child Loop BB85_39 Depth 3
                                        #         Child Loop BB85_41 Depth 4
                                        #           Child Loop BB85_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB85_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB85_35 Depth=1
	movl	$0, -8(%rbp)
.LBB85_37:                              # %for.cond313
                                        #   Parent Loop BB85_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_39 Depth 3
                                        #         Child Loop BB85_41 Depth 4
                                        #           Child Loop BB85_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB85_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB85_37 Depth=2
	movl	$0, -20(%rbp)
.LBB85_39:                              # %for.cond317
                                        #   Parent Loop BB85_35 Depth=1
                                        #     Parent Loop BB85_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_41 Depth 4
                                        #           Child Loop BB85_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB85_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB85_39 Depth=3
	movl	$0, -24(%rbp)
.LBB85_41:                              # %for.cond321
                                        #   Parent Loop BB85_35 Depth=1
                                        #     Parent Loop BB85_37 Depth=2
                                        #       Parent Loop BB85_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB85_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB85_41 Depth=4
	movl	$0, -28(%rbp)
.LBB85_43:                              # %for.cond325
                                        #   Parent Loop BB85_35 Depth=1
                                        #     Parent Loop BB85_37 Depth=2
                                        #       Parent Loop BB85_39 Depth=3
                                        #         Parent Loop BB85_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB85_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB85_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB85_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB85_43
.LBB85_46:                              # %for.end423
                                        #   in Loop: Header=BB85_41 Depth=4
	jmp	.LBB85_47
.LBB85_47:                              # %for.inc424
                                        #   in Loop: Header=BB85_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_41
.LBB85_48:                              # %for.end426
                                        #   in Loop: Header=BB85_39 Depth=3
	jmp	.LBB85_49
.LBB85_49:                              # %for.inc427
                                        #   in Loop: Header=BB85_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_39
.LBB85_50:                              # %for.end429
                                        #   in Loop: Header=BB85_37 Depth=2
	jmp	.LBB85_51
.LBB85_51:                              # %for.inc430
                                        #   in Loop: Header=BB85_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_37
.LBB85_52:                              # %for.end432
                                        #   in Loop: Header=BB85_35 Depth=1
	jmp	.LBB85_53
.LBB85_53:                              # %for.inc433
                                        #   in Loop: Header=BB85_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_35
.LBB85_54:                              # %for.end435
	jmp	.LBB85_55
.LBB85_55:                              # %if.end436
	cmpl	$1625417004, -72(%rbp)  # imm = 0x60E1E52C
	jne	.LBB85_57
.LBB85_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_56
.Lfunc_end85:
	.size	SetMotionVectorsMB.56, .Lfunc_end85-SetMotionVectorsMB.56
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.57      # -- Begin function StoreMVBlock8x8.57
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.57,@function
StoreMVBlock8x8.57:                     # @StoreMVBlock8x8.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1887510801, -68(%rbp)  # imm = 0x70812111
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -56(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB86_12
# %bb.1:                                # %if.then
	cmpl	$0, -56(%rbp)
	jl	.LBB86_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB86_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB86_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB86_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB86_5:                               # %for.cond7
                                        #   Parent Loop BB86_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB86_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB86_5 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB86_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_5
.LBB86_8:                               # %for.end
                                        #   in Loop: Header=BB86_3 Depth=1
	jmp	.LBB86_9
.LBB86_9:                               # %for.inc76
                                        #   in Loop: Header=BB86_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_3
.LBB86_10:                              # %for.end78
	jmp	.LBB86_11
.LBB86_11:                              # %if.end
	jmp	.LBB86_46
.LBB86_12:                              # %if.else
	cmpl	$0, -56(%rbp)
	jne	.LBB86_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB86_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB86_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB86_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB86_16:                              # %for.cond84
                                        #   Parent Loop BB86_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB86_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB86_16 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB86_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_16
.LBB86_19:                              # %for.end161
                                        #   in Loop: Header=BB86_14 Depth=1
	jmp	.LBB86_20
.LBB86_20:                              # %for.inc162
                                        #   in Loop: Header=BB86_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_14
.LBB86_21:                              # %for.end164
	jmp	.LBB86_45
.LBB86_22:                              # %if.else165
	cmpl	$1, -56(%rbp)
	jne	.LBB86_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB86_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB86_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB86_26:                              # %for.cond171
                                        #   Parent Loop BB86_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB86_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB86_26 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB86_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_26
.LBB86_29:                              # %for.end248
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_30
.LBB86_30:                              # %for.inc249
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_24
.LBB86_31:                              # %for.end251
	jmp	.LBB86_44
.LBB86_32:                              # %if.else252
	cmpl	$2, -56(%rbp)
	jne	.LBB86_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB86_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB86_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB86_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB86_36:                              # %for.cond258
                                        #   Parent Loop BB86_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB86_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB86_36 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB86_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_36
.LBB86_39:                              # %for.end407
                                        #   in Loop: Header=BB86_34 Depth=1
	jmp	.LBB86_40
.LBB86_40:                              # %for.inc408
                                        #   in Loop: Header=BB86_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_34
.LBB86_41:                              # %for.end410
	jmp	.LBB86_43
.LBB86_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB86_43:                              # %if.end412
	jmp	.LBB86_44
.LBB86_44:                              # %if.end413
	jmp	.LBB86_45
.LBB86_45:                              # %if.end414
	jmp	.LBB86_46
.LBB86_46:                              # %if.end415
	cmpl	$1887510801, -68(%rbp)  # imm = 0x70812111
	jne	.LBB86_48
.LBB86_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_47
.Lfunc_end86:
	.size	StoreMVBlock8x8.57, .Lfunc_end86-StoreMVBlock8x8.57
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.58    # -- Begin function RestoreMVBlock8x8.58
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.58,@function
RestoreMVBlock8x8.58:                   # @RestoreMVBlock8x8.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$553443223, -68(%rbp)   # imm = 0x20FCDF97
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -56(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB87_12
# %bb.1:                                # %if.then
	cmpl	$0, -56(%rbp)
	jl	.LBB87_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB87_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB87_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB87_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB87_5:                               # %for.cond7
                                        #   Parent Loop BB87_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB87_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB87_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB87_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_5
.LBB87_8:                               # %for.end
                                        #   in Loop: Header=BB87_3 Depth=1
	jmp	.LBB87_9
.LBB87_9:                               # %for.inc76
                                        #   in Loop: Header=BB87_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_3
.LBB87_10:                              # %for.end78
	jmp	.LBB87_11
.LBB87_11:                              # %if.end
	jmp	.LBB87_46
.LBB87_12:                              # %if.else
	cmpl	$0, -56(%rbp)
	jne	.LBB87_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB87_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB87_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB87_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB87_16:                              # %for.cond84
                                        #   Parent Loop BB87_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB87_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB87_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB87_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_16
.LBB87_19:                              # %for.end161
                                        #   in Loop: Header=BB87_14 Depth=1
	jmp	.LBB87_20
.LBB87_20:                              # %for.inc162
                                        #   in Loop: Header=BB87_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_14
.LBB87_21:                              # %for.end164
	jmp	.LBB87_45
.LBB87_22:                              # %if.else165
	cmpl	$1, -56(%rbp)
	jne	.LBB87_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB87_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB87_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB87_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB87_26:                              # %for.cond171
                                        #   Parent Loop BB87_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB87_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB87_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB87_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_26
.LBB87_29:                              # %for.end248
                                        #   in Loop: Header=BB87_24 Depth=1
	jmp	.LBB87_30
.LBB87_30:                              # %for.inc249
                                        #   in Loop: Header=BB87_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_24
.LBB87_31:                              # %for.end251
	jmp	.LBB87_44
.LBB87_32:                              # %if.else252
	cmpl	$2, -56(%rbp)
	jne	.LBB87_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB87_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB87_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB87_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB87_36:                              # %for.cond258
                                        #   Parent Loop BB87_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB87_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB87_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB87_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_36
.LBB87_39:                              # %for.end407
                                        #   in Loop: Header=BB87_34 Depth=1
	jmp	.LBB87_40
.LBB87_40:                              # %for.inc408
                                        #   in Loop: Header=BB87_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_34
.LBB87_41:                              # %for.end410
	jmp	.LBB87_43
.LBB87_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB87_43:                              # %if.end412
	jmp	.LBB87_44
.LBB87_44:                              # %if.end413
	jmp	.LBB87_45
.LBB87_45:                              # %if.end414
	jmp	.LBB87_46
.LBB87_46:                              # %if.end415
	cmpl	$553443223, -68(%rbp)   # imm = 0x20FCDF97
	jne	.LBB87_48
.LBB87_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_47
.Lfunc_end87:
	.size	RestoreMVBlock8x8.58, .Lfunc_end87-RestoreMVBlock8x8.58
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.59 # -- Begin function set_mbaff_parameters.59
	.p2align	4, 0x90
	.type	set_mbaff_parameters.59,@function
set_mbaff_parameters.59:                # @set_mbaff_parameters.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1270953060, -36(%rbp)  # imm = 0x4BC13464
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB88_2
# %bb.1:                                # %if.then
	jmp	.LBB88_82
.LBB88_2:                               # %if.end
	movl	$0, -8(%rbp)
.LBB88_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB88_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB88_3 Depth=1
	movl	$0, -4(%rbp)
.LBB88_5:                               # %for.cond3
                                        #   Parent Loop BB88_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB88_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB88_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB88_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_5
.LBB88_8:                               # %for.end
                                        #   in Loop: Header=BB88_3 Depth=1
	jmp	.LBB88_9
.LBB88_9:                               # %for.inc17
                                        #   in Loop: Header=BB88_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_3
.LBB88_10:                              # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB88_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB88_12:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB88_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB88_12 Depth=1
	movl	$0, -4(%rbp)
.LBB88_14:                              # %for.cond27
                                        #   Parent Loop BB88_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB88_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_14
.LBB88_17:                              # %for.end60
                                        #   in Loop: Header=BB88_12 Depth=1
	jmp	.LBB88_18
.LBB88_18:                              # %for.inc61
                                        #   in Loop: Header=BB88_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_12
.LBB88_19:                              # %for.end63
	jmp	.LBB88_20
.LBB88_20:                              # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB88_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB88_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB88_23:                              # %if.end78
	movl	$0, -4(%rbp)
.LBB88_24:                              # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_26 Depth 2
                                        #       Child Loop BB88_28 Depth 3
                                        #         Child Loop BB88_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB88_24 Depth=1
	movl	$0, -8(%rbp)
.LBB88_26:                              # %for.cond84
                                        #   Parent Loop BB88_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_28 Depth 3
                                        #         Child Loop BB88_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB88_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB88_26 Depth=2
	movl	$0, -12(%rbp)
.LBB88_28:                              # %for.cond88
                                        #   Parent Loop BB88_24 Depth=1
                                        #     Parent Loop BB88_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB88_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB88_28 Depth=3
	movl	$0, -16(%rbp)
.LBB88_30:                              # %for.cond92
                                        #   Parent Loop BB88_24 Depth=1
                                        #     Parent Loop BB88_26 Depth=2
                                        #       Parent Loop BB88_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB88_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB88_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB88_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_30
.LBB88_33:                              # %for.end115
                                        #   in Loop: Header=BB88_28 Depth=3
	jmp	.LBB88_34
.LBB88_34:                              # %for.inc116
                                        #   in Loop: Header=BB88_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_28
.LBB88_35:                              # %for.end118
                                        #   in Loop: Header=BB88_26 Depth=2
	jmp	.LBB88_36
.LBB88_36:                              # %for.inc119
                                        #   in Loop: Header=BB88_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_26
.LBB88_37:                              # %for.end121
                                        #   in Loop: Header=BB88_24 Depth=1
	jmp	.LBB88_38
.LBB88_38:                              # %for.inc122
                                        #   in Loop: Header=BB88_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_24
.LBB88_39:                              # %for.end124
	movl	$0, -4(%rbp)
.LBB88_40:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_42 Depth 2
                                        #       Child Loop BB88_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB88_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB88_40 Depth=1
	movl	$0, -12(%rbp)
.LBB88_42:                              # %for.cond129
                                        #   Parent Loop BB88_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB88_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB88_42 Depth=2
	movl	$0, -16(%rbp)
.LBB88_44:                              # %for.cond133
                                        #   Parent Loop BB88_40 Depth=1
                                        #     Parent Loop BB88_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB88_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB88_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB88_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_44
.LBB88_47:                              # %for.end152
                                        #   in Loop: Header=BB88_42 Depth=2
	jmp	.LBB88_48
.LBB88_48:                              # %for.inc153
                                        #   in Loop: Header=BB88_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_42
.LBB88_49:                              # %for.end155
                                        #   in Loop: Header=BB88_40 Depth=1
	jmp	.LBB88_50
.LBB88_50:                              # %for.inc156
                                        #   in Loop: Header=BB88_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_40
.LBB88_51:                              # %for.end158
	movl	$0, -4(%rbp)
.LBB88_52:                              # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB88_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB88_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB88_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_52
.LBB88_55:                              # %for.end175
	movl	$0, -8(%rbp)
.LBB88_56:                              # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB88_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB88_56 Depth=1
	movl	$0, -4(%rbp)
.LBB88_58:                              # %for.cond180
                                        #   Parent Loop BB88_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB88_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB88_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB88_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_58
.LBB88_61:                              # %for.end198
                                        #   in Loop: Header=BB88_56 Depth=1
	jmp	.LBB88_62
.LBB88_62:                              # %for.inc199
                                        #   in Loop: Header=BB88_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_56
.LBB88_63:                              # %for.end201
	cmpl	$0, -32(%rbp)
	je	.LBB88_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB88_65:                              # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB88_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB88_65 Depth=1
	movl	$0, -4(%rbp)
.LBB88_67:                              # %for.cond208
                                        #   Parent Loop BB88_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB88_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB88_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB88_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_67
.LBB88_70:                              # %for.end230
                                        #   in Loop: Header=BB88_65 Depth=1
	jmp	.LBB88_71
.LBB88_71:                              # %for.inc231
                                        #   in Loop: Header=BB88_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_65
.LBB88_72:                              # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB88_73:                              # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB88_74:                              # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB88_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB88_76:                              # %for.cond244
                                        #   Parent Loop BB88_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB88_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB88_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_76
.LBB88_79:                              # %for.end267
                                        #   in Loop: Header=BB88_74 Depth=1
	jmp	.LBB88_80
.LBB88_80:                              # %for.inc268
                                        #   in Loop: Header=BB88_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_74
.LBB88_81:                              # %for.end270.loopexit
	jmp	.LBB88_82
.LBB88_82:                              # %for.end270
	cmpl	$1270953060, -36(%rbp)  # imm = 0x4BC13464
	jne	.LBB88_84
.LBB88_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_83
.Lfunc_end88:
	.size	set_mbaff_parameters.59, .Lfunc_end88-set_mbaff_parameters.59
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.60 # -- Begin function StoreNewMotionVectorsBlock8x8.60
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.60,@function
StoreNewMotionVectorsBlock8x8.60:       # @StoreNewMotionVectorsBlock8x8.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1853177362, -72(%rbp)  # imm = 0x6E753E12
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -24(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB89_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB89_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB89_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_4:                               # %for.cond6
                                        #   Parent Loop BB89_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB89_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB89_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_4
.LBB89_7:                               # %for.end
                                        #   in Loop: Header=BB89_2 Depth=1
	jmp	.LBB89_8
.LBB89_8:                               # %for.inc39
                                        #   in Loop: Header=BB89_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_2
.LBB89_9:                               # %for.end41
	jmp	.LBB89_61
.LBB89_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB89_20
# %bb.11:                               # %if.then42
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_14 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB89_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB89_12 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_14:                              # %for.cond46
                                        #   Parent Loop BB89_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_14
.LBB89_17:                              # %for.end119
                                        #   in Loop: Header=BB89_12 Depth=1
	jmp	.LBB89_18
.LBB89_18:                              # %for.inc120
                                        #   in Loop: Header=BB89_12 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_12
.LBB89_19:                              # %for.end122
	jmp	.LBB89_61
.LBB89_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB89_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB89_31
.LBB89_22:                              # %if.then125
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_25 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB89_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_25:                              # %for.cond129
                                        #   Parent Loop BB89_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB89_25 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB89_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_25
.LBB89_28:                              # %for.end206
                                        #   in Loop: Header=BB89_23 Depth=1
	jmp	.LBB89_29
.LBB89_29:                              # %for.inc207
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_23
.LBB89_30:                              # %for.end209
	jmp	.LBB89_40
.LBB89_31:                              # %if.else210
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB89_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_34:                              # %for.cond214
                                        #   Parent Loop BB89_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB89_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB89_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_34
.LBB89_37:                              # %for.end235
                                        #   in Loop: Header=BB89_32 Depth=1
	jmp	.LBB89_38
.LBB89_38:                              # %for.inc236
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_32
.LBB89_39:                              # %for.end238
	jmp	.LBB89_40
.LBB89_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB89_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB89_51
.LBB89_42:                              # %if.then243
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_45 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB89_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB89_43 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_45:                              # %for.cond247
                                        #   Parent Loop BB89_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB89_45 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB89_45 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_45
.LBB89_48:                              # %for.end324
                                        #   in Loop: Header=BB89_43 Depth=1
	jmp	.LBB89_49
.LBB89_49:                              # %for.inc325
                                        #   in Loop: Header=BB89_43 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_43
.LBB89_50:                              # %for.end327
	jmp	.LBB89_60
.LBB89_51:                              # %if.else328
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB89_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB89_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_54:                              # %for.cond332
                                        #   Parent Loop BB89_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB89_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB89_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_54
.LBB89_57:                              # %for.end353
                                        #   in Loop: Header=BB89_52 Depth=1
	jmp	.LBB89_58
.LBB89_58:                              # %for.inc354
                                        #   in Loop: Header=BB89_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_52
.LBB89_59:                              # %for.end356
	jmp	.LBB89_60
.LBB89_60:                              # %if.end357
	jmp	.LBB89_61
.LBB89_61:                              # %if.end358
	cmpl	$1853177362, -72(%rbp)  # imm = 0x6E753E12
	jne	.LBB89_63
.LBB89_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_62
.Lfunc_end89:
	.size	StoreNewMotionVectorsBlock8x8.60, .Lfunc_end89-StoreNewMotionVectorsBlock8x8.60
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.61 # -- Begin function set_mbaff_parameters.61
	.p2align	4, 0x90
	.type	set_mbaff_parameters.61,@function
set_mbaff_parameters.61:                # @set_mbaff_parameters.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2079078888, -36(%rbp)  # imm = 0x7BEC39E8
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB90_2
# %bb.1:                                # %if.then
	jmp	.LBB90_82
.LBB90_2:                               # %if.end
	movl	$0, -8(%rbp)
.LBB90_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB90_3 Depth=1
	movl	$0, -4(%rbp)
.LBB90_5:                               # %for.cond3
                                        #   Parent Loop BB90_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB90_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB90_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_5
.LBB90_8:                               # %for.end
                                        #   in Loop: Header=BB90_3 Depth=1
	jmp	.LBB90_9
.LBB90_9:                               # %for.inc17
                                        #   in Loop: Header=BB90_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_3
.LBB90_10:                              # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB90_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB90_12:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB90_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB90_12 Depth=1
	movl	$0, -4(%rbp)
.LBB90_14:                              # %for.cond27
                                        #   Parent Loop BB90_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB90_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB90_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB90_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_14
.LBB90_17:                              # %for.end60
                                        #   in Loop: Header=BB90_12 Depth=1
	jmp	.LBB90_18
.LBB90_18:                              # %for.inc61
                                        #   in Loop: Header=BB90_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_12
.LBB90_19:                              # %for.end63
	jmp	.LBB90_20
.LBB90_20:                              # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB90_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB90_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB90_23:                              # %if.end78
	movl	$0, -4(%rbp)
.LBB90_24:                              # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_26 Depth 2
                                        #       Child Loop BB90_28 Depth 3
                                        #         Child Loop BB90_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	$0, -8(%rbp)
.LBB90_26:                              # %for.cond84
                                        #   Parent Loop BB90_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_28 Depth 3
                                        #         Child Loop BB90_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB90_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB90_26 Depth=2
	movl	$0, -12(%rbp)
.LBB90_28:                              # %for.cond88
                                        #   Parent Loop BB90_24 Depth=1
                                        #     Parent Loop BB90_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB90_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB90_28 Depth=3
	movl	$0, -16(%rbp)
.LBB90_30:                              # %for.cond92
                                        #   Parent Loop BB90_24 Depth=1
                                        #     Parent Loop BB90_26 Depth=2
                                        #       Parent Loop BB90_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB90_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB90_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB90_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_30
.LBB90_33:                              # %for.end115
                                        #   in Loop: Header=BB90_28 Depth=3
	jmp	.LBB90_34
.LBB90_34:                              # %for.inc116
                                        #   in Loop: Header=BB90_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_28
.LBB90_35:                              # %for.end118
                                        #   in Loop: Header=BB90_26 Depth=2
	jmp	.LBB90_36
.LBB90_36:                              # %for.inc119
                                        #   in Loop: Header=BB90_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_26
.LBB90_37:                              # %for.end121
                                        #   in Loop: Header=BB90_24 Depth=1
	jmp	.LBB90_38
.LBB90_38:                              # %for.inc122
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_24
.LBB90_39:                              # %for.end124
	movl	$0, -4(%rbp)
.LBB90_40:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_42 Depth 2
                                        #       Child Loop BB90_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB90_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB90_40 Depth=1
	movl	$0, -12(%rbp)
.LBB90_42:                              # %for.cond129
                                        #   Parent Loop BB90_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB90_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB90_42 Depth=2
	movl	$0, -16(%rbp)
.LBB90_44:                              # %for.cond133
                                        #   Parent Loop BB90_40 Depth=1
                                        #     Parent Loop BB90_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB90_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB90_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB90_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_44
.LBB90_47:                              # %for.end152
                                        #   in Loop: Header=BB90_42 Depth=2
	jmp	.LBB90_48
.LBB90_48:                              # %for.inc153
                                        #   in Loop: Header=BB90_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_42
.LBB90_49:                              # %for.end155
                                        #   in Loop: Header=BB90_40 Depth=1
	jmp	.LBB90_50
.LBB90_50:                              # %for.inc156
                                        #   in Loop: Header=BB90_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_40
.LBB90_51:                              # %for.end158
	movl	$0, -4(%rbp)
.LBB90_52:                              # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB90_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB90_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB90_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_52
.LBB90_55:                              # %for.end175
	movl	$0, -8(%rbp)
.LBB90_56:                              # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB90_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB90_56 Depth=1
	movl	$0, -4(%rbp)
.LBB90_58:                              # %for.cond180
                                        #   Parent Loop BB90_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB90_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB90_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB90_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_58
.LBB90_61:                              # %for.end198
                                        #   in Loop: Header=BB90_56 Depth=1
	jmp	.LBB90_62
.LBB90_62:                              # %for.inc199
                                        #   in Loop: Header=BB90_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_56
.LBB90_63:                              # %for.end201
	cmpl	$0, -32(%rbp)
	je	.LBB90_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB90_65:                              # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB90_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB90_65 Depth=1
	movl	$0, -4(%rbp)
.LBB90_67:                              # %for.cond208
                                        #   Parent Loop BB90_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB90_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB90_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB90_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_67
.LBB90_70:                              # %for.end230
                                        #   in Loop: Header=BB90_65 Depth=1
	jmp	.LBB90_71
.LBB90_71:                              # %for.inc231
                                        #   in Loop: Header=BB90_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_65
.LBB90_72:                              # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB90_73:                              # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB90_74:                              # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB90_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB90_76:                              # %for.cond244
                                        #   Parent Loop BB90_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB90_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB90_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_76
.LBB90_79:                              # %for.end267
                                        #   in Loop: Header=BB90_74 Depth=1
	jmp	.LBB90_80
.LBB90_80:                              # %for.inc268
                                        #   in Loop: Header=BB90_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_74
.LBB90_81:                              # %for.end270.loopexit
	jmp	.LBB90_82
.LBB90_82:                              # %for.end270
	cmpl	$2079078888, -36(%rbp)  # imm = 0x7BEC39E8
	jne	.LBB90_84
.LBB90_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_83
.Lfunc_end90:
	.size	set_mbaff_parameters.61, .Lfunc_end90-set_mbaff_parameters.61
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.62 # -- Begin function CheckReliabilityOfRef.62
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.62,@function
CheckReliabilityOfRef.62:               # @CheckReliabilityOfRef.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$557660171, -108(%rbp)  # imm = 0x213D380B
	movl	%edi, -80(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB91_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB91_6
.LBB91_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB91_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB91_5
.LBB91_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB91_5
.LBB91_5:                               # %cond.end
.LBB91_6:                               # %cond.end6
	movl	%eax, -96(%rbp)
	movl	-96(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB91_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB91_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB91_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB91_14
.LBB91_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB91_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB91_13
.LBB91_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB91_13
.LBB91_13:                              # %cond.end20
.LBB91_14:                              # %cond.end22
	movl	%edx, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB91_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB91_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -104(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB91_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_19 Depth 2
                                        #       Child Loop BB91_23 Depth 3
                                        #         Child Loop BB91_25 Depth 4
                                        #       Child Loop BB91_53 Depth 3
                                        #         Child Loop BB91_55 Depth 4
                                        #           Child Loop BB91_66 Depth 5
                                        #       Child Loop BB91_87 Depth 3
                                        #         Child Loop BB91_89 Depth 4
                                        #           Child Loop BB91_100 Depth 5
                                        #       Child Loop BB91_121 Depth 3
                                        #         Child Loop BB91_123 Depth 4
                                        #           Child Loop BB91_125 Depth 5
                                        #             Child Loop BB91_136 Depth 6
                                        #       Child Loop BB91_159 Depth 3
                                        #         Child Loop BB91_161 Depth 4
                                        #           Child Loop BB91_163 Depth 5
                                        #             Child Loop BB91_174 Depth 6
                                        #       Child Loop BB91_196 Depth 3
                                        #         Child Loop BB91_198 Depth 4
                                        #           Child Loop BB91_212 Depth 5
                                        #           Child Loop BB91_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB91_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB91_17 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB91_19:                              # %for.cond31
                                        #   Parent Loop BB91_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_23 Depth 3
                                        #         Child Loop BB91_25 Depth 4
                                        #       Child Loop BB91_53 Depth 3
                                        #         Child Loop BB91_55 Depth 4
                                        #           Child Loop BB91_66 Depth 5
                                        #       Child Loop BB91_87 Depth 3
                                        #         Child Loop BB91_89 Depth 4
                                        #           Child Loop BB91_100 Depth 5
                                        #       Child Loop BB91_121 Depth 3
                                        #         Child Loop BB91_123 Depth 4
                                        #           Child Loop BB91_125 Depth 5
                                        #             Child Loop BB91_136 Depth 6
                                        #       Child Loop BB91_159 Depth 3
                                        #         Child Loop BB91_161 Depth 4
                                        #           Child Loop BB91_163 Depth 5
                                        #             Child Loop BB91_174 Depth 6
                                        #       Child Loop BB91_196 Depth 3
                                        #         Child Loop BB91_198 Depth 4
                                        #           Child Loop BB91_212 Depth 5
                                        #           Child Loop BB91_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB91_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB91_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB91_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB91_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB91_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB91_19 Depth=2
	movl	$0, -16(%rbp)
.LBB91_23:                              # %for.cond75
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB91_25 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB91_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB91_23 Depth=3
	movl	$0, -12(%rbp)
.LBB91_25:                              # %for.cond79
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        #       Parent Loop BB91_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB91_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB91_25 Depth=4
	movq	pixel_map, %rax
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB91_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB91_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB91_29
.LBB91_28:                              # %cond.false87
                                        #   in Loop: Header=BB91_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB91_29:                              # %cond.end89
                                        #   in Loop: Header=BB91_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB91_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB91_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB91_35
.LBB91_31:                              # %cond.false94
                                        #   in Loop: Header=BB91_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB91_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB91_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB91_34
.LBB91_33:                              # %cond.false99
                                        #   in Loop: Header=BB91_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB91_34:                              # %cond.end101
                                        #   in Loop: Header=BB91_25 Depth=4
.LBB91_35:                              # %cond.end103
                                        #   in Loop: Header=BB91_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB91_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB91_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB91_38
.LBB91_37:                              # %cond.false111
                                        #   in Loop: Header=BB91_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB91_38:                              # %cond.end113
                                        #   in Loop: Header=BB91_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB91_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB91_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB91_44
.LBB91_40:                              # %cond.false118
                                        #   in Loop: Header=BB91_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB91_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB91_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB91_43
.LBB91_42:                              # %cond.false123
                                        #   in Loop: Header=BB91_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB91_43:                              # %cond.end125
                                        #   in Loop: Header=BB91_25 Depth=4
.LBB91_44:                              # %cond.end127
                                        #   in Loop: Header=BB91_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB91_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB91_267
.LBB91_46:                              # %if.end
                                        #   in Loop: Header=BB91_25 Depth=4
	jmp	.LBB91_47
.LBB91_47:                              # %for.inc
                                        #   in Loop: Header=BB91_25 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_25
.LBB91_48:                              # %for.end
                                        #   in Loop: Header=BB91_23 Depth=3
	jmp	.LBB91_49
.LBB91_49:                              # %for.inc135
                                        #   in Loop: Header=BB91_23 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_23
.LBB91_50:                              # %for.end137
                                        #   in Loop: Header=BB91_19 Depth=2
	jmp	.LBB91_262
.LBB91_51:                              # %if.else
                                        #   in Loop: Header=BB91_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB91_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB91_19 Depth=2
	movl	$0, -16(%rbp)
.LBB91_53:                              # %for.cond141
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB91_55 Depth 4
                                        #           Child Loop BB91_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB91_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB91_53 Depth=3
	movl	$0, -12(%rbp)
.LBB91_55:                              # %for.cond145
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        #       Parent Loop BB91_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB91_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB91_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB91_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB91_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB91_59
.LBB91_58:                              # %cond.false153
                                        #   in Loop: Header=BB91_55 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB91_59:                              # %cond.end155
                                        #   in Loop: Header=BB91_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB91_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB91_65
.LBB91_61:                              # %cond.false160
                                        #   in Loop: Header=BB91_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB91_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB91_64
.LBB91_63:                              # %cond.false165
                                        #   in Loop: Header=BB91_55 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB91_64:                              # %cond.end167
                                        #   in Loop: Header=BB91_55 Depth=4
.LBB91_65:                              # %cond.end169
                                        #   in Loop: Header=BB91_55 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB91_66:                              # %for.cond171
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        #       Parent Loop BB91_53 Depth=3
                                        #         Parent Loop BB91_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB91_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB91_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB91_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB91_70
.LBB91_69:                              # %cond.false180
                                        #   in Loop: Header=BB91_66 Depth=5
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB91_70:                              # %cond.end183
                                        #   in Loop: Header=BB91_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB91_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB91_76
.LBB91_72:                              # %cond.false188
                                        #   in Loop: Header=BB91_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB91_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB91_75
.LBB91_74:                              # %cond.false194
                                        #   in Loop: Header=BB91_66 Depth=5
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB91_75:                              # %cond.end197
                                        #   in Loop: Header=BB91_66 Depth=5
.LBB91_76:                              # %cond.end199
                                        #   in Loop: Header=BB91_66 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB91_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB91_267
.LBB91_78:                              # %if.end209
                                        #   in Loop: Header=BB91_66 Depth=5
	jmp	.LBB91_79
.LBB91_79:                              # %for.inc210
                                        #   in Loop: Header=BB91_66 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB91_66
.LBB91_80:                              # %for.end212
                                        #   in Loop: Header=BB91_55 Depth=4
	jmp	.LBB91_81
.LBB91_81:                              # %for.inc213
                                        #   in Loop: Header=BB91_55 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_55
.LBB91_82:                              # %for.end215
                                        #   in Loop: Header=BB91_53 Depth=3
	jmp	.LBB91_83
.LBB91_83:                              # %for.inc216
                                        #   in Loop: Header=BB91_53 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_53
.LBB91_84:                              # %for.end218
                                        #   in Loop: Header=BB91_19 Depth=2
	jmp	.LBB91_261
.LBB91_85:                              # %if.else219
                                        #   in Loop: Header=BB91_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB91_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB91_19 Depth=2
	movl	$0, -16(%rbp)
.LBB91_87:                              # %for.cond223
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB91_89 Depth 4
                                        #           Child Loop BB91_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB91_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB91_87 Depth=3
	movl	$0, -12(%rbp)
.LBB91_89:                              # %for.cond227
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        #       Parent Loop BB91_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB91_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB91_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB91_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB91_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB91_93
.LBB91_92:                              # %cond.false235
                                        #   in Loop: Header=BB91_89 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB91_93:                              # %cond.end237
                                        #   in Loop: Header=BB91_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB91_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB91_99
.LBB91_95:                              # %cond.false242
                                        #   in Loop: Header=BB91_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB91_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB91_98
.LBB91_97:                              # %cond.false247
                                        #   in Loop: Header=BB91_89 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB91_98:                              # %cond.end249
                                        #   in Loop: Header=BB91_89 Depth=4
.LBB91_99:                              # %cond.end251
                                        #   in Loop: Header=BB91_89 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB91_100:                             # %for.cond253
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        #       Parent Loop BB91_87 Depth=3
                                        #         Parent Loop BB91_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB91_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB91_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB91_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB91_104
.LBB91_103:                             # %cond.false262
                                        #   in Loop: Header=BB91_100 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB91_104:                             # %cond.end265
                                        #   in Loop: Header=BB91_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB91_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB91_110
.LBB91_106:                             # %cond.false270
                                        #   in Loop: Header=BB91_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB91_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB91_109
.LBB91_108:                             # %cond.false276
                                        #   in Loop: Header=BB91_100 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB91_109:                             # %cond.end279
                                        #   in Loop: Header=BB91_100 Depth=5
.LBB91_110:                             # %cond.end281
                                        #   in Loop: Header=BB91_100 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB91_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB91_267
.LBB91_112:                             # %if.end291
                                        #   in Loop: Header=BB91_100 Depth=5
	jmp	.LBB91_113
.LBB91_113:                             # %for.inc292
                                        #   in Loop: Header=BB91_100 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB91_100
.LBB91_114:                             # %for.end294
                                        #   in Loop: Header=BB91_89 Depth=4
	jmp	.LBB91_115
.LBB91_115:                             # %for.inc295
                                        #   in Loop: Header=BB91_89 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_89
.LBB91_116:                             # %for.end297
                                        #   in Loop: Header=BB91_87 Depth=3
	jmp	.LBB91_117
.LBB91_117:                             # %for.inc298
                                        #   in Loop: Header=BB91_87 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_87
.LBB91_118:                             # %for.end300
                                        #   in Loop: Header=BB91_19 Depth=2
	jmp	.LBB91_260
.LBB91_119:                             # %if.else301
                                        #   in Loop: Header=BB91_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB91_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB91_19 Depth=2
	movl	$0, -16(%rbp)
.LBB91_121:                             # %for.cond305
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB91_123 Depth 4
                                        #           Child Loop BB91_125 Depth 5
                                        #             Child Loop BB91_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB91_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB91_121 Depth=3
	movl	$0, -12(%rbp)
.LBB91_123:                             # %for.cond309
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        #       Parent Loop BB91_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB91_125 Depth 5
                                        #             Child Loop BB91_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB91_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB91_123 Depth=4
	movl	$-2, -32(%rbp)
.LBB91_125:                             # %for.cond313
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        #       Parent Loop BB91_121 Depth=3
                                        #         Parent Loop BB91_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB91_136 Depth 6
	cmpl	$4, -32(%rbp)
	jge	.LBB91_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB91_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB91_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB91_129
.LBB91_128:                             # %cond.false322
                                        #   in Loop: Header=BB91_125 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB91_129:                             # %cond.end325
                                        #   in Loop: Header=BB91_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB91_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB91_135
.LBB91_131:                             # %cond.false330
                                        #   in Loop: Header=BB91_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB91_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB91_134
.LBB91_133:                             # %cond.false336
                                        #   in Loop: Header=BB91_125 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB91_134:                             # %cond.end339
                                        #   in Loop: Header=BB91_125 Depth=5
.LBB91_135:                             # %cond.end341
                                        #   in Loop: Header=BB91_125 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB91_136:                             # %for.cond343
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        #       Parent Loop BB91_121 Depth=3
                                        #         Parent Loop BB91_123 Depth=4
                                        #           Parent Loop BB91_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -28(%rbp)
	jge	.LBB91_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB91_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB91_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB91_140
.LBB91_139:                             # %cond.false352
                                        #   in Loop: Header=BB91_136 Depth=6
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB91_140:                             # %cond.end355
                                        #   in Loop: Header=BB91_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB91_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB91_146
.LBB91_142:                             # %cond.false360
                                        #   in Loop: Header=BB91_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB91_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB91_145
.LBB91_144:                             # %cond.false366
                                        #   in Loop: Header=BB91_136 Depth=6
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB91_145:                             # %cond.end369
                                        #   in Loop: Header=BB91_136 Depth=6
.LBB91_146:                             # %cond.end371
                                        #   in Loop: Header=BB91_136 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB91_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB91_267
.LBB91_148:                             # %if.end381
                                        #   in Loop: Header=BB91_136 Depth=6
	jmp	.LBB91_149
.LBB91_149:                             # %for.inc382
                                        #   in Loop: Header=BB91_136 Depth=6
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB91_136
.LBB91_150:                             # %for.end384
                                        #   in Loop: Header=BB91_125 Depth=5
	jmp	.LBB91_151
.LBB91_151:                             # %for.inc385
                                        #   in Loop: Header=BB91_125 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB91_125
.LBB91_152:                             # %for.end387
                                        #   in Loop: Header=BB91_123 Depth=4
	jmp	.LBB91_153
.LBB91_153:                             # %for.inc388
                                        #   in Loop: Header=BB91_123 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_123
.LBB91_154:                             # %for.end390
                                        #   in Loop: Header=BB91_121 Depth=3
	jmp	.LBB91_155
.LBB91_155:                             # %for.inc391
                                        #   in Loop: Header=BB91_121 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_121
.LBB91_156:                             # %for.end393
                                        #   in Loop: Header=BB91_19 Depth=2
	jmp	.LBB91_259
.LBB91_157:                             # %if.else394
                                        #   in Loop: Header=BB91_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB91_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB91_19 Depth=2
	movl	$0, -16(%rbp)
.LBB91_159:                             # %for.cond398
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB91_161 Depth 4
                                        #           Child Loop BB91_163 Depth 5
                                        #             Child Loop BB91_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB91_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB91_159 Depth=3
	movl	$0, -12(%rbp)
.LBB91_161:                             # %for.cond402
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        #       Parent Loop BB91_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB91_163 Depth 5
                                        #             Child Loop BB91_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB91_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB91_161 Depth=4
	movl	$-2, -28(%rbp)
.LBB91_163:                             # %for.cond406
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        #       Parent Loop BB91_159 Depth=3
                                        #         Parent Loop BB91_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB91_174 Depth 6
	cmpl	$4, -28(%rbp)
	jge	.LBB91_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB91_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB91_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB91_167
.LBB91_166:                             # %cond.false415
                                        #   in Loop: Header=BB91_163 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB91_167:                             # %cond.end418
                                        #   in Loop: Header=BB91_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB91_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB91_173
.LBB91_169:                             # %cond.false423
                                        #   in Loop: Header=BB91_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB91_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB91_172
.LBB91_171:                             # %cond.false429
                                        #   in Loop: Header=BB91_163 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB91_172:                             # %cond.end432
                                        #   in Loop: Header=BB91_163 Depth=5
.LBB91_173:                             # %cond.end434
                                        #   in Loop: Header=BB91_163 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB91_174:                             # %for.cond436
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        #       Parent Loop BB91_159 Depth=3
                                        #         Parent Loop BB91_161 Depth=4
                                        #           Parent Loop BB91_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -32(%rbp)
	jge	.LBB91_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB91_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB91_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB91_178
.LBB91_177:                             # %cond.false445
                                        #   in Loop: Header=BB91_174 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB91_178:                             # %cond.end448
                                        #   in Loop: Header=BB91_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB91_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB91_184
.LBB91_180:                             # %cond.false453
                                        #   in Loop: Header=BB91_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB91_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB91_183
.LBB91_182:                             # %cond.false459
                                        #   in Loop: Header=BB91_174 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB91_183:                             # %cond.end462
                                        #   in Loop: Header=BB91_174 Depth=6
.LBB91_184:                             # %cond.end464
                                        #   in Loop: Header=BB91_174 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB91_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB91_267
.LBB91_186:                             # %if.end474
                                        #   in Loop: Header=BB91_174 Depth=6
	jmp	.LBB91_187
.LBB91_187:                             # %for.inc475
                                        #   in Loop: Header=BB91_174 Depth=6
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB91_174
.LBB91_188:                             # %for.end477
                                        #   in Loop: Header=BB91_163 Depth=5
	jmp	.LBB91_189
.LBB91_189:                             # %for.inc478
                                        #   in Loop: Header=BB91_163 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB91_163
.LBB91_190:                             # %for.end480
                                        #   in Loop: Header=BB91_161 Depth=4
	jmp	.LBB91_191
.LBB91_191:                             # %for.inc481
                                        #   in Loop: Header=BB91_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_161
.LBB91_192:                             # %for.end483
                                        #   in Loop: Header=BB91_159 Depth=3
	jmp	.LBB91_193
.LBB91_193:                             # %for.inc484
                                        #   in Loop: Header=BB91_159 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_159
.LBB91_194:                             # %for.end486
                                        #   in Loop: Header=BB91_19 Depth=2
	jmp	.LBB91_258
.LBB91_195:                             # %if.else487
                                        #   in Loop: Header=BB91_19 Depth=2
	movl	$0, -16(%rbp)
.LBB91_196:                             # %for.cond488
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB91_198 Depth 4
                                        #           Child Loop BB91_212 Depth 5
                                        #           Child Loop BB91_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB91_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB91_196 Depth=3
	movl	$0, -12(%rbp)
.LBB91_198:                             # %for.cond492
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        #       Parent Loop BB91_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB91_212 Depth 5
                                        #           Child Loop BB91_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB91_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB91_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB91_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB91_202
.LBB91_201:                             # %cond.false500
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB91_202:                             # %cond.end503
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB91_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB91_205
.LBB91_204:                             # %cond.false508
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	-48(%rbp), %eax
.LBB91_205:                             # %cond.end509
                                        #   in Loop: Header=BB91_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB91_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB91_211
.LBB91_207:                             # %cond.false514
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB91_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB91_210
.LBB91_209:                             # %cond.false518
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	-48(%rbp), %eax
.LBB91_210:                             # %cond.end519
                                        #   in Loop: Header=BB91_198 Depth=4
.LBB91_211:                             # %cond.end521
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB91_212:                             # %for.cond523
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        #       Parent Loop BB91_196 Depth=3
                                        #         Parent Loop BB91_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB91_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB91_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB91_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB91_216
.LBB91_215:                             # %cond.false532
                                        #   in Loop: Header=BB91_212 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB91_216:                             # %cond.end535
                                        #   in Loop: Header=BB91_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB91_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB91_222
.LBB91_218:                             # %cond.false540
                                        #   in Loop: Header=BB91_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB91_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB91_221
.LBB91_220:                             # %cond.false546
                                        #   in Loop: Header=BB91_212 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB91_221:                             # %cond.end549
                                        #   in Loop: Header=BB91_212 Depth=5
.LBB91_222:                             # %cond.end551
                                        #   in Loop: Header=BB91_212 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB91_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB91_267
.LBB91_224:                             # %if.end561
                                        #   in Loop: Header=BB91_212 Depth=5
	jmp	.LBB91_225
.LBB91_225:                             # %for.inc562
                                        #   in Loop: Header=BB91_212 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB91_212
.LBB91_226:                             # %for.end564
                                        #   in Loop: Header=BB91_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB91_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB91_229
.LBB91_228:                             # %cond.false569
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB91_229:                             # %cond.end572
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB91_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB91_232
.LBB91_231:                             # %cond.false577
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	-44(%rbp), %eax
.LBB91_232:                             # %cond.end578
                                        #   in Loop: Header=BB91_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB91_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB91_238
.LBB91_234:                             # %cond.false583
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB91_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB91_237
.LBB91_236:                             # %cond.false587
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	-44(%rbp), %eax
.LBB91_237:                             # %cond.end588
                                        #   in Loop: Header=BB91_198 Depth=4
.LBB91_238:                             # %cond.end590
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB91_239:                             # %for.cond592
                                        #   Parent Loop BB91_17 Depth=1
                                        #     Parent Loop BB91_19 Depth=2
                                        #       Parent Loop BB91_196 Depth=3
                                        #         Parent Loop BB91_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB91_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB91_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB91_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB91_243
.LBB91_242:                             # %cond.false601
                                        #   in Loop: Header=BB91_239 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB91_243:                             # %cond.end604
                                        #   in Loop: Header=BB91_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB91_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB91_249
.LBB91_245:                             # %cond.false609
                                        #   in Loop: Header=BB91_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB91_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB91_248
.LBB91_247:                             # %cond.false615
                                        #   in Loop: Header=BB91_239 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB91_248:                             # %cond.end618
                                        #   in Loop: Header=BB91_239 Depth=5
.LBB91_249:                             # %cond.end620
                                        #   in Loop: Header=BB91_239 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB91_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB91_267
.LBB91_251:                             # %if.end630
                                        #   in Loop: Header=BB91_239 Depth=5
	jmp	.LBB91_252
.LBB91_252:                             # %for.inc631
                                        #   in Loop: Header=BB91_239 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB91_239
.LBB91_253:                             # %for.end633
                                        #   in Loop: Header=BB91_198 Depth=4
	jmp	.LBB91_254
.LBB91_254:                             # %for.inc634
                                        #   in Loop: Header=BB91_198 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_198
.LBB91_255:                             # %for.end636
                                        #   in Loop: Header=BB91_196 Depth=3
	jmp	.LBB91_256
.LBB91_256:                             # %for.inc637
                                        #   in Loop: Header=BB91_196 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_196
.LBB91_257:                             # %for.end639
                                        #   in Loop: Header=BB91_19 Depth=2
	jmp	.LBB91_258
.LBB91_258:                             # %if.end640
                                        #   in Loop: Header=BB91_19 Depth=2
	jmp	.LBB91_259
.LBB91_259:                             # %if.end641
                                        #   in Loop: Header=BB91_19 Depth=2
	jmp	.LBB91_260
.LBB91_260:                             # %if.end642
                                        #   in Loop: Header=BB91_19 Depth=2
	jmp	.LBB91_261
.LBB91_261:                             # %if.end643
                                        #   in Loop: Header=BB91_19 Depth=2
	jmp	.LBB91_262
.LBB91_262:                             # %if.end644
                                        #   in Loop: Header=BB91_19 Depth=2
	jmp	.LBB91_263
.LBB91_263:                             # %for.inc645
                                        #   in Loop: Header=BB91_19 Depth=2
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB91_19
.LBB91_264:                             # %for.end647
                                        #   in Loop: Header=BB91_17 Depth=1
	jmp	.LBB91_265
.LBB91_265:                             # %for.inc648
                                        #   in Loop: Header=BB91_17 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB91_17
.LBB91_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB91_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$557660171, -108(%rbp)  # imm = 0x213D380B
	jne	.LBB91_269
.LBB91_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_268
.Lfunc_end91:
	.size	CheckReliabilityOfRef.62, .Lfunc_end91-CheckReliabilityOfRef.62
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.63 # -- Begin function GetBestTransformP8x8.63
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.63,@function
GetBestTransformP8x8.63:                # @GetBestTransformP8x8.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$1057463375, -64(%rbp)  # imm = 0x3F079C4F
	movl	$0, -40(%rbp)
	movl	$0, -44(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB92_2
# %bb.1:                                # %if.then
	movl	$1, -36(%rbp)
	jmp	.LBB92_25
.LBB92_2:                               # %if.end
	movl	$0, -28(%rbp)
.LBB92_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_5 Depth 2
                                        #       Child Loop BB92_7 Depth 3
                                        #         Child Loop BB92_9 Depth 4
                                        #           Child Loop BB92_11 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB92_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB92_3 Depth=1
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	$0, -32(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB92_5:                               # %for.cond3
                                        #   Parent Loop BB92_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_7 Depth 3
                                        #         Child Loop BB92_9 Depth 4
                                        #           Child Loop BB92_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB92_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB92_7:                               # %for.cond7
                                        #   Parent Loop BB92_3 Depth=1
                                        #     Parent Loop BB92_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB92_9 Depth 4
                                        #           Child Loop BB92_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB92_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB92_9:                               # %for.cond12
                                        #   Parent Loop BB92_3 Depth=1
                                        #     Parent Loop BB92_5 Depth=2
                                        #       Parent Loop BB92_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB92_11 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB92_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB92_9 Depth=4
	movl	$0, -16(%rbp)
.LBB92_11:                              # %for.cond15
                                        #   Parent Loop BB92_3 Depth=1
                                        #     Parent Loop BB92_5 Depth=2
                                        #       Parent Loop BB92_7 Depth=3
                                        #         Parent Loop BB92_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB92_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB92_11 Depth=5
	movq	imgY_org, %rax
	movl	-60(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-60(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB92_11 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB92_11
.LBB92_14:                              # %for.end
                                        #   in Loop: Header=BB92_9 Depth=4
	jmp	.LBB92_15
.LBB92_15:                              # %for.inc51
                                        #   in Loop: Header=BB92_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_9
.LBB92_16:                              # %for.end53
                                        #   in Loop: Header=BB92_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB92_7 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB92_7
.LBB92_18:                              # %for.end57
                                        #   in Loop: Header=BB92_5 Depth=2
	jmp	.LBB92_19
.LBB92_19:                              # %for.inc58
                                        #   in Loop: Header=BB92_5 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_5
.LBB92_20:                              # %for.end60
                                        #   in Loop: Header=BB92_3 Depth=1
	leaq	-336(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB92_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB92_3
.LBB92_22:                              # %for.end66
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB92_24
# %bb.23:                               # %if.then69
	movl	$1, -36(%rbp)
	jmp	.LBB92_25
.LBB92_24:                              # %if.else
	movl	$0, -36(%rbp)
.LBB92_25:                              # %return
	movl	-36(%rbp), %ebx
	cmpl	$1057463375, -64(%rbp)  # imm = 0x3F079C4F
	jne	.LBB92_27
.LBB92_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_26
.Lfunc_end92:
	.size	GetBestTransformP8x8.63, .Lfunc_end92-GetBestTransformP8x8.63
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.64
.LCPI93_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI93_1:
	.quad	4622945017495814144     # double 12
.LCPI93_2:
	.quad	4607182418800017408     # double 1
.LCPI93_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI93_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI93_5:
	.quad	4611686018427387904     # double 2
.LCPI93_6:
	.quad	4613937818241073152     # double 3
.LCPI93_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI93_8:
	.quad	4616189618054758400     # double 4
.LCPI93_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI93_10:
	.quad	4618441417868443648     # double 6
.LCPI93_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI93_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI93_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI93_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI93_15:
	.quad	4602678819172646912     # double 0.5
.LCPI93_16:
	.quad	4679240012837945344     # double 65536
.LCPI93_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI93_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.64
	.p2align	4, 0x90
	.type	encode_one_macroblock.64,@function
encode_one_macroblock.64:               # @encode_one_macroblock.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI93_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$197327248, -416(%rbp)  # imm = 0xBC2F990
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -472(%rbp)
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -272(%rbp)
	movl	$0, -180(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -256(%rbp)
	movl	$0, -252(%rbp)
	movl	$0, -188(%rbp)
	movl	$0, -304(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB93_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB93_4
.LBB93_2:                               # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB93_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB93_5
.LBB93_4:                               # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB93_5:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -308(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -404(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB93_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB93_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB93_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB93_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB93_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB93_11:                              # %land.end
.LBB93_12:                              # %lor.end36
.LBB93_13:                              # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -312(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB93_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB93_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB93_17:                              # %lor.end51
.LBB93_18:                              # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -284(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB93_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB93_21
.LBB93_20:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB93_21
.LBB93_21:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -448(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -392(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -440(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB93_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB93_23:                              # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -288(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -288(%rbp)
	je	.LBB93_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB93_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB93_27
.LBB93_26:                              # %if.else
	movl	$2, -64(%rbp)
.LBB93_27:                              # %if.end
	jmp	.LBB93_29
.LBB93_28:                              # %if.else70
	movl	$0, -64(%rbp)
.LBB93_29:                              # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB93_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB93_31:                              # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB93_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB93_33:                              # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB93_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB93_35:                              # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB93_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB93_37:                              # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB93_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB93_39:                              # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB93_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB93_41:                              # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB93_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB93_43:                              # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB93_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB93_45:                              # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB93_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB93_47:                              # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB93_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB93_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB93_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB93_51:                              # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-404(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB93_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB93_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_55 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB93_53 Depth=1
	movl	$0, -56(%rbp)
.LBB93_55:                              # %for.cond156
                                        #   Parent Loop BB93_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB93_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB93_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB93_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB93_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB93_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB93_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB93_59:                              # %if.end183
                                        #   in Loop: Header=BB93_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB93_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB93_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB93_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB93_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB93_62:                              # %if.end202
                                        #   in Loop: Header=BB93_55 Depth=2
	jmp	.LBB93_63
.LBB93_63:                              # %for.inc
                                        #   in Loop: Header=BB93_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB93_55
.LBB93_64:                              # %for.end
                                        #   in Loop: Header=BB93_53 Depth=1
	jmp	.LBB93_65
.LBB93_65:                              # %for.inc203
                                        #   in Loop: Header=BB93_53 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB93_53
.LBB93_66:                              # %for.end205
	jmp	.LBB93_93
.LBB93_67:                              # %if.else206
	cmpl	$0, -288(%rbp)
	je	.LBB93_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB93_69:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_71 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB93_69 Depth=1
	movl	$0, -56(%rbp)
.LBB93_71:                              # %for.cond215
                                        #   Parent Loop BB93_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB93_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB93_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB93_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB93_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB93_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB93_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB93_75:                              # %if.end244
                                        #   in Loop: Header=BB93_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB93_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB93_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB93_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB93_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB93_78:                              # %if.end263
                                        #   in Loop: Header=BB93_71 Depth=2
	jmp	.LBB93_79
.LBB93_79:                              # %for.inc264
                                        #   in Loop: Header=BB93_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB93_71
.LBB93_80:                              # %for.end266
                                        #   in Loop: Header=BB93_69 Depth=1
	jmp	.LBB93_81
.LBB93_81:                              # %for.inc267
                                        #   in Loop: Header=BB93_69 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB93_69
.LBB93_82:                              # %for.end269
	jmp	.LBB93_92
.LBB93_83:                              # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB93_84:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_86 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB93_84 Depth=1
	movl	$0, -56(%rbp)
.LBB93_86:                              # %for.cond277
                                        #   Parent Loop BB93_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB93_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB93_86 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB93_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB93_86
.LBB93_89:                              # %for.end290
                                        #   in Loop: Header=BB93_84 Depth=1
	jmp	.LBB93_90
.LBB93_90:                              # %for.inc291
                                        #   in Loop: Header=BB93_84 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB93_84
.LBB93_91:                              # %for.end293
	jmp	.LBB93_92
.LBB93_92:                              # %if.end294
	jmp	.LBB93_93
.LBB93_93:                              # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI93_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB93_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB93_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI93_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI93_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB93_99
.LBB93_98:                              # %if.else315
	vmovsd	.LCPI93_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI93_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB93_99:                              # %if.end326
	jmp	.LBB93_159
.LBB93_100:                             # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB93_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI93_2(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB93_104
.LBB93_103:                             # %cond.false336
	vmovsd	.LCPI93_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI93_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB93_104:                             # %cond.end340
	vmovsd	%xmm0, -480(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB93_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI93_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI93_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI93_9(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB93_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI93_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI93_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB93_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI93_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB93_109
.LBB93_108:                             # %cond.false357
	vmovsd	.LCPI93_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB93_109:                             # %cond.end359
	vmovsd	.LCPI93_5(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB93_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI93_5(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB93_115
.LBB93_111:                             # %cond.false364
	vmovsd	.LCPI93_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI93_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB93_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI93_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB93_114
.LBB93_113:                             # %cond.false369
	vmovsd	.LCPI93_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB93_114:                             # %cond.end371
.LBB93_115:                             # %cond.end373
	jmp	.LBB93_129
.LBB93_116:                             # %cond.false375
	cmpl	$0, -308(%rbp)
	je	.LBB93_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI93_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI93_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB93_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI93_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB93_120
.LBB93_119:                             # %cond.false382
	vmovsd	.LCPI93_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB93_120:                             # %cond.end384
	vmovsd	.LCPI93_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB93_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI93_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB93_126
.LBB93_122:                             # %cond.false389
	vmovsd	.LCPI93_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI93_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB93_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI93_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB93_125
.LBB93_124:                             # %cond.false394
	vmovsd	.LCPI93_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB93_125:                             # %cond.end396
.LBB93_126:                             # %cond.end398
	jmp	.LBB93_128
.LBB93_127:                             # %cond.false400
	vmovsd	.LCPI93_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB93_128
.LBB93_128:                             # %cond.end401
.LBB93_129:                             # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB93_146
.LBB93_130:                             # %if.else406
	vmovsd	.LCPI93_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI93_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI93_4(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB93_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI93_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB93_145
.LBB93_132:                             # %cond.false415
	cmpl	$0, -308(%rbp)
	je	.LBB93_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI93_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI93_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB93_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI93_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB93_136
.LBB93_135:                             # %cond.false422
	vmovsd	.LCPI93_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB93_136:                             # %cond.end424
	vmovsd	.LCPI93_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB93_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI93_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB93_142
.LBB93_138:                             # %cond.false429
	vmovsd	.LCPI93_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI93_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB93_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI93_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB93_141
.LBB93_140:                             # %cond.false434
	vmovsd	.LCPI93_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB93_141:                             # %cond.end436
.LBB93_142:                             # %cond.end438
	jmp	.LBB93_144
.LBB93_143:                             # %cond.false440
	vmovsd	.LCPI93_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB93_144
.LBB93_144:                             # %cond.end441
.LBB93_145:                             # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB93_146:                             # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB93_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB93_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI93_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI93_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB93_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI93_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB93_152
.LBB93_151:                             # %cond.false465
	vmovsd	.LCPI93_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB93_152:                             # %cond.end473
	vmovsd	.LCPI93_2(%rip), %xmm1  # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB93_153:                             # %if.end477
	jmp	.LBB93_158
.LBB93_154:                             # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB93_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI93_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB93_157:                             # %if.end487
	jmp	.LBB93_158
.LBB93_158:                             # %if.end488
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB93_159:                             # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB93_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI93_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB93_161:                             # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB93_166
.LBB93_162:                             # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB93_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB93_165
.LBB93_164:                             # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB93_165:                             # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB93_166:                             # %if.end510
	vmovsd	.LCPI93_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI93_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB93_167:                             # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB93_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB93_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB93_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB93_167
.LBB93_170:                             # %for.end522
	movl	$0, -260(%rbp)
.LBB93_171:                             # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_181 Depth 2
                                        #       Child Loop BB93_184 Depth 3
                                        #         Child Loop BB93_190 Depth 4
                                        #         Child Loop BB93_210 Depth 4
                                        #         Child Loop BB93_300 Depth 4
                                        #           Child Loop BB93_302 Depth 5
                                        #         Child Loop BB93_309 Depth 4
                                        #           Child Loop BB93_311 Depth 5
                                        #         Child Loop BB93_326 Depth 4
                                        #           Child Loop BB93_328 Depth 5
                                        #         Child Loop BB93_335 Depth 4
                                        #           Child Loop BB93_337 Depth 5
                                        #         Child Loop BB93_355 Depth 4
                                        #           Child Loop BB93_357 Depth 5
                                        #         Child Loop BB93_374 Depth 4
                                        #           Child Loop BB93_376 Depth 5
                                        #     Child Loop BB93_416 Depth 2
                                        #       Child Loop BB93_418 Depth 3
                                        #         Child Loop BB93_445 Depth 4
                                        #         Child Loop BB93_464 Depth 4
                                        #           Child Loop BB93_466 Depth 5
                                        #         Child Loop BB93_473 Depth 4
                                        #         Child Loop BB93_508 Depth 4
                                        #           Child Loop BB93_510 Depth 5
                                        #         Child Loop BB93_532 Depth 4
                                        #           Child Loop BB93_534 Depth 5
                                        #             Child Loop BB93_536 Depth 6
                                        #         Child Loop BB93_544 Depth 4
                                        #           Child Loop BB93_546 Depth 5
                                        #       Child Loop BB93_569 Depth 3
                                        #         Child Loop BB93_571 Depth 4
                                        #           Child Loop BB93_573 Depth 5
                                        #       Child Loop BB93_581 Depth 3
                                        #         Child Loop BB93_583 Depth 4
                                        #     Child Loop BB93_601 Depth 2
                                        #       Child Loop BB93_603 Depth 3
                                        #         Child Loop BB93_614 Depth 4
                                        #         Child Loop BB93_633 Depth 4
                                        #           Child Loop BB93_635 Depth 5
                                        #         Child Loop BB93_642 Depth 4
                                        #         Child Loop BB93_677 Depth 4
                                        #           Child Loop BB93_679 Depth 5
                                        #         Child Loop BB93_701 Depth 4
                                        #           Child Loop BB93_703 Depth 5
                                        #             Child Loop BB93_705 Depth 6
                                        #         Child Loop BB93_713 Depth 4
                                        #           Child Loop BB93_715 Depth 5
                                        #         Child Loop BB93_723 Depth 4
                                        #           Child Loop BB93_725 Depth 5
                                        #       Child Loop BB93_745 Depth 3
                                        #         Child Loop BB93_747 Depth 4
                                        #           Child Loop BB93_749 Depth 5
                                        #       Child Loop BB93_757 Depth 3
                                        #         Child Loop BB93_759 Depth 4
                                        #       Child Loop BB93_766 Depth 3
                                        #         Child Loop BB93_768 Depth 4
                                        #       Child Loop BB93_778 Depth 3
                                        #         Child Loop BB93_780 Depth 4
                                        #       Child Loop BB93_786 Depth 3
                                        #       Child Loop BB93_791 Depth 3
                                        #         Child Loop BB93_793 Depth 4
                                        #     Child Loop BB93_803 Depth 2
                                        #       Child Loop BB93_805 Depth 3
                                        #     Child Loop BB93_835 Depth 2
                                        #       Child Loop BB93_853 Depth 3
                                        #         Child Loop BB93_908 Depth 4
                                        #           Child Loop BB93_911 Depth 5
                                        #             Child Loop BB93_913 Depth 6
                                        #           Child Loop BB93_920 Depth 5
                                        #             Child Loop BB93_922 Depth 6
                                        #         Child Loop BB93_955 Depth 4
                                        #           Child Loop BB93_957 Depth 5
                                        #     Child Loop BB93_981 Depth 2
                                        #       Child Loop BB93_1014 Depth 3
                                        #         Child Loop BB93_1017 Depth 4
                                        #           Child Loop BB93_1019 Depth 5
                                        #         Child Loop BB93_1026 Depth 4
                                        #           Child Loop BB93_1028 Depth 5
                                        #       Child Loop BB93_1061 Depth 3
                                        #         Child Loop BB93_1063 Depth 4
                                        #     Child Loop BB93_1113 Depth 2
                                        #       Child Loop BB93_1115 Depth 3
                                        #     Child Loop BB93_1127 Depth 2
                                        #       Child Loop BB93_1129 Depth 3
                                        #         Child Loop BB93_1131 Depth 4
                                        #     Child Loop BB93_1141 Depth 2
                                        #       Child Loop BB93_1143 Depth 3
                                        #     Child Loop BB93_1152 Depth 2
                                        #       Child Loop BB93_1154 Depth 3
                                        #     Child Loop BB93_1160 Depth 2
                                        #       Child Loop BB93_1162 Depth 3
                                        #     Child Loop BB93_1174 Depth 2
                                        #       Child Loop BB93_1176 Depth 3
                                        #         Child Loop BB93_1178 Depth 4
                                        #     Child Loop BB93_1189 Depth 2
                                        #       Child Loop BB93_1191 Depth 3
                                        #     Child Loop BB93_1202 Depth 2
                                        #       Child Loop BB93_1204 Depth 3
                                        #     Child Loop BB93_1211 Depth 2
                                        #       Child Loop BB93_1213 Depth 3
                                        #     Child Loop BB93_1221 Depth 2
                                        #       Child Loop BB93_1223 Depth 3
                                        #     Child Loop BB93_1229 Depth 2
                                        #       Child Loop BB93_1231 Depth 3
                                        #     Child Loop BB93_1237 Depth 2
                                        #       Child Loop BB93_1239 Depth 3
                                        #     Child Loop BB93_1245 Depth 2
                                        #       Child Loop BB93_1247 Depth 3
	movl	-260(%rbp), %eax
	cmpl	-312(%rbp), %eax
	jge	.LBB93_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB93_171 Depth=1
	cmpl	$2, -312(%rbp)
	jne	.LBB93_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB93_171 Depth=1
	cmpl	$0, -260(%rbp)
	jne	.LBB93_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB93_176
.LBB93_175:                             # %if.else534
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB93_176:                             # %if.end536
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_177
.LBB93_177:                             # %if.end537
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB93_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB93_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB93_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB93_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB93_180:                             # %if.end542
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB93_181:                             # %for.cond543
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_184 Depth 3
                                        #         Child Loop BB93_190 Depth 4
                                        #         Child Loop BB93_210 Depth 4
                                        #         Child Loop BB93_300 Depth 4
                                        #           Child Loop BB93_302 Depth 5
                                        #         Child Loop BB93_309 Depth 4
                                        #           Child Loop BB93_311 Depth 5
                                        #         Child Loop BB93_326 Depth 4
                                        #           Child Loop BB93_328 Depth 5
                                        #         Child Loop BB93_335 Depth 4
                                        #           Child Loop BB93_337 Depth 5
                                        #         Child Loop BB93_355 Depth 4
                                        #           Child Loop BB93_357 Depth 5
                                        #         Child Loop BB93_374 Depth 4
                                        #           Child Loop BB93_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB93_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB93_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB93_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB93_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB93_184:                             # %for.cond554
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_190 Depth 4
                                        #         Child Loop BB93_210 Depth 4
                                        #         Child Loop BB93_300 Depth 4
                                        #           Child Loop BB93_302 Depth 5
                                        #         Child Loop BB93_309 Depth 4
                                        #           Child Loop BB93_311 Depth 5
                                        #         Child Loop BB93_326 Depth 4
                                        #           Child Loop BB93_328 Depth 5
                                        #         Child Loop BB93_335 Depth 4
                                        #           Child Loop BB93_337 Depth 5
                                        #         Child Loop BB93_355 Depth 4
                                        #           Child Loop BB93_357 Depth 5
                                        #         Child Loop BB93_374 Depth 4
                                        #           Child Loop BB93_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB93_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB93_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB93_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB93_187:                             # %land.end566
                                        #   in Loop: Header=BB93_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB93_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB93_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB93_189:                             # %land.end574
                                        #   in Loop: Header=BB93_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB93_190:                             # %for.cond577
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_181 Depth=2
                                        #       Parent Loop BB93_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB93_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB93_190 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB93_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB93_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB93_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB93_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB93_206
.LBB93_194:                             # %if.then594
                                        #   in Loop: Header=BB93_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB93_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB93_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB93_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB93_198
.LBB93_197:                             # %cond.false604
                                        #   in Loop: Header=BB93_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB93_198:                             # %cond.end607
                                        #   in Loop: Header=BB93_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB93_203
.LBB93_199:                             # %cond.false610
                                        #   in Loop: Header=BB93_190 Depth=4
	vmovsd	.LCPI93_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB93_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB93_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB93_202
.LBB93_201:                             # %cond.false617
                                        #   in Loop: Header=BB93_190 Depth=4
	movl	$1, %eax
	jmp	.LBB93_202
.LBB93_202:                             # %cond.end618
                                        #   in Loop: Header=BB93_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB93_203:                             # %cond.end623
                                        #   in Loop: Header=BB93_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB93_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB93_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB93_205:                             # %if.end636
                                        #   in Loop: Header=BB93_190 Depth=4
	jmp	.LBB93_206
.LBB93_206:                             # %if.end637
                                        #   in Loop: Header=BB93_190 Depth=4
	jmp	.LBB93_207
.LBB93_207:                             # %for.inc638
                                        #   in Loop: Header=BB93_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB93_190
.LBB93_208:                             # %for.end640
                                        #   in Loop: Header=BB93_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB93_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB93_210:                             # %for.cond643
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_181 Depth=2
                                        #       Parent Loop BB93_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB93_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB93_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB93_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB93_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB93_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB93_215
.LBB93_214:                             # %cond.false660
                                        #   in Loop: Header=BB93_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB93_215:                             # %cond.end663
                                        #   in Loop: Header=BB93_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB93_220
.LBB93_216:                             # %cond.false667
                                        #   in Loop: Header=BB93_210 Depth=4
	vmovsd	.LCPI93_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB93_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB93_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB93_219
.LBB93_218:                             # %cond.false674
                                        #   in Loop: Header=BB93_210 Depth=4
	movl	$1, %eax
	jmp	.LBB93_219
.LBB93_219:                             # %cond.end675
                                        #   in Loop: Header=BB93_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB93_220:                             # %cond.end680
                                        #   in Loop: Header=BB93_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB93_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB93_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB93_222:                             # %if.end693
                                        #   in Loop: Header=BB93_210 Depth=4
	jmp	.LBB93_223
.LBB93_223:                             # %for.inc694
                                        #   in Loop: Header=BB93_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB93_210
.LBB93_224:                             # %for.end696
                                        #   in Loop: Header=BB93_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB93_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB93_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB93_228
.LBB93_227:                             # %cond.false706
                                        #   in Loop: Header=BB93_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB93_228:                             # %cond.end709
                                        #   in Loop: Header=BB93_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB93_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB93_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB93_231
.LBB93_230:                             # %cond.false719
                                        #   in Loop: Header=BB93_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB93_231:                             # %cond.end721
                                        #   in Loop: Header=BB93_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB93_236
.LBB93_232:                             # %cond.false726
                                        #   in Loop: Header=BB93_184 Depth=3
	vmovsd	.LCPI93_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB93_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB93_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB93_235
.LBB93_234:                             # %cond.false733
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	$1, %eax
	jmp	.LBB93_235
.LBB93_235:                             # %cond.end734
                                        #   in Loop: Header=BB93_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB93_236:                             # %cond.end739
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB93_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB93_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB93_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB93_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB93_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB93_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB93_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB93_243
.LBB93_242:                             # %cond.false761
                                        #   in Loop: Header=BB93_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB93_243:                             # %cond.end763
                                        #   in Loop: Header=BB93_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB93_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB93_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB93_246
.LBB93_245:                             # %cond.false773
                                        #   in Loop: Header=BB93_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB93_246:                             # %cond.end775
                                        #   in Loop: Header=BB93_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB93_248
.LBB93_247:                             # %cond.false780
                                        #   in Loop: Header=BB93_184 Depth=3
	vmovsd	.LCPI93_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB93_248:                             # %cond.end784
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB93_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB93_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB93_252
.LBB93_251:                             # %cond.false797
                                        #   in Loop: Header=BB93_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB93_252:                             # %cond.end799
                                        #   in Loop: Header=BB93_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB93_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB93_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB93_255
.LBB93_254:                             # %cond.false809
                                        #   in Loop: Header=BB93_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB93_255:                             # %cond.end811
                                        #   in Loop: Header=BB93_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB93_257
.LBB93_256:                             # %cond.false816
                                        #   in Loop: Header=BB93_184 Depth=3
	vmovsd	.LCPI93_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB93_257:                             # %cond.end820
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	%eax, -184(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-184(%rbp), %eax
	movl	%eax, -184(%rbp)
	jmp	.LBB93_259
.LBB93_258:                             # %if.else824
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -184(%rbp) # imm = 0x7FFFFFFF
.LBB93_259:                             # %if.end825
                                        #   in Loop: Header=BB93_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB93_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB93_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB93_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB93_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB93_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB93_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB93_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB93_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB93_285
.LBB93_266:                             # %if.else845
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB93_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB93_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB93_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB93_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB93_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB93_284
.LBB93_271:                             # %if.else859
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB93_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB93_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB93_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB93_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB93_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB93_283
.LBB93_276:                             # %if.else876
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB93_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB93_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB93_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jg	.LBB93_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB93_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB93_282
.LBB93_281:                             # %if.else893
                                        #   in Loop: Header=BB93_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-184(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB93_282:                             # %if.end898
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_283
.LBB93_283:                             # %if.end899
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_284
.LBB93_284:                             # %if.end900
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_285
.LBB93_285:                             # %if.end901
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_295
.LBB93_286:                             # %if.else902
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB93_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB93_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB93_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB93_294
.LBB93_289:                             # %if.else910
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB93_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB93_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB93_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB93_293
.LBB93_292:                             # %if.else918
                                        #   in Loop: Header=BB93_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB93_293:                             # %if.end920
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_294
.LBB93_294:                             # %if.end921
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_295
.LBB93_295:                             # %if.end922
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_297
.LBB93_296:                             # %if.else923
                                        #   in Loop: Header=BB93_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB93_297:                             # %if.end925
                                        #   in Loop: Header=BB93_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB93_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB93_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB93_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	$0, -24(%rbp)
.LBB93_300:                             # %for.cond933
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_181 Depth=2
                                        #       Parent Loop BB93_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB93_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB93_300 Depth=4
	movl	$0, -20(%rbp)
.LBB93_302:                             # %for.cond937
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_181 Depth=2
                                        #       Parent Loop BB93_184 Depth=3
                                        #         Parent Loop BB93_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB93_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB93_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB93_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_302
.LBB93_305:                             # %for.end999
                                        #   in Loop: Header=BB93_300 Depth=4
	jmp	.LBB93_306
.LBB93_306:                             # %for.inc1000
                                        #   in Loop: Header=BB93_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_300
.LBB93_307:                             # %for.end1002
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_323
.LBB93_308:                             # %if.else1003
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	$0, -24(%rbp)
.LBB93_309:                             # %for.cond1004
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_181 Depth=2
                                        #       Parent Loop BB93_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB93_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB93_309 Depth=4
	movl	$0, -20(%rbp)
.LBB93_311:                             # %for.cond1008
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_181 Depth=2
                                        #       Parent Loop BB93_184 Depth=3
                                        #         Parent Loop BB93_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB93_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB93_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB93_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB93_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB93_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB93_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB93_316
.LBB93_315:                             # %cond.false1024
                                        #   in Loop: Header=BB93_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB93_316:                             # %cond.end1025
                                        #   in Loop: Header=BB93_311 Depth=5
	movq	%rax, -432(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB93_318
.LBB93_317:                             # %if.else1111
                                        #   in Loop: Header=BB93_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB93_318:                             # %if.end1217
                                        #   in Loop: Header=BB93_311 Depth=5
	jmp	.LBB93_319
.LBB93_319:                             # %for.inc1218
                                        #   in Loop: Header=BB93_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_311
.LBB93_320:                             # %for.end1220
                                        #   in Loop: Header=BB93_309 Depth=4
	jmp	.LBB93_321
.LBB93_321:                             # %for.inc1221
                                        #   in Loop: Header=BB93_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_309
.LBB93_322:                             # %for.end1223
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_323
.LBB93_323:                             # %if.end1224
                                        #   in Loop: Header=BB93_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB93_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB93_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB93_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	$0, -24(%rbp)
.LBB93_326:                             # %for.cond1231
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_181 Depth=2
                                        #       Parent Loop BB93_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB93_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB93_326 Depth=4
	movl	$0, -20(%rbp)
.LBB93_328:                             # %for.cond1235
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_181 Depth=2
                                        #       Parent Loop BB93_184 Depth=3
                                        #         Parent Loop BB93_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB93_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB93_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB93_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_328
.LBB93_331:                             # %for.end1303
                                        #   in Loop: Header=BB93_326 Depth=4
	jmp	.LBB93_332
.LBB93_332:                             # %for.inc1304
                                        #   in Loop: Header=BB93_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_326
.LBB93_333:                             # %for.end1306
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_351
.LBB93_334:                             # %if.else1307
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	$0, -24(%rbp)
.LBB93_335:                             # %for.cond1308
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_181 Depth=2
                                        #       Parent Loop BB93_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB93_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB93_335 Depth=4
	movl	$0, -20(%rbp)
.LBB93_337:                             # %for.cond1312
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_181 Depth=2
                                        #       Parent Loop BB93_184 Depth=3
                                        #         Parent Loop BB93_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB93_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB93_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB93_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB93_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB93_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB93_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB93_342
.LBB93_341:                             # %cond.false1330
                                        #   in Loop: Header=BB93_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB93_342:                             # %cond.end1332
                                        #   in Loop: Header=BB93_337 Depth=5
	movq	%rax, -424(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB93_346
.LBB93_343:                             # %if.else1419
                                        #   in Loop: Header=BB93_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB93_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB93_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB93_345:                             # %if.end1529
                                        #   in Loop: Header=BB93_337 Depth=5
	jmp	.LBB93_346
.LBB93_346:                             # %if.end1530
                                        #   in Loop: Header=BB93_337 Depth=5
	jmp	.LBB93_347
.LBB93_347:                             # %for.inc1531
                                        #   in Loop: Header=BB93_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_337
.LBB93_348:                             # %for.end1533
                                        #   in Loop: Header=BB93_335 Depth=4
	jmp	.LBB93_349
.LBB93_349:                             # %for.inc1534
                                        #   in Loop: Header=BB93_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_335
.LBB93_350:                             # %for.end1536
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_351
.LBB93_351:                             # %if.end1537
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_352
.LBB93_352:                             # %if.end1538
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_393
.LBB93_353:                             # %if.else1539
                                        #   in Loop: Header=BB93_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB93_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB93_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB93_355:                             # %for.cond1546
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_181 Depth=2
                                        #       Parent Loop BB93_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB93_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB93_355 Depth=4
	movl	$0, -20(%rbp)
.LBB93_357:                             # %for.cond1550
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_181 Depth=2
                                        #       Parent Loop BB93_184 Depth=3
                                        #         Parent Loop BB93_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB93_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB93_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB93_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB93_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB93_361
.LBB93_360:                             # %if.else1596
                                        #   in Loop: Header=BB93_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB93_361:                             # %if.end1676
                                        #   in Loop: Header=BB93_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB93_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB93_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB93_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB93_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB93_367
.LBB93_364:                             # %if.else1721
                                        #   in Loop: Header=BB93_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB93_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB93_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB93_366:                             # %if.end1805
                                        #   in Loop: Header=BB93_357 Depth=5
	jmp	.LBB93_367
.LBB93_367:                             # %if.end1806
                                        #   in Loop: Header=BB93_357 Depth=5
	jmp	.LBB93_368
.LBB93_368:                             # %if.end1807
                                        #   in Loop: Header=BB93_357 Depth=5
	jmp	.LBB93_369
.LBB93_369:                             # %for.inc1808
                                        #   in Loop: Header=BB93_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_357
.LBB93_370:                             # %for.end1810
                                        #   in Loop: Header=BB93_355 Depth=4
	jmp	.LBB93_371
.LBB93_371:                             # %for.inc1811
                                        #   in Loop: Header=BB93_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_355
.LBB93_372:                             # %for.end1813
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_392
.LBB93_373:                             # %if.else1814
                                        #   in Loop: Header=BB93_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB93_374:                             # %for.cond1818
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_181 Depth=2
                                        #       Parent Loop BB93_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB93_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB93_374 Depth=4
	movl	$0, -20(%rbp)
.LBB93_376:                             # %for.cond1822
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_181 Depth=2
                                        #       Parent Loop BB93_184 Depth=3
                                        #         Parent Loop BB93_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB93_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB93_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB93_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB93_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB93_380
.LBB93_379:                             # %if.else1868
                                        #   in Loop: Header=BB93_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB93_380:                             # %if.end1948
                                        #   in Loop: Header=BB93_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB93_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB93_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB93_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB93_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB93_386
.LBB93_383:                             # %if.else1993
                                        #   in Loop: Header=BB93_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB93_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB93_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB93_385:                             # %if.end2077
                                        #   in Loop: Header=BB93_376 Depth=5
	jmp	.LBB93_386
.LBB93_386:                             # %if.end2078
                                        #   in Loop: Header=BB93_376 Depth=5
	jmp	.LBB93_387
.LBB93_387:                             # %if.end2079
                                        #   in Loop: Header=BB93_376 Depth=5
	jmp	.LBB93_388
.LBB93_388:                             # %for.inc2080
                                        #   in Loop: Header=BB93_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_376
.LBB93_389:                             # %for.end2082
                                        #   in Loop: Header=BB93_374 Depth=4
	jmp	.LBB93_390
.LBB93_390:                             # %for.inc2083
                                        #   in Loop: Header=BB93_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_374
.LBB93_391:                             # %for.end2085
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_392
.LBB93_392:                             # %if.end2086
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_393
.LBB93_393:                             # %if.end2087
                                        #   in Loop: Header=BB93_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB93_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB93_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB93_399
.LBB93_395:                             # %if.else2106
                                        #   in Loop: Header=BB93_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB93_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB93_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB93_398
.LBB93_397:                             # %if.else2131
                                        #   in Loop: Header=BB93_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB93_398:                             # %if.end2132
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_399
.LBB93_399:                             # %if.end2133
                                        #   in Loop: Header=BB93_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB93_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB93_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB93_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB93_402:                             # %if.end2143
                                        #   in Loop: Header=BB93_184 Depth=3
	jmp	.LBB93_403
.LBB93_403:                             # %for.inc2144
                                        #   in Loop: Header=BB93_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB93_184
.LBB93_404:                             # %for.end2146
                                        #   in Loop: Header=BB93_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB93_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB93_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB93_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB93_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB93_407:                             # %if.end2155
                                        #   in Loop: Header=BB93_181 Depth=2
	jmp	.LBB93_408
.LBB93_408:                             # %if.end2156
                                        #   in Loop: Header=BB93_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB93_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB93_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -304(%rbp)
.LBB93_410:                             # %if.end2161
                                        #   in Loop: Header=BB93_181 Depth=2
	jmp	.LBB93_411
.LBB93_411:                             # %if.end2162
                                        #   in Loop: Header=BB93_181 Depth=2
	jmp	.LBB93_412
.LBB93_412:                             # %for.inc2163
                                        #   in Loop: Header=BB93_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB93_181
.LBB93_413:                             # %for.end2165
                                        #   in Loop: Header=BB93_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB93_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB93_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB93_416:                             # %for.cond2172
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_418 Depth 3
                                        #         Child Loop BB93_445 Depth 4
                                        #         Child Loop BB93_464 Depth 4
                                        #           Child Loop BB93_466 Depth 5
                                        #         Child Loop BB93_473 Depth 4
                                        #         Child Loop BB93_508 Depth 4
                                        #           Child Loop BB93_510 Depth 5
                                        #         Child Loop BB93_532 Depth 4
                                        #           Child Loop BB93_534 Depth 5
                                        #             Child Loop BB93_536 Depth 6
                                        #         Child Loop BB93_544 Depth 4
                                        #           Child Loop BB93_546 Depth 5
                                        #       Child Loop BB93_569 Depth 3
                                        #         Child Loop BB93_571 Depth 4
                                        #           Child Loop BB93_573 Depth 5
                                        #       Child Loop BB93_581 Depth 3
                                        #         Child Loop BB93_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB93_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB93_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI93_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB93_418:                             # %for.cond2184
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_445 Depth 4
                                        #         Child Loop BB93_464 Depth 4
                                        #           Child Loop BB93_466 Depth 5
                                        #         Child Loop BB93_473 Depth 4
                                        #         Child Loop BB93_508 Depth 4
                                        #           Child Loop BB93_510 Depth 5
                                        #         Child Loop BB93_532 Depth 4
                                        #           Child Loop BB93_534 Depth 5
                                        #             Child Loop BB93_536 Depth 6
                                        #         Child Loop BB93_544 Depth 4
                                        #           Child Loop BB93_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB93_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB93_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB93_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB93_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB93_423
.LBB93_421:                             # %lor.lhs.false2196
                                        #   in Loop: Header=BB93_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB93_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB93_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB93_557
.LBB93_423:                             # %if.then2201
                                        #   in Loop: Header=BB93_418 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB93_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB93_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB93_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	$0, -224(%rbp)
	movl	$0, -228(%rbp)
	movl	-28(%rbp), %edi
	leaq	-228(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -224(%rbp)
	cmpl	$2147483647, -224(%rbp) # imm = 0x7FFFFFFF
	je	.LBB93_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB93_418 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB93_428
.LBB93_427:                             # %if.then2214
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB93_429
.LBB93_428:                             # %if.else2215
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-224(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-228(%rbp), %eax
	addl	-204(%rbp), %eax
	movl	%eax, -204(%rbp)
.LBB93_429:                             # %if.end2218
                                        #   in Loop: Header=BB93_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB93_431
	jmp	.LBB93_430
.LBB93_430:                             # %if.end2218
                                        #   in Loop: Header=BB93_418 Depth=3
	subl	$2, %eax
	je	.LBB93_438
	jmp	.LBB93_439
.LBB93_431:                             # %sw.bb
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-228(%rbp), %eax
	cmpl	-224(%rbp), %eax
	jl	.LBB93_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB93_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB93_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB93_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB93_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB93_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB93_436
.LBB93_435:                             # %if.then2231
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-228(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB93_437
.LBB93_436:                             # %if.else2232
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB93_437:                             # %if.end2233
                                        #   in Loop: Header=BB93_418 Depth=3
	jmp	.LBB93_440
.LBB93_438:                             # %sw.bb2234
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-228(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB93_440
.LBB93_439:                             # %sw.default
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB93_440:                             # %sw.epilog
                                        #   in Loop: Header=BB93_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB93_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-172(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB93_442:                             # %if.end2240
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-256(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
.LBB93_443:                             # %if.end2242
                                        #   in Loop: Header=BB93_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB93_518
.LBB93_444:                             # %if.else2278
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB93_445:                             # %for.cond2279
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_416 Depth=2
                                        #       Parent Loop BB93_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB93_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB93_445 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB93_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB93_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB93_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB93_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB93_461
.LBB93_449:                             # %if.then2296
                                        #   in Loop: Header=BB93_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB93_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB93_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB93_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB93_453
.LBB93_452:                             # %cond.false2306
                                        #   in Loop: Header=BB93_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB93_453:                             # %cond.end2309
                                        #   in Loop: Header=BB93_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB93_458
.LBB93_454:                             # %cond.false2313
                                        #   in Loop: Header=BB93_445 Depth=4
	vmovsd	.LCPI93_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB93_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB93_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB93_457
.LBB93_456:                             # %cond.false2320
                                        #   in Loop: Header=BB93_445 Depth=4
	movl	$1, %eax
	jmp	.LBB93_457
.LBB93_457:                             # %cond.end2321
                                        #   in Loop: Header=BB93_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB93_458:                             # %cond.end2326
                                        #   in Loop: Header=BB93_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB93_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB93_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB93_460:                             # %if.end2339
                                        #   in Loop: Header=BB93_445 Depth=4
	jmp	.LBB93_461
.LBB93_461:                             # %if.end2340
                                        #   in Loop: Header=BB93_445 Depth=4
	jmp	.LBB93_462
.LBB93_462:                             # %for.inc2341
                                        #   in Loop: Header=BB93_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB93_445
.LBB93_463:                             # %for.end2343
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	$0, -24(%rbp)
.LBB93_464:                             # %for.cond2344
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_416 Depth=2
                                        #       Parent Loop BB93_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB93_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB93_464 Depth=4
	movl	$0, -20(%rbp)
.LBB93_466:                             # %for.cond2348
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_416 Depth=2
                                        #       Parent Loop BB93_418 Depth=3
                                        #         Parent Loop BB93_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB93_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB93_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB93_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_466
.LBB93_469:                             # %for.end2405
                                        #   in Loop: Header=BB93_464 Depth=4
	jmp	.LBB93_470
.LBB93_470:                             # %for.inc2406
                                        #   in Loop: Header=BB93_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_464
.LBB93_471:                             # %for.end2408
                                        #   in Loop: Header=BB93_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB93_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB93_473:                             # %for.cond2411
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_416 Depth=2
                                        #       Parent Loop BB93_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB93_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB93_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB93_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB93_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB93_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB93_478
.LBB93_477:                             # %cond.false2428
                                        #   in Loop: Header=BB93_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB93_478:                             # %cond.end2431
                                        #   in Loop: Header=BB93_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB93_483
.LBB93_479:                             # %cond.false2435
                                        #   in Loop: Header=BB93_473 Depth=4
	vmovsd	.LCPI93_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB93_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB93_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB93_482
.LBB93_481:                             # %cond.false2442
                                        #   in Loop: Header=BB93_473 Depth=4
	movl	$1, %eax
	jmp	.LBB93_482
.LBB93_482:                             # %cond.end2443
                                        #   in Loop: Header=BB93_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB93_483:                             # %cond.end2448
                                        #   in Loop: Header=BB93_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB93_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB93_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB93_485:                             # %if.end2461
                                        #   in Loop: Header=BB93_473 Depth=4
	jmp	.LBB93_486
.LBB93_486:                             # %for.inc2462
                                        #   in Loop: Header=BB93_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB93_473
.LBB93_487:                             # %for.end2464
                                        #   in Loop: Header=BB93_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB93_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB93_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB93_491
.LBB93_490:                             # %cond.false2474
                                        #   in Loop: Header=BB93_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB93_491:                             # %cond.end2477
                                        #   in Loop: Header=BB93_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB93_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB93_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB93_494
.LBB93_493:                             # %cond.false2487
                                        #   in Loop: Header=BB93_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB93_494:                             # %cond.end2489
                                        #   in Loop: Header=BB93_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB93_499
.LBB93_495:                             # %cond.false2494
                                        #   in Loop: Header=BB93_418 Depth=3
	vmovsd	.LCPI93_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB93_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB93_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB93_498
.LBB93_497:                             # %cond.false2501
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	$1, %eax
	jmp	.LBB93_498
.LBB93_498:                             # %cond.end2502
                                        #   in Loop: Header=BB93_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB93_499:                             # %cond.end2507
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB93_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB93_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB93_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB93_507
.LBB93_502:                             # %if.else2517
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB93_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB93_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB93_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB93_506
.LBB93_505:                             # %if.else2524
                                        #   in Loop: Header=BB93_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB93_506:                             # %if.end2525
                                        #   in Loop: Header=BB93_418 Depth=3
	jmp	.LBB93_507
.LBB93_507:                             # %if.end2526
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	$0, -24(%rbp)
.LBB93_508:                             # %for.cond2527
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_416 Depth=2
                                        #       Parent Loop BB93_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB93_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB93_508 Depth=4
	movl	$0, -20(%rbp)
.LBB93_510:                             # %for.cond2531
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_416 Depth=2
                                        #       Parent Loop BB93_418 Depth=3
                                        #         Parent Loop BB93_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB93_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB93_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB93_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_510
.LBB93_513:                             # %for.end2567
                                        #   in Loop: Header=BB93_508 Depth=4
	jmp	.LBB93_514
.LBB93_514:                             # %for.inc2568
                                        #   in Loop: Header=BB93_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_508
.LBB93_515:                             # %for.end2570
                                        #   in Loop: Header=BB93_418 Depth=3
	jmp	.LBB93_517
.LBB93_516:                             # %if.else2571
                                        #   in Loop: Header=BB93_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB93_517:                             # %if.end2572
                                        #   in Loop: Header=BB93_418 Depth=3
	jmp	.LBB93_518
.LBB93_518:                             # %if.end2573
                                        #   in Loop: Header=BB93_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB93_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB93_526
.LBB93_520:                             # %if.else2578
                                        #   in Loop: Header=BB93_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB93_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB93_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB93_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB93_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB93_524
.LBB93_523:                             # %cond.false2592
                                        #   in Loop: Header=BB93_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB93_524:                             # %cond.end2597
                                        #   in Loop: Header=BB93_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB93_525:                             # %if.end2603
                                        #   in Loop: Header=BB93_418 Depth=3
	jmp	.LBB93_526
.LBB93_526:                             # %if.end2604
                                        #   in Loop: Header=BB93_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB93_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB93_530
.LBB93_528:                             # %lor.lhs.false2610
                                        #   in Loop: Header=BB93_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB93_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB93_556
.LBB93_530:                             # %if.then2616
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB93_532:                             # %for.cond2638
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_416 Depth=2
                                        #       Parent Loop BB93_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_534 Depth 5
                                        #             Child Loop BB93_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB93_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB93_532 Depth=4
	movl	$0, -24(%rbp)
.LBB93_534:                             # %for.cond2642
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_416 Depth=2
                                        #       Parent Loop BB93_418 Depth=3
                                        #         Parent Loop BB93_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB93_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB93_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB93_534 Depth=5
	movl	$0, -20(%rbp)
.LBB93_536:                             # %for.cond2646
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_416 Depth=2
                                        #       Parent Loop BB93_418 Depth=3
                                        #         Parent Loop BB93_532 Depth=4
                                        #           Parent Loop BB93_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB93_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB93_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB93_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_536
.LBB93_539:                             # %for.end2668
                                        #   in Loop: Header=BB93_534 Depth=5
	jmp	.LBB93_540
.LBB93_540:                             # %for.inc2669
                                        #   in Loop: Header=BB93_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_534
.LBB93_541:                             # %for.end2671
                                        #   in Loop: Header=BB93_532 Depth=4
	jmp	.LBB93_542
.LBB93_542:                             # %for.inc2672
                                        #   in Loop: Header=BB93_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB93_532
.LBB93_543:                             # %for.end2674
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB93_544:                             # %for.cond2675
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_416 Depth=2
                                        #       Parent Loop BB93_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB93_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB93_546:                             # %for.cond2680
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_416 Depth=2
                                        #       Parent Loop BB93_418 Depth=3
                                        #         Parent Loop BB93_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB93_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB93_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB93_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB93_550
.LBB93_549:                             # %if.else2705
                                        #   in Loop: Header=BB93_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB93_550:                             # %if.end2754
                                        #   in Loop: Header=BB93_546 Depth=5
	jmp	.LBB93_551
.LBB93_551:                             # %for.inc2755
                                        #   in Loop: Header=BB93_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_546
.LBB93_552:                             # %for.end2757
                                        #   in Loop: Header=BB93_544 Depth=4
	jmp	.LBB93_553
.LBB93_553:                             # %for.inc2758
                                        #   in Loop: Header=BB93_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_544
.LBB93_554:                             # %for.end2760
                                        #   in Loop: Header=BB93_418 Depth=3
	jmp	.LBB93_555
.LBB93_555:                             # %if.end2761
                                        #   in Loop: Header=BB93_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB93_556:                             # %if.end2762
                                        #   in Loop: Header=BB93_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB93_557:                             # %if.end2763
                                        #   in Loop: Header=BB93_418 Depth=3
	jmp	.LBB93_558
.LBB93_558:                             # %for.inc2764
                                        #   in Loop: Header=BB93_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB93_418
.LBB93_559:                             # %for.end2766
                                        #   in Loop: Header=BB93_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB93_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB93_416 Depth=2
	movl	-172(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB93_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB93_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB93_563
.LBB93_562:                             # %cond.true2782
                                        #   in Loop: Header=BB93_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB93_564
.LBB93_563:                             # %cond.false2783
                                        #   in Loop: Header=BB93_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB93_564
.LBB93_564:                             # %cond.end2784
                                        #   in Loop: Header=BB93_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB93_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB93_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB93_567
.LBB93_566:                             # %cond.true2793
                                        #   in Loop: Header=BB93_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB93_568
.LBB93_567:                             # %cond.false2794
                                        #   in Loop: Header=BB93_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB93_568
.LBB93_568:                             # %cond.end2795
                                        #   in Loop: Header=BB93_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-280(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -180(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB93_569:                             # %for.cond2813
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_571 Depth 4
                                        #           Child Loop BB93_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB93_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB93_569 Depth=3
	movl	$0, -24(%rbp)
.LBB93_571:                             # %for.cond2817
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_416 Depth=2
                                        #       Parent Loop BB93_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB93_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB93_571 Depth=4
	movl	$0, -20(%rbp)
.LBB93_573:                             # %for.cond2821
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_416 Depth=2
                                        #       Parent Loop BB93_569 Depth=3
                                        #         Parent Loop BB93_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB93_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB93_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB93_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_573
.LBB93_576:                             # %for.end2844
                                        #   in Loop: Header=BB93_571 Depth=4
	jmp	.LBB93_577
.LBB93_577:                             # %for.inc2845
                                        #   in Loop: Header=BB93_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_571
.LBB93_578:                             # %for.end2847
                                        #   in Loop: Header=BB93_569 Depth=3
	jmp	.LBB93_579
.LBB93_579:                             # %for.inc2848
                                        #   in Loop: Header=BB93_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB93_569
.LBB93_580:                             # %for.end2850
                                        #   in Loop: Header=BB93_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB93_581:                             # %for.cond2851
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB93_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB93_583:                             # %for.cond2856
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_416 Depth=2
                                        #       Parent Loop BB93_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB93_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB93_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB93_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB93_587
.LBB93_586:                             # %if.else2886
                                        #   in Loop: Header=BB93_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB93_587:                             # %if.end2935
                                        #   in Loop: Header=BB93_583 Depth=4
	jmp	.LBB93_588
.LBB93_588:                             # %for.inc2936
                                        #   in Loop: Header=BB93_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_583
.LBB93_589:                             # %for.end2938
                                        #   in Loop: Header=BB93_581 Depth=3
	jmp	.LBB93_590
.LBB93_590:                             # %for.inc2939
                                        #   in Loop: Header=BB93_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_581
.LBB93_591:                             # %for.end2941
                                        #   in Loop: Header=BB93_416 Depth=2
	jmp	.LBB93_592
.LBB93_592:                             # %if.end2942
                                        #   in Loop: Header=BB93_416 Depth=2
	cmpl	$0, -180(%rbp)
	je	.LBB93_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB93_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-180(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB93_594:                             # %if.end2948
                                        #   in Loop: Header=BB93_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB93_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB93_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB93_596:                             # %if.end2974
                                        #   in Loop: Header=BB93_416 Depth=2
	jmp	.LBB93_597
.LBB93_597:                             # %for.inc2975
                                        #   in Loop: Header=BB93_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB93_416
.LBB93_598:                             # %for.end2977
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-140(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB93_599:                             # %if.end2980
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB93_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB93_601:                             # %for.cond2985
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_603 Depth 3
                                        #         Child Loop BB93_614 Depth 4
                                        #         Child Loop BB93_633 Depth 4
                                        #           Child Loop BB93_635 Depth 5
                                        #         Child Loop BB93_642 Depth 4
                                        #         Child Loop BB93_677 Depth 4
                                        #           Child Loop BB93_679 Depth 5
                                        #         Child Loop BB93_701 Depth 4
                                        #           Child Loop BB93_703 Depth 5
                                        #             Child Loop BB93_705 Depth 6
                                        #         Child Loop BB93_713 Depth 4
                                        #           Child Loop BB93_715 Depth 5
                                        #         Child Loop BB93_723 Depth 4
                                        #           Child Loop BB93_725 Depth 5
                                        #       Child Loop BB93_745 Depth 3
                                        #         Child Loop BB93_747 Depth 4
                                        #           Child Loop BB93_749 Depth 5
                                        #       Child Loop BB93_757 Depth 3
                                        #         Child Loop BB93_759 Depth 4
                                        #       Child Loop BB93_766 Depth 3
                                        #         Child Loop BB93_768 Depth 4
                                        #       Child Loop BB93_778 Depth 3
                                        #         Child Loop BB93_780 Depth 4
                                        #       Child Loop BB93_786 Depth 3
                                        #       Child Loop BB93_791 Depth 3
                                        #         Child Loop BB93_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB93_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB93_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI93_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB93_603:                             # %for.cond2997
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_614 Depth 4
                                        #         Child Loop BB93_633 Depth 4
                                        #           Child Loop BB93_635 Depth 5
                                        #         Child Loop BB93_642 Depth 4
                                        #         Child Loop BB93_677 Depth 4
                                        #           Child Loop BB93_679 Depth 5
                                        #         Child Loop BB93_701 Depth 4
                                        #           Child Loop BB93_703 Depth 5
                                        #             Child Loop BB93_705 Depth 6
                                        #         Child Loop BB93_713 Depth 4
                                        #           Child Loop BB93_715 Depth 5
                                        #         Child Loop BB93_723 Depth 4
                                        #           Child Loop BB93_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB93_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB93_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB93_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB93_603 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB93_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB93_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB93_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-228(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB93_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB93_603 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB93_610
.LBB93_609:                             # %if.then3019
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB93_611
.LBB93_610:                             # %if.else3020
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
.LBB93_611:                             # %if.end3022
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	-256(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
.LBB93_612:                             # %if.end3024
                                        #   in Loop: Header=BB93_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB93_687
.LBB93_613:                             # %if.else3060
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB93_614:                             # %for.cond3061
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB93_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB93_614 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB93_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB93_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB93_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB93_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB93_630
.LBB93_618:                             # %if.then3078
                                        #   in Loop: Header=BB93_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB93_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB93_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB93_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB93_622
.LBB93_621:                             # %cond.false3088
                                        #   in Loop: Header=BB93_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB93_622:                             # %cond.end3091
                                        #   in Loop: Header=BB93_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB93_627
.LBB93_623:                             # %cond.false3095
                                        #   in Loop: Header=BB93_614 Depth=4
	vmovsd	.LCPI93_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB93_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB93_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB93_626
.LBB93_625:                             # %cond.false3102
                                        #   in Loop: Header=BB93_614 Depth=4
	movl	$1, %eax
	jmp	.LBB93_626
.LBB93_626:                             # %cond.end3103
                                        #   in Loop: Header=BB93_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB93_627:                             # %cond.end3108
                                        #   in Loop: Header=BB93_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB93_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB93_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB93_629:                             # %if.end3121
                                        #   in Loop: Header=BB93_614 Depth=4
	jmp	.LBB93_630
.LBB93_630:                             # %if.end3122
                                        #   in Loop: Header=BB93_614 Depth=4
	jmp	.LBB93_631
.LBB93_631:                             # %for.inc3123
                                        #   in Loop: Header=BB93_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB93_614
.LBB93_632:                             # %for.end3125
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	$0, -24(%rbp)
.LBB93_633:                             # %for.cond3126
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB93_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB93_633 Depth=4
	movl	$0, -20(%rbp)
.LBB93_635:                             # %for.cond3130
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_603 Depth=3
                                        #         Parent Loop BB93_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB93_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB93_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB93_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_635
.LBB93_638:                             # %for.end3187
                                        #   in Loop: Header=BB93_633 Depth=4
	jmp	.LBB93_639
.LBB93_639:                             # %for.inc3188
                                        #   in Loop: Header=BB93_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_633
.LBB93_640:                             # %for.end3190
                                        #   in Loop: Header=BB93_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB93_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB93_642:                             # %for.cond3193
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB93_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB93_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB93_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB93_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB93_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB93_647
.LBB93_646:                             # %cond.false3210
                                        #   in Loop: Header=BB93_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB93_647:                             # %cond.end3213
                                        #   in Loop: Header=BB93_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB93_652
.LBB93_648:                             # %cond.false3217
                                        #   in Loop: Header=BB93_642 Depth=4
	vmovsd	.LCPI93_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB93_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB93_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB93_651
.LBB93_650:                             # %cond.false3224
                                        #   in Loop: Header=BB93_642 Depth=4
	movl	$1, %eax
	jmp	.LBB93_651
.LBB93_651:                             # %cond.end3225
                                        #   in Loop: Header=BB93_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB93_652:                             # %cond.end3230
                                        #   in Loop: Header=BB93_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB93_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB93_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB93_654:                             # %if.end3243
                                        #   in Loop: Header=BB93_642 Depth=4
	jmp	.LBB93_655
.LBB93_655:                             # %for.inc3244
                                        #   in Loop: Header=BB93_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB93_642
.LBB93_656:                             # %for.end3246
                                        #   in Loop: Header=BB93_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB93_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB93_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB93_660
.LBB93_659:                             # %cond.false3256
                                        #   in Loop: Header=BB93_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB93_660:                             # %cond.end3259
                                        #   in Loop: Header=BB93_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB93_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB93_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB93_663
.LBB93_662:                             # %cond.false3269
                                        #   in Loop: Header=BB93_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB93_663:                             # %cond.end3271
                                        #   in Loop: Header=BB93_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB93_668
.LBB93_664:                             # %cond.false3276
                                        #   in Loop: Header=BB93_603 Depth=3
	vmovsd	.LCPI93_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB93_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB93_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB93_667
.LBB93_666:                             # %cond.false3283
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	$1, %eax
	jmp	.LBB93_667
.LBB93_667:                             # %cond.end3284
                                        #   in Loop: Header=BB93_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB93_668:                             # %cond.end3289
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB93_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB93_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB93_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB93_676
.LBB93_671:                             # %if.else3299
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB93_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB93_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB93_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB93_675
.LBB93_674:                             # %if.else3306
                                        #   in Loop: Header=BB93_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB93_675:                             # %if.end3307
                                        #   in Loop: Header=BB93_603 Depth=3
	jmp	.LBB93_676
.LBB93_676:                             # %if.end3308
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	$0, -24(%rbp)
.LBB93_677:                             # %for.cond3309
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB93_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB93_677 Depth=4
	movl	$0, -20(%rbp)
.LBB93_679:                             # %for.cond3313
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_603 Depth=3
                                        #         Parent Loop BB93_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB93_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB93_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB93_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_679
.LBB93_682:                             # %for.end3349
                                        #   in Loop: Header=BB93_677 Depth=4
	jmp	.LBB93_683
.LBB93_683:                             # %for.inc3350
                                        #   in Loop: Header=BB93_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_677
.LBB93_684:                             # %for.end3352
                                        #   in Loop: Header=BB93_603 Depth=3
	jmp	.LBB93_686
.LBB93_685:                             # %if.else3353
                                        #   in Loop: Header=BB93_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB93_686:                             # %if.end3354
                                        #   in Loop: Header=BB93_603 Depth=3
	jmp	.LBB93_687
.LBB93_687:                             # %if.end3355
                                        #   in Loop: Header=BB93_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB93_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB93_695
.LBB93_689:                             # %if.else3360
                                        #   in Loop: Header=BB93_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB93_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB93_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB93_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB93_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB93_693
.LBB93_692:                             # %cond.false3374
                                        #   in Loop: Header=BB93_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB93_693:                             # %cond.end3379
                                        #   in Loop: Header=BB93_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB93_694:                             # %if.end3385
                                        #   in Loop: Header=BB93_603 Depth=3
	jmp	.LBB93_695
.LBB93_695:                             # %if.end3386
                                        #   in Loop: Header=BB93_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB93_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB93_699
.LBB93_697:                             # %lor.lhs.false3392
                                        #   in Loop: Header=BB93_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB93_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB93_732
.LBB93_699:                             # %if.then3398
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB93_701:                             # %for.cond3422
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_703 Depth 5
                                        #             Child Loop BB93_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB93_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB93_701 Depth=4
	movl	$0, -24(%rbp)
.LBB93_703:                             # %for.cond3426
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_603 Depth=3
                                        #         Parent Loop BB93_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB93_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB93_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB93_703 Depth=5
	movl	$0, -20(%rbp)
.LBB93_705:                             # %for.cond3430
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_603 Depth=3
                                        #         Parent Loop BB93_701 Depth=4
                                        #           Parent Loop BB93_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB93_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB93_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB93_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_705
.LBB93_708:                             # %for.end3453
                                        #   in Loop: Header=BB93_703 Depth=5
	jmp	.LBB93_709
.LBB93_709:                             # %for.inc3454
                                        #   in Loop: Header=BB93_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_703
.LBB93_710:                             # %for.end3456
                                        #   in Loop: Header=BB93_701 Depth=4
	jmp	.LBB93_711
.LBB93_711:                             # %for.inc3457
                                        #   in Loop: Header=BB93_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB93_701
.LBB93_712:                             # %for.end3459
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB93_713:                             # %for.cond3460
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB93_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB93_715:                             # %for.cond3465
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_603 Depth=3
                                        #         Parent Loop BB93_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB93_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB93_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_715
.LBB93_718:                             # %for.end3494
                                        #   in Loop: Header=BB93_713 Depth=4
	jmp	.LBB93_719
.LBB93_719:                             # %for.inc3495
                                        #   in Loop: Header=BB93_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_713
.LBB93_720:                             # %for.end3497
                                        #   in Loop: Header=BB93_603 Depth=3
	jmp	.LBB93_721
.LBB93_721:                             # %if.end3498
                                        #   in Loop: Header=BB93_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB93_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB93_723:                             # %for.cond3502
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB93_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB93_725:                             # %for.cond3507
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_603 Depth=3
                                        #         Parent Loop BB93_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB93_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB93_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_725
.LBB93_728:                             # %for.end3562
                                        #   in Loop: Header=BB93_723 Depth=4
	jmp	.LBB93_729
.LBB93_729:                             # %for.inc3563
                                        #   in Loop: Header=BB93_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_723
.LBB93_730:                             # %for.end3565
                                        #   in Loop: Header=BB93_603 Depth=3
	jmp	.LBB93_731
.LBB93_731:                             # %if.end3566
                                        #   in Loop: Header=BB93_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB93_732:                             # %if.end3567
                                        #   in Loop: Header=BB93_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB93_733:                             # %if.end3568
                                        #   in Loop: Header=BB93_603 Depth=3
	jmp	.LBB93_734
.LBB93_734:                             # %for.inc3569
                                        #   in Loop: Header=BB93_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB93_603
.LBB93_735:                             # %for.end3571
                                        #   in Loop: Header=BB93_601 Depth=2
	movl	-172(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB93_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB93_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB93_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB93_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB93_739
.LBB93_738:                             # %cond.true3588
                                        #   in Loop: Header=BB93_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB93_740
.LBB93_739:                             # %cond.false3589
                                        #   in Loop: Header=BB93_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB93_740
.LBB93_740:                             # %cond.end3590
                                        #   in Loop: Header=BB93_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB93_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB93_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB93_743
.LBB93_742:                             # %cond.true3599
                                        #   in Loop: Header=BB93_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB93_744
.LBB93_743:                             # %cond.false3600
                                        #   in Loop: Header=BB93_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB93_744
.LBB93_744:                             # %cond.end3601
                                        #   in Loop: Header=BB93_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-280(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -180(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB93_745:                             # %for.cond3619
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_747 Depth 4
                                        #           Child Loop BB93_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB93_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB93_745 Depth=3
	movl	$0, -24(%rbp)
.LBB93_747:                             # %for.cond3623
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB93_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB93_747 Depth=4
	movl	$0, -20(%rbp)
.LBB93_749:                             # %for.cond3627
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_745 Depth=3
                                        #         Parent Loop BB93_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB93_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB93_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB93_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_749
.LBB93_752:                             # %for.end3650
                                        #   in Loop: Header=BB93_747 Depth=4
	jmp	.LBB93_753
.LBB93_753:                             # %for.inc3651
                                        #   in Loop: Header=BB93_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_747
.LBB93_754:                             # %for.end3653
                                        #   in Loop: Header=BB93_745 Depth=3
	jmp	.LBB93_755
.LBB93_755:                             # %for.inc3654
                                        #   in Loop: Header=BB93_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB93_745
.LBB93_756:                             # %for.end3656
                                        #   in Loop: Header=BB93_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB93_757:                             # %for.cond3657
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB93_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB93_759:                             # %for.cond3662
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB93_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB93_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_759
.LBB93_762:                             # %for.end3691
                                        #   in Loop: Header=BB93_757 Depth=3
	jmp	.LBB93_763
.LBB93_763:                             # %for.inc3692
                                        #   in Loop: Header=BB93_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_757
.LBB93_764:                             # %for.end3694
                                        #   in Loop: Header=BB93_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB93_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB93_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB93_766:                             # %for.cond3698
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB93_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB93_768:                             # %for.cond3703
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB93_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB93_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_768
.LBB93_771:                             # %for.end3758
                                        #   in Loop: Header=BB93_766 Depth=3
	jmp	.LBB93_772
.LBB93_772:                             # %for.inc3759
                                        #   in Loop: Header=BB93_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_766
.LBB93_773:                             # %for.end3761
                                        #   in Loop: Header=BB93_601 Depth=2
	jmp	.LBB93_774
.LBB93_774:                             # %if.end3762
                                        #   in Loop: Header=BB93_601 Depth=2
	jmp	.LBB93_775
.LBB93_775:                             # %if.end3763
                                        #   in Loop: Header=BB93_601 Depth=2
	cmpl	$0, -180(%rbp)
	je	.LBB93_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB93_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-180(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB93_777:                             # %if.end3769
                                        #   in Loop: Header=BB93_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB93_778:                             # %for.cond3781
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB93_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB93_780:                             # %for.cond3786
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB93_780 Depth=4
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB93_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_780
.LBB93_783:                             # %for.end3797
                                        #   in Loop: Header=BB93_778 Depth=3
	jmp	.LBB93_784
.LBB93_784:                             # %for.inc3798
                                        #   in Loop: Header=BB93_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_778
.LBB93_785:                             # %for.end3800
                                        #   in Loop: Header=BB93_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB93_786:                             # %for.cond3802
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB93_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB93_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_786
.LBB93_789:                             # %for.end3811
                                        #   in Loop: Header=BB93_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB93_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB93_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB93_791:                             # %for.cond3819
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB93_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB93_793:                             # %for.cond3824
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_601 Depth=2
                                        #       Parent Loop BB93_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB93_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB93_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_793
.LBB93_796:                             # %for.end3844
                                        #   in Loop: Header=BB93_791 Depth=3
	jmp	.LBB93_797
.LBB93_797:                             # %for.inc3845
                                        #   in Loop: Header=BB93_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_791
.LBB93_798:                             # %for.end3847
                                        #   in Loop: Header=BB93_601 Depth=2
	jmp	.LBB93_799
.LBB93_799:                             # %if.end3848
                                        #   in Loop: Header=BB93_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB93_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB93_601
.LBB93_801:                             # %for.end3860
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_802
.LBB93_802:                             # %if.end3861
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB93_803:                             # %for.cond3862
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB93_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB93_803 Depth=2
	movl	$0, -24(%rbp)
.LBB93_805:                             # %for.cond3866
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB93_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB93_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB93_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_805
.LBB93_808:                             # %for.end3890
                                        #   in Loop: Header=BB93_803 Depth=2
	jmp	.LBB93_809
.LBB93_809:                             # %for.inc3891
                                        #   in Loop: Header=BB93_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_803
.LBB93_810:                             # %for.end3893
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB93_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB93_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB93_825
.LBB93_813:                             # %if.then3902
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB93_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB93_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB93_822
.LBB93_816:                             # %if.else3910
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB93_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB93_821
.LBB93_818:                             # %if.else3915
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB93_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB93_820:                             # %if.end3922
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_821
.LBB93_821:                             # %if.end3923
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_822
.LBB93_822:                             # %if.end3924
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_824
.LBB93_823:                             # %if.else3925
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB93_824:                             # %if.end3927
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_825
.LBB93_825:                             # %if.end3928
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_827
.LBB93_826:                             # %if.else3929
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
.LBB93_827:                             # %if.end3930
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB93_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB93_830
.LBB93_829:                             # %if.then3938
                                        #   in Loop: Header=BB93_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB93_830:                             # %if.end3939
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_832
.LBB93_831:                             # %if.else3940
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB93_832:                             # %if.end3941
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB93_171 Depth=1
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB93_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB93_171 Depth=1
	leaq	-276(%rbp), %rdi
	leaq	-268(%rbp), %rsi
	leaq	-316(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB93_835:                             # %for.cond3949
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_853 Depth 3
                                        #         Child Loop BB93_908 Depth 4
                                        #           Child Loop BB93_911 Depth 5
                                        #             Child Loop BB93_913 Depth 6
                                        #           Child Loop BB93_920 Depth 5
                                        #             Child Loop BB93_922 Depth 6
                                        #         Child Loop BB93_955 Depth 4
                                        #           Child Loop BB93_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB93_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB93_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB93_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB93_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB93_846
.LBB93_838:                             # %lor.lhs.false3960
                                        #   in Loop: Header=BB93_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB93_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB93_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB93_846
.LBB93_840:                             # %lor.lhs.false3966
                                        #   in Loop: Header=BB93_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB93_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB93_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB93_846
.LBB93_842:                             # %lor.lhs.false3972
                                        #   in Loop: Header=BB93_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB93_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB93_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB93_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB93_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB93_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB93_835 Depth=2
	cmpl	$0, -316(%rbp)
	jne	.LBB93_847
.LBB93_846:                             # %if.then3982
                                        #   in Loop: Header=BB93_835 Depth=2
	jmp	.LBB93_976
.LBB93_847:                             # %if.end3983
                                        #   in Loop: Header=BB93_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB93_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB93_835 Depth=2
	movl	$11, -300(%rbp)
	jmp	.LBB93_850
.LBB93_849:                             # %if.else3987
                                        #   in Loop: Header=BB93_835 Depth=2
	movl	$8, -300(%rbp)
.LBB93_850:                             # %if.end3988
                                        #   in Loop: Header=BB93_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB93_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB93_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB93_852:                             # %if.end3994
                                        #   in Loop: Header=BB93_835 Depth=2
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB93_853:                             # %for.cond3995
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_908 Depth 4
                                        #           Child Loop BB93_911 Depth 5
                                        #             Child Loop BB93_913 Depth 6
                                        #           Child Loop BB93_920 Depth 5
                                        #             Child Loop BB93_922 Depth 6
                                        #         Child Loop BB93_955 Depth 4
                                        #           Child Loop BB93_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-300(%rbp), %eax
	jge	.LBB93_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB93_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB93_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB93_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB93_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB93_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -124(%rbp)
.LBB93_857:                             # %if.end4010
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB93_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$0, -124(%rbp)
	jne	.LBB93_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB93_866
.LBB93_860:                             # %lor.lhs.false4018
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB93_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB93_866
.LBB93_862:                             # %lor.lhs.false4023
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$3, -124(%rbp)
	jne	.LBB93_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB93_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB93_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$0, -316(%rbp)
	jne	.LBB93_867
.LBB93_866:                             # %if.then4032
                                        #   in Loop: Header=BB93_853 Depth=3
	jmp	.LBB93_974
.LBB93_867:                             # %if.end4033
                                        #   in Loop: Header=BB93_853 Depth=3
	jmp	.LBB93_869
.LBB93_868:                             # %if.else4034
                                        #   in Loop: Header=BB93_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -124(%rbp)
.LBB93_869:                             # %if.end4037
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB93_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB93_853 Depth=3
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB93_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB93_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB93_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB93_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB93_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB93_877:                             # %if.end4066
                                        #   in Loop: Header=BB93_853 Depth=3
	jmp	.LBB93_878
.LBB93_878:                             # %if.end4067
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$2, -128(%rbp)
	jge	.LBB93_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB93_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB93_880:                             # %if.end4072
                                        #   in Loop: Header=BB93_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB93_881:                             # %if.end4074
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB93_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB93_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB93_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB93_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB93_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB93_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB93_887:                             # %if.end4092
                                        #   in Loop: Header=BB93_853 Depth=3
	jmp	.LBB93_888
.LBB93_888:                             # %if.end4093
                                        #   in Loop: Header=BB93_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB93_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB93_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB93_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB93_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB93_902
.LBB93_893:                             # %if.else4110
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB93_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB93_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB93_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB93_901
.LBB93_897:                             # %if.else4120
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB93_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB93_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB93_900:                             # %if.end4128
                                        #   in Loop: Header=BB93_853 Depth=3
	jmp	.LBB93_901
.LBB93_901:                             # %if.end4129
                                        #   in Loop: Header=BB93_853 Depth=3
	jmp	.LBB93_902
.LBB93_902:                             # %if.end4130
                                        #   in Loop: Header=BB93_853 Depth=3
	jmp	.LBB93_903
.LBB93_903:                             # %if.end4131
                                        #   in Loop: Header=BB93_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB93_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB93_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB93_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB93_947
.LBB93_907:                             # %if.then4146
                                        #   in Loop: Header=BB93_853 Depth=3
	jmp	.LBB93_908
.LBB93_908:                             # %while.body
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_835 Depth=2
                                        #       Parent Loop BB93_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_911 Depth 5
                                        #             Child Loop BB93_913 Depth 6
                                        #           Child Loop BB93_920 Depth 5
                                        #             Child Loop BB93_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB93_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB93_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB93_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB93_908 Depth=4
	movl	$0, -20(%rbp)
.LBB93_911:                             # %for.cond4153
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_835 Depth=2
                                        #       Parent Loop BB93_853 Depth=3
                                        #         Parent Loop BB93_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB93_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB93_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB93_911 Depth=5
	movl	$0, -24(%rbp)
.LBB93_913:                             # %for.cond4157
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_835 Depth=2
                                        #       Parent Loop BB93_853 Depth=3
                                        #         Parent Loop BB93_908 Depth=4
                                        #           Parent Loop BB93_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB93_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB93_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB93_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_913
.LBB93_916:                             # %for.end4182
                                        #   in Loop: Header=BB93_911 Depth=5
	jmp	.LBB93_917
.LBB93_917:                             # %for.inc4183
                                        #   in Loop: Header=BB93_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_911
.LBB93_918:                             # %for.end4185
                                        #   in Loop: Header=BB93_908 Depth=4
	jmp	.LBB93_928
.LBB93_919:                             # %if.else4186
                                        #   in Loop: Header=BB93_908 Depth=4
	movl	$0, -20(%rbp)
.LBB93_920:                             # %for.cond4187
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_835 Depth=2
                                        #       Parent Loop BB93_853 Depth=3
                                        #         Parent Loop BB93_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB93_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB93_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB93_920 Depth=5
	movl	$0, -24(%rbp)
.LBB93_922:                             # %for.cond4191
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_835 Depth=2
                                        #       Parent Loop BB93_853 Depth=3
                                        #         Parent Loop BB93_908 Depth=4
                                        #           Parent Loop BB93_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB93_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB93_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB93_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_922
.LBB93_925:                             # %for.end4215
                                        #   in Loop: Header=BB93_920 Depth=5
	jmp	.LBB93_926
.LBB93_926:                             # %for.inc4216
                                        #   in Loop: Header=BB93_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_920
.LBB93_927:                             # %for.end4218
                                        #   in Loop: Header=BB93_908 Depth=4
	jmp	.LBB93_928
.LBB93_928:                             # %if.end4219
                                        #   in Loop: Header=BB93_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB93_929:                             # %if.end4220
                                        #   in Loop: Header=BB93_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB93_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB93_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB93_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB93_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB93_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB93_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB93_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB93_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB93_934:                             # %while.body.backedge
                                        #   in Loop: Header=BB93_908 Depth=4
	jmp	.LBB93_908
.LBB93_935:                             # %if.else4236
                                        #   in Loop: Header=BB93_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB93_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB93_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB93_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB93_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB93_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB93_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB93_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB93_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB93_934
.LBB93_940:                             # %if.else4250
                                        #   in Loop: Header=BB93_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB93_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB93_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB93_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB93_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB93_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB93_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB93_934
.LBB93_944:                             # %if.else4262
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB93_946
.LBB93_945:                             # %if.else4264
                                        #   in Loop: Header=BB93_853 Depth=3
	jmp	.LBB93_946
.LBB93_946:                             # %while.end
                                        #   in Loop: Header=BB93_853 Depth=3
	jmp	.LBB93_947
.LBB93_947:                             # %if.end4265
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB93_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB93_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB93_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB93_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB93_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB93_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB93_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB93_853 Depth=3
	movl	$0, -20(%rbp)
.LBB93_955:                             # %for.cond4288
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_835 Depth=2
                                        #       Parent Loop BB93_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB93_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB93_955 Depth=4
	movl	$0, -24(%rbp)
.LBB93_957:                             # %for.cond4292
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_835 Depth=2
                                        #       Parent Loop BB93_853 Depth=3
                                        #         Parent Loop BB93_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB93_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB93_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB93_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_957
.LBB93_960:                             # %for.end4316
                                        #   in Loop: Header=BB93_955 Depth=4
	jmp	.LBB93_961
.LBB93_961:                             # %for.inc4317
                                        #   in Loop: Header=BB93_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_955
.LBB93_962:                             # %for.end4319
                                        #   in Loop: Header=BB93_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB93_963:                             # %if.end4320
                                        #   in Loop: Header=BB93_853 Depth=3
	jmp	.LBB93_964
.LBB93_964:                             # %if.end4321
                                        #   in Loop: Header=BB93_853 Depth=3
	jmp	.LBB93_965
.LBB93_965:                             # %if.end4322
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB93_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB93_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB93_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB93_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB93_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB93_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB93_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB93_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB93_972:                             # %if.end4356
                                        #   in Loop: Header=BB93_853 Depth=3
	jmp	.LBB93_973
.LBB93_973:                             # %if.end4357
                                        #   in Loop: Header=BB93_853 Depth=3
	jmp	.LBB93_974
.LBB93_974:                             # %for.inc4358
                                        #   in Loop: Header=BB93_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB93_853
.LBB93_975:                             # %for.end4360
                                        #   in Loop: Header=BB93_835 Depth=2
	jmp	.LBB93_976
.LBB93_976:                             # %for.inc4361
                                        #   in Loop: Header=BB93_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB93_835
.LBB93_977:                             # %for.end4364
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_1082
.LBB93_978:                             # %if.else4365
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB93_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB93_980:                             # %if.end4371
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB93_981:                             # %for.cond4372
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_1014 Depth 3
                                        #         Child Loop BB93_1017 Depth 4
                                        #           Child Loop BB93_1019 Depth 5
                                        #         Child Loop BB93_1026 Depth 4
                                        #           Child Loop BB93_1028 Depth 5
                                        #       Child Loop BB93_1061 Depth 3
                                        #         Child Loop BB93_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB93_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB93_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB93_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB93_981 Depth=2
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB93_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB93_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB93_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB93_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB93_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB93_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB93_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB93_990:                             # %if.end4407
                                        #   in Loop: Header=BB93_981 Depth=2
	jmp	.LBB93_991
.LBB93_991:                             # %if.end4408
                                        #   in Loop: Header=BB93_981 Depth=2
	cmpl	$2, -128(%rbp)
	jge	.LBB93_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB93_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB93_993:                             # %if.end4413
                                        #   in Loop: Header=BB93_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB93_994:                             # %if.end4415
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB93_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB93_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB93_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB93_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB93_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB93_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB93_1008
.LBB93_999:                             # %if.else4433
                                        #   in Loop: Header=BB93_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB93_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB93_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB93_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB93_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB93_1007
.LBB93_1003:                            # %if.else4443
                                        #   in Loop: Header=BB93_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB93_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB93_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB93_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB93_1006:                            # %if.end4451
                                        #   in Loop: Header=BB93_981 Depth=2
	jmp	.LBB93_1007
.LBB93_1007:                            # %if.end4452
                                        #   in Loop: Header=BB93_981 Depth=2
	jmp	.LBB93_1008
.LBB93_1008:                            # %if.end4453
                                        #   in Loop: Header=BB93_981 Depth=2
	jmp	.LBB93_1009
.LBB93_1009:                            # %if.end4454
                                        #   in Loop: Header=BB93_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB93_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB93_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB93_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB93_1053
.LBB93_1013:                            # %if.then4470
                                        #   in Loop: Header=BB93_981 Depth=2
	jmp	.LBB93_1014
.LBB93_1014:                            # %while.body4471
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_1017 Depth 4
                                        #           Child Loop BB93_1019 Depth 5
                                        #         Child Loop BB93_1026 Depth 4
                                        #           Child Loop BB93_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB93_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB93_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB93_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB93_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB93_1017:                            # %for.cond4478
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_981 Depth=2
                                        #       Parent Loop BB93_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB93_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB93_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB93_1019:                            # %for.cond4482
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_981 Depth=2
                                        #       Parent Loop BB93_1014 Depth=3
                                        #         Parent Loop BB93_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB93_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB93_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB93_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1019
.LBB93_1022:                            # %for.end4507
                                        #   in Loop: Header=BB93_1017 Depth=4
	jmp	.LBB93_1023
.LBB93_1023:                            # %for.inc4508
                                        #   in Loop: Header=BB93_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1017
.LBB93_1024:                            # %for.end4510
                                        #   in Loop: Header=BB93_1014 Depth=3
	jmp	.LBB93_1034
.LBB93_1025:                            # %if.else4511
                                        #   in Loop: Header=BB93_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB93_1026:                            # %for.cond4512
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_981 Depth=2
                                        #       Parent Loop BB93_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB93_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB93_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB93_1028:                            # %for.cond4516
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_981 Depth=2
                                        #       Parent Loop BB93_1014 Depth=3
                                        #         Parent Loop BB93_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB93_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB93_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB93_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1028
.LBB93_1031:                            # %for.end4540
                                        #   in Loop: Header=BB93_1026 Depth=4
	jmp	.LBB93_1032
.LBB93_1032:                            # %for.inc4541
                                        #   in Loop: Header=BB93_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1026
.LBB93_1033:                            # %for.end4543
                                        #   in Loop: Header=BB93_1014 Depth=3
	jmp	.LBB93_1034
.LBB93_1034:                            # %if.end4544
                                        #   in Loop: Header=BB93_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB93_1035:                            # %if.end4545
                                        #   in Loop: Header=BB93_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB93_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB93_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB93_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB93_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB93_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB93_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB93_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB93_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB93_1040:                            # %while.body4471.backedge
                                        #   in Loop: Header=BB93_1014 Depth=3
	jmp	.LBB93_1014
.LBB93_1041:                            # %if.else4561
                                        #   in Loop: Header=BB93_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB93_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB93_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB93_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB93_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB93_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB93_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB93_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB93_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB93_1040
.LBB93_1046:                            # %if.else4575
                                        #   in Loop: Header=BB93_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB93_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB93_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB93_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB93_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB93_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB93_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB93_1040
.LBB93_1050:                            # %if.else4587
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB93_1052
.LBB93_1051:                            # %if.else4589
                                        #   in Loop: Header=BB93_981 Depth=2
	jmp	.LBB93_1052
.LBB93_1052:                            # %while.end4590
                                        #   in Loop: Header=BB93_981 Depth=2
	jmp	.LBB93_1053
.LBB93_1053:                            # %if.end4591
                                        #   in Loop: Header=BB93_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB93_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB93_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB93_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB93_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB93_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB93_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB93_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB93_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB93_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB93_981 Depth=2
	movl	$0, -20(%rbp)
.LBB93_1061:                            # %for.cond4615
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB93_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB93_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB93_1063:                            # %for.cond4619
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_981 Depth=2
                                        #       Parent Loop BB93_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB93_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB93_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB93_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1063
.LBB93_1066:                            # %for.end4643
                                        #   in Loop: Header=BB93_1061 Depth=3
	jmp	.LBB93_1067
.LBB93_1067:                            # %for.inc4644
                                        #   in Loop: Header=BB93_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1061
.LBB93_1068:                            # %for.end4646
                                        #   in Loop: Header=BB93_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB93_1069:                            # %if.end4647
                                        #   in Loop: Header=BB93_981 Depth=2
	jmp	.LBB93_1070
.LBB93_1070:                            # %if.end4648
                                        #   in Loop: Header=BB93_981 Depth=2
	jmp	.LBB93_1071
.LBB93_1071:                            # %if.end4649
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB93_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB93_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB93_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB93_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB93_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB93_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB93_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB93_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB93_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB93_1078:                            # %if.end4683
                                        #   in Loop: Header=BB93_981 Depth=2
	jmp	.LBB93_1079
.LBB93_1079:                            # %if.end4684
                                        #   in Loop: Header=BB93_981 Depth=2
	jmp	.LBB93_1080
.LBB93_1080:                            # %for.inc4685
                                        #   in Loop: Header=BB93_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB93_981
.LBB93_1081:                            # %for.end4687
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_1082
.LBB93_1082:                            # %if.end4688
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_1284
.LBB93_1083:                            # %if.else4689
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -320(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB93_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB93_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB93_1085:                            # %if.end4695
                                        #   in Loop: Header=BB93_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB93_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB93_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB93_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB93_171 Depth=1
	cmpl	$0, -256(%rbp)
	je	.LBB93_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB93_1090
	jmp	.LBB93_1089
.LBB93_1089:                            # %if.then4702
                                        #   in Loop: Header=BB93_171 Depth=1
	subl	$2, %eax
	je	.LBB93_1097
	jmp	.LBB93_1098
.LBB93_1090:                            # %sw.bb4704
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jl	.LBB93_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB93_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB93_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB93_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB93_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB93_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB93_1095
.LBB93_1094:                            # %if.then4716
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB93_1096
.LBB93_1095:                            # %if.else4717
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB93_1096:                            # %if.end4718
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_1099
.LBB93_1097:                            # %sw.bb4719
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB93_1099
.LBB93_1098:                            # %sw.default4720
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB93_1099:                            # %sw.epilog4721
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_1101
.LBB93_1100:                            # %if.else4722
                                        #   in Loop: Header=BB93_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB93_1101:                            # %if.end4724
                                        #   in Loop: Header=BB93_171 Depth=1
	vmovsd	.LCPI93_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI93_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB93_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB93_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB93_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB93_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB93_1110
.LBB93_1106:                            # %if.else4743
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB93_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB93_1109
.LBB93_1108:                            # %if.else4748
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB93_1109:                            # %if.end4750
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_1110
.LBB93_1110:                            # %if.end4751
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_1112
.LBB93_1111:                            # %if.else4752
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB93_1112:                            # %if.end4754
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$0, -20(%rbp)
.LBB93_1113:                            # %for.cond4755
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB93_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB93_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB93_1115:                            # %for.cond4759
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB93_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB93_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB93_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1115
.LBB93_1118:                            # %for.end4785
                                        #   in Loop: Header=BB93_1113 Depth=2
	jmp	.LBB93_1119
.LBB93_1119:                            # %for.inc4786
                                        #   in Loop: Header=BB93_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1113
.LBB93_1120:                            # %for.end4788
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB93_1122
.LBB93_1121:                            # %if.else4789
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-320(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB93_1122:                            # %if.end4792
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_1123
.LBB93_1123:                            # %if.end4793
                                        #   in Loop: Header=BB93_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB93_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -188(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB93_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB93_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$0, -20(%rbp)
.LBB93_1127:                            # %for.cond4806
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_1129 Depth 3
                                        #         Child Loop BB93_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB93_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB93_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB93_1129:                            # %for.cond4810
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB93_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB93_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB93_1131:                            # %for.cond4814
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_1127 Depth=2
                                        #       Parent Loop BB93_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB93_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB93_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB93_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB93_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB93_1134:                            # %if.end4826
                                        #   in Loop: Header=BB93_1131 Depth=4
	jmp	.LBB93_1135
.LBB93_1135:                            # %for.inc4827
                                        #   in Loop: Header=BB93_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB93_1131
.LBB93_1136:                            # %for.end4829
                                        #   in Loop: Header=BB93_1129 Depth=3
	jmp	.LBB93_1137
.LBB93_1137:                            # %for.inc4830
                                        #   in Loop: Header=BB93_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1129
.LBB93_1138:                            # %for.end4832
                                        #   in Loop: Header=BB93_1127 Depth=2
	jmp	.LBB93_1139
.LBB93_1139:                            # %for.inc4833
                                        #   in Loop: Header=BB93_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1127
.LBB93_1140:                            # %for.end4835
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-188(%rbp), %eax
	movl	%eax, -188(%rbp)
	movl	$0, -24(%rbp)
.LBB93_1141:                            # %for.cond4840
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB93_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB93_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB93_1143:                            # %for.cond4844
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB93_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB93_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB93_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1143
.LBB93_1146:                            # %for.end4877
                                        #   in Loop: Header=BB93_1141 Depth=2
	jmp	.LBB93_1147
.LBB93_1147:                            # %for.inc4878
                                        #   in Loop: Header=BB93_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1141
.LBB93_1148:                            # %for.end4880
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_1149
.LBB93_1149:                            # %if.end4881
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-188(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB93_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB93_1151:                            # %if.end4889
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$0, -24(%rbp)
.LBB93_1152:                            # %for.cond4890
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB93_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB93_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB93_1154:                            # %for.cond4894
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB93_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB93_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB93_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1154
.LBB93_1157:                            # %for.end4913
                                        #   in Loop: Header=BB93_1152 Depth=2
	jmp	.LBB93_1158
.LBB93_1158:                            # %for.inc4914
                                        #   in Loop: Header=BB93_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1152
.LBB93_1159:                            # %for.end4916
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$0, -20(%rbp)
.LBB93_1160:                            # %for.cond4917
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB93_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB93_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB93_1162:                            # %for.cond4921
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB93_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB93_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB93_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1162
.LBB93_1165:                            # %for.end4947
                                        #   in Loop: Header=BB93_1160 Depth=2
	jmp	.LBB93_1166
.LBB93_1166:                            # %for.inc4948
                                        #   in Loop: Header=BB93_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1160
.LBB93_1167:                            # %for.end4950
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	jmp	.LBB93_1169
.LBB93_1168:                            # %if.else4952
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB93_1169:                            # %if.end4954
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_1170
.LBB93_1170:                            # %if.end4955
                                        #   in Loop: Header=BB93_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB93_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -188(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB93_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB93_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$0, -20(%rbp)
.LBB93_1174:                            # %for.cond4968
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_1176 Depth 3
                                        #         Child Loop BB93_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB93_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB93_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB93_1176:                            # %for.cond4972
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB93_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB93_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB93_1178:                            # %for.cond4976
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_1174 Depth=2
                                        #       Parent Loop BB93_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB93_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB93_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB93_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB93_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB93_1181:                            # %if.end4988
                                        #   in Loop: Header=BB93_1178 Depth=4
	jmp	.LBB93_1182
.LBB93_1182:                            # %for.inc4989
                                        #   in Loop: Header=BB93_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB93_1178
.LBB93_1183:                            # %for.end4991
                                        #   in Loop: Header=BB93_1176 Depth=3
	jmp	.LBB93_1184
.LBB93_1184:                            # %for.inc4992
                                        #   in Loop: Header=BB93_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1176
.LBB93_1185:                            # %for.end4994
                                        #   in Loop: Header=BB93_1174 Depth=2
	jmp	.LBB93_1186
.LBB93_1186:                            # %for.inc4995
                                        #   in Loop: Header=BB93_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1174
.LBB93_1187:                            # %for.end4997
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-188(%rbp), %eax
	movl	%eax, -188(%rbp)
.LBB93_1188:                            # %if.end5002
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-188(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB93_1189:                            # %for.cond5004
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB93_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB93_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB93_1191:                            # %for.cond5008
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB93_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB93_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB93_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1191
.LBB93_1194:                            # %for.end5034
                                        #   in Loop: Header=BB93_1189 Depth=2
	jmp	.LBB93_1195
.LBB93_1195:                            # %for.inc5035
                                        #   in Loop: Header=BB93_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1189
.LBB93_1196:                            # %for.end5037
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	jmp	.LBB93_1198
.LBB93_1197:                            # %if.else5039
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB93_1198:                            # %if.end5043
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_1199
.LBB93_1199:                            # %if.end5044
                                        #   in Loop: Header=BB93_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB93_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-124(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB93_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$0, -20(%rbp)
.LBB93_1202:                            # %for.cond5053
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB93_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB93_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB93_1204:                            # %for.cond5057
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB93_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB93_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB93_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1204
.LBB93_1207:                            # %for.end5084
                                        #   in Loop: Header=BB93_1202 Depth=2
	jmp	.LBB93_1208
.LBB93_1208:                            # %for.inc5085
                                        #   in Loop: Header=BB93_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1202
.LBB93_1209:                            # %for.end5087
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB93_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$0, -24(%rbp)
.LBB93_1211:                            # %for.cond5091
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB93_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB93_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB93_1213:                            # %for.cond5095
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB93_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB93_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -216(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -212(%rbp)
	movl	-212(%rbp), %eax
	subl	-176(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-176(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -264(%rbp)
	movl	-216(%rbp), %eax
	subl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB93_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1213
.LBB93_1216:                            # %for.end5194
                                        #   in Loop: Header=BB93_1211 Depth=2
	jmp	.LBB93_1217
.LBB93_1217:                            # %for.inc5195
                                        #   in Loop: Header=BB93_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1211
.LBB93_1218:                            # %for.end5197
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_1219
.LBB93_1219:                            # %if.end5198
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$10, best_mode
	movl	-124(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB93_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	$0, -24(%rbp)
.LBB93_1221:                            # %for.cond5204
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB93_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB93_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB93_1223:                            # %for.cond5208
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB93_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB93_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB93_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1223
.LBB93_1226:                            # %for.end5232
                                        #   in Loop: Header=BB93_1221 Depth=2
	jmp	.LBB93_1227
.LBB93_1227:                            # %for.inc5233
                                        #   in Loop: Header=BB93_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1221
.LBB93_1228:                            # %for.end5235
                                        #   in Loop: Header=BB93_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB93_1229:                            # %for.cond5237
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB93_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB93_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB93_1231:                            # %for.cond5241
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB93_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB93_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB93_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1231
.LBB93_1234:                            # %for.end5265
                                        #   in Loop: Header=BB93_1229 Depth=2
	jmp	.LBB93_1235
.LBB93_1235:                            # %for.inc5266
                                        #   in Loop: Header=BB93_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1229
.LBB93_1236:                            # %for.end5268
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB93_1237:                            # %for.cond5270
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB93_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB93_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB93_1239:                            # %for.cond5274
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB93_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB93_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB93_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1239
.LBB93_1242:                            # %for.end5289
                                        #   in Loop: Header=BB93_1237 Depth=2
	jmp	.LBB93_1243
.LBB93_1243:                            # %for.inc5290
                                        #   in Loop: Header=BB93_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1237
.LBB93_1244:                            # %for.end5292
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB93_1245:                            # %for.cond5296
                                        #   Parent Loop BB93_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB93_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB93_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB93_1247:                            # %for.cond5300
                                        #   Parent Loop BB93_171 Depth=1
                                        #     Parent Loop BB93_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB93_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB93_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -264(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-264(%rbp), %ecx
	movl	%ecx, -216(%rbp)
	movl	-264(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -176(%rbp)
	movl	-176(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -212(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-176(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB93_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB93_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB93_1251
.LBB93_1250:                            # %cond.false5344
                                        #   in Loop: Header=BB93_1247 Depth=3
	movl	-176(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB93_1251:                            # %cond.end5356
                                        #   in Loop: Header=BB93_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB93_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB93_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB93_1257
.LBB93_1253:                            # %cond.false5362
                                        #   in Loop: Header=BB93_1247 Depth=3
	xorl	%eax, %eax
	movl	-176(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB93_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB93_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB93_1256
.LBB93_1255:                            # %cond.false5377
                                        #   in Loop: Header=BB93_1247 Depth=3
	movl	-176(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB93_1256:                            # %cond.end5389
                                        #   in Loop: Header=BB93_1247 Depth=3
.LBB93_1257:                            # %cond.end5391
                                        #   in Loop: Header=BB93_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-216(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-124(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB93_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB93_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB93_1260
.LBB93_1259:                            # %cond.false5416
                                        #   in Loop: Header=BB93_1247 Depth=3
	movl	-216(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB93_1260:                            # %cond.end5426
                                        #   in Loop: Header=BB93_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB93_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB93_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB93_1266
.LBB93_1262:                            # %cond.false5432
                                        #   in Loop: Header=BB93_1247 Depth=3
	xorl	%eax, %eax
	movl	-216(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB93_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB93_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB93_1265
.LBB93_1264:                            # %cond.false5445
                                        #   in Loop: Header=BB93_1247 Depth=3
	movl	-216(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB93_1265:                            # %cond.end5455
                                        #   in Loop: Header=BB93_1247 Depth=3
.LBB93_1266:                            # %cond.end5457
                                        #   in Loop: Header=BB93_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-212(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB93_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB93_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB93_1269
.LBB93_1268:                            # %cond.false5484
                                        #   in Loop: Header=BB93_1247 Depth=3
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB93_1269:                            # %cond.end5496
                                        #   in Loop: Header=BB93_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB93_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB93_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB93_1275
.LBB93_1271:                            # %cond.false5502
                                        #   in Loop: Header=BB93_1247 Depth=3
	xorl	%eax, %eax
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB93_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB93_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB93_1274
.LBB93_1273:                            # %cond.false5517
                                        #   in Loop: Header=BB93_1247 Depth=3
	movl	-212(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB93_1274:                            # %cond.end5529
                                        #   in Loop: Header=BB93_1247 Depth=3
.LBB93_1275:                            # %cond.end5531
                                        #   in Loop: Header=BB93_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB93_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1247
.LBB93_1277:                            # %for.end5546
                                        #   in Loop: Header=BB93_1245 Depth=2
	jmp	.LBB93_1278
.LBB93_1278:                            # %for.inc5547
                                        #   in Loop: Header=BB93_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1245
.LBB93_1279:                            # %for.end5549
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_1280
.LBB93_1280:                            # %if.end5550
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_1282
.LBB93_1281:                            # %if.else5551
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-320(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB93_1282:                            # %if.end5554
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_1283
.LBB93_1283:                            # %if.end5555
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_1284
.LBB93_1284:                            # %if.end5556
                                        #   in Loop: Header=BB93_171 Depth=1
	cmpl	$0, -260(%rbp)
	jne	.LBB93_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB93_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB93_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB93_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB93_1288:                            # %lor.end5571
                                        #   in Loop: Header=BB93_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -252(%rbp)
.LBB93_1289:                            # %if.end5574
                                        #   in Loop: Header=BB93_171 Depth=1
	jmp	.LBB93_1290
.LBB93_1290:                            # %for.inc5575
                                        #   in Loop: Header=BB93_171 Depth=1
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
	jmp	.LBB93_171
.LBB93_1291:                            # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB93_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB93_1295
.LBB93_1294:                            # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB93_1299
.LBB93_1295:                            # %if.else5587
	cmpl	$0, cbp
	jne	.LBB93_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB93_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB93_1298:                            # %if.end5597
	jmp	.LBB93_1299
.LBB93_1299:                            # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB93_1395
.LBB93_1300:                            # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB93_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB93_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB93_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB93_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB93_1305:                            # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB93_1306:                            # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB93_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB93_1308:                            # %for.cond5623
                                        #   Parent Loop BB93_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB93_1308 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB93_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB93_1308
.LBB93_1311:                            # %for.end5639
                                        #   in Loop: Header=BB93_1306 Depth=1
	jmp	.LBB93_1312
.LBB93_1312:                            # %for.inc5640
                                        #   in Loop: Header=BB93_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1306
.LBB93_1313:                            # %for.end5642
	jmp	.LBB93_1370
.LBB93_1314:                            # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB93_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB93_1316:                            # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB93_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB93_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB93_1318:                            # %for.cond5651
                                        #   Parent Loop BB93_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB93_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB93_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB93_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB93_1318
.LBB93_1321:                            # %for.end5680
                                        #   in Loop: Header=BB93_1316 Depth=1
	jmp	.LBB93_1322
.LBB93_1322:                            # %for.inc5681
                                        #   in Loop: Header=BB93_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1316
.LBB93_1323:                            # %for.end5683
	movl	$0, -24(%rbp)
.LBB93_1324:                            # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB93_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB93_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB93_1326:                            # %for.cond5688
                                        #   Parent Loop BB93_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB93_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB93_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB93_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1326
.LBB93_1329:                            # %for.end5707
                                        #   in Loop: Header=BB93_1324 Depth=1
	jmp	.LBB93_1330
.LBB93_1330:                            # %for.inc5708
                                        #   in Loop: Header=BB93_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1324
.LBB93_1331:                            # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB93_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB93_1333:                            # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB93_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB93_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB93_1335:                            # %for.cond5718
                                        #   Parent Loop BB93_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB93_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB93_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB93_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1335
.LBB93_1338:                            # %for.end5752
                                        #   in Loop: Header=BB93_1333 Depth=1
	jmp	.LBB93_1339
.LBB93_1339:                            # %for.inc5753
                                        #   in Loop: Header=BB93_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1333
.LBB93_1340:                            # %for.end5755
	jmp	.LBB93_1341
.LBB93_1341:                            # %if.end5756
	jmp	.LBB93_1342
.LBB93_1342:                            # %if.end5757
	cmpl	$9, best_mode
	je	.LBB93_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB93_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB93_1345:                            # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB93_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB93_1347:                            # %for.cond5772
                                        #   Parent Loop BB93_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB93_1347 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB93_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB93_1347
.LBB93_1350:                            # %for.end5788
                                        #   in Loop: Header=BB93_1345 Depth=1
	jmp	.LBB93_1351
.LBB93_1351:                            # %for.inc5789
                                        #   in Loop: Header=BB93_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1345
.LBB93_1352:                            # %for.end5791
	cmpl	$10, best_mode
	je	.LBB93_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB93_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB93_1356
# %bb.1355:                             # %if.then5800
	movl	-304(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB93_1356:                            # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB93_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB93_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB93_1359:                            # %if.end5811
	movl	$0, -20(%rbp)
.LBB93_1360:                            # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB93_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB93_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB93_1362:                            # %for.cond5816
                                        #   Parent Loop BB93_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB93_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB93_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB93_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_1362
.LBB93_1365:                            # %for.end5842
                                        #   in Loop: Header=BB93_1360 Depth=1
	jmp	.LBB93_1366
.LBB93_1366:                            # %for.inc5843
                                        #   in Loop: Header=BB93_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_1360
.LBB93_1367:                            # %for.end5845
	jmp	.LBB93_1368
.LBB93_1368:                            # %if.end5846
	jmp	.LBB93_1369
.LBB93_1369:                            # %if.end5847
	jmp	.LBB93_1370
.LBB93_1370:                            # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB93_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB93_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB93_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB93_1374:                            # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB93_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB93_1376:                            # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -280(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB93_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB93_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB93_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB93_1382
.LBB93_1380:                            # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB93_1382
# %bb.1381:                             # %if.then5884
	leaq	-280(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB93_1382:                            # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB93_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-124(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB93_1384:                            # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB93_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB93_1392
.LBB93_1386:                            # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB93_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB93_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB93_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB93_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB93_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB93_1392:                            # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB93_1394:                            # %if.end5973
	jmp	.LBB93_1395
.LBB93_1395:                            # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB93_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB93_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB93_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB93_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB93_1401
.LBB93_1400:                            # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB93_1402
.LBB93_1401:                            # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB93_1402:                            # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB93_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB93_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB93_1406
.LBB93_1405:                            # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB93_1406:                            # %if.end6019
	jmp	.LBB93_1407
.LBB93_1407:                            # %if.end6020
	jmp	.LBB93_1408
.LBB93_1408:                            # %if.end6021
	jmp	.LBB93_1409
.LBB93_1409:                            # %if.end6022
	jmp	.LBB93_1410
.LBB93_1410:                            # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB93_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-240(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB93_1413
.LBB93_1412:                            # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB93_1413:                            # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB93_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB93_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB93_1420
	jmp	.LBB93_1428
.LBB93_1417:                            # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB93_1428
	jmp	.LBB93_1420
.LBB93_1419:                            # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB93_1420
	jmp	.LBB93_1428
.LBB93_1420:                            # %land.lhs.true6050
	movq	-448(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB93_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB93_1425
	jmp	.LBB93_1428
.LBB93_1422:                            # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_1424
# %bb.1423:                             # %cond.true6058
	movq	-448(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB93_1428
	jmp	.LBB93_1425
.LBB93_1424:                            # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB93_1425
	jmp	.LBB93_1428
.LBB93_1425:                            # %if.then6062
	callq	field_flag_inference
	cmpl	-288(%rbp), %eax
	je	.LBB93_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI93_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB93_1427:                            # %if.end6068
	jmp	.LBB93_1428
.LBB93_1428:                            # %if.end6069
	jmp	.LBB93_1429
.LBB93_1429:                            # %if.end6070
	jmp	.LBB93_1430
.LBB93_1430:                            # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB93_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB93_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB93_1452
.LBB93_1433:                            # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB93_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -252(%rbp)
	jne	.LBB93_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB93_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB93_1437:                            # %lor.end6142
.LBB93_1438:                            # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB93_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB93_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB93_1441:                            # %lor.end6166
.LBB93_1442:                            # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB93_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB93_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB93_1445:                            # %lor.end6191
.LBB93_1446:                            # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB93_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB93_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB93_1449:                            # %lor.end6216
.LBB93_1450:                            # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB93_1451:                            # %if.end6232
	jmp	.LBB93_1452
.LBB93_1452:                            # %if.end6233
	jmp	.LBB93_1464
.LBB93_1453:                            # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB93_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB93_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB93_1456:                            # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB93_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB93_1458:                            # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB93_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB93_1460:                            # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB93_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB93_1462:                            # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB93_1463:                            # %if.end6319
	jmp	.LBB93_1464
.LBB93_1464:                            # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB93_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB93_1466:                            # %if.end6327
	cmpl	$197327248, -416(%rbp)  # imm = 0xBC2F990
	jne	.LBB93_1468
.LBB93_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_1468:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_1467
.Lfunc_end93:
	.size	encode_one_macroblock.64, .Lfunc_end93-encode_one_macroblock.64
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.65   # -- Begin function SetMotionVectorsMB.65
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.65,@function
SetMotionVectorsMB.65:                  # @SetMotionVectorsMB.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1850793830, -72(%rbp)  # imm = 0x6E50DF66
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB94_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB94_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB94_1 Depth=1
	movl	$0, -4(%rbp)
.LBB94_3:                               # %for.cond3
                                        #   Parent Loop BB94_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB94_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB94_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB94_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB94_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB94_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB94_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB94_10
.LBB94_9:                               # %cond.false
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB94_10:                              # %cond.end
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB94_11:                              # %if.end
                                        #   in Loop: Header=BB94_3 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB94_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB94_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB94_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB94_15
.LBB94_14:                              # %if.else
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB94_15:                              # %if.end89
                                        #   in Loop: Header=BB94_3 Depth=2
	jmp	.LBB94_29
.LBB94_16:                              # %if.else90
                                        #   in Loop: Header=BB94_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB94_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB94_28
.LBB94_18:                              # %if.else122
                                        #   in Loop: Header=BB94_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB94_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB94_27
.LBB94_20:                              # %if.else174
                                        #   in Loop: Header=BB94_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB94_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB94_26
.LBB94_22:                              # %if.else226
                                        #   in Loop: Header=BB94_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB94_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB94_25
.LBB94_24:                              # %if.else298
                                        #   in Loop: Header=BB94_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB94_25:                              # %if.end299
                                        #   in Loop: Header=BB94_3 Depth=2
	jmp	.LBB94_26
.LBB94_26:                              # %if.end300
                                        #   in Loop: Header=BB94_3 Depth=2
	jmp	.LBB94_27
.LBB94_27:                              # %if.end301
                                        #   in Loop: Header=BB94_3 Depth=2
	jmp	.LBB94_28
.LBB94_28:                              # %if.end302
                                        #   in Loop: Header=BB94_3 Depth=2
	jmp	.LBB94_29
.LBB94_29:                              # %if.end303
                                        #   in Loop: Header=BB94_3 Depth=2
	jmp	.LBB94_30
.LBB94_30:                              # %for.inc
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_3
.LBB94_31:                              # %for.end
                                        #   in Loop: Header=BB94_1 Depth=1
	jmp	.LBB94_32
.LBB94_32:                              # %for.inc304
                                        #   in Loop: Header=BB94_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_1
.LBB94_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB94_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB94_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_37 Depth 2
                                        #       Child Loop BB94_39 Depth 3
                                        #         Child Loop BB94_41 Depth 4
                                        #           Child Loop BB94_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB94_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB94_35 Depth=1
	movl	$0, -8(%rbp)
.LBB94_37:                              # %for.cond313
                                        #   Parent Loop BB94_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB94_39 Depth 3
                                        #         Child Loop BB94_41 Depth 4
                                        #           Child Loop BB94_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB94_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB94_37 Depth=2
	movl	$0, -20(%rbp)
.LBB94_39:                              # %for.cond317
                                        #   Parent Loop BB94_35 Depth=1
                                        #     Parent Loop BB94_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB94_41 Depth 4
                                        #           Child Loop BB94_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB94_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB94_39 Depth=3
	movl	$0, -24(%rbp)
.LBB94_41:                              # %for.cond321
                                        #   Parent Loop BB94_35 Depth=1
                                        #     Parent Loop BB94_37 Depth=2
                                        #       Parent Loop BB94_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB94_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB94_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB94_41 Depth=4
	movl	$0, -28(%rbp)
.LBB94_43:                              # %for.cond325
                                        #   Parent Loop BB94_35 Depth=1
                                        #     Parent Loop BB94_37 Depth=2
                                        #       Parent Loop BB94_39 Depth=3
                                        #         Parent Loop BB94_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB94_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB94_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB94_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB94_43
.LBB94_46:                              # %for.end423
                                        #   in Loop: Header=BB94_41 Depth=4
	jmp	.LBB94_47
.LBB94_47:                              # %for.inc424
                                        #   in Loop: Header=BB94_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB94_41
.LBB94_48:                              # %for.end426
                                        #   in Loop: Header=BB94_39 Depth=3
	jmp	.LBB94_49
.LBB94_49:                              # %for.inc427
                                        #   in Loop: Header=BB94_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_39
.LBB94_50:                              # %for.end429
                                        #   in Loop: Header=BB94_37 Depth=2
	jmp	.LBB94_51
.LBB94_51:                              # %for.inc430
                                        #   in Loop: Header=BB94_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_37
.LBB94_52:                              # %for.end432
                                        #   in Loop: Header=BB94_35 Depth=1
	jmp	.LBB94_53
.LBB94_53:                              # %for.inc433
                                        #   in Loop: Header=BB94_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_35
.LBB94_54:                              # %for.end435
	jmp	.LBB94_55
.LBB94_55:                              # %if.end436
	cmpl	$1850793830, -72(%rbp)  # imm = 0x6E50DF66
	jne	.LBB94_57
.LBB94_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_56
.Lfunc_end94:
	.size	SetMotionVectorsMB.65, .Lfunc_end94-SetMotionVectorsMB.65
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.66   # -- Begin function SetMotionVectorsMB.66
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.66,@function
SetMotionVectorsMB.66:                  # @SetMotionVectorsMB.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$383494679, -68(%rbp)   # imm = 0x16DBAA17
	movq	%rdi, -64(%rbp)
	movl	%esi, -72(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB95_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB95_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB95_1 Depth=1
	movl	$0, -4(%rbp)
.LBB95_3:                               # %for.cond3
                                        #   Parent Loop BB95_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB95_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB95_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB95_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB95_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB95_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB95_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB95_10
.LBB95_9:                               # %cond.false
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB95_10:                              # %cond.end
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB95_11:                              # %if.end
                                        #   in Loop: Header=BB95_3 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB95_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB95_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB95_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB95_15
.LBB95_14:                              # %if.else
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB95_15:                              # %if.end89
                                        #   in Loop: Header=BB95_3 Depth=2
	jmp	.LBB95_29
.LBB95_16:                              # %if.else90
                                        #   in Loop: Header=BB95_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB95_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB95_28
.LBB95_18:                              # %if.else122
                                        #   in Loop: Header=BB95_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB95_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB95_27
.LBB95_20:                              # %if.else174
                                        #   in Loop: Header=BB95_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB95_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB95_26
.LBB95_22:                              # %if.else226
                                        #   in Loop: Header=BB95_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB95_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB95_25
.LBB95_24:                              # %if.else298
                                        #   in Loop: Header=BB95_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB95_25:                              # %if.end299
                                        #   in Loop: Header=BB95_3 Depth=2
	jmp	.LBB95_26
.LBB95_26:                              # %if.end300
                                        #   in Loop: Header=BB95_3 Depth=2
	jmp	.LBB95_27
.LBB95_27:                              # %if.end301
                                        #   in Loop: Header=BB95_3 Depth=2
	jmp	.LBB95_28
.LBB95_28:                              # %if.end302
                                        #   in Loop: Header=BB95_3 Depth=2
	jmp	.LBB95_29
.LBB95_29:                              # %if.end303
                                        #   in Loop: Header=BB95_3 Depth=2
	jmp	.LBB95_30
.LBB95_30:                              # %for.inc
                                        #   in Loop: Header=BB95_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_3
.LBB95_31:                              # %for.end
                                        #   in Loop: Header=BB95_1 Depth=1
	jmp	.LBB95_32
.LBB95_32:                              # %for.inc304
                                        #   in Loop: Header=BB95_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_1
.LBB95_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB95_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_37 Depth 2
                                        #       Child Loop BB95_39 Depth 3
                                        #         Child Loop BB95_41 Depth 4
                                        #           Child Loop BB95_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB95_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB95_35 Depth=1
	movl	$0, -8(%rbp)
.LBB95_37:                              # %for.cond313
                                        #   Parent Loop BB95_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_39 Depth 3
                                        #         Child Loop BB95_41 Depth 4
                                        #           Child Loop BB95_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB95_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB95_37 Depth=2
	movl	$0, -20(%rbp)
.LBB95_39:                              # %for.cond317
                                        #   Parent Loop BB95_35 Depth=1
                                        #     Parent Loop BB95_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB95_41 Depth 4
                                        #           Child Loop BB95_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB95_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB95_39 Depth=3
	movl	$0, -24(%rbp)
.LBB95_41:                              # %for.cond321
                                        #   Parent Loop BB95_35 Depth=1
                                        #     Parent Loop BB95_37 Depth=2
                                        #       Parent Loop BB95_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB95_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB95_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB95_41 Depth=4
	movl	$0, -28(%rbp)
.LBB95_43:                              # %for.cond325
                                        #   Parent Loop BB95_35 Depth=1
                                        #     Parent Loop BB95_37 Depth=2
                                        #       Parent Loop BB95_39 Depth=3
                                        #         Parent Loop BB95_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB95_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB95_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB95_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB95_43
.LBB95_46:                              # %for.end423
                                        #   in Loop: Header=BB95_41 Depth=4
	jmp	.LBB95_47
.LBB95_47:                              # %for.inc424
                                        #   in Loop: Header=BB95_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB95_41
.LBB95_48:                              # %for.end426
                                        #   in Loop: Header=BB95_39 Depth=3
	jmp	.LBB95_49
.LBB95_49:                              # %for.inc427
                                        #   in Loop: Header=BB95_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB95_39
.LBB95_50:                              # %for.end429
                                        #   in Loop: Header=BB95_37 Depth=2
	jmp	.LBB95_51
.LBB95_51:                              # %for.inc430
                                        #   in Loop: Header=BB95_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_37
.LBB95_52:                              # %for.end432
                                        #   in Loop: Header=BB95_35 Depth=1
	jmp	.LBB95_53
.LBB95_53:                              # %for.inc433
                                        #   in Loop: Header=BB95_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_35
.LBB95_54:                              # %for.end435
	jmp	.LBB95_55
.LBB95_55:                              # %if.end436
	cmpl	$383494679, -68(%rbp)   # imm = 0x16DBAA17
	jne	.LBB95_57
.LBB95_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_56
.Lfunc_end95:
	.size	SetMotionVectorsMB.66, .Lfunc_end95-SetMotionVectorsMB.66
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.67         # -- Begin function RestoreMV8x8.67
	.p2align	4, 0x90
	.type	RestoreMV8x8.67,@function
RestoreMV8x8.67:                        # @RestoreMV8x8.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2093317011, -12(%rbp)  # imm = 0x7CC57B93
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB96_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB96_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB96_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB96_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_1
.LBB96_4:                               # %for.end
	cmpl	$2093317011, -12(%rbp)  # imm = 0x7CC57B93
	jne	.LBB96_6
.LBB96_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_5
.Lfunc_end96:
	.size	RestoreMV8x8.67, .Lfunc_end96-RestoreMV8x8.67
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.68 # -- Begin function RDCost_for_4x4IntraBlocks.68
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.68,@function
RDCost_for_4x4IntraBlocks.68:           # @RDCost_for_4x4IntraBlocks.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$1969599946, -72(%rbp)  # imm = 0x7565B5CA
	movq	%rdi, -144(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -120(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -48(%rbp)
	movl	$0, -40(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -152(%rbp)
	movl	$0, -68(%rbp)
	movl	-52(%rbp), %edi
	movl	-44(%rbp), %esi
	leaq	-68(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB97_10
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB97_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_4 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB97_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB97_2 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB97_4:                               # %for.cond15
                                        #   Parent Loop BB97_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB97_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-80(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-136(%rbp), %rdx
	movl	-76(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB97_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_4
.LBB97_7:                               # %for.end
                                        #   in Loop: Header=BB97_2 Depth=1
	jmp	.LBB97_8
.LBB97_8:                               # %for.inc33
                                        #   in Loop: Header=BB97_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_2
.LBB97_9:                               # %for.end35
	jmp	.LBB97_10
.LBB97_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-48(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB97_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_16
.LBB97_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB97_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB97_15
.LBB97_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB97_15:                              # %cond.end
.LBB97_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB97_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB97_18:                              # %if.end50
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-152(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB97_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB97_21
.LBB97_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB97_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB97_23
# %bb.22:                               # %if.then66
	movl	-8(%rbp), %esi
	movl	-20(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_24
.LBB97_23:                              # %if.else69
	movl	-8(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB97_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm0
	vmovsd	-120(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -128(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB97_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -88(%rbp)
	jmp	.LBB97_27
.LBB97_26:                              # %if.else81
	vmovsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -88(%rbp)
.LBB97_27:                              # %return
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1969599946, -72(%rbp)  # imm = 0x7565B5CA
	jne	.LBB97_29
.LBB97_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB97_28
.Lfunc_end97:
	.size	RDCost_for_4x4IntraBlocks.68, .Lfunc_end97-RDCost_for_4x4IntraBlocks.68
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.69 # -- Begin function CheckReliabilityOfRef.69
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.69,@function
CheckReliabilityOfRef.69:               # @CheckReliabilityOfRef.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$892603413, -108(%rbp)  # imm = 0x35340C15
	movl	%edi, -80(%rbp)
	movl	%esi, -96(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB98_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB98_6
.LBB98_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB98_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB98_5
.LBB98_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB98_5
.LBB98_5:                               # %cond.end
.LBB98_6:                               # %cond.end6
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB98_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB98_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -104(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB98_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB98_14
.LBB98_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB98_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB98_13
.LBB98_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB98_13
.LBB98_13:                              # %cond.end20
.LBB98_14:                              # %cond.end22
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB98_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB98_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB98_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_19 Depth 2
                                        #       Child Loop BB98_23 Depth 3
                                        #         Child Loop BB98_25 Depth 4
                                        #       Child Loop BB98_53 Depth 3
                                        #         Child Loop BB98_55 Depth 4
                                        #           Child Loop BB98_66 Depth 5
                                        #       Child Loop BB98_87 Depth 3
                                        #         Child Loop BB98_89 Depth 4
                                        #           Child Loop BB98_100 Depth 5
                                        #       Child Loop BB98_121 Depth 3
                                        #         Child Loop BB98_123 Depth 4
                                        #           Child Loop BB98_125 Depth 5
                                        #             Child Loop BB98_136 Depth 6
                                        #       Child Loop BB98_159 Depth 3
                                        #         Child Loop BB98_161 Depth 4
                                        #           Child Loop BB98_163 Depth 5
                                        #             Child Loop BB98_174 Depth 6
                                        #       Child Loop BB98_196 Depth 3
                                        #         Child Loop BB98_198 Depth 4
                                        #           Child Loop BB98_212 Depth 5
                                        #           Child Loop BB98_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB98_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB98_17 Depth=1
	movl	-92(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB98_19:                              # %for.cond31
                                        #   Parent Loop BB98_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_23 Depth 3
                                        #         Child Loop BB98_25 Depth 4
                                        #       Child Loop BB98_53 Depth 3
                                        #         Child Loop BB98_55 Depth 4
                                        #           Child Loop BB98_66 Depth 5
                                        #       Child Loop BB98_87 Depth 3
                                        #         Child Loop BB98_89 Depth 4
                                        #           Child Loop BB98_100 Depth 5
                                        #       Child Loop BB98_121 Depth 3
                                        #         Child Loop BB98_123 Depth 4
                                        #           Child Loop BB98_125 Depth 5
                                        #             Child Loop BB98_136 Depth 6
                                        #       Child Loop BB98_159 Depth 3
                                        #         Child Loop BB98_161 Depth 4
                                        #           Child Loop BB98_163 Depth 5
                                        #             Child Loop BB98_174 Depth 6
                                        #       Child Loop BB98_196 Depth 3
                                        #         Child Loop BB98_198 Depth 4
                                        #           Child Loop BB98_212 Depth 5
                                        #           Child Loop BB98_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB98_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB98_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-28(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB98_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB98_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB98_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB98_19 Depth=2
	movl	$0, -12(%rbp)
.LBB98_23:                              # %for.cond75
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_25 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB98_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB98_23 Depth=3
	movl	$0, -16(%rbp)
.LBB98_25:                              # %for.cond79
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB98_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB98_25 Depth=4
	movq	pixel_map, %rax
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB98_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB98_29
.LBB98_28:                              # %cond.false87
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB98_29:                              # %cond.end89
                                        #   in Loop: Header=BB98_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB98_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB98_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB98_35
.LBB98_31:                              # %cond.false94
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB98_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB98_34
.LBB98_33:                              # %cond.false99
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB98_34:                              # %cond.end101
                                        #   in Loop: Header=BB98_25 Depth=4
.LBB98_35:                              # %cond.end103
                                        #   in Loop: Header=BB98_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB98_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB98_38
.LBB98_37:                              # %cond.false111
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB98_38:                              # %cond.end113
                                        #   in Loop: Header=BB98_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB98_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB98_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB98_44
.LBB98_40:                              # %cond.false118
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB98_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB98_43
.LBB98_42:                              # %cond.false123
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB98_43:                              # %cond.end125
                                        #   in Loop: Header=BB98_25 Depth=4
.LBB98_44:                              # %cond.end127
                                        #   in Loop: Header=BB98_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB98_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB98_267
.LBB98_46:                              # %if.end
                                        #   in Loop: Header=BB98_25 Depth=4
	jmp	.LBB98_47
.LBB98_47:                              # %for.inc
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_25
.LBB98_48:                              # %for.end
                                        #   in Loop: Header=BB98_23 Depth=3
	jmp	.LBB98_49
.LBB98_49:                              # %for.inc135
                                        #   in Loop: Header=BB98_23 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_23
.LBB98_50:                              # %for.end137
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_262
.LBB98_51:                              # %if.else
                                        #   in Loop: Header=BB98_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB98_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB98_19 Depth=2
	movl	$0, -12(%rbp)
.LBB98_53:                              # %for.cond141
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_55 Depth 4
                                        #           Child Loop BB98_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB98_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB98_53 Depth=3
	movl	$0, -16(%rbp)
.LBB98_55:                              # %for.cond145
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB98_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB98_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB98_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB98_59
.LBB98_58:                              # %cond.false153
                                        #   in Loop: Header=BB98_55 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_59:                              # %cond.end155
                                        #   in Loop: Header=BB98_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB98_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB98_65
.LBB98_61:                              # %cond.false160
                                        #   in Loop: Header=BB98_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB98_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB98_64
.LBB98_63:                              # %cond.false165
                                        #   in Loop: Header=BB98_55 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_64:                              # %cond.end167
                                        #   in Loop: Header=BB98_55 Depth=4
.LBB98_65:                              # %cond.end169
                                        #   in Loop: Header=BB98_55 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -32(%rbp)
.LBB98_66:                              # %for.cond171
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_53 Depth=3
                                        #         Parent Loop BB98_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB98_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB98_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB98_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB98_70
.LBB98_69:                              # %cond.false180
                                        #   in Loop: Header=BB98_66 Depth=5
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
.LBB98_70:                              # %cond.end183
                                        #   in Loop: Header=BB98_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB98_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB98_76
.LBB98_72:                              # %cond.false188
                                        #   in Loop: Header=BB98_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB98_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB98_75
.LBB98_74:                              # %cond.false194
                                        #   in Loop: Header=BB98_66 Depth=5
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
.LBB98_75:                              # %cond.end197
                                        #   in Loop: Header=BB98_66 Depth=5
.LBB98_76:                              # %cond.end199
                                        #   in Loop: Header=BB98_66 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB98_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB98_267
.LBB98_78:                              # %if.end209
                                        #   in Loop: Header=BB98_66 Depth=5
	jmp	.LBB98_79
.LBB98_79:                              # %for.inc210
                                        #   in Loop: Header=BB98_66 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB98_66
.LBB98_80:                              # %for.end212
                                        #   in Loop: Header=BB98_55 Depth=4
	jmp	.LBB98_81
.LBB98_81:                              # %for.inc213
                                        #   in Loop: Header=BB98_55 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_55
.LBB98_82:                              # %for.end215
                                        #   in Loop: Header=BB98_53 Depth=3
	jmp	.LBB98_83
.LBB98_83:                              # %for.inc216
                                        #   in Loop: Header=BB98_53 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_53
.LBB98_84:                              # %for.end218
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_261
.LBB98_85:                              # %if.else219
                                        #   in Loop: Header=BB98_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB98_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB98_19 Depth=2
	movl	$0, -12(%rbp)
.LBB98_87:                              # %for.cond223
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_89 Depth 4
                                        #           Child Loop BB98_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB98_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB98_87 Depth=3
	movl	$0, -16(%rbp)
.LBB98_89:                              # %for.cond227
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB98_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB98_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB98_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB98_93
.LBB98_92:                              # %cond.false235
                                        #   in Loop: Header=BB98_89 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_93:                              # %cond.end237
                                        #   in Loop: Header=BB98_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB98_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB98_99
.LBB98_95:                              # %cond.false242
                                        #   in Loop: Header=BB98_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB98_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB98_98
.LBB98_97:                              # %cond.false247
                                        #   in Loop: Header=BB98_89 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_98:                              # %cond.end249
                                        #   in Loop: Header=BB98_89 Depth=4
.LBB98_99:                              # %cond.end251
                                        #   in Loop: Header=BB98_89 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB98_100:                             # %for.cond253
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_87 Depth=3
                                        #         Parent Loop BB98_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB98_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB98_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB98_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB98_104
.LBB98_103:                             # %cond.false262
                                        #   in Loop: Header=BB98_100 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_104:                             # %cond.end265
                                        #   in Loop: Header=BB98_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB98_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB98_110
.LBB98_106:                             # %cond.false270
                                        #   in Loop: Header=BB98_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB98_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB98_109
.LBB98_108:                             # %cond.false276
                                        #   in Loop: Header=BB98_100 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_109:                             # %cond.end279
                                        #   in Loop: Header=BB98_100 Depth=5
.LBB98_110:                             # %cond.end281
                                        #   in Loop: Header=BB98_100 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB98_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB98_267
.LBB98_112:                             # %if.end291
                                        #   in Loop: Header=BB98_100 Depth=5
	jmp	.LBB98_113
.LBB98_113:                             # %for.inc292
                                        #   in Loop: Header=BB98_100 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_100
.LBB98_114:                             # %for.end294
                                        #   in Loop: Header=BB98_89 Depth=4
	jmp	.LBB98_115
.LBB98_115:                             # %for.inc295
                                        #   in Loop: Header=BB98_89 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_89
.LBB98_116:                             # %for.end297
                                        #   in Loop: Header=BB98_87 Depth=3
	jmp	.LBB98_117
.LBB98_117:                             # %for.inc298
                                        #   in Loop: Header=BB98_87 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_87
.LBB98_118:                             # %for.end300
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_260
.LBB98_119:                             # %if.else301
                                        #   in Loop: Header=BB98_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB98_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB98_19 Depth=2
	movl	$0, -12(%rbp)
.LBB98_121:                             # %for.cond305
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_123 Depth 4
                                        #           Child Loop BB98_125 Depth 5
                                        #             Child Loop BB98_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB98_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB98_121 Depth=3
	movl	$0, -16(%rbp)
.LBB98_123:                             # %for.cond309
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_125 Depth 5
                                        #             Child Loop BB98_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB98_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB98_123 Depth=4
	movl	$-2, -20(%rbp)
.LBB98_125:                             # %for.cond313
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_121 Depth=3
                                        #         Parent Loop BB98_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB98_136 Depth 6
	cmpl	$4, -20(%rbp)
	jge	.LBB98_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB98_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB98_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB98_129
.LBB98_128:                             # %cond.false322
                                        #   in Loop: Header=BB98_125 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_129:                             # %cond.end325
                                        #   in Loop: Header=BB98_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB98_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB98_135
.LBB98_131:                             # %cond.false330
                                        #   in Loop: Header=BB98_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB98_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB98_134
.LBB98_133:                             # %cond.false336
                                        #   in Loop: Header=BB98_125 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_134:                             # %cond.end339
                                        #   in Loop: Header=BB98_125 Depth=5
.LBB98_135:                             # %cond.end341
                                        #   in Loop: Header=BB98_125 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -32(%rbp)
.LBB98_136:                             # %for.cond343
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_121 Depth=3
                                        #         Parent Loop BB98_123 Depth=4
                                        #           Parent Loop BB98_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -32(%rbp)
	jge	.LBB98_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB98_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB98_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB98_140
.LBB98_139:                             # %cond.false352
                                        #   in Loop: Header=BB98_136 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_140:                             # %cond.end355
                                        #   in Loop: Header=BB98_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB98_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB98_146
.LBB98_142:                             # %cond.false360
                                        #   in Loop: Header=BB98_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB98_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB98_145
.LBB98_144:                             # %cond.false366
                                        #   in Loop: Header=BB98_136 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_145:                             # %cond.end369
                                        #   in Loop: Header=BB98_136 Depth=6
.LBB98_146:                             # %cond.end371
                                        #   in Loop: Header=BB98_136 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB98_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB98_267
.LBB98_148:                             # %if.end381
                                        #   in Loop: Header=BB98_136 Depth=6
	jmp	.LBB98_149
.LBB98_149:                             # %for.inc382
                                        #   in Loop: Header=BB98_136 Depth=6
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB98_136
.LBB98_150:                             # %for.end384
                                        #   in Loop: Header=BB98_125 Depth=5
	jmp	.LBB98_151
.LBB98_151:                             # %for.inc385
                                        #   in Loop: Header=BB98_125 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_125
.LBB98_152:                             # %for.end387
                                        #   in Loop: Header=BB98_123 Depth=4
	jmp	.LBB98_153
.LBB98_153:                             # %for.inc388
                                        #   in Loop: Header=BB98_123 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_123
.LBB98_154:                             # %for.end390
                                        #   in Loop: Header=BB98_121 Depth=3
	jmp	.LBB98_155
.LBB98_155:                             # %for.inc391
                                        #   in Loop: Header=BB98_121 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_121
.LBB98_156:                             # %for.end393
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_259
.LBB98_157:                             # %if.else394
                                        #   in Loop: Header=BB98_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB98_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB98_19 Depth=2
	movl	$0, -12(%rbp)
.LBB98_159:                             # %for.cond398
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_161 Depth 4
                                        #           Child Loop BB98_163 Depth 5
                                        #             Child Loop BB98_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB98_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB98_159 Depth=3
	movl	$0, -16(%rbp)
.LBB98_161:                             # %for.cond402
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_163 Depth 5
                                        #             Child Loop BB98_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB98_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB98_161 Depth=4
	movl	$-2, -32(%rbp)
.LBB98_163:                             # %for.cond406
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_159 Depth=3
                                        #         Parent Loop BB98_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB98_174 Depth 6
	cmpl	$4, -32(%rbp)
	jge	.LBB98_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB98_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB98_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB98_167
.LBB98_166:                             # %cond.false415
                                        #   in Loop: Header=BB98_163 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_167:                             # %cond.end418
                                        #   in Loop: Header=BB98_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB98_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB98_173
.LBB98_169:                             # %cond.false423
                                        #   in Loop: Header=BB98_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB98_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB98_172
.LBB98_171:                             # %cond.false429
                                        #   in Loop: Header=BB98_163 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_172:                             # %cond.end432
                                        #   in Loop: Header=BB98_163 Depth=5
.LBB98_173:                             # %cond.end434
                                        #   in Loop: Header=BB98_163 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB98_174:                             # %for.cond436
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_159 Depth=3
                                        #         Parent Loop BB98_161 Depth=4
                                        #           Parent Loop BB98_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -20(%rbp)
	jge	.LBB98_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB98_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB98_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB98_178
.LBB98_177:                             # %cond.false445
                                        #   in Loop: Header=BB98_174 Depth=6
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_178:                             # %cond.end448
                                        #   in Loop: Header=BB98_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB98_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB98_184
.LBB98_180:                             # %cond.false453
                                        #   in Loop: Header=BB98_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB98_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB98_183
.LBB98_182:                             # %cond.false459
                                        #   in Loop: Header=BB98_174 Depth=6
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_183:                             # %cond.end462
                                        #   in Loop: Header=BB98_174 Depth=6
.LBB98_184:                             # %cond.end464
                                        #   in Loop: Header=BB98_174 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB98_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB98_267
.LBB98_186:                             # %if.end474
                                        #   in Loop: Header=BB98_174 Depth=6
	jmp	.LBB98_187
.LBB98_187:                             # %for.inc475
                                        #   in Loop: Header=BB98_174 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_174
.LBB98_188:                             # %for.end477
                                        #   in Loop: Header=BB98_163 Depth=5
	jmp	.LBB98_189
.LBB98_189:                             # %for.inc478
                                        #   in Loop: Header=BB98_163 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB98_163
.LBB98_190:                             # %for.end480
                                        #   in Loop: Header=BB98_161 Depth=4
	jmp	.LBB98_191
.LBB98_191:                             # %for.inc481
                                        #   in Loop: Header=BB98_161 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_161
.LBB98_192:                             # %for.end483
                                        #   in Loop: Header=BB98_159 Depth=3
	jmp	.LBB98_193
.LBB98_193:                             # %for.inc484
                                        #   in Loop: Header=BB98_159 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_159
.LBB98_194:                             # %for.end486
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_258
.LBB98_195:                             # %if.else487
                                        #   in Loop: Header=BB98_19 Depth=2
	movl	$0, -12(%rbp)
.LBB98_196:                             # %for.cond488
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_198 Depth 4
                                        #           Child Loop BB98_212 Depth 5
                                        #           Child Loop BB98_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB98_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB98_196 Depth=3
	movl	$0, -16(%rbp)
.LBB98_198:                             # %for.cond492
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_212 Depth 5
                                        #           Child Loop BB98_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB98_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB98_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB98_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB98_202
.LBB98_201:                             # %cond.false500
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB98_202:                             # %cond.end503
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB98_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB98_205
.LBB98_204:                             # %cond.false508
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-48(%rbp), %eax
.LBB98_205:                             # %cond.end509
                                        #   in Loop: Header=BB98_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB98_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB98_211
.LBB98_207:                             # %cond.false514
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB98_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB98_210
.LBB98_209:                             # %cond.false518
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-48(%rbp), %eax
.LBB98_210:                             # %cond.end519
                                        #   in Loop: Header=BB98_198 Depth=4
.LBB98_211:                             # %cond.end521
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -32(%rbp)
.LBB98_212:                             # %for.cond523
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_196 Depth=3
                                        #         Parent Loop BB98_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB98_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB98_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB98_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB98_216
.LBB98_215:                             # %cond.false532
                                        #   in Loop: Header=BB98_212 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_216:                             # %cond.end535
                                        #   in Loop: Header=BB98_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB98_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB98_222
.LBB98_218:                             # %cond.false540
                                        #   in Loop: Header=BB98_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB98_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB98_221
.LBB98_220:                             # %cond.false546
                                        #   in Loop: Header=BB98_212 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_221:                             # %cond.end549
                                        #   in Loop: Header=BB98_212 Depth=5
.LBB98_222:                             # %cond.end551
                                        #   in Loop: Header=BB98_212 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB98_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB98_267
.LBB98_224:                             # %if.end561
                                        #   in Loop: Header=BB98_212 Depth=5
	jmp	.LBB98_225
.LBB98_225:                             # %for.inc562
                                        #   in Loop: Header=BB98_212 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB98_212
.LBB98_226:                             # %for.end564
                                        #   in Loop: Header=BB98_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB98_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB98_229
.LBB98_228:                             # %cond.false569
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB98_229:                             # %cond.end572
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB98_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB98_232
.LBB98_231:                             # %cond.false577
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-44(%rbp), %eax
.LBB98_232:                             # %cond.end578
                                        #   in Loop: Header=BB98_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB98_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB98_238
.LBB98_234:                             # %cond.false583
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB98_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB98_237
.LBB98_236:                             # %cond.false587
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-44(%rbp), %eax
.LBB98_237:                             # %cond.end588
                                        #   in Loop: Header=BB98_198 Depth=4
.LBB98_238:                             # %cond.end590
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB98_239:                             # %for.cond592
                                        #   Parent Loop BB98_17 Depth=1
                                        #     Parent Loop BB98_19 Depth=2
                                        #       Parent Loop BB98_196 Depth=3
                                        #         Parent Loop BB98_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB98_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB98_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB98_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB98_243
.LBB98_242:                             # %cond.false601
                                        #   in Loop: Header=BB98_239 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_243:                             # %cond.end604
                                        #   in Loop: Header=BB98_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB98_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB98_249
.LBB98_245:                             # %cond.false609
                                        #   in Loop: Header=BB98_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB98_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB98_248
.LBB98_247:                             # %cond.false615
                                        #   in Loop: Header=BB98_239 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB98_248:                             # %cond.end618
                                        #   in Loop: Header=BB98_239 Depth=5
.LBB98_249:                             # %cond.end620
                                        #   in Loop: Header=BB98_239 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB98_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB98_267
.LBB98_251:                             # %if.end630
                                        #   in Loop: Header=BB98_239 Depth=5
	jmp	.LBB98_252
.LBB98_252:                             # %for.inc631
                                        #   in Loop: Header=BB98_239 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_239
.LBB98_253:                             # %for.end633
                                        #   in Loop: Header=BB98_198 Depth=4
	jmp	.LBB98_254
.LBB98_254:                             # %for.inc634
                                        #   in Loop: Header=BB98_198 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_198
.LBB98_255:                             # %for.end636
                                        #   in Loop: Header=BB98_196 Depth=3
	jmp	.LBB98_256
.LBB98_256:                             # %for.inc637
                                        #   in Loop: Header=BB98_196 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_196
.LBB98_257:                             # %for.end639
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_258
.LBB98_258:                             # %if.end640
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_259
.LBB98_259:                             # %if.end641
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_260
.LBB98_260:                             # %if.end642
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_261
.LBB98_261:                             # %if.end643
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_262
.LBB98_262:                             # %if.end644
                                        #   in Loop: Header=BB98_19 Depth=2
	jmp	.LBB98_263
.LBB98_263:                             # %for.inc645
                                        #   in Loop: Header=BB98_19 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB98_19
.LBB98_264:                             # %for.end647
                                        #   in Loop: Header=BB98_17 Depth=1
	jmp	.LBB98_265
.LBB98_265:                             # %for.inc648
                                        #   in Loop: Header=BB98_17 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB98_17
.LBB98_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB98_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$892603413, -108(%rbp)  # imm = 0x35340C15
	jne	.LBB98_269
.LBB98_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_268
.Lfunc_end98:
	.size	CheckReliabilityOfRef.69, .Lfunc_end98-CheckReliabilityOfRef.69
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.70      # -- Begin function StoreMVBlock8x8.70
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.70,@function
StoreMVBlock8x8.70:                     # @StoreMVBlock8x8.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1654889640, -68(%rbp)  # imm = 0x62A39CA8
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -56(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB99_12
# %bb.1:                                # %if.then
	cmpl	$0, -56(%rbp)
	jl	.LBB99_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB99_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB99_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB99_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB99_5:                               # %for.cond7
                                        #   Parent Loop BB99_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB99_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB99_5 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB99_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_5
.LBB99_8:                               # %for.end
                                        #   in Loop: Header=BB99_3 Depth=1
	jmp	.LBB99_9
.LBB99_9:                               # %for.inc76
                                        #   in Loop: Header=BB99_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_3
.LBB99_10:                              # %for.end78
	jmp	.LBB99_11
.LBB99_11:                              # %if.end
	jmp	.LBB99_46
.LBB99_12:                              # %if.else
	cmpl	$0, -56(%rbp)
	jne	.LBB99_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB99_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB99_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB99_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB99_16:                              # %for.cond84
                                        #   Parent Loop BB99_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB99_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB99_16 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB99_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_16
.LBB99_19:                              # %for.end161
                                        #   in Loop: Header=BB99_14 Depth=1
	jmp	.LBB99_20
.LBB99_20:                              # %for.inc162
                                        #   in Loop: Header=BB99_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_14
.LBB99_21:                              # %for.end164
	jmp	.LBB99_45
.LBB99_22:                              # %if.else165
	cmpl	$1, -56(%rbp)
	jne	.LBB99_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB99_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB99_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB99_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB99_26:                              # %for.cond171
                                        #   Parent Loop BB99_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB99_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB99_26 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB99_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_26
.LBB99_29:                              # %for.end248
                                        #   in Loop: Header=BB99_24 Depth=1
	jmp	.LBB99_30
.LBB99_30:                              # %for.inc249
                                        #   in Loop: Header=BB99_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_24
.LBB99_31:                              # %for.end251
	jmp	.LBB99_44
.LBB99_32:                              # %if.else252
	cmpl	$2, -56(%rbp)
	jne	.LBB99_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB99_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB99_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB99_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB99_36:                              # %for.cond258
                                        #   Parent Loop BB99_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB99_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB99_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_36
.LBB99_39:                              # %for.end407
                                        #   in Loop: Header=BB99_34 Depth=1
	jmp	.LBB99_40
.LBB99_40:                              # %for.inc408
                                        #   in Loop: Header=BB99_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_34
.LBB99_41:                              # %for.end410
	jmp	.LBB99_43
.LBB99_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB99_43:                              # %if.end412
	jmp	.LBB99_44
.LBB99_44:                              # %if.end413
	jmp	.LBB99_45
.LBB99_45:                              # %if.end414
	jmp	.LBB99_46
.LBB99_46:                              # %if.end415
	cmpl	$1654889640, -68(%rbp)  # imm = 0x62A39CA8
	jne	.LBB99_48
.LBB99_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_47
.Lfunc_end99:
	.size	StoreMVBlock8x8.70, .Lfunc_end99-StoreMVBlock8x8.70
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.71 # -- Begin function SetRefAndMotionVectors.71
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.71,@function
SetRefAndMotionVectors.71:              # @SetRefAndMotionVectors.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$690887539, -68(%rbp)   # imm = 0x292E1B73
	movl	%edi, -52(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -36(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB100_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB100_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB100_4
.LBB100_3:                              # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB100_5
.LBB100_4:                              # %cond.false
	movl	$4, %eax
	jmp	.LBB100_5
.LBB100_5:                              # %cond.end
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-32(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB100_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB100_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB100_9
.LBB100_8:                              # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB100_9
.LBB100_9:                              # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB100_19
# %bb.10:                               # %if.then
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_11:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB100_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB100_11 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_13:                             # %for.cond34
                                        #   Parent Loop BB100_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB100_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB100_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB100_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_13
.LBB100_16:                             # %for.end
                                        #   in Loop: Header=BB100_11 Depth=1
	jmp	.LBB100_17
.LBB100_17:                             # %for.inc117
                                        #   in Loop: Header=BB100_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_11
.LBB100_18:                             # %for.end119
	jmp	.LBB100_64
.LBB100_19:                             # %if.end
	cmpl	$0, -72(%rbp)
	jne	.LBB100_29
# %bb.20:                               # %if.then121
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_21:                             # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB100_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB100_21 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_23:                             # %for.cond126
                                        #   Parent Loop BB100_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB100_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB100_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB100_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_23
.LBB100_26:                             # %for.end211
                                        #   in Loop: Header=BB100_21 Depth=1
	jmp	.LBB100_27
.LBB100_27:                             # %for.inc212
                                        #   in Loop: Header=BB100_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_21
.LBB100_28:                             # %for.end214
	jmp	.LBB100_64
.LBB100_29:                             # %if.else
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_30:                             # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB100_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB100_30 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_32:                             # %for.cond219
                                        #   Parent Loop BB100_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB100_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB100_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB100_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB100_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
.LBB100_35:                             # %if.end255
                                        #   in Loop: Header=BB100_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB100_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB100_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB100_46
.LBB100_37:                             # %if.then261
                                        #   in Loop: Header=BB100_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB100_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB100_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB100_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB100_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB100_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB100_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB100_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB100_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB100_43
.LBB100_42:                             # %cond.false274
                                        #   in Loop: Header=BB100_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB100_43:                             # %cond.end275
                                        #   in Loop: Header=BB100_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB100_45
.LBB100_44:                             # %if.else342
                                        #   in Loop: Header=BB100_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB100_45:                             # %if.end424
                                        #   in Loop: Header=BB100_32 Depth=2
	jmp	.LBB100_47
.LBB100_46:                             # %if.else425
                                        #   in Loop: Header=BB100_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB100_47:                             # %if.end468
                                        #   in Loop: Header=BB100_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB100_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB100_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB100_58
.LBB100_49:                             # %if.then474
                                        #   in Loop: Header=BB100_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB100_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB100_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB100_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB100_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB100_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB100_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB100_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB100_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB100_55
.LBB100_54:                             # %cond.false490
                                        #   in Loop: Header=BB100_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB100_55:                             # %cond.end492
                                        #   in Loop: Header=BB100_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB100_57
.LBB100_56:                             # %if.else559
                                        #   in Loop: Header=BB100_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-36(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB100_57:                             # %if.end641
                                        #   in Loop: Header=BB100_32 Depth=2
	jmp	.LBB100_59
.LBB100_58:                             # %if.else642
                                        #   in Loop: Header=BB100_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB100_59:                             # %if.end685
                                        #   in Loop: Header=BB100_32 Depth=2
	jmp	.LBB100_60
.LBB100_60:                             # %for.inc686
                                        #   in Loop: Header=BB100_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_32
.LBB100_61:                             # %for.end688
                                        #   in Loop: Header=BB100_30 Depth=1
	jmp	.LBB100_62
.LBB100_62:                             # %for.inc689
                                        #   in Loop: Header=BB100_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_30
.LBB100_63:                             # %for.end691
	jmp	.LBB100_64
.LBB100_64:                             # %if.end692
	cmpl	$690887539, -68(%rbp)   # imm = 0x292E1B73
	jne	.LBB100_66
.LBB100_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_66:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_65
.Lfunc_end100:
	.size	SetRefAndMotionVectors.71, .Lfunc_end100-SetRefAndMotionVectors.71
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.72 # -- Begin function GetBestTransformP8x8.72
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.72,@function
GetBestTransformP8x8.72:                # @GetBestTransformP8x8.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$669471198, -64(%rbp)   # imm = 0x27E751DE
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB101_2
# %bb.1:                                # %if.then
	movl	$1, -44(%rbp)
	jmp	.LBB101_25
.LBB101_2:                              # %if.end
	movl	$0, -28(%rbp)
.LBB101_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_5 Depth 2
                                        #       Child Loop BB101_7 Depth 3
                                        #         Child Loop BB101_9 Depth 4
                                        #           Child Loop BB101_11 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB101_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB101_3 Depth=1
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -32(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB101_5:                              # %for.cond3
                                        #   Parent Loop BB101_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_7 Depth 3
                                        #         Child Loop BB101_9 Depth 4
                                        #           Child Loop BB101_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB101_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB101_7:                              # %for.cond7
                                        #   Parent Loop BB101_3 Depth=1
                                        #     Parent Loop BB101_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB101_9 Depth 4
                                        #           Child Loop BB101_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB101_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -16(%rbp)
.LBB101_9:                              # %for.cond12
                                        #   Parent Loop BB101_3 Depth=1
                                        #     Parent Loop BB101_5 Depth=2
                                        #       Parent Loop BB101_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB101_11 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB101_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB101_9 Depth=4
	movl	$0, -12(%rbp)
.LBB101_11:                             # %for.cond15
                                        #   Parent Loop BB101_3 Depth=1
                                        #     Parent Loop BB101_5 Depth=2
                                        #       Parent Loop BB101_7 Depth=3
                                        #         Parent Loop BB101_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB101_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB101_11 Depth=5
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB101_11 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB101_11
.LBB101_14:                             # %for.end
                                        #   in Loop: Header=BB101_9 Depth=4
	jmp	.LBB101_15
.LBB101_15:                             # %for.inc51
                                        #   in Loop: Header=BB101_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_9
.LBB101_16:                             # %for.end53
                                        #   in Loop: Header=BB101_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB101_7 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB101_7
.LBB101_18:                             # %for.end57
                                        #   in Loop: Header=BB101_5 Depth=2
	jmp	.LBB101_19
.LBB101_19:                             # %for.inc58
                                        #   in Loop: Header=BB101_5 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB101_5
.LBB101_20:                             # %for.end60
                                        #   in Loop: Header=BB101_3 Depth=1
	leaq	-336(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB101_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB101_3
.LBB101_22:                             # %for.end66
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB101_24
# %bb.23:                               # %if.then69
	movl	$1, -44(%rbp)
	jmp	.LBB101_25
.LBB101_24:                             # %if.else
	movl	$0, -44(%rbp)
.LBB101_25:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$669471198, -64(%rbp)   # imm = 0x27E751DE
	jne	.LBB101_27
.LBB101_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_26
.Lfunc_end101:
	.size	GetBestTransformP8x8.72, .Lfunc_end101-GetBestTransformP8x8.72
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.73
.LCPI102_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI102_1:
	.quad	4622945017495814144     # double 12
.LCPI102_2:
	.quad	4607182418800017408     # double 1
.LCPI102_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI102_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI102_5:
	.quad	4611686018427387904     # double 2
.LCPI102_6:
	.quad	4613937818241073152     # double 3
.LCPI102_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI102_8:
	.quad	4616189618054758400     # double 4
.LCPI102_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI102_10:
	.quad	4618441417868443648     # double 6
.LCPI102_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI102_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI102_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI102_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI102_15:
	.quad	4602678819172646912     # double 0.5
.LCPI102_16:
	.quad	4679240012837945344     # double 65536
.LCPI102_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI102_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.73
	.p2align	4, 0x90
	.type	encode_one_macroblock.73,@function
encode_one_macroblock.73:               # @encode_one_macroblock.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI102_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$1194076318, -404(%rbp) # imm = 0x472C289E
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -472(%rbp)
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -272(%rbp)
	movl	$0, -184(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -252(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -188(%rbp)
	movl	$0, -316(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB102_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB102_4
.LBB102_2:                              # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB102_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB102_5
.LBB102_4:                              # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB102_5:                              # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -312(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -416(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB102_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB102_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB102_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB102_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB102_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB102_11:                             # %land.end
.LBB102_12:                             # %lor.end36
.LBB102_13:                             # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -320(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB102_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB102_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB102_17:                             # %lor.end51
.LBB102_18:                             # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -288(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB102_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB102_21
.LBB102_20:                             # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB102_21
.LBB102_21:                             # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -432(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -400(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -440(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB102_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB102_23:                             # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -280(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -280(%rbp)
	je	.LBB102_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB102_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB102_27
.LBB102_26:                             # %if.else
	movl	$2, -64(%rbp)
.LBB102_27:                             # %if.end
	jmp	.LBB102_29
.LBB102_28:                             # %if.else70
	movl	$0, -64(%rbp)
.LBB102_29:                             # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB102_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB102_31:                             # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB102_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB102_33:                             # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB102_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB102_35:                             # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB102_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB102_37:                             # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB102_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB102_39:                             # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB102_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB102_41:                             # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB102_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB102_43:                             # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB102_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB102_45:                             # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB102_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB102_47:                             # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB102_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB102_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB102_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB102_51:                             # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-416(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB102_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB102_53:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_55 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB102_53 Depth=1
	movl	$0, -56(%rbp)
.LBB102_55:                             # %for.cond156
                                        #   Parent Loop BB102_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB102_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB102_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB102_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB102_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB102_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB102_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB102_59:                             # %if.end183
                                        #   in Loop: Header=BB102_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB102_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB102_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB102_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB102_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB102_62:                             # %if.end202
                                        #   in Loop: Header=BB102_55 Depth=2
	jmp	.LBB102_63
.LBB102_63:                             # %for.inc
                                        #   in Loop: Header=BB102_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB102_55
.LBB102_64:                             # %for.end
                                        #   in Loop: Header=BB102_53 Depth=1
	jmp	.LBB102_65
.LBB102_65:                             # %for.inc203
                                        #   in Loop: Header=BB102_53 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB102_53
.LBB102_66:                             # %for.end205
	jmp	.LBB102_93
.LBB102_67:                             # %if.else206
	cmpl	$0, -280(%rbp)
	je	.LBB102_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB102_69:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_71 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB102_69 Depth=1
	movl	$0, -56(%rbp)
.LBB102_71:                             # %for.cond215
                                        #   Parent Loop BB102_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB102_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB102_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB102_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB102_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB102_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB102_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB102_75:                             # %if.end244
                                        #   in Loop: Header=BB102_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB102_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB102_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB102_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB102_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB102_78:                             # %if.end263
                                        #   in Loop: Header=BB102_71 Depth=2
	jmp	.LBB102_79
.LBB102_79:                             # %for.inc264
                                        #   in Loop: Header=BB102_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB102_71
.LBB102_80:                             # %for.end266
                                        #   in Loop: Header=BB102_69 Depth=1
	jmp	.LBB102_81
.LBB102_81:                             # %for.inc267
                                        #   in Loop: Header=BB102_69 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB102_69
.LBB102_82:                             # %for.end269
	jmp	.LBB102_92
.LBB102_83:                             # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB102_84:                             # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_86 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB102_84 Depth=1
	movl	$0, -56(%rbp)
.LBB102_86:                             # %for.cond277
                                        #   Parent Loop BB102_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB102_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB102_86 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB102_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB102_86
.LBB102_89:                             # %for.end290
                                        #   in Loop: Header=BB102_84 Depth=1
	jmp	.LBB102_90
.LBB102_90:                             # %for.inc291
                                        #   in Loop: Header=BB102_84 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB102_84
.LBB102_91:                             # %for.end293
	jmp	.LBB102_92
.LBB102_92:                             # %if.end294
	jmp	.LBB102_93
.LBB102_93:                             # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI102_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB102_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB102_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI102_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI102_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB102_99
.LBB102_98:                             # %if.else315
	vmovsd	.LCPI102_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI102_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB102_99:                             # %if.end326
	jmp	.LBB102_159
.LBB102_100:                            # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB102_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI102_2(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB102_104
.LBB102_103:                            # %cond.false336
	vmovsd	.LCPI102_2(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI102_3(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB102_104:                            # %cond.end340
	vmovsd	%xmm0, -480(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB102_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI102_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI102_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI102_9(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB102_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI102_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI102_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB102_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI102_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB102_109
.LBB102_108:                            # %cond.false357
	vmovsd	.LCPI102_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB102_109:                            # %cond.end359
	vmovsd	.LCPI102_5(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB102_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI102_5(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB102_115
.LBB102_111:                            # %cond.false364
	vmovsd	.LCPI102_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI102_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB102_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI102_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB102_114
.LBB102_113:                            # %cond.false369
	vmovsd	.LCPI102_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB102_114:                            # %cond.end371
.LBB102_115:                            # %cond.end373
	jmp	.LBB102_129
.LBB102_116:                            # %cond.false375
	cmpl	$0, -312(%rbp)
	je	.LBB102_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI102_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI102_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB102_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI102_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB102_120
.LBB102_119:                            # %cond.false382
	vmovsd	.LCPI102_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB102_120:                            # %cond.end384
	vmovsd	.LCPI102_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB102_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI102_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB102_126
.LBB102_122:                            # %cond.false389
	vmovsd	.LCPI102_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI102_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB102_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI102_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB102_125
.LBB102_124:                            # %cond.false394
	vmovsd	.LCPI102_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB102_125:                            # %cond.end396
.LBB102_126:                            # %cond.end398
	jmp	.LBB102_128
.LBB102_127:                            # %cond.false400
	vmovsd	.LCPI102_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB102_128
.LBB102_128:                            # %cond.end401
.LBB102_129:                            # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB102_146
.LBB102_130:                            # %if.else406
	vmovsd	.LCPI102_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI102_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI102_4(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB102_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI102_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB102_145
.LBB102_132:                            # %cond.false415
	cmpl	$0, -312(%rbp)
	je	.LBB102_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI102_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI102_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB102_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI102_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB102_136
.LBB102_135:                            # %cond.false422
	vmovsd	.LCPI102_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB102_136:                            # %cond.end424
	vmovsd	.LCPI102_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB102_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI102_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB102_142
.LBB102_138:                            # %cond.false429
	vmovsd	.LCPI102_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI102_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB102_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI102_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB102_141
.LBB102_140:                            # %cond.false434
	vmovsd	.LCPI102_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB102_141:                            # %cond.end436
.LBB102_142:                            # %cond.end438
	jmp	.LBB102_144
.LBB102_143:                            # %cond.false440
	vmovsd	.LCPI102_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB102_144
.LBB102_144:                            # %cond.end441
.LBB102_145:                            # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB102_146:                            # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB102_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB102_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI102_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI102_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB102_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI102_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB102_152
.LBB102_151:                            # %cond.false465
	vmovsd	.LCPI102_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB102_152:                            # %cond.end473
	vmovsd	.LCPI102_2(%rip), %xmm1 # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB102_153:                            # %if.end477
	jmp	.LBB102_158
.LBB102_154:                            # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB102_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI102_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB102_157:                            # %if.end487
	jmp	.LBB102_158
.LBB102_158:                            # %if.end488
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB102_159:                            # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB102_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI102_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB102_161:                            # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB102_166
.LBB102_162:                            # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB102_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB102_165
.LBB102_164:                            # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB102_165:                            # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB102_166:                            # %if.end510
	vmovsd	.LCPI102_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI102_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB102_167:                            # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB102_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB102_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB102_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB102_167
.LBB102_170:                            # %for.end522
	movl	$0, -264(%rbp)
.LBB102_171:                            # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_181 Depth 2
                                        #       Child Loop BB102_184 Depth 3
                                        #         Child Loop BB102_190 Depth 4
                                        #         Child Loop BB102_210 Depth 4
                                        #         Child Loop BB102_300 Depth 4
                                        #           Child Loop BB102_302 Depth 5
                                        #         Child Loop BB102_309 Depth 4
                                        #           Child Loop BB102_311 Depth 5
                                        #         Child Loop BB102_326 Depth 4
                                        #           Child Loop BB102_328 Depth 5
                                        #         Child Loop BB102_335 Depth 4
                                        #           Child Loop BB102_337 Depth 5
                                        #         Child Loop BB102_355 Depth 4
                                        #           Child Loop BB102_357 Depth 5
                                        #         Child Loop BB102_374 Depth 4
                                        #           Child Loop BB102_376 Depth 5
                                        #     Child Loop BB102_416 Depth 2
                                        #       Child Loop BB102_418 Depth 3
                                        #         Child Loop BB102_445 Depth 4
                                        #         Child Loop BB102_464 Depth 4
                                        #           Child Loop BB102_466 Depth 5
                                        #         Child Loop BB102_473 Depth 4
                                        #         Child Loop BB102_508 Depth 4
                                        #           Child Loop BB102_510 Depth 5
                                        #         Child Loop BB102_532 Depth 4
                                        #           Child Loop BB102_534 Depth 5
                                        #             Child Loop BB102_536 Depth 6
                                        #         Child Loop BB102_544 Depth 4
                                        #           Child Loop BB102_546 Depth 5
                                        #       Child Loop BB102_569 Depth 3
                                        #         Child Loop BB102_571 Depth 4
                                        #           Child Loop BB102_573 Depth 5
                                        #       Child Loop BB102_581 Depth 3
                                        #         Child Loop BB102_583 Depth 4
                                        #     Child Loop BB102_601 Depth 2
                                        #       Child Loop BB102_603 Depth 3
                                        #         Child Loop BB102_614 Depth 4
                                        #         Child Loop BB102_633 Depth 4
                                        #           Child Loop BB102_635 Depth 5
                                        #         Child Loop BB102_642 Depth 4
                                        #         Child Loop BB102_677 Depth 4
                                        #           Child Loop BB102_679 Depth 5
                                        #         Child Loop BB102_701 Depth 4
                                        #           Child Loop BB102_703 Depth 5
                                        #             Child Loop BB102_705 Depth 6
                                        #         Child Loop BB102_713 Depth 4
                                        #           Child Loop BB102_715 Depth 5
                                        #         Child Loop BB102_723 Depth 4
                                        #           Child Loop BB102_725 Depth 5
                                        #       Child Loop BB102_745 Depth 3
                                        #         Child Loop BB102_747 Depth 4
                                        #           Child Loop BB102_749 Depth 5
                                        #       Child Loop BB102_757 Depth 3
                                        #         Child Loop BB102_759 Depth 4
                                        #       Child Loop BB102_766 Depth 3
                                        #         Child Loop BB102_768 Depth 4
                                        #       Child Loop BB102_778 Depth 3
                                        #         Child Loop BB102_780 Depth 4
                                        #       Child Loop BB102_786 Depth 3
                                        #       Child Loop BB102_791 Depth 3
                                        #         Child Loop BB102_793 Depth 4
                                        #     Child Loop BB102_803 Depth 2
                                        #       Child Loop BB102_805 Depth 3
                                        #     Child Loop BB102_835 Depth 2
                                        #       Child Loop BB102_853 Depth 3
                                        #         Child Loop BB102_908 Depth 4
                                        #           Child Loop BB102_911 Depth 5
                                        #             Child Loop BB102_913 Depth 6
                                        #           Child Loop BB102_920 Depth 5
                                        #             Child Loop BB102_922 Depth 6
                                        #         Child Loop BB102_955 Depth 4
                                        #           Child Loop BB102_957 Depth 5
                                        #     Child Loop BB102_981 Depth 2
                                        #       Child Loop BB102_1014 Depth 3
                                        #         Child Loop BB102_1017 Depth 4
                                        #           Child Loop BB102_1019 Depth 5
                                        #         Child Loop BB102_1026 Depth 4
                                        #           Child Loop BB102_1028 Depth 5
                                        #       Child Loop BB102_1061 Depth 3
                                        #         Child Loop BB102_1063 Depth 4
                                        #     Child Loop BB102_1113 Depth 2
                                        #       Child Loop BB102_1115 Depth 3
                                        #     Child Loop BB102_1127 Depth 2
                                        #       Child Loop BB102_1129 Depth 3
                                        #         Child Loop BB102_1131 Depth 4
                                        #     Child Loop BB102_1141 Depth 2
                                        #       Child Loop BB102_1143 Depth 3
                                        #     Child Loop BB102_1152 Depth 2
                                        #       Child Loop BB102_1154 Depth 3
                                        #     Child Loop BB102_1160 Depth 2
                                        #       Child Loop BB102_1162 Depth 3
                                        #     Child Loop BB102_1174 Depth 2
                                        #       Child Loop BB102_1176 Depth 3
                                        #         Child Loop BB102_1178 Depth 4
                                        #     Child Loop BB102_1189 Depth 2
                                        #       Child Loop BB102_1191 Depth 3
                                        #     Child Loop BB102_1202 Depth 2
                                        #       Child Loop BB102_1204 Depth 3
                                        #     Child Loop BB102_1211 Depth 2
                                        #       Child Loop BB102_1213 Depth 3
                                        #     Child Loop BB102_1221 Depth 2
                                        #       Child Loop BB102_1223 Depth 3
                                        #     Child Loop BB102_1229 Depth 2
                                        #       Child Loop BB102_1231 Depth 3
                                        #     Child Loop BB102_1237 Depth 2
                                        #       Child Loop BB102_1239 Depth 3
                                        #     Child Loop BB102_1245 Depth 2
                                        #       Child Loop BB102_1247 Depth 3
	movl	-264(%rbp), %eax
	cmpl	-320(%rbp), %eax
	jge	.LBB102_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB102_171 Depth=1
	cmpl	$2, -320(%rbp)
	jne	.LBB102_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB102_171 Depth=1
	cmpl	$0, -264(%rbp)
	jne	.LBB102_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB102_176
.LBB102_175:                            # %if.else534
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB102_176:                            # %if.end536
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_177
.LBB102_177:                            # %if.end537
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB102_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB102_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB102_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB102_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB102_180:                            # %if.end542
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB102_181:                            # %for.cond543
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_184 Depth 3
                                        #         Child Loop BB102_190 Depth 4
                                        #         Child Loop BB102_210 Depth 4
                                        #         Child Loop BB102_300 Depth 4
                                        #           Child Loop BB102_302 Depth 5
                                        #         Child Loop BB102_309 Depth 4
                                        #           Child Loop BB102_311 Depth 5
                                        #         Child Loop BB102_326 Depth 4
                                        #           Child Loop BB102_328 Depth 5
                                        #         Child Loop BB102_335 Depth 4
                                        #           Child Loop BB102_337 Depth 5
                                        #         Child Loop BB102_355 Depth 4
                                        #           Child Loop BB102_357 Depth 5
                                        #         Child Loop BB102_374 Depth 4
                                        #           Child Loop BB102_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB102_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB102_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB102_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB102_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB102_184:                            # %for.cond554
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_190 Depth 4
                                        #         Child Loop BB102_210 Depth 4
                                        #         Child Loop BB102_300 Depth 4
                                        #           Child Loop BB102_302 Depth 5
                                        #         Child Loop BB102_309 Depth 4
                                        #           Child Loop BB102_311 Depth 5
                                        #         Child Loop BB102_326 Depth 4
                                        #           Child Loop BB102_328 Depth 5
                                        #         Child Loop BB102_335 Depth 4
                                        #           Child Loop BB102_337 Depth 5
                                        #         Child Loop BB102_355 Depth 4
                                        #           Child Loop BB102_357 Depth 5
                                        #         Child Loop BB102_374 Depth 4
                                        #           Child Loop BB102_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB102_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB102_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB102_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB102_187:                            # %land.end566
                                        #   in Loop: Header=BB102_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB102_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB102_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB102_189:                            # %land.end574
                                        #   in Loop: Header=BB102_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB102_190:                            # %for.cond577
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_181 Depth=2
                                        #       Parent Loop BB102_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB102_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB102_190 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB102_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB102_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB102_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB102_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB102_206
.LBB102_194:                            # %if.then594
                                        #   in Loop: Header=BB102_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB102_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB102_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB102_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB102_198
.LBB102_197:                            # %cond.false604
                                        #   in Loop: Header=BB102_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB102_198:                            # %cond.end607
                                        #   in Loop: Header=BB102_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB102_203
.LBB102_199:                            # %cond.false610
                                        #   in Loop: Header=BB102_190 Depth=4
	vmovsd	.LCPI102_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB102_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB102_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB102_202
.LBB102_201:                            # %cond.false617
                                        #   in Loop: Header=BB102_190 Depth=4
	movl	$1, %eax
	jmp	.LBB102_202
.LBB102_202:                            # %cond.end618
                                        #   in Loop: Header=BB102_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB102_203:                            # %cond.end623
                                        #   in Loop: Header=BB102_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB102_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB102_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB102_205:                            # %if.end636
                                        #   in Loop: Header=BB102_190 Depth=4
	jmp	.LBB102_206
.LBB102_206:                            # %if.end637
                                        #   in Loop: Header=BB102_190 Depth=4
	jmp	.LBB102_207
.LBB102_207:                            # %for.inc638
                                        #   in Loop: Header=BB102_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB102_190
.LBB102_208:                            # %for.end640
                                        #   in Loop: Header=BB102_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB102_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB102_210:                            # %for.cond643
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_181 Depth=2
                                        #       Parent Loop BB102_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB102_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB102_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB102_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB102_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB102_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB102_215
.LBB102_214:                            # %cond.false660
                                        #   in Loop: Header=BB102_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB102_215:                            # %cond.end663
                                        #   in Loop: Header=BB102_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB102_220
.LBB102_216:                            # %cond.false667
                                        #   in Loop: Header=BB102_210 Depth=4
	vmovsd	.LCPI102_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB102_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB102_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB102_219
.LBB102_218:                            # %cond.false674
                                        #   in Loop: Header=BB102_210 Depth=4
	movl	$1, %eax
	jmp	.LBB102_219
.LBB102_219:                            # %cond.end675
                                        #   in Loop: Header=BB102_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB102_220:                            # %cond.end680
                                        #   in Loop: Header=BB102_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB102_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB102_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB102_222:                            # %if.end693
                                        #   in Loop: Header=BB102_210 Depth=4
	jmp	.LBB102_223
.LBB102_223:                            # %for.inc694
                                        #   in Loop: Header=BB102_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB102_210
.LBB102_224:                            # %for.end696
                                        #   in Loop: Header=BB102_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB102_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB102_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB102_228
.LBB102_227:                            # %cond.false706
                                        #   in Loop: Header=BB102_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB102_228:                            # %cond.end709
                                        #   in Loop: Header=BB102_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB102_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB102_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB102_231
.LBB102_230:                            # %cond.false719
                                        #   in Loop: Header=BB102_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB102_231:                            # %cond.end721
                                        #   in Loop: Header=BB102_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB102_236
.LBB102_232:                            # %cond.false726
                                        #   in Loop: Header=BB102_184 Depth=3
	vmovsd	.LCPI102_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB102_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB102_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB102_235
.LBB102_234:                            # %cond.false733
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	$1, %eax
	jmp	.LBB102_235
.LBB102_235:                            # %cond.end734
                                        #   in Loop: Header=BB102_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB102_236:                            # %cond.end739
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB102_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB102_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB102_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB102_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB102_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB102_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB102_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB102_243
.LBB102_242:                            # %cond.false761
                                        #   in Loop: Header=BB102_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB102_243:                            # %cond.end763
                                        #   in Loop: Header=BB102_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB102_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB102_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB102_246
.LBB102_245:                            # %cond.false773
                                        #   in Loop: Header=BB102_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB102_246:                            # %cond.end775
                                        #   in Loop: Header=BB102_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB102_248
.LBB102_247:                            # %cond.false780
                                        #   in Loop: Header=BB102_184 Depth=3
	vmovsd	.LCPI102_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB102_248:                            # %cond.end784
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB102_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB102_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB102_252
.LBB102_251:                            # %cond.false797
                                        #   in Loop: Header=BB102_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB102_252:                            # %cond.end799
                                        #   in Loop: Header=BB102_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB102_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB102_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB102_255
.LBB102_254:                            # %cond.false809
                                        #   in Loop: Header=BB102_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB102_255:                            # %cond.end811
                                        #   in Loop: Header=BB102_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB102_257
.LBB102_256:                            # %cond.false816
                                        #   in Loop: Header=BB102_184 Depth=3
	vmovsd	.LCPI102_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB102_257:                            # %cond.end820
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	%eax, -180(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
	jmp	.LBB102_259
.LBB102_258:                            # %if.else824
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -180(%rbp) # imm = 0x7FFFFFFF
.LBB102_259:                            # %if.end825
                                        #   in Loop: Header=BB102_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB102_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB102_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB102_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB102_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB102_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB102_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB102_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB102_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB102_285
.LBB102_266:                            # %if.else845
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB102_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB102_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB102_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB102_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB102_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB102_284
.LBB102_271:                            # %if.else859
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB102_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB102_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB102_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB102_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB102_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB102_283
.LBB102_276:                            # %if.else876
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB102_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB102_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB102_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jg	.LBB102_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB102_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB102_282
.LBB102_281:                            # %if.else893
                                        #   in Loop: Header=BB102_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-180(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB102_282:                            # %if.end898
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_283
.LBB102_283:                            # %if.end899
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_284
.LBB102_284:                            # %if.end900
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_285
.LBB102_285:                            # %if.end901
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_295
.LBB102_286:                            # %if.else902
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB102_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB102_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB102_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB102_294
.LBB102_289:                            # %if.else910
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB102_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB102_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB102_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB102_293
.LBB102_292:                            # %if.else918
                                        #   in Loop: Header=BB102_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB102_293:                            # %if.end920
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_294
.LBB102_294:                            # %if.end921
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_295
.LBB102_295:                            # %if.end922
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_297
.LBB102_296:                            # %if.else923
                                        #   in Loop: Header=BB102_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB102_297:                            # %if.end925
                                        #   in Loop: Header=BB102_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB102_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB102_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB102_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	$0, -24(%rbp)
.LBB102_300:                            # %for.cond933
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_181 Depth=2
                                        #       Parent Loop BB102_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB102_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB102_300 Depth=4
	movl	$0, -20(%rbp)
.LBB102_302:                            # %for.cond937
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_181 Depth=2
                                        #       Parent Loop BB102_184 Depth=3
                                        #         Parent Loop BB102_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB102_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB102_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB102_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_302
.LBB102_305:                            # %for.end999
                                        #   in Loop: Header=BB102_300 Depth=4
	jmp	.LBB102_306
.LBB102_306:                            # %for.inc1000
                                        #   in Loop: Header=BB102_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_300
.LBB102_307:                            # %for.end1002
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_323
.LBB102_308:                            # %if.else1003
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	$0, -24(%rbp)
.LBB102_309:                            # %for.cond1004
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_181 Depth=2
                                        #       Parent Loop BB102_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB102_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB102_309 Depth=4
	movl	$0, -20(%rbp)
.LBB102_311:                            # %for.cond1008
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_181 Depth=2
                                        #       Parent Loop BB102_184 Depth=3
                                        #         Parent Loop BB102_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB102_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB102_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB102_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB102_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB102_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB102_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB102_316
.LBB102_315:                            # %cond.false1024
                                        #   in Loop: Header=BB102_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB102_316:                            # %cond.end1025
                                        #   in Loop: Header=BB102_311 Depth=5
	movq	%rax, -448(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB102_318
.LBB102_317:                            # %if.else1111
                                        #   in Loop: Header=BB102_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB102_318:                            # %if.end1217
                                        #   in Loop: Header=BB102_311 Depth=5
	jmp	.LBB102_319
.LBB102_319:                            # %for.inc1218
                                        #   in Loop: Header=BB102_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_311
.LBB102_320:                            # %for.end1220
                                        #   in Loop: Header=BB102_309 Depth=4
	jmp	.LBB102_321
.LBB102_321:                            # %for.inc1221
                                        #   in Loop: Header=BB102_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_309
.LBB102_322:                            # %for.end1223
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_323
.LBB102_323:                            # %if.end1224
                                        #   in Loop: Header=BB102_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB102_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB102_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB102_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	$0, -24(%rbp)
.LBB102_326:                            # %for.cond1231
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_181 Depth=2
                                        #       Parent Loop BB102_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB102_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB102_326 Depth=4
	movl	$0, -20(%rbp)
.LBB102_328:                            # %for.cond1235
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_181 Depth=2
                                        #       Parent Loop BB102_184 Depth=3
                                        #         Parent Loop BB102_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB102_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB102_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB102_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_328
.LBB102_331:                            # %for.end1303
                                        #   in Loop: Header=BB102_326 Depth=4
	jmp	.LBB102_332
.LBB102_332:                            # %for.inc1304
                                        #   in Loop: Header=BB102_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_326
.LBB102_333:                            # %for.end1306
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_351
.LBB102_334:                            # %if.else1307
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	$0, -24(%rbp)
.LBB102_335:                            # %for.cond1308
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_181 Depth=2
                                        #       Parent Loop BB102_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB102_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB102_335 Depth=4
	movl	$0, -20(%rbp)
.LBB102_337:                            # %for.cond1312
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_181 Depth=2
                                        #       Parent Loop BB102_184 Depth=3
                                        #         Parent Loop BB102_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB102_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB102_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB102_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB102_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB102_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB102_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB102_342
.LBB102_341:                            # %cond.false1330
                                        #   in Loop: Header=BB102_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB102_342:                            # %cond.end1332
                                        #   in Loop: Header=BB102_337 Depth=5
	movq	%rax, -424(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB102_346
.LBB102_343:                            # %if.else1419
                                        #   in Loop: Header=BB102_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB102_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB102_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB102_345:                            # %if.end1529
                                        #   in Loop: Header=BB102_337 Depth=5
	jmp	.LBB102_346
.LBB102_346:                            # %if.end1530
                                        #   in Loop: Header=BB102_337 Depth=5
	jmp	.LBB102_347
.LBB102_347:                            # %for.inc1531
                                        #   in Loop: Header=BB102_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_337
.LBB102_348:                            # %for.end1533
                                        #   in Loop: Header=BB102_335 Depth=4
	jmp	.LBB102_349
.LBB102_349:                            # %for.inc1534
                                        #   in Loop: Header=BB102_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_335
.LBB102_350:                            # %for.end1536
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_351
.LBB102_351:                            # %if.end1537
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_352
.LBB102_352:                            # %if.end1538
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_393
.LBB102_353:                            # %if.else1539
                                        #   in Loop: Header=BB102_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB102_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB102_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB102_355:                            # %for.cond1546
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_181 Depth=2
                                        #       Parent Loop BB102_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB102_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB102_355 Depth=4
	movl	$0, -20(%rbp)
.LBB102_357:                            # %for.cond1550
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_181 Depth=2
                                        #       Parent Loop BB102_184 Depth=3
                                        #         Parent Loop BB102_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB102_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB102_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB102_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB102_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB102_361
.LBB102_360:                            # %if.else1596
                                        #   in Loop: Header=BB102_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB102_361:                            # %if.end1676
                                        #   in Loop: Header=BB102_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB102_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB102_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB102_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB102_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB102_367
.LBB102_364:                            # %if.else1721
                                        #   in Loop: Header=BB102_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB102_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB102_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB102_366:                            # %if.end1805
                                        #   in Loop: Header=BB102_357 Depth=5
	jmp	.LBB102_367
.LBB102_367:                            # %if.end1806
                                        #   in Loop: Header=BB102_357 Depth=5
	jmp	.LBB102_368
.LBB102_368:                            # %if.end1807
                                        #   in Loop: Header=BB102_357 Depth=5
	jmp	.LBB102_369
.LBB102_369:                            # %for.inc1808
                                        #   in Loop: Header=BB102_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_357
.LBB102_370:                            # %for.end1810
                                        #   in Loop: Header=BB102_355 Depth=4
	jmp	.LBB102_371
.LBB102_371:                            # %for.inc1811
                                        #   in Loop: Header=BB102_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_355
.LBB102_372:                            # %for.end1813
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_392
.LBB102_373:                            # %if.else1814
                                        #   in Loop: Header=BB102_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB102_374:                            # %for.cond1818
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_181 Depth=2
                                        #       Parent Loop BB102_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB102_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB102_374 Depth=4
	movl	$0, -20(%rbp)
.LBB102_376:                            # %for.cond1822
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_181 Depth=2
                                        #       Parent Loop BB102_184 Depth=3
                                        #         Parent Loop BB102_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB102_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB102_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB102_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB102_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB102_380
.LBB102_379:                            # %if.else1868
                                        #   in Loop: Header=BB102_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB102_380:                            # %if.end1948
                                        #   in Loop: Header=BB102_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB102_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB102_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB102_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB102_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB102_386
.LBB102_383:                            # %if.else1993
                                        #   in Loop: Header=BB102_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB102_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB102_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB102_385:                            # %if.end2077
                                        #   in Loop: Header=BB102_376 Depth=5
	jmp	.LBB102_386
.LBB102_386:                            # %if.end2078
                                        #   in Loop: Header=BB102_376 Depth=5
	jmp	.LBB102_387
.LBB102_387:                            # %if.end2079
                                        #   in Loop: Header=BB102_376 Depth=5
	jmp	.LBB102_388
.LBB102_388:                            # %for.inc2080
                                        #   in Loop: Header=BB102_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_376
.LBB102_389:                            # %for.end2082
                                        #   in Loop: Header=BB102_374 Depth=4
	jmp	.LBB102_390
.LBB102_390:                            # %for.inc2083
                                        #   in Loop: Header=BB102_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_374
.LBB102_391:                            # %for.end2085
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_392
.LBB102_392:                            # %if.end2086
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_393
.LBB102_393:                            # %if.end2087
                                        #   in Loop: Header=BB102_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB102_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB102_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB102_399
.LBB102_395:                            # %if.else2106
                                        #   in Loop: Header=BB102_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB102_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB102_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB102_398
.LBB102_397:                            # %if.else2131
                                        #   in Loop: Header=BB102_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB102_398:                            # %if.end2132
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_399
.LBB102_399:                            # %if.end2133
                                        #   in Loop: Header=BB102_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB102_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB102_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB102_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB102_402:                            # %if.end2143
                                        #   in Loop: Header=BB102_184 Depth=3
	jmp	.LBB102_403
.LBB102_403:                            # %for.inc2144
                                        #   in Loop: Header=BB102_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB102_184
.LBB102_404:                            # %for.end2146
                                        #   in Loop: Header=BB102_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB102_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB102_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB102_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB102_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB102_407:                            # %if.end2155
                                        #   in Loop: Header=BB102_181 Depth=2
	jmp	.LBB102_408
.LBB102_408:                            # %if.end2156
                                        #   in Loop: Header=BB102_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB102_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB102_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -316(%rbp)
.LBB102_410:                            # %if.end2161
                                        #   in Loop: Header=BB102_181 Depth=2
	jmp	.LBB102_411
.LBB102_411:                            # %if.end2162
                                        #   in Loop: Header=BB102_181 Depth=2
	jmp	.LBB102_412
.LBB102_412:                            # %for.inc2163
                                        #   in Loop: Header=BB102_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB102_181
.LBB102_413:                            # %for.end2165
                                        #   in Loop: Header=BB102_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB102_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB102_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB102_416:                            # %for.cond2172
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_418 Depth 3
                                        #         Child Loop BB102_445 Depth 4
                                        #         Child Loop BB102_464 Depth 4
                                        #           Child Loop BB102_466 Depth 5
                                        #         Child Loop BB102_473 Depth 4
                                        #         Child Loop BB102_508 Depth 4
                                        #           Child Loop BB102_510 Depth 5
                                        #         Child Loop BB102_532 Depth 4
                                        #           Child Loop BB102_534 Depth 5
                                        #             Child Loop BB102_536 Depth 6
                                        #         Child Loop BB102_544 Depth 4
                                        #           Child Loop BB102_546 Depth 5
                                        #       Child Loop BB102_569 Depth 3
                                        #         Child Loop BB102_571 Depth 4
                                        #           Child Loop BB102_573 Depth 5
                                        #       Child Loop BB102_581 Depth 3
                                        #         Child Loop BB102_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB102_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB102_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI102_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB102_418:                            # %for.cond2184
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_445 Depth 4
                                        #         Child Loop BB102_464 Depth 4
                                        #           Child Loop BB102_466 Depth 5
                                        #         Child Loop BB102_473 Depth 4
                                        #         Child Loop BB102_508 Depth 4
                                        #           Child Loop BB102_510 Depth 5
                                        #         Child Loop BB102_532 Depth 4
                                        #           Child Loop BB102_534 Depth 5
                                        #             Child Loop BB102_536 Depth 6
                                        #         Child Loop BB102_544 Depth 4
                                        #           Child Loop BB102_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB102_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB102_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB102_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB102_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB102_423
.LBB102_421:                            # %lor.lhs.false2196
                                        #   in Loop: Header=BB102_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB102_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB102_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB102_557
.LBB102_423:                            # %if.then2201
                                        #   in Loop: Header=BB102_418 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB102_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB102_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB102_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	$0, -228(%rbp)
	movl	$0, -216(%rbp)
	movl	-28(%rbp), %edi
	leaq	-216(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -228(%rbp)
	cmpl	$2147483647, -228(%rbp) # imm = 0x7FFFFFFF
	je	.LBB102_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB102_418 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB102_428
.LBB102_427:                            # %if.then2214
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB102_429
.LBB102_428:                            # %if.else2215
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-228(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-216(%rbp), %eax
	addl	-204(%rbp), %eax
	movl	%eax, -204(%rbp)
.LBB102_429:                            # %if.end2218
                                        #   in Loop: Header=BB102_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB102_431
	jmp	.LBB102_430
.LBB102_430:                            # %if.end2218
                                        #   in Loop: Header=BB102_418 Depth=3
	subl	$2, %eax
	je	.LBB102_438
	jmp	.LBB102_439
.LBB102_431:                            # %sw.bb
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-216(%rbp), %eax
	cmpl	-228(%rbp), %eax
	jl	.LBB102_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB102_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB102_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB102_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB102_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB102_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB102_436
.LBB102_435:                            # %if.then2231
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB102_437
.LBB102_436:                            # %if.else2232
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-228(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB102_437:                            # %if.end2233
                                        #   in Loop: Header=BB102_418 Depth=3
	jmp	.LBB102_440
.LBB102_438:                            # %sw.bb2234
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB102_440
.LBB102_439:                            # %sw.default
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-228(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB102_440:                            # %sw.epilog
                                        #   in Loop: Header=BB102_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB102_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-172(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB102_442:                            # %if.end2240
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
.LBB102_443:                            # %if.end2242
                                        #   in Loop: Header=BB102_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB102_518
.LBB102_444:                            # %if.else2278
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB102_445:                            # %for.cond2279
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_416 Depth=2
                                        #       Parent Loop BB102_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB102_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB102_445 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB102_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB102_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB102_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB102_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB102_461
.LBB102_449:                            # %if.then2296
                                        #   in Loop: Header=BB102_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB102_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB102_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB102_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB102_453
.LBB102_452:                            # %cond.false2306
                                        #   in Loop: Header=BB102_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB102_453:                            # %cond.end2309
                                        #   in Loop: Header=BB102_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB102_458
.LBB102_454:                            # %cond.false2313
                                        #   in Loop: Header=BB102_445 Depth=4
	vmovsd	.LCPI102_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB102_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB102_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB102_457
.LBB102_456:                            # %cond.false2320
                                        #   in Loop: Header=BB102_445 Depth=4
	movl	$1, %eax
	jmp	.LBB102_457
.LBB102_457:                            # %cond.end2321
                                        #   in Loop: Header=BB102_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB102_458:                            # %cond.end2326
                                        #   in Loop: Header=BB102_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB102_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB102_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB102_460:                            # %if.end2339
                                        #   in Loop: Header=BB102_445 Depth=4
	jmp	.LBB102_461
.LBB102_461:                            # %if.end2340
                                        #   in Loop: Header=BB102_445 Depth=4
	jmp	.LBB102_462
.LBB102_462:                            # %for.inc2341
                                        #   in Loop: Header=BB102_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB102_445
.LBB102_463:                            # %for.end2343
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	$0, -24(%rbp)
.LBB102_464:                            # %for.cond2344
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_416 Depth=2
                                        #       Parent Loop BB102_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB102_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB102_464 Depth=4
	movl	$0, -20(%rbp)
.LBB102_466:                            # %for.cond2348
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_416 Depth=2
                                        #       Parent Loop BB102_418 Depth=3
                                        #         Parent Loop BB102_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB102_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB102_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB102_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_466
.LBB102_469:                            # %for.end2405
                                        #   in Loop: Header=BB102_464 Depth=4
	jmp	.LBB102_470
.LBB102_470:                            # %for.inc2406
                                        #   in Loop: Header=BB102_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_464
.LBB102_471:                            # %for.end2408
                                        #   in Loop: Header=BB102_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB102_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB102_473:                            # %for.cond2411
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_416 Depth=2
                                        #       Parent Loop BB102_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB102_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB102_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB102_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB102_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB102_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB102_478
.LBB102_477:                            # %cond.false2428
                                        #   in Loop: Header=BB102_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB102_478:                            # %cond.end2431
                                        #   in Loop: Header=BB102_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB102_483
.LBB102_479:                            # %cond.false2435
                                        #   in Loop: Header=BB102_473 Depth=4
	vmovsd	.LCPI102_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB102_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB102_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB102_482
.LBB102_481:                            # %cond.false2442
                                        #   in Loop: Header=BB102_473 Depth=4
	movl	$1, %eax
	jmp	.LBB102_482
.LBB102_482:                            # %cond.end2443
                                        #   in Loop: Header=BB102_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB102_483:                            # %cond.end2448
                                        #   in Loop: Header=BB102_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB102_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB102_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB102_485:                            # %if.end2461
                                        #   in Loop: Header=BB102_473 Depth=4
	jmp	.LBB102_486
.LBB102_486:                            # %for.inc2462
                                        #   in Loop: Header=BB102_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB102_473
.LBB102_487:                            # %for.end2464
                                        #   in Loop: Header=BB102_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB102_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB102_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB102_491
.LBB102_490:                            # %cond.false2474
                                        #   in Loop: Header=BB102_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB102_491:                            # %cond.end2477
                                        #   in Loop: Header=BB102_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB102_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB102_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB102_494
.LBB102_493:                            # %cond.false2487
                                        #   in Loop: Header=BB102_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB102_494:                            # %cond.end2489
                                        #   in Loop: Header=BB102_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB102_499
.LBB102_495:                            # %cond.false2494
                                        #   in Loop: Header=BB102_418 Depth=3
	vmovsd	.LCPI102_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB102_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB102_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB102_498
.LBB102_497:                            # %cond.false2501
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	$1, %eax
	jmp	.LBB102_498
.LBB102_498:                            # %cond.end2502
                                        #   in Loop: Header=BB102_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB102_499:                            # %cond.end2507
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB102_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB102_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB102_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB102_507
.LBB102_502:                            # %if.else2517
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB102_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB102_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB102_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB102_506
.LBB102_505:                            # %if.else2524
                                        #   in Loop: Header=BB102_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB102_506:                            # %if.end2525
                                        #   in Loop: Header=BB102_418 Depth=3
	jmp	.LBB102_507
.LBB102_507:                            # %if.end2526
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	$0, -24(%rbp)
.LBB102_508:                            # %for.cond2527
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_416 Depth=2
                                        #       Parent Loop BB102_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB102_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB102_508 Depth=4
	movl	$0, -20(%rbp)
.LBB102_510:                            # %for.cond2531
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_416 Depth=2
                                        #       Parent Loop BB102_418 Depth=3
                                        #         Parent Loop BB102_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB102_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB102_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB102_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_510
.LBB102_513:                            # %for.end2567
                                        #   in Loop: Header=BB102_508 Depth=4
	jmp	.LBB102_514
.LBB102_514:                            # %for.inc2568
                                        #   in Loop: Header=BB102_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_508
.LBB102_515:                            # %for.end2570
                                        #   in Loop: Header=BB102_418 Depth=3
	jmp	.LBB102_517
.LBB102_516:                            # %if.else2571
                                        #   in Loop: Header=BB102_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB102_517:                            # %if.end2572
                                        #   in Loop: Header=BB102_418 Depth=3
	jmp	.LBB102_518
.LBB102_518:                            # %if.end2573
                                        #   in Loop: Header=BB102_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB102_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB102_526
.LBB102_520:                            # %if.else2578
                                        #   in Loop: Header=BB102_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB102_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB102_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB102_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB102_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB102_524
.LBB102_523:                            # %cond.false2592
                                        #   in Loop: Header=BB102_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB102_524:                            # %cond.end2597
                                        #   in Loop: Header=BB102_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB102_525:                            # %if.end2603
                                        #   in Loop: Header=BB102_418 Depth=3
	jmp	.LBB102_526
.LBB102_526:                            # %if.end2604
                                        #   in Loop: Header=BB102_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB102_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB102_530
.LBB102_528:                            # %lor.lhs.false2610
                                        #   in Loop: Header=BB102_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB102_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB102_556
.LBB102_530:                            # %if.then2616
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB102_532:                            # %for.cond2638
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_416 Depth=2
                                        #       Parent Loop BB102_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_534 Depth 5
                                        #             Child Loop BB102_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB102_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB102_532 Depth=4
	movl	$0, -24(%rbp)
.LBB102_534:                            # %for.cond2642
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_416 Depth=2
                                        #       Parent Loop BB102_418 Depth=3
                                        #         Parent Loop BB102_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB102_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB102_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB102_534 Depth=5
	movl	$0, -20(%rbp)
.LBB102_536:                            # %for.cond2646
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_416 Depth=2
                                        #       Parent Loop BB102_418 Depth=3
                                        #         Parent Loop BB102_532 Depth=4
                                        #           Parent Loop BB102_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB102_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB102_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB102_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_536
.LBB102_539:                            # %for.end2668
                                        #   in Loop: Header=BB102_534 Depth=5
	jmp	.LBB102_540
.LBB102_540:                            # %for.inc2669
                                        #   in Loop: Header=BB102_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_534
.LBB102_541:                            # %for.end2671
                                        #   in Loop: Header=BB102_532 Depth=4
	jmp	.LBB102_542
.LBB102_542:                            # %for.inc2672
                                        #   in Loop: Header=BB102_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB102_532
.LBB102_543:                            # %for.end2674
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB102_544:                            # %for.cond2675
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_416 Depth=2
                                        #       Parent Loop BB102_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB102_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB102_546:                            # %for.cond2680
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_416 Depth=2
                                        #       Parent Loop BB102_418 Depth=3
                                        #         Parent Loop BB102_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB102_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB102_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB102_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB102_550
.LBB102_549:                            # %if.else2705
                                        #   in Loop: Header=BB102_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB102_550:                            # %if.end2754
                                        #   in Loop: Header=BB102_546 Depth=5
	jmp	.LBB102_551
.LBB102_551:                            # %for.inc2755
                                        #   in Loop: Header=BB102_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_546
.LBB102_552:                            # %for.end2757
                                        #   in Loop: Header=BB102_544 Depth=4
	jmp	.LBB102_553
.LBB102_553:                            # %for.inc2758
                                        #   in Loop: Header=BB102_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_544
.LBB102_554:                            # %for.end2760
                                        #   in Loop: Header=BB102_418 Depth=3
	jmp	.LBB102_555
.LBB102_555:                            # %if.end2761
                                        #   in Loop: Header=BB102_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB102_556:                            # %if.end2762
                                        #   in Loop: Header=BB102_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB102_557:                            # %if.end2763
                                        #   in Loop: Header=BB102_418 Depth=3
	jmp	.LBB102_558
.LBB102_558:                            # %for.inc2764
                                        #   in Loop: Header=BB102_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB102_418
.LBB102_559:                            # %for.end2766
                                        #   in Loop: Header=BB102_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB102_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB102_416 Depth=2
	movl	-172(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB102_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB102_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB102_563
.LBB102_562:                            # %cond.true2782
                                        #   in Loop: Header=BB102_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB102_564
.LBB102_563:                            # %cond.false2783
                                        #   in Loop: Header=BB102_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB102_564
.LBB102_564:                            # %cond.end2784
                                        #   in Loop: Header=BB102_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB102_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB102_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB102_567
.LBB102_566:                            # %cond.true2793
                                        #   in Loop: Header=BB102_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB102_568
.LBB102_567:                            # %cond.false2794
                                        #   in Loop: Header=BB102_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB102_568
.LBB102_568:                            # %cond.end2795
                                        #   in Loop: Header=BB102_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-284(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -184(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB102_569:                            # %for.cond2813
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_571 Depth 4
                                        #           Child Loop BB102_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB102_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB102_569 Depth=3
	movl	$0, -24(%rbp)
.LBB102_571:                            # %for.cond2817
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_416 Depth=2
                                        #       Parent Loop BB102_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB102_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB102_571 Depth=4
	movl	$0, -20(%rbp)
.LBB102_573:                            # %for.cond2821
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_416 Depth=2
                                        #       Parent Loop BB102_569 Depth=3
                                        #         Parent Loop BB102_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB102_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB102_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB102_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_573
.LBB102_576:                            # %for.end2844
                                        #   in Loop: Header=BB102_571 Depth=4
	jmp	.LBB102_577
.LBB102_577:                            # %for.inc2845
                                        #   in Loop: Header=BB102_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_571
.LBB102_578:                            # %for.end2847
                                        #   in Loop: Header=BB102_569 Depth=3
	jmp	.LBB102_579
.LBB102_579:                            # %for.inc2848
                                        #   in Loop: Header=BB102_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB102_569
.LBB102_580:                            # %for.end2850
                                        #   in Loop: Header=BB102_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB102_581:                            # %for.cond2851
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB102_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB102_583:                            # %for.cond2856
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_416 Depth=2
                                        #       Parent Loop BB102_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB102_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB102_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB102_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB102_587
.LBB102_586:                            # %if.else2886
                                        #   in Loop: Header=BB102_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB102_587:                            # %if.end2935
                                        #   in Loop: Header=BB102_583 Depth=4
	jmp	.LBB102_588
.LBB102_588:                            # %for.inc2936
                                        #   in Loop: Header=BB102_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_583
.LBB102_589:                            # %for.end2938
                                        #   in Loop: Header=BB102_581 Depth=3
	jmp	.LBB102_590
.LBB102_590:                            # %for.inc2939
                                        #   in Loop: Header=BB102_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_581
.LBB102_591:                            # %for.end2941
                                        #   in Loop: Header=BB102_416 Depth=2
	jmp	.LBB102_592
.LBB102_592:                            # %if.end2942
                                        #   in Loop: Header=BB102_416 Depth=2
	cmpl	$0, -184(%rbp)
	je	.LBB102_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB102_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-184(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB102_594:                            # %if.end2948
                                        #   in Loop: Header=BB102_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB102_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB102_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB102_596:                            # %if.end2974
                                        #   in Loop: Header=BB102_416 Depth=2
	jmp	.LBB102_597
.LBB102_597:                            # %for.inc2975
                                        #   in Loop: Header=BB102_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB102_416
.LBB102_598:                            # %for.end2977
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-144(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB102_599:                            # %if.end2980
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB102_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB102_601:                            # %for.cond2985
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_603 Depth 3
                                        #         Child Loop BB102_614 Depth 4
                                        #         Child Loop BB102_633 Depth 4
                                        #           Child Loop BB102_635 Depth 5
                                        #         Child Loop BB102_642 Depth 4
                                        #         Child Loop BB102_677 Depth 4
                                        #           Child Loop BB102_679 Depth 5
                                        #         Child Loop BB102_701 Depth 4
                                        #           Child Loop BB102_703 Depth 5
                                        #             Child Loop BB102_705 Depth 6
                                        #         Child Loop BB102_713 Depth 4
                                        #           Child Loop BB102_715 Depth 5
                                        #         Child Loop BB102_723 Depth 4
                                        #           Child Loop BB102_725 Depth 5
                                        #       Child Loop BB102_745 Depth 3
                                        #         Child Loop BB102_747 Depth 4
                                        #           Child Loop BB102_749 Depth 5
                                        #       Child Loop BB102_757 Depth 3
                                        #         Child Loop BB102_759 Depth 4
                                        #       Child Loop BB102_766 Depth 3
                                        #         Child Loop BB102_768 Depth 4
                                        #       Child Loop BB102_778 Depth 3
                                        #         Child Loop BB102_780 Depth 4
                                        #       Child Loop BB102_786 Depth 3
                                        #       Child Loop BB102_791 Depth 3
                                        #         Child Loop BB102_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB102_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB102_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI102_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB102_603:                            # %for.cond2997
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_614 Depth 4
                                        #         Child Loop BB102_633 Depth 4
                                        #           Child Loop BB102_635 Depth 5
                                        #         Child Loop BB102_642 Depth 4
                                        #         Child Loop BB102_677 Depth 4
                                        #           Child Loop BB102_679 Depth 5
                                        #         Child Loop BB102_701 Depth 4
                                        #           Child Loop BB102_703 Depth 5
                                        #             Child Loop BB102_705 Depth 6
                                        #         Child Loop BB102_713 Depth 4
                                        #           Child Loop BB102_715 Depth 5
                                        #         Child Loop BB102_723 Depth 4
                                        #           Child Loop BB102_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB102_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB102_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB102_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB102_603 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB102_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB102_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB102_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-216(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB102_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB102_603 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB102_610
.LBB102_609:                            # %if.then3019
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB102_611
.LBB102_610:                            # %if.else3020
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
.LBB102_611:                            # %if.end3022
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
.LBB102_612:                            # %if.end3024
                                        #   in Loop: Header=BB102_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB102_687
.LBB102_613:                            # %if.else3060
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB102_614:                            # %for.cond3061
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB102_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB102_614 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB102_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB102_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB102_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB102_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB102_630
.LBB102_618:                            # %if.then3078
                                        #   in Loop: Header=BB102_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB102_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB102_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB102_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB102_622
.LBB102_621:                            # %cond.false3088
                                        #   in Loop: Header=BB102_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB102_622:                            # %cond.end3091
                                        #   in Loop: Header=BB102_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB102_627
.LBB102_623:                            # %cond.false3095
                                        #   in Loop: Header=BB102_614 Depth=4
	vmovsd	.LCPI102_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB102_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB102_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB102_626
.LBB102_625:                            # %cond.false3102
                                        #   in Loop: Header=BB102_614 Depth=4
	movl	$1, %eax
	jmp	.LBB102_626
.LBB102_626:                            # %cond.end3103
                                        #   in Loop: Header=BB102_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB102_627:                            # %cond.end3108
                                        #   in Loop: Header=BB102_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB102_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB102_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB102_629:                            # %if.end3121
                                        #   in Loop: Header=BB102_614 Depth=4
	jmp	.LBB102_630
.LBB102_630:                            # %if.end3122
                                        #   in Loop: Header=BB102_614 Depth=4
	jmp	.LBB102_631
.LBB102_631:                            # %for.inc3123
                                        #   in Loop: Header=BB102_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB102_614
.LBB102_632:                            # %for.end3125
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	$0, -24(%rbp)
.LBB102_633:                            # %for.cond3126
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB102_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB102_633 Depth=4
	movl	$0, -20(%rbp)
.LBB102_635:                            # %for.cond3130
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_603 Depth=3
                                        #         Parent Loop BB102_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB102_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB102_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB102_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_635
.LBB102_638:                            # %for.end3187
                                        #   in Loop: Header=BB102_633 Depth=4
	jmp	.LBB102_639
.LBB102_639:                            # %for.inc3188
                                        #   in Loop: Header=BB102_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_633
.LBB102_640:                            # %for.end3190
                                        #   in Loop: Header=BB102_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB102_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB102_642:                            # %for.cond3193
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB102_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB102_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB102_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB102_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB102_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB102_647
.LBB102_646:                            # %cond.false3210
                                        #   in Loop: Header=BB102_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB102_647:                            # %cond.end3213
                                        #   in Loop: Header=BB102_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB102_652
.LBB102_648:                            # %cond.false3217
                                        #   in Loop: Header=BB102_642 Depth=4
	vmovsd	.LCPI102_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB102_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB102_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB102_651
.LBB102_650:                            # %cond.false3224
                                        #   in Loop: Header=BB102_642 Depth=4
	movl	$1, %eax
	jmp	.LBB102_651
.LBB102_651:                            # %cond.end3225
                                        #   in Loop: Header=BB102_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB102_652:                            # %cond.end3230
                                        #   in Loop: Header=BB102_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB102_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB102_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB102_654:                            # %if.end3243
                                        #   in Loop: Header=BB102_642 Depth=4
	jmp	.LBB102_655
.LBB102_655:                            # %for.inc3244
                                        #   in Loop: Header=BB102_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB102_642
.LBB102_656:                            # %for.end3246
                                        #   in Loop: Header=BB102_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB102_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB102_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB102_660
.LBB102_659:                            # %cond.false3256
                                        #   in Loop: Header=BB102_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB102_660:                            # %cond.end3259
                                        #   in Loop: Header=BB102_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB102_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB102_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB102_663
.LBB102_662:                            # %cond.false3269
                                        #   in Loop: Header=BB102_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB102_663:                            # %cond.end3271
                                        #   in Loop: Header=BB102_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB102_668
.LBB102_664:                            # %cond.false3276
                                        #   in Loop: Header=BB102_603 Depth=3
	vmovsd	.LCPI102_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB102_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB102_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB102_667
.LBB102_666:                            # %cond.false3283
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	$1, %eax
	jmp	.LBB102_667
.LBB102_667:                            # %cond.end3284
                                        #   in Loop: Header=BB102_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB102_668:                            # %cond.end3289
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB102_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB102_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB102_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB102_676
.LBB102_671:                            # %if.else3299
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB102_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB102_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB102_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB102_675
.LBB102_674:                            # %if.else3306
                                        #   in Loop: Header=BB102_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB102_675:                            # %if.end3307
                                        #   in Loop: Header=BB102_603 Depth=3
	jmp	.LBB102_676
.LBB102_676:                            # %if.end3308
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	$0, -24(%rbp)
.LBB102_677:                            # %for.cond3309
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB102_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB102_677 Depth=4
	movl	$0, -20(%rbp)
.LBB102_679:                            # %for.cond3313
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_603 Depth=3
                                        #         Parent Loop BB102_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB102_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB102_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB102_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_679
.LBB102_682:                            # %for.end3349
                                        #   in Loop: Header=BB102_677 Depth=4
	jmp	.LBB102_683
.LBB102_683:                            # %for.inc3350
                                        #   in Loop: Header=BB102_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_677
.LBB102_684:                            # %for.end3352
                                        #   in Loop: Header=BB102_603 Depth=3
	jmp	.LBB102_686
.LBB102_685:                            # %if.else3353
                                        #   in Loop: Header=BB102_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB102_686:                            # %if.end3354
                                        #   in Loop: Header=BB102_603 Depth=3
	jmp	.LBB102_687
.LBB102_687:                            # %if.end3355
                                        #   in Loop: Header=BB102_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB102_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB102_695
.LBB102_689:                            # %if.else3360
                                        #   in Loop: Header=BB102_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB102_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB102_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB102_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB102_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB102_693
.LBB102_692:                            # %cond.false3374
                                        #   in Loop: Header=BB102_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB102_693:                            # %cond.end3379
                                        #   in Loop: Header=BB102_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB102_694:                            # %if.end3385
                                        #   in Loop: Header=BB102_603 Depth=3
	jmp	.LBB102_695
.LBB102_695:                            # %if.end3386
                                        #   in Loop: Header=BB102_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB102_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB102_699
.LBB102_697:                            # %lor.lhs.false3392
                                        #   in Loop: Header=BB102_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB102_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB102_732
.LBB102_699:                            # %if.then3398
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB102_701:                            # %for.cond3422
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_703 Depth 5
                                        #             Child Loop BB102_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB102_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB102_701 Depth=4
	movl	$0, -24(%rbp)
.LBB102_703:                            # %for.cond3426
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_603 Depth=3
                                        #         Parent Loop BB102_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB102_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB102_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB102_703 Depth=5
	movl	$0, -20(%rbp)
.LBB102_705:                            # %for.cond3430
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_603 Depth=3
                                        #         Parent Loop BB102_701 Depth=4
                                        #           Parent Loop BB102_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB102_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB102_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB102_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_705
.LBB102_708:                            # %for.end3453
                                        #   in Loop: Header=BB102_703 Depth=5
	jmp	.LBB102_709
.LBB102_709:                            # %for.inc3454
                                        #   in Loop: Header=BB102_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_703
.LBB102_710:                            # %for.end3456
                                        #   in Loop: Header=BB102_701 Depth=4
	jmp	.LBB102_711
.LBB102_711:                            # %for.inc3457
                                        #   in Loop: Header=BB102_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB102_701
.LBB102_712:                            # %for.end3459
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB102_713:                            # %for.cond3460
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB102_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB102_715:                            # %for.cond3465
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_603 Depth=3
                                        #         Parent Loop BB102_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB102_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB102_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_715
.LBB102_718:                            # %for.end3494
                                        #   in Loop: Header=BB102_713 Depth=4
	jmp	.LBB102_719
.LBB102_719:                            # %for.inc3495
                                        #   in Loop: Header=BB102_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_713
.LBB102_720:                            # %for.end3497
                                        #   in Loop: Header=BB102_603 Depth=3
	jmp	.LBB102_721
.LBB102_721:                            # %if.end3498
                                        #   in Loop: Header=BB102_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB102_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB102_723:                            # %for.cond3502
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB102_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB102_725:                            # %for.cond3507
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_603 Depth=3
                                        #         Parent Loop BB102_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB102_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB102_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_725
.LBB102_728:                            # %for.end3562
                                        #   in Loop: Header=BB102_723 Depth=4
	jmp	.LBB102_729
.LBB102_729:                            # %for.inc3563
                                        #   in Loop: Header=BB102_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_723
.LBB102_730:                            # %for.end3565
                                        #   in Loop: Header=BB102_603 Depth=3
	jmp	.LBB102_731
.LBB102_731:                            # %if.end3566
                                        #   in Loop: Header=BB102_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB102_732:                            # %if.end3567
                                        #   in Loop: Header=BB102_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB102_733:                            # %if.end3568
                                        #   in Loop: Header=BB102_603 Depth=3
	jmp	.LBB102_734
.LBB102_734:                            # %for.inc3569
                                        #   in Loop: Header=BB102_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB102_603
.LBB102_735:                            # %for.end3571
                                        #   in Loop: Header=BB102_601 Depth=2
	movl	-172(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB102_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB102_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB102_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB102_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB102_739
.LBB102_738:                            # %cond.true3588
                                        #   in Loop: Header=BB102_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB102_740
.LBB102_739:                            # %cond.false3589
                                        #   in Loop: Header=BB102_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB102_740
.LBB102_740:                            # %cond.end3590
                                        #   in Loop: Header=BB102_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB102_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB102_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB102_743
.LBB102_742:                            # %cond.true3599
                                        #   in Loop: Header=BB102_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB102_744
.LBB102_743:                            # %cond.false3600
                                        #   in Loop: Header=BB102_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB102_744
.LBB102_744:                            # %cond.end3601
                                        #   in Loop: Header=BB102_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-284(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -184(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB102_745:                            # %for.cond3619
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_747 Depth 4
                                        #           Child Loop BB102_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB102_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB102_745 Depth=3
	movl	$0, -24(%rbp)
.LBB102_747:                            # %for.cond3623
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB102_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB102_747 Depth=4
	movl	$0, -20(%rbp)
.LBB102_749:                            # %for.cond3627
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_745 Depth=3
                                        #         Parent Loop BB102_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB102_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB102_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB102_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_749
.LBB102_752:                            # %for.end3650
                                        #   in Loop: Header=BB102_747 Depth=4
	jmp	.LBB102_753
.LBB102_753:                            # %for.inc3651
                                        #   in Loop: Header=BB102_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_747
.LBB102_754:                            # %for.end3653
                                        #   in Loop: Header=BB102_745 Depth=3
	jmp	.LBB102_755
.LBB102_755:                            # %for.inc3654
                                        #   in Loop: Header=BB102_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB102_745
.LBB102_756:                            # %for.end3656
                                        #   in Loop: Header=BB102_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB102_757:                            # %for.cond3657
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB102_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB102_759:                            # %for.cond3662
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB102_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB102_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_759
.LBB102_762:                            # %for.end3691
                                        #   in Loop: Header=BB102_757 Depth=3
	jmp	.LBB102_763
.LBB102_763:                            # %for.inc3692
                                        #   in Loop: Header=BB102_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_757
.LBB102_764:                            # %for.end3694
                                        #   in Loop: Header=BB102_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB102_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB102_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB102_766:                            # %for.cond3698
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB102_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB102_768:                            # %for.cond3703
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB102_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB102_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_768
.LBB102_771:                            # %for.end3758
                                        #   in Loop: Header=BB102_766 Depth=3
	jmp	.LBB102_772
.LBB102_772:                            # %for.inc3759
                                        #   in Loop: Header=BB102_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_766
.LBB102_773:                            # %for.end3761
                                        #   in Loop: Header=BB102_601 Depth=2
	jmp	.LBB102_774
.LBB102_774:                            # %if.end3762
                                        #   in Loop: Header=BB102_601 Depth=2
	jmp	.LBB102_775
.LBB102_775:                            # %if.end3763
                                        #   in Loop: Header=BB102_601 Depth=2
	cmpl	$0, -184(%rbp)
	je	.LBB102_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB102_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-184(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB102_777:                            # %if.end3769
                                        #   in Loop: Header=BB102_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB102_778:                            # %for.cond3781
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB102_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB102_780:                            # %for.cond3786
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB102_780 Depth=4
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB102_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_780
.LBB102_783:                            # %for.end3797
                                        #   in Loop: Header=BB102_778 Depth=3
	jmp	.LBB102_784
.LBB102_784:                            # %for.inc3798
                                        #   in Loop: Header=BB102_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_778
.LBB102_785:                            # %for.end3800
                                        #   in Loop: Header=BB102_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB102_786:                            # %for.cond3802
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB102_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB102_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_786
.LBB102_789:                            # %for.end3811
                                        #   in Loop: Header=BB102_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB102_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB102_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB102_791:                            # %for.cond3819
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB102_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB102_793:                            # %for.cond3824
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_601 Depth=2
                                        #       Parent Loop BB102_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB102_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB102_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_793
.LBB102_796:                            # %for.end3844
                                        #   in Loop: Header=BB102_791 Depth=3
	jmp	.LBB102_797
.LBB102_797:                            # %for.inc3845
                                        #   in Loop: Header=BB102_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_791
.LBB102_798:                            # %for.end3847
                                        #   in Loop: Header=BB102_601 Depth=2
	jmp	.LBB102_799
.LBB102_799:                            # %if.end3848
                                        #   in Loop: Header=BB102_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB102_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB102_601
.LBB102_801:                            # %for.end3860
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_802
.LBB102_802:                            # %if.end3861
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB102_803:                            # %for.cond3862
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB102_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB102_803 Depth=2
	movl	$0, -24(%rbp)
.LBB102_805:                            # %for.cond3866
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB102_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB102_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB102_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_805
.LBB102_808:                            # %for.end3890
                                        #   in Loop: Header=BB102_803 Depth=2
	jmp	.LBB102_809
.LBB102_809:                            # %for.inc3891
                                        #   in Loop: Header=BB102_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_803
.LBB102_810:                            # %for.end3893
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB102_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB102_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB102_825
.LBB102_813:                            # %if.then3902
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB102_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB102_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB102_822
.LBB102_816:                            # %if.else3910
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB102_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB102_821
.LBB102_818:                            # %if.else3915
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB102_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB102_820:                            # %if.end3922
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_821
.LBB102_821:                            # %if.end3923
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_822
.LBB102_822:                            # %if.end3924
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_824
.LBB102_823:                            # %if.else3925
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB102_824:                            # %if.end3927
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_825
.LBB102_825:                            # %if.end3928
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_827
.LBB102_826:                            # %if.else3929
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
.LBB102_827:                            # %if.end3930
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB102_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB102_830
.LBB102_829:                            # %if.then3938
                                        #   in Loop: Header=BB102_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB102_830:                            # %if.end3939
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_832
.LBB102_831:                            # %if.else3940
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB102_832:                            # %if.end3941
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB102_171 Depth=1
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB102_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB102_171 Depth=1
	leaq	-268(%rbp), %rdi
	leaq	-276(%rbp), %rsi
	leaq	-300(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB102_835:                            # %for.cond3949
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_853 Depth 3
                                        #         Child Loop BB102_908 Depth 4
                                        #           Child Loop BB102_911 Depth 5
                                        #             Child Loop BB102_913 Depth 6
                                        #           Child Loop BB102_920 Depth 5
                                        #             Child Loop BB102_922 Depth 6
                                        #         Child Loop BB102_955 Depth 4
                                        #           Child Loop BB102_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB102_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB102_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB102_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB102_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB102_846
.LBB102_838:                            # %lor.lhs.false3960
                                        #   in Loop: Header=BB102_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB102_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB102_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB102_846
.LBB102_840:                            # %lor.lhs.false3966
                                        #   in Loop: Header=BB102_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB102_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB102_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB102_846
.LBB102_842:                            # %lor.lhs.false3972
                                        #   in Loop: Header=BB102_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB102_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB102_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB102_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB102_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB102_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB102_835 Depth=2
	cmpl	$0, -300(%rbp)
	jne	.LBB102_847
.LBB102_846:                            # %if.then3982
                                        #   in Loop: Header=BB102_835 Depth=2
	jmp	.LBB102_976
.LBB102_847:                            # %if.end3983
                                        #   in Loop: Header=BB102_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB102_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB102_835 Depth=2
	movl	$11, -304(%rbp)
	jmp	.LBB102_850
.LBB102_849:                            # %if.else3987
                                        #   in Loop: Header=BB102_835 Depth=2
	movl	$8, -304(%rbp)
.LBB102_850:                            # %if.end3988
                                        #   in Loop: Header=BB102_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB102_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB102_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB102_852:                            # %if.end3994
                                        #   in Loop: Header=BB102_835 Depth=2
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB102_853:                            # %for.cond3995
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_908 Depth 4
                                        #           Child Loop BB102_911 Depth 5
                                        #             Child Loop BB102_913 Depth 6
                                        #           Child Loop BB102_920 Depth 5
                                        #             Child Loop BB102_922 Depth 6
                                        #         Child Loop BB102_955 Depth 4
                                        #           Child Loop BB102_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-304(%rbp), %eax
	jge	.LBB102_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB102_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB102_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB102_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB102_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB102_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -128(%rbp)
.LBB102_857:                            # %if.end4010
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB102_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$0, -128(%rbp)
	jne	.LBB102_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB102_866
.LBB102_860:                            # %lor.lhs.false4018
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB102_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB102_866
.LBB102_862:                            # %lor.lhs.false4023
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$3, -128(%rbp)
	jne	.LBB102_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB102_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB102_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$0, -300(%rbp)
	jne	.LBB102_867
.LBB102_866:                            # %if.then4032
                                        #   in Loop: Header=BB102_853 Depth=3
	jmp	.LBB102_974
.LBB102_867:                            # %if.end4033
                                        #   in Loop: Header=BB102_853 Depth=3
	jmp	.LBB102_869
.LBB102_868:                            # %if.else4034
                                        #   in Loop: Header=BB102_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -128(%rbp)
.LBB102_869:                            # %if.end4037
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB102_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB102_853 Depth=3
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB102_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB102_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB102_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB102_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB102_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB102_877:                            # %if.end4066
                                        #   in Loop: Header=BB102_853 Depth=3
	jmp	.LBB102_878
.LBB102_878:                            # %if.end4067
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$2, -124(%rbp)
	jge	.LBB102_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB102_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB102_880:                            # %if.end4072
                                        #   in Loop: Header=BB102_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB102_881:                            # %if.end4074
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB102_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB102_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB102_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB102_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB102_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB102_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB102_887:                            # %if.end4092
                                        #   in Loop: Header=BB102_853 Depth=3
	jmp	.LBB102_888
.LBB102_888:                            # %if.end4093
                                        #   in Loop: Header=BB102_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB102_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB102_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB102_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB102_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB102_902
.LBB102_893:                            # %if.else4110
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB102_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB102_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB102_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB102_901
.LBB102_897:                            # %if.else4120
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB102_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB102_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB102_900:                            # %if.end4128
                                        #   in Loop: Header=BB102_853 Depth=3
	jmp	.LBB102_901
.LBB102_901:                            # %if.end4129
                                        #   in Loop: Header=BB102_853 Depth=3
	jmp	.LBB102_902
.LBB102_902:                            # %if.end4130
                                        #   in Loop: Header=BB102_853 Depth=3
	jmp	.LBB102_903
.LBB102_903:                            # %if.end4131
                                        #   in Loop: Header=BB102_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB102_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB102_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB102_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB102_947
.LBB102_907:                            # %if.then4146
                                        #   in Loop: Header=BB102_853 Depth=3
	jmp	.LBB102_908
.LBB102_908:                            # %while.body
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_835 Depth=2
                                        #       Parent Loop BB102_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_911 Depth 5
                                        #             Child Loop BB102_913 Depth 6
                                        #           Child Loop BB102_920 Depth 5
                                        #             Child Loop BB102_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB102_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB102_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB102_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB102_908 Depth=4
	movl	$0, -20(%rbp)
.LBB102_911:                            # %for.cond4153
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_835 Depth=2
                                        #       Parent Loop BB102_853 Depth=3
                                        #         Parent Loop BB102_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB102_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB102_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB102_911 Depth=5
	movl	$0, -24(%rbp)
.LBB102_913:                            # %for.cond4157
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_835 Depth=2
                                        #       Parent Loop BB102_853 Depth=3
                                        #         Parent Loop BB102_908 Depth=4
                                        #           Parent Loop BB102_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB102_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB102_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB102_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_913
.LBB102_916:                            # %for.end4182
                                        #   in Loop: Header=BB102_911 Depth=5
	jmp	.LBB102_917
.LBB102_917:                            # %for.inc4183
                                        #   in Loop: Header=BB102_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_911
.LBB102_918:                            # %for.end4185
                                        #   in Loop: Header=BB102_908 Depth=4
	jmp	.LBB102_928
.LBB102_919:                            # %if.else4186
                                        #   in Loop: Header=BB102_908 Depth=4
	movl	$0, -20(%rbp)
.LBB102_920:                            # %for.cond4187
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_835 Depth=2
                                        #       Parent Loop BB102_853 Depth=3
                                        #         Parent Loop BB102_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB102_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB102_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB102_920 Depth=5
	movl	$0, -24(%rbp)
.LBB102_922:                            # %for.cond4191
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_835 Depth=2
                                        #       Parent Loop BB102_853 Depth=3
                                        #         Parent Loop BB102_908 Depth=4
                                        #           Parent Loop BB102_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB102_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB102_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB102_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_922
.LBB102_925:                            # %for.end4215
                                        #   in Loop: Header=BB102_920 Depth=5
	jmp	.LBB102_926
.LBB102_926:                            # %for.inc4216
                                        #   in Loop: Header=BB102_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_920
.LBB102_927:                            # %for.end4218
                                        #   in Loop: Header=BB102_908 Depth=4
	jmp	.LBB102_928
.LBB102_928:                            # %if.end4219
                                        #   in Loop: Header=BB102_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB102_929:                            # %if.end4220
                                        #   in Loop: Header=BB102_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB102_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB102_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB102_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB102_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB102_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB102_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB102_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB102_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB102_934:                            # %while.body.backedge
                                        #   in Loop: Header=BB102_908 Depth=4
	jmp	.LBB102_908
.LBB102_935:                            # %if.else4236
                                        #   in Loop: Header=BB102_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB102_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB102_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB102_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB102_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB102_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB102_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB102_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB102_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB102_934
.LBB102_940:                            # %if.else4250
                                        #   in Loop: Header=BB102_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB102_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB102_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB102_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB102_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB102_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB102_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB102_934
.LBB102_944:                            # %if.else4262
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB102_946
.LBB102_945:                            # %if.else4264
                                        #   in Loop: Header=BB102_853 Depth=3
	jmp	.LBB102_946
.LBB102_946:                            # %while.end
                                        #   in Loop: Header=BB102_853 Depth=3
	jmp	.LBB102_947
.LBB102_947:                            # %if.end4265
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB102_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB102_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB102_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB102_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB102_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB102_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB102_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB102_853 Depth=3
	movl	$0, -20(%rbp)
.LBB102_955:                            # %for.cond4288
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_835 Depth=2
                                        #       Parent Loop BB102_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB102_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB102_955 Depth=4
	movl	$0, -24(%rbp)
.LBB102_957:                            # %for.cond4292
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_835 Depth=2
                                        #       Parent Loop BB102_853 Depth=3
                                        #         Parent Loop BB102_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB102_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB102_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB102_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_957
.LBB102_960:                            # %for.end4316
                                        #   in Loop: Header=BB102_955 Depth=4
	jmp	.LBB102_961
.LBB102_961:                            # %for.inc4317
                                        #   in Loop: Header=BB102_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_955
.LBB102_962:                            # %for.end4319
                                        #   in Loop: Header=BB102_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB102_963:                            # %if.end4320
                                        #   in Loop: Header=BB102_853 Depth=3
	jmp	.LBB102_964
.LBB102_964:                            # %if.end4321
                                        #   in Loop: Header=BB102_853 Depth=3
	jmp	.LBB102_965
.LBB102_965:                            # %if.end4322
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB102_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB102_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB102_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB102_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB102_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB102_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB102_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB102_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB102_972:                            # %if.end4356
                                        #   in Loop: Header=BB102_853 Depth=3
	jmp	.LBB102_973
.LBB102_973:                            # %if.end4357
                                        #   in Loop: Header=BB102_853 Depth=3
	jmp	.LBB102_974
.LBB102_974:                            # %for.inc4358
                                        #   in Loop: Header=BB102_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB102_853
.LBB102_975:                            # %for.end4360
                                        #   in Loop: Header=BB102_835 Depth=2
	jmp	.LBB102_976
.LBB102_976:                            # %for.inc4361
                                        #   in Loop: Header=BB102_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB102_835
.LBB102_977:                            # %for.end4364
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_1082
.LBB102_978:                            # %if.else4365
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB102_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB102_980:                            # %if.end4371
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB102_981:                            # %for.cond4372
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_1014 Depth 3
                                        #         Child Loop BB102_1017 Depth 4
                                        #           Child Loop BB102_1019 Depth 5
                                        #         Child Loop BB102_1026 Depth 4
                                        #           Child Loop BB102_1028 Depth 5
                                        #       Child Loop BB102_1061 Depth 3
                                        #         Child Loop BB102_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB102_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB102_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB102_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB102_981 Depth=2
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB102_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB102_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB102_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB102_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB102_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB102_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB102_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB102_990:                            # %if.end4407
                                        #   in Loop: Header=BB102_981 Depth=2
	jmp	.LBB102_991
.LBB102_991:                            # %if.end4408
                                        #   in Loop: Header=BB102_981 Depth=2
	cmpl	$2, -124(%rbp)
	jge	.LBB102_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB102_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB102_993:                            # %if.end4413
                                        #   in Loop: Header=BB102_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB102_994:                            # %if.end4415
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB102_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB102_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB102_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB102_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB102_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB102_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB102_1008
.LBB102_999:                            # %if.else4433
                                        #   in Loop: Header=BB102_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB102_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB102_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB102_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB102_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB102_1007
.LBB102_1003:                           # %if.else4443
                                        #   in Loop: Header=BB102_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB102_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB102_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB102_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB102_1006:                           # %if.end4451
                                        #   in Loop: Header=BB102_981 Depth=2
	jmp	.LBB102_1007
.LBB102_1007:                           # %if.end4452
                                        #   in Loop: Header=BB102_981 Depth=2
	jmp	.LBB102_1008
.LBB102_1008:                           # %if.end4453
                                        #   in Loop: Header=BB102_981 Depth=2
	jmp	.LBB102_1009
.LBB102_1009:                           # %if.end4454
                                        #   in Loop: Header=BB102_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB102_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB102_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB102_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB102_1053
.LBB102_1013:                           # %if.then4470
                                        #   in Loop: Header=BB102_981 Depth=2
	jmp	.LBB102_1014
.LBB102_1014:                           # %while.body4471
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_1017 Depth 4
                                        #           Child Loop BB102_1019 Depth 5
                                        #         Child Loop BB102_1026 Depth 4
                                        #           Child Loop BB102_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB102_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB102_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB102_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB102_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB102_1017:                           # %for.cond4478
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_981 Depth=2
                                        #       Parent Loop BB102_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB102_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB102_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB102_1019:                           # %for.cond4482
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_981 Depth=2
                                        #       Parent Loop BB102_1014 Depth=3
                                        #         Parent Loop BB102_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB102_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB102_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB102_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1019
.LBB102_1022:                           # %for.end4507
                                        #   in Loop: Header=BB102_1017 Depth=4
	jmp	.LBB102_1023
.LBB102_1023:                           # %for.inc4508
                                        #   in Loop: Header=BB102_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1017
.LBB102_1024:                           # %for.end4510
                                        #   in Loop: Header=BB102_1014 Depth=3
	jmp	.LBB102_1034
.LBB102_1025:                           # %if.else4511
                                        #   in Loop: Header=BB102_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB102_1026:                           # %for.cond4512
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_981 Depth=2
                                        #       Parent Loop BB102_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB102_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB102_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB102_1028:                           # %for.cond4516
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_981 Depth=2
                                        #       Parent Loop BB102_1014 Depth=3
                                        #         Parent Loop BB102_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB102_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB102_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB102_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1028
.LBB102_1031:                           # %for.end4540
                                        #   in Loop: Header=BB102_1026 Depth=4
	jmp	.LBB102_1032
.LBB102_1032:                           # %for.inc4541
                                        #   in Loop: Header=BB102_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1026
.LBB102_1033:                           # %for.end4543
                                        #   in Loop: Header=BB102_1014 Depth=3
	jmp	.LBB102_1034
.LBB102_1034:                           # %if.end4544
                                        #   in Loop: Header=BB102_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB102_1035:                           # %if.end4545
                                        #   in Loop: Header=BB102_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB102_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB102_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB102_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB102_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB102_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB102_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB102_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB102_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB102_1040:                           # %while.body4471.backedge
                                        #   in Loop: Header=BB102_1014 Depth=3
	jmp	.LBB102_1014
.LBB102_1041:                           # %if.else4561
                                        #   in Loop: Header=BB102_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB102_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB102_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB102_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB102_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB102_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB102_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB102_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB102_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB102_1040
.LBB102_1046:                           # %if.else4575
                                        #   in Loop: Header=BB102_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB102_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB102_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB102_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB102_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB102_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB102_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB102_1040
.LBB102_1050:                           # %if.else4587
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB102_1052
.LBB102_1051:                           # %if.else4589
                                        #   in Loop: Header=BB102_981 Depth=2
	jmp	.LBB102_1052
.LBB102_1052:                           # %while.end4590
                                        #   in Loop: Header=BB102_981 Depth=2
	jmp	.LBB102_1053
.LBB102_1053:                           # %if.end4591
                                        #   in Loop: Header=BB102_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB102_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB102_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB102_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB102_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB102_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB102_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB102_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB102_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB102_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB102_981 Depth=2
	movl	$0, -20(%rbp)
.LBB102_1061:                           # %for.cond4615
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB102_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB102_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB102_1063:                           # %for.cond4619
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_981 Depth=2
                                        #       Parent Loop BB102_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB102_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB102_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB102_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1063
.LBB102_1066:                           # %for.end4643
                                        #   in Loop: Header=BB102_1061 Depth=3
	jmp	.LBB102_1067
.LBB102_1067:                           # %for.inc4644
                                        #   in Loop: Header=BB102_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1061
.LBB102_1068:                           # %for.end4646
                                        #   in Loop: Header=BB102_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB102_1069:                           # %if.end4647
                                        #   in Loop: Header=BB102_981 Depth=2
	jmp	.LBB102_1070
.LBB102_1070:                           # %if.end4648
                                        #   in Loop: Header=BB102_981 Depth=2
	jmp	.LBB102_1071
.LBB102_1071:                           # %if.end4649
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB102_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB102_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB102_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB102_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB102_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB102_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB102_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB102_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB102_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB102_1078:                           # %if.end4683
                                        #   in Loop: Header=BB102_981 Depth=2
	jmp	.LBB102_1079
.LBB102_1079:                           # %if.end4684
                                        #   in Loop: Header=BB102_981 Depth=2
	jmp	.LBB102_1080
.LBB102_1080:                           # %for.inc4685
                                        #   in Loop: Header=BB102_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB102_981
.LBB102_1081:                           # %for.end4687
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_1082
.LBB102_1082:                           # %if.end4688
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_1284
.LBB102_1083:                           # %if.else4689
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -308(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB102_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB102_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB102_1085:                           # %if.end4695
                                        #   in Loop: Header=BB102_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB102_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB102_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB102_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB102_171 Depth=1
	cmpl	$0, -252(%rbp)
	je	.LBB102_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB102_1090
	jmp	.LBB102_1089
.LBB102_1089:                           # %if.then4702
                                        #   in Loop: Header=BB102_171 Depth=1
	subl	$2, %eax
	je	.LBB102_1097
	jmp	.LBB102_1098
.LBB102_1090:                           # %sw.bb4704
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB102_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB102_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB102_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB102_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB102_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB102_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB102_1095
.LBB102_1094:                           # %if.then4716
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB102_1096
.LBB102_1095:                           # %if.else4717
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB102_1096:                           # %if.end4718
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_1099
.LBB102_1097:                           # %sw.bb4719
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB102_1099
.LBB102_1098:                           # %sw.default4720
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB102_1099:                           # %sw.epilog4721
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_1101
.LBB102_1100:                           # %if.else4722
                                        #   in Loop: Header=BB102_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB102_1101:                           # %if.end4724
                                        #   in Loop: Header=BB102_171 Depth=1
	vmovsd	.LCPI102_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI102_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB102_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB102_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB102_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB102_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB102_1110
.LBB102_1106:                           # %if.else4743
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB102_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB102_1109
.LBB102_1108:                           # %if.else4748
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB102_1109:                           # %if.end4750
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_1110
.LBB102_1110:                           # %if.end4751
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_1112
.LBB102_1111:                           # %if.else4752
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB102_1112:                           # %if.end4754
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$0, -20(%rbp)
.LBB102_1113:                           # %for.cond4755
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB102_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB102_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB102_1115:                           # %for.cond4759
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB102_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB102_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB102_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1115
.LBB102_1118:                           # %for.end4785
                                        #   in Loop: Header=BB102_1113 Depth=2
	jmp	.LBB102_1119
.LBB102_1119:                           # %for.inc4786
                                        #   in Loop: Header=BB102_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1113
.LBB102_1120:                           # %for.end4788
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB102_1122
.LBB102_1121:                           # %if.else4789
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-308(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB102_1122:                           # %if.end4792
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_1123
.LBB102_1123:                           # %if.end4793
                                        #   in Loop: Header=BB102_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB102_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -188(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB102_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB102_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$0, -20(%rbp)
.LBB102_1127:                           # %for.cond4806
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_1129 Depth 3
                                        #         Child Loop BB102_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB102_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB102_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB102_1129:                           # %for.cond4810
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB102_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB102_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB102_1131:                           # %for.cond4814
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_1127 Depth=2
                                        #       Parent Loop BB102_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB102_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB102_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB102_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB102_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB102_1134:                           # %if.end4826
                                        #   in Loop: Header=BB102_1131 Depth=4
	jmp	.LBB102_1135
.LBB102_1135:                           # %for.inc4827
                                        #   in Loop: Header=BB102_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB102_1131
.LBB102_1136:                           # %for.end4829
                                        #   in Loop: Header=BB102_1129 Depth=3
	jmp	.LBB102_1137
.LBB102_1137:                           # %for.inc4830
                                        #   in Loop: Header=BB102_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1129
.LBB102_1138:                           # %for.end4832
                                        #   in Loop: Header=BB102_1127 Depth=2
	jmp	.LBB102_1139
.LBB102_1139:                           # %for.inc4833
                                        #   in Loop: Header=BB102_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1127
.LBB102_1140:                           # %for.end4835
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-188(%rbp), %eax
	movl	%eax, -188(%rbp)
	movl	$0, -24(%rbp)
.LBB102_1141:                           # %for.cond4840
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB102_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB102_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB102_1143:                           # %for.cond4844
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB102_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB102_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB102_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1143
.LBB102_1146:                           # %for.end4877
                                        #   in Loop: Header=BB102_1141 Depth=2
	jmp	.LBB102_1147
.LBB102_1147:                           # %for.inc4878
                                        #   in Loop: Header=BB102_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1141
.LBB102_1148:                           # %for.end4880
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_1149
.LBB102_1149:                           # %if.end4881
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-188(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB102_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB102_1151:                           # %if.end4889
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$0, -24(%rbp)
.LBB102_1152:                           # %for.cond4890
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB102_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB102_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB102_1154:                           # %for.cond4894
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB102_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB102_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB102_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1154
.LBB102_1157:                           # %for.end4913
                                        #   in Loop: Header=BB102_1152 Depth=2
	jmp	.LBB102_1158
.LBB102_1158:                           # %for.inc4914
                                        #   in Loop: Header=BB102_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1152
.LBB102_1159:                           # %for.end4916
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$0, -20(%rbp)
.LBB102_1160:                           # %for.cond4917
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB102_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB102_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB102_1162:                           # %for.cond4921
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB102_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB102_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB102_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1162
.LBB102_1165:                           # %for.end4947
                                        #   in Loop: Header=BB102_1160 Depth=2
	jmp	.LBB102_1166
.LBB102_1166:                           # %for.inc4948
                                        #   in Loop: Header=BB102_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1160
.LBB102_1167:                           # %for.end4950
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	jmp	.LBB102_1169
.LBB102_1168:                           # %if.else4952
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB102_1169:                           # %if.end4954
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_1170
.LBB102_1170:                           # %if.end4955
                                        #   in Loop: Header=BB102_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB102_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -188(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB102_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB102_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$0, -20(%rbp)
.LBB102_1174:                           # %for.cond4968
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_1176 Depth 3
                                        #         Child Loop BB102_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB102_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB102_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB102_1176:                           # %for.cond4972
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB102_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB102_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB102_1178:                           # %for.cond4976
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_1174 Depth=2
                                        #       Parent Loop BB102_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB102_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB102_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB102_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB102_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB102_1181:                           # %if.end4988
                                        #   in Loop: Header=BB102_1178 Depth=4
	jmp	.LBB102_1182
.LBB102_1182:                           # %for.inc4989
                                        #   in Loop: Header=BB102_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB102_1178
.LBB102_1183:                           # %for.end4991
                                        #   in Loop: Header=BB102_1176 Depth=3
	jmp	.LBB102_1184
.LBB102_1184:                           # %for.inc4992
                                        #   in Loop: Header=BB102_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1176
.LBB102_1185:                           # %for.end4994
                                        #   in Loop: Header=BB102_1174 Depth=2
	jmp	.LBB102_1186
.LBB102_1186:                           # %for.inc4995
                                        #   in Loop: Header=BB102_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1174
.LBB102_1187:                           # %for.end4997
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-188(%rbp), %eax
	movl	%eax, -188(%rbp)
.LBB102_1188:                           # %if.end5002
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-188(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB102_1189:                           # %for.cond5004
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB102_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB102_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB102_1191:                           # %for.cond5008
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB102_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB102_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB102_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1191
.LBB102_1194:                           # %for.end5034
                                        #   in Loop: Header=BB102_1189 Depth=2
	jmp	.LBB102_1195
.LBB102_1195:                           # %for.inc5035
                                        #   in Loop: Header=BB102_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1189
.LBB102_1196:                           # %for.end5037
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	jmp	.LBB102_1198
.LBB102_1197:                           # %if.else5039
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB102_1198:                           # %if.end5043
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_1199
.LBB102_1199:                           # %if.end5044
                                        #   in Loop: Header=BB102_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB102_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-128(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB102_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$0, -20(%rbp)
.LBB102_1202:                           # %for.cond5053
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB102_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB102_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB102_1204:                           # %for.cond5057
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB102_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB102_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB102_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1204
.LBB102_1207:                           # %for.end5084
                                        #   in Loop: Header=BB102_1202 Depth=2
	jmp	.LBB102_1208
.LBB102_1208:                           # %for.inc5085
                                        #   in Loop: Header=BB102_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1202
.LBB102_1209:                           # %for.end5087
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB102_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$0, -24(%rbp)
.LBB102_1211:                           # %for.cond5091
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB102_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB102_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB102_1213:                           # %for.cond5095
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB102_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB102_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -224(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -212(%rbp)
	movl	-212(%rbp), %eax
	subl	-176(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-176(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -256(%rbp)
	movl	-224(%rbp), %eax
	subl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB102_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1213
.LBB102_1216:                           # %for.end5194
                                        #   in Loop: Header=BB102_1211 Depth=2
	jmp	.LBB102_1217
.LBB102_1217:                           # %for.inc5195
                                        #   in Loop: Header=BB102_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1211
.LBB102_1218:                           # %for.end5197
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_1219
.LBB102_1219:                           # %if.end5198
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$10, best_mode
	movl	-128(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB102_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	$0, -24(%rbp)
.LBB102_1221:                           # %for.cond5204
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB102_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB102_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB102_1223:                           # %for.cond5208
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB102_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB102_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB102_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1223
.LBB102_1226:                           # %for.end5232
                                        #   in Loop: Header=BB102_1221 Depth=2
	jmp	.LBB102_1227
.LBB102_1227:                           # %for.inc5233
                                        #   in Loop: Header=BB102_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1221
.LBB102_1228:                           # %for.end5235
                                        #   in Loop: Header=BB102_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB102_1229:                           # %for.cond5237
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB102_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB102_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB102_1231:                           # %for.cond5241
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB102_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB102_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB102_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1231
.LBB102_1234:                           # %for.end5265
                                        #   in Loop: Header=BB102_1229 Depth=2
	jmp	.LBB102_1235
.LBB102_1235:                           # %for.inc5266
                                        #   in Loop: Header=BB102_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1229
.LBB102_1236:                           # %for.end5268
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB102_1237:                           # %for.cond5270
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB102_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB102_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB102_1239:                           # %for.cond5274
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB102_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB102_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB102_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1239
.LBB102_1242:                           # %for.end5289
                                        #   in Loop: Header=BB102_1237 Depth=2
	jmp	.LBB102_1243
.LBB102_1243:                           # %for.inc5290
                                        #   in Loop: Header=BB102_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1237
.LBB102_1244:                           # %for.end5292
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB102_1245:                           # %for.cond5296
                                        #   Parent Loop BB102_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB102_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB102_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB102_1247:                           # %for.cond5300
                                        #   Parent Loop BB102_171 Depth=1
                                        #     Parent Loop BB102_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB102_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB102_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -256(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-256(%rbp), %ecx
	movl	%ecx, -224(%rbp)
	movl	-256(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -176(%rbp)
	movl	-176(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -212(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-176(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB102_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB102_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB102_1251
.LBB102_1250:                           # %cond.false5344
                                        #   in Loop: Header=BB102_1247 Depth=3
	movl	-176(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB102_1251:                           # %cond.end5356
                                        #   in Loop: Header=BB102_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB102_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB102_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB102_1257
.LBB102_1253:                           # %cond.false5362
                                        #   in Loop: Header=BB102_1247 Depth=3
	xorl	%eax, %eax
	movl	-176(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB102_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB102_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB102_1256
.LBB102_1255:                           # %cond.false5377
                                        #   in Loop: Header=BB102_1247 Depth=3
	movl	-176(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB102_1256:                           # %cond.end5389
                                        #   in Loop: Header=BB102_1247 Depth=3
.LBB102_1257:                           # %cond.end5391
                                        #   in Loop: Header=BB102_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-224(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-128(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB102_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB102_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB102_1260
.LBB102_1259:                           # %cond.false5416
                                        #   in Loop: Header=BB102_1247 Depth=3
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB102_1260:                           # %cond.end5426
                                        #   in Loop: Header=BB102_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB102_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB102_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_1266
.LBB102_1262:                           # %cond.false5432
                                        #   in Loop: Header=BB102_1247 Depth=3
	xorl	%eax, %eax
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB102_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB102_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB102_1265
.LBB102_1264:                           # %cond.false5445
                                        #   in Loop: Header=BB102_1247 Depth=3
	movl	-224(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB102_1265:                           # %cond.end5455
                                        #   in Loop: Header=BB102_1247 Depth=3
.LBB102_1266:                           # %cond.end5457
                                        #   in Loop: Header=BB102_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-212(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB102_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB102_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB102_1269
.LBB102_1268:                           # %cond.false5484
                                        #   in Loop: Header=BB102_1247 Depth=3
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB102_1269:                           # %cond.end5496
                                        #   in Loop: Header=BB102_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB102_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB102_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB102_1275
.LBB102_1271:                           # %cond.false5502
                                        #   in Loop: Header=BB102_1247 Depth=3
	xorl	%eax, %eax
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB102_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB102_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB102_1274
.LBB102_1273:                           # %cond.false5517
                                        #   in Loop: Header=BB102_1247 Depth=3
	movl	-212(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB102_1274:                           # %cond.end5529
                                        #   in Loop: Header=BB102_1247 Depth=3
.LBB102_1275:                           # %cond.end5531
                                        #   in Loop: Header=BB102_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB102_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1247
.LBB102_1277:                           # %for.end5546
                                        #   in Loop: Header=BB102_1245 Depth=2
	jmp	.LBB102_1278
.LBB102_1278:                           # %for.inc5547
                                        #   in Loop: Header=BB102_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1245
.LBB102_1279:                           # %for.end5549
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_1280
.LBB102_1280:                           # %if.end5550
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_1282
.LBB102_1281:                           # %if.else5551
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-308(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB102_1282:                           # %if.end5554
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_1283
.LBB102_1283:                           # %if.end5555
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_1284
.LBB102_1284:                           # %if.end5556
                                        #   in Loop: Header=BB102_171 Depth=1
	cmpl	$0, -264(%rbp)
	jne	.LBB102_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB102_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB102_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB102_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB102_1288:                           # %lor.end5571
                                        #   in Loop: Header=BB102_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -260(%rbp)
.LBB102_1289:                           # %if.end5574
                                        #   in Loop: Header=BB102_171 Depth=1
	jmp	.LBB102_1290
.LBB102_1290:                           # %for.inc5575
                                        #   in Loop: Header=BB102_171 Depth=1
	movl	-264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -264(%rbp)
	jmp	.LBB102_171
.LBB102_1291:                           # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB102_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB102_1295
.LBB102_1294:                           # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB102_1299
.LBB102_1295:                           # %if.else5587
	cmpl	$0, cbp
	jne	.LBB102_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB102_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB102_1298:                           # %if.end5597
	jmp	.LBB102_1299
.LBB102_1299:                           # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB102_1395
.LBB102_1300:                           # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB102_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB102_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB102_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB102_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB102_1305:                           # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB102_1306:                           # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB102_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB102_1308:                           # %for.cond5623
                                        #   Parent Loop BB102_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB102_1308 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB102_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB102_1308
.LBB102_1311:                           # %for.end5639
                                        #   in Loop: Header=BB102_1306 Depth=1
	jmp	.LBB102_1312
.LBB102_1312:                           # %for.inc5640
                                        #   in Loop: Header=BB102_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1306
.LBB102_1313:                           # %for.end5642
	jmp	.LBB102_1370
.LBB102_1314:                           # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB102_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB102_1316:                           # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB102_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB102_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB102_1318:                           # %for.cond5651
                                        #   Parent Loop BB102_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB102_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB102_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB102_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB102_1318
.LBB102_1321:                           # %for.end5680
                                        #   in Loop: Header=BB102_1316 Depth=1
	jmp	.LBB102_1322
.LBB102_1322:                           # %for.inc5681
                                        #   in Loop: Header=BB102_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1316
.LBB102_1323:                           # %for.end5683
	movl	$0, -24(%rbp)
.LBB102_1324:                           # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB102_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB102_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB102_1326:                           # %for.cond5688
                                        #   Parent Loop BB102_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB102_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB102_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB102_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1326
.LBB102_1329:                           # %for.end5707
                                        #   in Loop: Header=BB102_1324 Depth=1
	jmp	.LBB102_1330
.LBB102_1330:                           # %for.inc5708
                                        #   in Loop: Header=BB102_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1324
.LBB102_1331:                           # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB102_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB102_1333:                           # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB102_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB102_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB102_1335:                           # %for.cond5718
                                        #   Parent Loop BB102_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB102_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB102_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB102_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1335
.LBB102_1338:                           # %for.end5752
                                        #   in Loop: Header=BB102_1333 Depth=1
	jmp	.LBB102_1339
.LBB102_1339:                           # %for.inc5753
                                        #   in Loop: Header=BB102_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1333
.LBB102_1340:                           # %for.end5755
	jmp	.LBB102_1341
.LBB102_1341:                           # %if.end5756
	jmp	.LBB102_1342
.LBB102_1342:                           # %if.end5757
	cmpl	$9, best_mode
	je	.LBB102_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB102_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB102_1345:                           # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB102_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB102_1347:                           # %for.cond5772
                                        #   Parent Loop BB102_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB102_1347 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB102_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB102_1347
.LBB102_1350:                           # %for.end5788
                                        #   in Loop: Header=BB102_1345 Depth=1
	jmp	.LBB102_1351
.LBB102_1351:                           # %for.inc5789
                                        #   in Loop: Header=BB102_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1345
.LBB102_1352:                           # %for.end5791
	cmpl	$10, best_mode
	je	.LBB102_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB102_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB102_1356
# %bb.1355:                             # %if.then5800
	movl	-316(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB102_1356:                           # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB102_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB102_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB102_1359:                           # %if.end5811
	movl	$0, -20(%rbp)
.LBB102_1360:                           # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB102_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB102_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB102_1362:                           # %for.cond5816
                                        #   Parent Loop BB102_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB102_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB102_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB102_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_1362
.LBB102_1365:                           # %for.end5842
                                        #   in Loop: Header=BB102_1360 Depth=1
	jmp	.LBB102_1366
.LBB102_1366:                           # %for.inc5843
                                        #   in Loop: Header=BB102_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_1360
.LBB102_1367:                           # %for.end5845
	jmp	.LBB102_1368
.LBB102_1368:                           # %if.end5846
	jmp	.LBB102_1369
.LBB102_1369:                           # %if.end5847
	jmp	.LBB102_1370
.LBB102_1370:                           # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB102_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB102_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB102_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB102_1374:                           # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB102_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB102_1376:                           # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -284(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB102_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB102_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB102_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB102_1382
.LBB102_1380:                           # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB102_1382
# %bb.1381:                             # %if.then5884
	leaq	-284(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB102_1382:                           # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB102_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-128(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB102_1384:                           # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB102_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB102_1392
.LBB102_1386:                           # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB102_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB102_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB102_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB102_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB102_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB102_1392:                           # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB102_1394:                           # %if.end5973
	jmp	.LBB102_1395
.LBB102_1395:                           # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB102_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB102_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB102_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB102_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB102_1401
.LBB102_1400:                           # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB102_1402
.LBB102_1401:                           # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB102_1402:                           # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB102_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB102_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB102_1406
.LBB102_1405:                           # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB102_1406:                           # %if.end6019
	jmp	.LBB102_1407
.LBB102_1407:                           # %if.end6020
	jmp	.LBB102_1408
.LBB102_1408:                           # %if.end6021
	jmp	.LBB102_1409
.LBB102_1409:                           # %if.end6022
	jmp	.LBB102_1410
.LBB102_1410:                           # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB102_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-248(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB102_1413
.LBB102_1412:                           # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB102_1413:                           # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB102_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB102_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB102_1420
	jmp	.LBB102_1428
.LBB102_1417:                           # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB102_1428
	jmp	.LBB102_1420
.LBB102_1419:                           # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB102_1420
	jmp	.LBB102_1428
.LBB102_1420:                           # %land.lhs.true6050
	movq	-432(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB102_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB102_1425
	jmp	.LBB102_1428
.LBB102_1422:                           # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_1424
# %bb.1423:                             # %cond.true6058
	movq	-432(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB102_1428
	jmp	.LBB102_1425
.LBB102_1424:                           # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB102_1425
	jmp	.LBB102_1428
.LBB102_1425:                           # %if.then6062
	callq	field_flag_inference
	cmpl	-280(%rbp), %eax
	je	.LBB102_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI102_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB102_1427:                           # %if.end6068
	jmp	.LBB102_1428
.LBB102_1428:                           # %if.end6069
	jmp	.LBB102_1429
.LBB102_1429:                           # %if.end6070
	jmp	.LBB102_1430
.LBB102_1430:                           # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB102_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB102_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB102_1452
.LBB102_1433:                           # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB102_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -260(%rbp)
	jne	.LBB102_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB102_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB102_1437:                           # %lor.end6142
.LBB102_1438:                           # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB102_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB102_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB102_1441:                           # %lor.end6166
.LBB102_1442:                           # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB102_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB102_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB102_1445:                           # %lor.end6191
.LBB102_1446:                           # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB102_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB102_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB102_1449:                           # %lor.end6216
.LBB102_1450:                           # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB102_1451:                           # %if.end6232
	jmp	.LBB102_1452
.LBB102_1452:                           # %if.end6233
	jmp	.LBB102_1464
.LBB102_1453:                           # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB102_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB102_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB102_1456:                           # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB102_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB102_1458:                           # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB102_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB102_1460:                           # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB102_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB102_1462:                           # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB102_1463:                           # %if.end6319
	jmp	.LBB102_1464
.LBB102_1464:                           # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB102_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB102_1466:                           # %if.end6327
	cmpl	$1194076318, -404(%rbp) # imm = 0x472C289E
	jne	.LBB102_1468
.LBB102_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_1468:                           # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_1467
.Lfunc_end102:
	.size	encode_one_macroblock.73, .Lfunc_end102-encode_one_macroblock.73
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.74 # -- Begin function RDCost_for_4x4IntraBlocks.74
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.74,@function
RDCost_for_4x4IntraBlocks.74:           # @RDCost_for_4x4IntraBlocks.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$1649930647, -76(%rbp)  # imm = 0x6257F197
	movq	%rdi, -120(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -152(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -56(%rbp)
	movl	$0, -44(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -48(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-88(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	$0, -72(%rbp)
	movl	-48(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-72(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-120(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB103_10
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB103_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_4 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB103_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB103_4:                              # %for.cond15
                                        #   Parent Loop BB103_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB103_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-68(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-112(%rbp), %rdx
	movl	-80(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB103_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_4
.LBB103_7:                              # %for.end
                                        #   in Loop: Header=BB103_2 Depth=1
	jmp	.LBB103_8
.LBB103_8:                              # %for.inc33
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_2
.LBB103_9:                              # %for.end35
	jmp	.LBB103_10
.LBB103_10:                             # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-56(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB103_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB103_16
.LBB103_12:                             # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB103_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB103_15
.LBB103_14:                             # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB103_15:                             # %cond.end
.LBB103_16:                             # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB103_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB103_18:                             # %if.end50
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB103_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB103_21
.LBB103_20:                             # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB103_21:                             # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB103_23
# %bb.22:                               # %if.then66
	movl	-8(%rbp), %esi
	movl	-20(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_24
.LBB103_23:                             # %if.else69
	movl	-8(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_24:                             # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm0
	vmovsd	-152(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -128(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB103_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -96(%rbp)
	jmp	.LBB103_27
.LBB103_26:                             # %if.else81
	vmovsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -96(%rbp)
.LBB103_27:                             # %return
	vmovsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1649930647, -76(%rbp)  # imm = 0x6257F197
	jne	.LBB103_29
.LBB103_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB103_28
.Lfunc_end103:
	.size	RDCost_for_4x4IntraBlocks.74, .Lfunc_end103-RDCost_for_4x4IntraBlocks.74
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.75    # -- Begin function RestoreMVBlock8x8.75
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.75,@function
RestoreMVBlock8x8.75:                   # @RestoreMVBlock8x8.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1841666859, -68(%rbp)  # imm = 0x6DC59B2B
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -52(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB104_12
# %bb.1:                                # %if.then
	cmpl	$0, -52(%rbp)
	jl	.LBB104_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB104_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB104_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB104_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB104_5:                              # %for.cond7
                                        #   Parent Loop BB104_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB104_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB104_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB104_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_5
.LBB104_8:                              # %for.end
                                        #   in Loop: Header=BB104_3 Depth=1
	jmp	.LBB104_9
.LBB104_9:                              # %for.inc76
                                        #   in Loop: Header=BB104_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_3
.LBB104_10:                             # %for.end78
	jmp	.LBB104_11
.LBB104_11:                             # %if.end
	jmp	.LBB104_46
.LBB104_12:                             # %if.else
	cmpl	$0, -52(%rbp)
	jne	.LBB104_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB104_14:                             # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB104_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB104_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB104_16:                             # %for.cond84
                                        #   Parent Loop BB104_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB104_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB104_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB104_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_16
.LBB104_19:                             # %for.end161
                                        #   in Loop: Header=BB104_14 Depth=1
	jmp	.LBB104_20
.LBB104_20:                             # %for.inc162
                                        #   in Loop: Header=BB104_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_14
.LBB104_21:                             # %for.end164
	jmp	.LBB104_45
.LBB104_22:                             # %if.else165
	cmpl	$1, -52(%rbp)
	jne	.LBB104_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB104_24:                             # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB104_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB104_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB104_26:                             # %for.cond171
                                        #   Parent Loop BB104_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB104_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB104_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB104_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_26
.LBB104_29:                             # %for.end248
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_30
.LBB104_30:                             # %for.inc249
                                        #   in Loop: Header=BB104_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_24
.LBB104_31:                             # %for.end251
	jmp	.LBB104_44
.LBB104_32:                             # %if.else252
	cmpl	$2, -52(%rbp)
	jne	.LBB104_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB104_34:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB104_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB104_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB104_36:                             # %for.cond258
                                        #   Parent Loop BB104_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB104_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB104_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB104_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_36
.LBB104_39:                             # %for.end407
                                        #   in Loop: Header=BB104_34 Depth=1
	jmp	.LBB104_40
.LBB104_40:                             # %for.inc408
                                        #   in Loop: Header=BB104_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_34
.LBB104_41:                             # %for.end410
	jmp	.LBB104_43
.LBB104_42:                             # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB104_43:                             # %if.end412
	jmp	.LBB104_44
.LBB104_44:                             # %if.end413
	jmp	.LBB104_45
.LBB104_45:                             # %if.end414
	jmp	.LBB104_46
.LBB104_46:                             # %if.end415
	cmpl	$1841666859, -68(%rbp)  # imm = 0x6DC59B2B
	jne	.LBB104_48
.LBB104_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_47
.Lfunc_end104:
	.size	RestoreMVBlock8x8.75, .Lfunc_end104-RestoreMVBlock8x8.75
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.76 # -- Begin function set_stored_macroblock_parameters.76
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.76,@function
set_stored_macroblock_parameters.76:    # @set_stored_macroblock_parameters.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1772911092, -52(%rbp)  # imm = 0x69AC79F4
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB105_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB105_4
.LBB105_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB105_4
.LBB105_4:                              # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB105_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB105_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB105_5 Depth=1
	movl	$0, -4(%rbp)
.LBB105_7:                              # %for.cond9
                                        #   Parent Loop BB105_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB105_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB105_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-88(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB105_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB105_10:                             # %if.end
                                        #   in Loop: Header=BB105_7 Depth=2
	jmp	.LBB105_11
.LBB105_11:                             # %for.inc
                                        #   in Loop: Header=BB105_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_7
.LBB105_12:                             # %for.end
                                        #   in Loop: Header=BB105_5 Depth=1
	jmp	.LBB105_13
.LBB105_13:                             # %for.inc33
                                        #   in Loop: Header=BB105_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_5
.LBB105_14:                             # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB105_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB105_16:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB105_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB105_16 Depth=1
	movl	$0, -4(%rbp)
.LBB105_18:                             # %for.cond43
                                        #   Parent Loop BB105_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB105_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB105_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-72(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-72(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB105_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB105_21:                             # %if.end92
                                        #   in Loop: Header=BB105_18 Depth=2
	jmp	.LBB105_22
.LBB105_22:                             # %for.inc93
                                        #   in Loop: Header=BB105_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_18
.LBB105_23:                             # %for.end95
                                        #   in Loop: Header=BB105_16 Depth=1
	jmp	.LBB105_24
.LBB105_24:                             # %for.inc96
                                        #   in Loop: Header=BB105_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_16
.LBB105_25:                             # %for.end98
	jmp	.LBB105_26
.LBB105_26:                             # %if.end99
	movq	cofAC, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-104(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-96(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB105_28:                             # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_30 Depth 2
                                        #       Child Loop BB105_32 Depth 3
                                        #         Child Loop BB105_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB105_28 Depth=1
	movl	$0, -8(%rbp)
.LBB105_30:                             # %for.cond118
                                        #   Parent Loop BB105_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_32 Depth 3
                                        #         Child Loop BB105_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB105_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB105_30 Depth=2
	movl	$0, -12(%rbp)
.LBB105_32:                             # %for.cond122
                                        #   Parent Loop BB105_28 Depth=1
                                        #     Parent Loop BB105_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB105_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB105_32 Depth=3
	movl	$0, -28(%rbp)
.LBB105_34:                             # %for.cond126
                                        #   Parent Loop BB105_28 Depth=1
                                        #     Parent Loop BB105_30 Depth=2
                                        #       Parent Loop BB105_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB105_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB105_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB105_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB105_34
.LBB105_37:                             # %for.end150
                                        #   in Loop: Header=BB105_32 Depth=3
	jmp	.LBB105_38
.LBB105_38:                             # %for.inc151
                                        #   in Loop: Header=BB105_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_32
.LBB105_39:                             # %for.end153
                                        #   in Loop: Header=BB105_30 Depth=2
	jmp	.LBB105_40
.LBB105_40:                             # %for.inc154
                                        #   in Loop: Header=BB105_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_30
.LBB105_41:                             # %for.end156
                                        #   in Loop: Header=BB105_28 Depth=1
	jmp	.LBB105_42
.LBB105_42:                             # %for.inc157
                                        #   in Loop: Header=BB105_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_28
.LBB105_43:                             # %for.end159
	movl	$0, -4(%rbp)
.LBB105_44:                             # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_46 Depth 2
                                        #       Child Loop BB105_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB105_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB105_44 Depth=1
	movl	$0, -12(%rbp)
.LBB105_46:                             # %for.cond164
                                        #   Parent Loop BB105_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB105_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB105_46 Depth=2
	movl	$0, -28(%rbp)
.LBB105_48:                             # %for.cond168
                                        #   Parent Loop BB105_44 Depth=1
                                        #     Parent Loop BB105_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB105_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB105_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB105_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB105_48
.LBB105_51:                             # %for.end188
                                        #   in Loop: Header=BB105_46 Depth=2
	jmp	.LBB105_52
.LBB105_52:                             # %for.inc189
                                        #   in Loop: Header=BB105_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_46
.LBB105_53:                             # %for.end191
                                        #   in Loop: Header=BB105_44 Depth=1
	jmp	.LBB105_54
.LBB105_54:                             # %for.inc192
                                        #   in Loop: Header=BB105_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_44
.LBB105_55:                             # %for.end194
	jmp	.LBB105_56
.LBB105_56:                             # %if.end195
	movl	$0, -4(%rbp)
.LBB105_57:                             # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB105_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB105_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB105_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB105_60:                             # %if.end225
                                        #   in Loop: Header=BB105_57 Depth=1
	jmp	.LBB105_61
.LBB105_61:                             # %for.inc226
                                        #   in Loop: Header=BB105_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_57
.LBB105_62:                             # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB105_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB105_65
.LBB105_64:                             # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB105_65:                             # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB105_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB105_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB105_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB105_69:                             # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB105_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB105_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB105_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB105_74
.LBB105_73:                             # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB105_74:                             # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB105_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB105_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB105_77:                             # %if.end271
	movl	$0, -8(%rbp)
.LBB105_78:                             # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB105_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB105_78 Depth=1
	movl	$0, -4(%rbp)
.LBB105_80:                             # %for.cond276
                                        #   Parent Loop BB105_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB105_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB105_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB105_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB105_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB105_88
.LBB105_85:                             # %if.then299
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB105_87:                             # %if.end345
                                        #   in Loop: Header=BB105_80 Depth=2
	jmp	.LBB105_101
.LBB105_88:                             # %if.else346
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB105_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB105_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB105_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB105_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB105_94
.LBB105_93:                             # %cond.false368
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB105_94:                             # %cond.end369
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	%rax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB105_96:                             # %if.end458
                                        #   in Loop: Header=BB105_80 Depth=2
	jmp	.LBB105_100
.LBB105_97:                             # %if.else459
                                        #   in Loop: Header=BB105_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB105_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB105_99:                             # %if.end578
                                        #   in Loop: Header=BB105_80 Depth=2
	jmp	.LBB105_100
.LBB105_100:                            # %if.end579
                                        #   in Loop: Header=BB105_80 Depth=2
	jmp	.LBB105_101
.LBB105_101:                            # %if.end580
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB105_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB105_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB105_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB105_108
.LBB105_105:                            # %if.then602
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB105_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB105_107:                            # %if.end654
                                        #   in Loop: Header=BB105_80 Depth=2
	jmp	.LBB105_108
.LBB105_108:                            # %if.end655
                                        #   in Loop: Header=BB105_80 Depth=2
	jmp	.LBB105_109
.LBB105_109:                            # %for.inc656
                                        #   in Loop: Header=BB105_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_80
.LBB105_110:                            # %for.end658
                                        #   in Loop: Header=BB105_78 Depth=1
	jmp	.LBB105_111
.LBB105_111:                            # %for.inc659
                                        #   in Loop: Header=BB105_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_78
.LBB105_112:                            # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB105_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB105_114:                            # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB105_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB105_114 Depth=1
	movl	$0, -4(%rbp)
.LBB105_116:                            # %for.cond668
                                        #   Parent Loop BB105_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB105_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB105_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB105_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB105_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB105_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB105_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB105_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB105_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB105_124
.LBB105_121:                            # %if.then693
                                        #   in Loop: Header=BB105_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB105_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB105_123:                            # %if.end745
                                        #   in Loop: Header=BB105_116 Depth=2
	jmp	.LBB105_137
.LBB105_124:                            # %if.else746
                                        #   in Loop: Header=BB105_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB105_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB105_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB105_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB105_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB105_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB105_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB105_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB105_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB105_130
.LBB105_129:                            # %cond.false770
                                        #   in Loop: Header=BB105_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB105_130:                            # %cond.end772
                                        #   in Loop: Header=BB105_116 Depth=2
	movq	%rax, -64(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB105_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB105_132:                            # %if.end862
                                        #   in Loop: Header=BB105_116 Depth=2
	jmp	.LBB105_136
.LBB105_133:                            # %if.else863
                                        #   in Loop: Header=BB105_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB105_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB105_135:                            # %if.end983
                                        #   in Loop: Header=BB105_116 Depth=2
	jmp	.LBB105_136
.LBB105_136:                            # %if.end984
                                        #   in Loop: Header=BB105_116 Depth=2
	jmp	.LBB105_137
.LBB105_137:                            # %if.end985
                                        #   in Loop: Header=BB105_116 Depth=2
	jmp	.LBB105_138
.LBB105_138:                            # %for.inc986
                                        #   in Loop: Header=BB105_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_116
.LBB105_139:                            # %for.end988
                                        #   in Loop: Header=BB105_114 Depth=1
	jmp	.LBB105_140
.LBB105_140:                            # %for.inc989
                                        #   in Loop: Header=BB105_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_114
.LBB105_141:                            # %for.end991
	jmp	.LBB105_142
.LBB105_142:                            # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB105_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB105_144:                            # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB105_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB105_144 Depth=1
	movl	$0, -8(%rbp)
.LBB105_146:                            # %for.cond1002
                                        #   Parent Loop BB105_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB105_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB105_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB105_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_146
.LBB105_149:                            # %for.end1030
                                        #   in Loop: Header=BB105_144 Depth=1
	jmp	.LBB105_150
.LBB105_150:                            # %for.inc1031
                                        #   in Loop: Header=BB105_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_144
.LBB105_151:                            # %for.end1033
	jmp	.LBB105_175
.LBB105_152:                            # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB105_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB105_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB105_155:                            # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB105_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB105_157:                            # %for.cond1049
                                        #   Parent Loop BB105_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB105_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB105_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_157
.LBB105_160:                            # %for.end1065
                                        #   in Loop: Header=BB105_155 Depth=1
	jmp	.LBB105_161
.LBB105_161:                            # %for.inc1066
                                        #   in Loop: Header=BB105_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_155
.LBB105_162:                            # %for.end1068
	jmp	.LBB105_174
.LBB105_163:                            # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB105_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB105_165:                            # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB105_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB105_167:                            # %for.cond1081
                                        #   Parent Loop BB105_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB105_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB105_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_167
.LBB105_170:                            # %for.end1101
                                        #   in Loop: Header=BB105_165 Depth=1
	jmp	.LBB105_171
.LBB105_171:                            # %for.inc1102
                                        #   in Loop: Header=BB105_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_165
.LBB105_172:                            # %for.end1104
	jmp	.LBB105_173
.LBB105_173:                            # %if.end1105
	jmp	.LBB105_174
.LBB105_174:                            # %if.end1106
	jmp	.LBB105_175
.LBB105_175:                            # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB105_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB105_177:                            # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB105_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB105_177 Depth=1
	movl	$0, -8(%rbp)
.LBB105_179:                            # %for.cond1116
                                        #   Parent Loop BB105_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB105_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB105_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB105_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_179
.LBB105_182:                            # %for.end1141
                                        #   in Loop: Header=BB105_177 Depth=1
	jmp	.LBB105_183
.LBB105_183:                            # %for.inc1142
                                        #   in Loop: Header=BB105_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_177
.LBB105_184:                            # %for.end1144
	jmp	.LBB105_185
.LBB105_185:                            # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB105_187:                            # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB105_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB105_189:                            # %for.cond1157
                                        #   Parent Loop BB105_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB105_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB105_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_189
.LBB105_192:                            # %for.end1181
                                        #   in Loop: Header=BB105_187 Depth=1
	jmp	.LBB105_193
.LBB105_193:                            # %for.inc1182
                                        #   in Loop: Header=BB105_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_187
.LBB105_194:                            # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB105_195:                            # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$1772911092, -52(%rbp)  # imm = 0x69AC79F4
	jne	.LBB105_197
.LBB105_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_197:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_196
.Lfunc_end105:
	.size	set_stored_macroblock_parameters.76, .Lfunc_end105-set_stored_macroblock_parameters.76
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.77 # -- Begin function store_macroblock_parameters.77
	.p2align	4, 0x90
	.type	store_macroblock_parameters.77,@function
store_macroblock_parameters.77:         # @store_macroblock_parameters.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$116086803, -36(%rbp)   # imm = 0x6EB5813
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB106_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB106_3
.LBB106_2:                              # %if.else
	movl	$0, bi_pred_me
.LBB106_3:                              # %if.end
	movl	$0, -4(%rbp)
.LBB106_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB106_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB106_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB106_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_4
.LBB106_7:                              # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB106_8:                              # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB106_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB106_10:                             # %for.cond20
                                        #   Parent Loop BB106_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB106_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB106_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_10
.LBB106_13:                             # %for.end39
                                        #   in Loop: Header=BB106_8 Depth=1
	jmp	.LBB106_14
.LBB106_14:                             # %for.inc40
                                        #   in Loop: Header=BB106_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_8
.LBB106_15:                             # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB106_16:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB106_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB106_16 Depth=1
	movl	$0, -8(%rbp)
.LBB106_18:                             # %for.cond47
                                        #   Parent Loop BB106_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB106_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB106_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB106_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_18
.LBB106_21:                             # %for.end70
                                        #   in Loop: Header=BB106_16 Depth=1
	jmp	.LBB106_22
.LBB106_22:                             # %for.inc71
                                        #   in Loop: Header=BB106_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_16
.LBB106_23:                             # %for.end73
	movl	$0, -8(%rbp)
.LBB106_24:                             # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB106_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB106_24 Depth=1
	movl	$0, -4(%rbp)
.LBB106_26:                             # %for.cond78
                                        #   Parent Loop BB106_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB106_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB106_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB106_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_26
.LBB106_29:                             # %for.end94
                                        #   in Loop: Header=BB106_24 Depth=1
	jmp	.LBB106_30
.LBB106_30:                             # %for.inc95
                                        #   in Loop: Header=BB106_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_24
.LBB106_31:                             # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB106_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB106_33:                             # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB106_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB106_33 Depth=1
	movl	$0, -4(%rbp)
.LBB106_35:                             # %for.cond105
                                        #   Parent Loop BB106_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB106_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB106_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB106_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_35
.LBB106_38:                             # %for.end136
                                        #   in Loop: Header=BB106_33 Depth=1
	jmp	.LBB106_39
.LBB106_39:                             # %for.inc137
                                        #   in Loop: Header=BB106_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_33
.LBB106_40:                             # %for.end139
	jmp	.LBB106_41
.LBB106_41:                             # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB106_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB106_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB106_44:                             # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_46 Depth 2
                                        #       Child Loop BB106_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB106_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB106_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB106_46:                             # %for.cond152
                                        #   Parent Loop BB106_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB106_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB106_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB106_48:                             # %for.cond159
                                        #   Parent Loop BB106_44 Depth=1
                                        #     Parent Loop BB106_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB106_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB106_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_48
.LBB106_51:                             # %for.end179
                                        #   in Loop: Header=BB106_46 Depth=2
	jmp	.LBB106_52
.LBB106_52:                             # %for.inc180
                                        #   in Loop: Header=BB106_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_46
.LBB106_53:                             # %for.end182
                                        #   in Loop: Header=BB106_44 Depth=1
	jmp	.LBB106_54
.LBB106_54:                             # %for.inc183
                                        #   in Loop: Header=BB106_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_44
.LBB106_55:                             # %for.end185
	jmp	.LBB106_56
.LBB106_56:                             # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB106_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB106_59
.LBB106_58:                             # %if.then188
	movq	cofAC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB106_60
.LBB106_59:                             # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB106_60:                             # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB106_61:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB106_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB106_61 Depth=1
	movl	$0, -4(%rbp)
.LBB106_63:                             # %for.cond197
                                        #   Parent Loop BB106_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB106_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB106_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB106_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB106_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB106_66:                             # %if.end230
                                        #   in Loop: Header=BB106_63 Depth=2
	jmp	.LBB106_67
.LBB106_67:                             # %for.inc231
                                        #   in Loop: Header=BB106_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_63
.LBB106_68:                             # %for.end233
                                        #   in Loop: Header=BB106_61 Depth=1
	jmp	.LBB106_69
.LBB106_69:                             # %for.inc234
                                        #   in Loop: Header=BB106_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_61
.LBB106_70:                             # %for.end236
	cmpl	$116086803, -36(%rbp)   # imm = 0x6EB5813
	jne	.LBB106_72
.LBB106_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_72:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_71
.Lfunc_end106:
	.size	store_macroblock_parameters.77, .Lfunc_end106-store_macroblock_parameters.77
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.78
.LCPI107_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI107_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.78
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.78,@function
Mode_Decision_for_4x4IntraBlocks.78:    # @Mode_Decision_for_4x4IntraBlocks.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI107_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$26488111, -160(%rbp)   # imm = 0x1942D2F
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -100(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -184(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -180(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB107_8
# %bb.1:                                # %if.then
	cmpl	$0, -208(%rbp)
	je	.LBB107_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB107_4
.LBB107_3:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB107_4
.LBB107_4:                              # %cond.end
	movl	%eax, -208(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB107_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB107_7
.LBB107_6:                              # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB107_7
.LBB107_7:                              # %cond.end31
	movl	%eax, -232(%rbp)
.LBB107_8:                              # %if.end
	cmpl	$0, -232(%rbp)
	je	.LBB107_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB107_11
.LBB107_10:                             # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB107_11
.LBB107_11:                             # %cond.end42
	movl	%eax, -120(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB107_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB107_14
.LBB107_13:                             # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB107_14
.LBB107_14:                             # %cond.end55
	movl	%eax, -112(%rbp)
	cmpl	$0, -120(%rbp)
	jl	.LBB107_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -112(%rbp)
	jge	.LBB107_17
.LBB107_16:                             # %cond.true58
	movl	$2, %eax
	jmp	.LBB107_21
.LBB107_17:                             # %cond.false59
	movl	-120(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB107_19
# %bb.18:                               # %cond.true61
	movl	-120(%rbp), %eax
	jmp	.LBB107_20
.LBB107_19:                             # %cond.false62
	movl	-112(%rbp), %eax
.LBB107_20:                             # %cond.end63
.LBB107_21:                             # %cond.end65
	movl	%eax, -96(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-176(%rbp), %rdx
	leaq	-172(%rbp), %rcx
	leaq	-164(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB107_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_49 Depth 2
                                        #       Child Loop BB107_51 Depth 3
                                        #     Child Loop BB107_64 Depth 2
                                        #       Child Loop BB107_66 Depth 3
                                        #     Child Loop BB107_73 Depth 2
                                        #       Child Loop BB107_75 Depth 3
                                        #     Child Loop BB107_81 Depth 2
                                        #       Child Loop BB107_83 Depth 3
                                        #     Child Loop BB107_91 Depth 2
                                        #       Child Loop BB107_93 Depth 3
                                        #     Child Loop BB107_99 Depth 2
                                        #       Child Loop BB107_101 Depth 3
                                        #     Child Loop BB107_107 Depth 2
                                        #       Child Loop BB107_109 Depth 3
                                        #     Child Loop BB107_115 Depth 2
                                        #       Child Loop BB107_117 Depth 3
                                        #     Child Loop BB107_123 Depth 2
                                        #       Child Loop BB107_125 Depth 3
                                        #     Child Loop BB107_131 Depth 2
                                        #       Child Loop BB107_133 Depth 3
                                        #     Child Loop BB107_166 Depth 2
                                        #       Child Loop BB107_168 Depth 3
                                        #     Child Loop BB107_175 Depth 2
                                        #       Child Loop BB107_177 Depth 3
                                        #     Child Loop BB107_183 Depth 2
                                        #       Child Loop BB107_185 Depth 3
                                        #     Child Loop BB107_191 Depth 2
                                        #       Child Loop BB107_193 Depth 3
                                        #     Child Loop BB107_199 Depth 2
                                        #       Child Loop BB107_201 Depth 3
                                        #         Child Loop BB107_203 Depth 4
                                        #     Child Loop BB107_211 Depth 2
                                        #       Child Loop BB107_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB107_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB107_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB107_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB107_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB107_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB107_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB107_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB107_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB107_28
.LBB107_27:                             # %land.lhs.true
                                        #   in Loop: Header=BB107_22 Depth=1
	cmpl	$0, -172(%rbp)
	movb	$1, %al
	jne	.LBB107_32
.LBB107_28:                             # %lor.lhs.false76
                                        #   in Loop: Header=BB107_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB107_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB107_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB107_31
.LBB107_30:                             # %land.lhs.true80
                                        #   in Loop: Header=BB107_22 Depth=1
	cmpl	$0, -176(%rbp)
	movb	$1, %al
	jne	.LBB107_32
.LBB107_31:                             # %lor.rhs
                                        #   in Loop: Header=BB107_22 Depth=1
	cmpl	$0, -164(%rbp)
	setne	%al
.LBB107_32:                             # %lor.end
                                        #   in Loop: Header=BB107_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -156(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB107_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB107_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB107_46
.LBB107_34:                             # %if.then86
                                        #   in Loop: Header=BB107_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB107_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB107_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB107_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB107_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB107_38
.LBB107_37:                             # %if.then92
                                        #   in Loop: Header=BB107_22 Depth=1
	jmp	.LBB107_223
.LBB107_38:                             # %if.end93
                                        #   in Loop: Header=BB107_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB107_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB107_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB107_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB107_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB107_42
.LBB107_41:                             # %if.then99
                                        #   in Loop: Header=BB107_22 Depth=1
	jmp	.LBB107_223
.LBB107_42:                             # %if.end100
                                        #   in Loop: Header=BB107_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB107_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB107_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB107_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB107_22 Depth=1
	jmp	.LBB107_223
.LBB107_45:                             # %if.end105
                                        #   in Loop: Header=BB107_22 Depth=1
	jmp	.LBB107_46
.LBB107_46:                             # %if.end106
                                        #   in Loop: Header=BB107_22 Depth=1
	cmpl	$0, -156(%rbp)
	je	.LBB107_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB107_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB107_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -108(%rbp)
.LBB107_49:                             # %for.cond111
                                        #   Parent Loop BB107_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB107_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB107_49 Depth=2
	movl	$0, -12(%rbp)
.LBB107_51:                             # %for.cond114
                                        #   Parent Loop BB107_22 Depth=1
                                        #     Parent Loop BB107_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB107_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB107_51 Depth=3
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-108(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB107_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB107_51
.LBB107_54:                             # %for.end
                                        #   in Loop: Header=BB107_49 Depth=2
	jmp	.LBB107_55
.LBB107_55:                             # %for.inc133
                                        #   in Loop: Header=BB107_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_49
.LBB107_56:                             # %for.end135
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jne	.LBB107_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB107_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_59
.LBB107_58:                             # %cond.false139
                                        #   in Loop: Header=BB107_22 Depth=1
	vmovsd	.LCPI107_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-136(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB107_59:                             # %cond.end142
                                        #   in Loop: Header=BB107_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB107_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB107_61:                             # %if.end148
                                        #   in Loop: Header=BB107_22 Depth=1
	jmp	.LBB107_221
.LBB107_62:                             # %if.else
                                        #   in Loop: Header=BB107_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB107_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	$0, -16(%rbp)
.LBB107_64:                             # %for.cond151
                                        #   Parent Loop BB107_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB107_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB107_64 Depth=2
	movl	$0, -12(%rbp)
.LBB107_66:                             # %for.cond155
                                        #   Parent Loop BB107_22 Depth=1
                                        #     Parent Loop BB107_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB107_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB107_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB107_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_66
.LBB107_69:                             # %for.end194
                                        #   in Loop: Header=BB107_64 Depth=2
	jmp	.LBB107_70
.LBB107_70:                             # %for.inc195
                                        #   in Loop: Header=BB107_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_64
.LBB107_71:                             # %for.end197
                                        #   in Loop: Header=BB107_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-96(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB107_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	$0, -16(%rbp)
.LBB107_73:                             # %for.cond202
                                        #   Parent Loop BB107_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB107_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB107_73 Depth=2
	movl	$0, -12(%rbp)
.LBB107_75:                             # %for.cond206
                                        #   Parent Loop BB107_22 Depth=1
                                        #     Parent Loop BB107_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB107_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB107_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB107_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_75
.LBB107_78:                             # %for.end224
                                        #   in Loop: Header=BB107_73 Depth=2
	jmp	.LBB107_79
.LBB107_79:                             # %for.inc225
                                        #   in Loop: Header=BB107_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_73
.LBB107_80:                             # %for.end227
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	$0, -20(%rbp)
.LBB107_81:                             # %for.cond228
                                        #   Parent Loop BB107_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_83 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB107_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB107_81 Depth=2
	movl	$0, -24(%rbp)
.LBB107_83:                             # %for.cond232
                                        #   Parent Loop BB107_22 Depth=1
                                        #     Parent Loop BB107_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB107_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB107_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB107_83 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB107_83
.LBB107_86:                             # %for.end249
                                        #   in Loop: Header=BB107_81 Depth=2
	jmp	.LBB107_87
.LBB107_87:                             # %for.inc250
                                        #   in Loop: Header=BB107_81 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_81
.LBB107_88:                             # %for.end252
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -100(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB107_89:                             # %if.end253
                                        #   in Loop: Header=BB107_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB107_220
.LBB107_90:                             # %if.else254
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	$0, -16(%rbp)
.LBB107_91:                             # %for.cond255
                                        #   Parent Loop BB107_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB107_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB107_91 Depth=2
	movl	$0, -12(%rbp)
.LBB107_93:                             # %for.cond259
                                        #   Parent Loop BB107_22 Depth=1
                                        #     Parent Loop BB107_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB107_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB107_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB107_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_93
.LBB107_96:                             # %for.end345
                                        #   in Loop: Header=BB107_91 Depth=2
	jmp	.LBB107_97
.LBB107_97:                             # %for.inc346
                                        #   in Loop: Header=BB107_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_91
.LBB107_98:                             # %for.end348
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	$0, -16(%rbp)
.LBB107_99:                             # %for.cond349
                                        #   Parent Loop BB107_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB107_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB107_99 Depth=2
	movl	$0, -12(%rbp)
.LBB107_101:                            # %for.cond353
                                        #   Parent Loop BB107_22 Depth=1
                                        #     Parent Loop BB107_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB107_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB107_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB107_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_101
.LBB107_104:                            # %for.end368
                                        #   in Loop: Header=BB107_99 Depth=2
	jmp	.LBB107_105
.LBB107_105:                            # %for.inc369
                                        #   in Loop: Header=BB107_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_99
.LBB107_106:                            # %for.end371
                                        #   in Loop: Header=BB107_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-96(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB107_107:                            # %for.cond374
                                        #   Parent Loop BB107_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB107_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB107_107 Depth=2
	movl	$0, -12(%rbp)
.LBB107_109:                            # %for.cond378
                                        #   Parent Loop BB107_22 Depth=1
                                        #     Parent Loop BB107_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB107_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB107_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB107_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_109
.LBB107_112:                            # %for.end402
                                        #   in Loop: Header=BB107_107 Depth=2
	jmp	.LBB107_113
.LBB107_113:                            # %for.inc403
                                        #   in Loop: Header=BB107_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_107
.LBB107_114:                            # %for.end405
                                        #   in Loop: Header=BB107_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %edi
	addl	$4, %edi
	movl	-32(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB107_115:                            # %for.cond409
                                        #   Parent Loop BB107_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB107_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB107_115 Depth=2
	movl	$0, -12(%rbp)
.LBB107_117:                            # %for.cond413
                                        #   Parent Loop BB107_22 Depth=1
                                        #     Parent Loop BB107_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB107_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB107_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB107_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_117
.LBB107_120:                            # %for.end437
                                        #   in Loop: Header=BB107_115 Depth=2
	jmp	.LBB107_121
.LBB107_121:                            # %for.inc438
                                        #   in Loop: Header=BB107_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_115
.LBB107_122:                            # %for.end440
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	-28(%rbp), %edi
	addl	$8, %edi
	movl	-32(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB107_123:                            # %for.cond444
                                        #   Parent Loop BB107_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB107_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB107_123 Depth=2
	movl	$0, -12(%rbp)
.LBB107_125:                            # %for.cond448
                                        #   Parent Loop BB107_22 Depth=1
                                        #     Parent Loop BB107_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB107_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB107_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB107_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_125
.LBB107_128:                            # %for.end463
                                        #   in Loop: Header=BB107_123 Depth=2
	jmp	.LBB107_129
.LBB107_129:                            # %for.inc464
                                        #   in Loop: Header=BB107_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_123
.LBB107_130:                            # %for.end466
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	$0, -16(%rbp)
.LBB107_131:                            # %for.cond467
                                        #   Parent Loop BB107_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB107_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB107_131 Depth=2
	movl	$0, -12(%rbp)
.LBB107_133:                            # %for.cond471
                                        #   Parent Loop BB107_22 Depth=1
                                        #     Parent Loop BB107_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB107_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB107_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB107_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB107_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB107_137
.LBB107_136:                            # %cond.false516
                                        #   in Loop: Header=BB107_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB107_137:                            # %cond.end529
                                        #   in Loop: Header=BB107_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB107_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB107_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB107_143
.LBB107_139:                            # %cond.false535
                                        #   in Loop: Header=BB107_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB107_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB107_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB107_142
.LBB107_141:                            # %cond.false551
                                        #   in Loop: Header=BB107_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB107_142:                            # %cond.end564
                                        #   in Loop: Header=BB107_133 Depth=3
.LBB107_143:                            # %cond.end566
                                        #   in Loop: Header=BB107_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB107_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB107_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB107_146
.LBB107_145:                            # %cond.false588
                                        #   in Loop: Header=BB107_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB107_146:                            # %cond.end598
                                        #   in Loop: Header=BB107_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB107_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB107_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_152
.LBB107_148:                            # %cond.false604
                                        #   in Loop: Header=BB107_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB107_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB107_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB107_151
.LBB107_150:                            # %cond.false617
                                        #   in Loop: Header=BB107_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB107_151:                            # %cond.end627
                                        #   in Loop: Header=BB107_133 Depth=3
.LBB107_152:                            # %cond.end629
                                        #   in Loop: Header=BB107_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB107_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB107_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB107_155
.LBB107_154:                            # %cond.false655
                                        #   in Loop: Header=BB107_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB107_155:                            # %cond.end668
                                        #   in Loop: Header=BB107_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB107_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB107_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB107_161
.LBB107_157:                            # %cond.false674
                                        #   in Loop: Header=BB107_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB107_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB107_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB107_160
.LBB107_159:                            # %cond.false690
                                        #   in Loop: Header=BB107_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB107_160:                            # %cond.end703
                                        #   in Loop: Header=BB107_133 Depth=3
.LBB107_161:                            # %cond.end705
                                        #   in Loop: Header=BB107_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB107_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_133
.LBB107_163:                            # %for.end718
                                        #   in Loop: Header=BB107_131 Depth=2
	jmp	.LBB107_164
.LBB107_164:                            # %for.inc719
                                        #   in Loop: Header=BB107_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_131
.LBB107_165:                            # %for.end721
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -20(%rbp)
.LBB107_166:                            # %for.cond722
                                        #   Parent Loop BB107_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_168 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB107_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB107_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB107_168:                            # %for.cond726
                                        #   Parent Loop BB107_22 Depth=1
                                        #     Parent Loop BB107_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB107_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB107_168 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB107_168
.LBB107_171:                            # %for.end831
                                        #   in Loop: Header=BB107_166 Depth=2
	jmp	.LBB107_172
.LBB107_172:                            # %for.inc832
                                        #   in Loop: Header=BB107_166 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_166
.LBB107_173:                            # %for.end834
                                        #   in Loop: Header=BB107_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-92(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB107_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	$0, -16(%rbp)
.LBB107_175:                            # %for.cond842
                                        #   Parent Loop BB107_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB107_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB107_175 Depth=2
	movl	$0, -12(%rbp)
.LBB107_177:                            # %for.cond846
                                        #   Parent Loop BB107_22 Depth=1
                                        #     Parent Loop BB107_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB107_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB107_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB107_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_177
.LBB107_180:                            # %for.end865
                                        #   in Loop: Header=BB107_175 Depth=2
	jmp	.LBB107_181
.LBB107_181:                            # %for.inc866
                                        #   in Loop: Header=BB107_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_175
.LBB107_182:                            # %for.end868
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	$0, -16(%rbp)
.LBB107_183:                            # %for.cond869
                                        #   Parent Loop BB107_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB107_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB107_183 Depth=2
	movl	$0, -12(%rbp)
.LBB107_185:                            # %for.cond873
                                        #   Parent Loop BB107_22 Depth=1
                                        #     Parent Loop BB107_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB107_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB107_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB107_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_185
.LBB107_188:                            # %for.end893
                                        #   in Loop: Header=BB107_183 Depth=2
	jmp	.LBB107_189
.LBB107_189:                            # %for.inc894
                                        #   in Loop: Header=BB107_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_183
.LBB107_190:                            # %for.end896
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	$0, -16(%rbp)
.LBB107_191:                            # %for.cond897
                                        #   Parent Loop BB107_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB107_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB107_191 Depth=2
	movl	$0, -12(%rbp)
.LBB107_193:                            # %for.cond901
                                        #   Parent Loop BB107_22 Depth=1
                                        #     Parent Loop BB107_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB107_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB107_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB107_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_193
.LBB107_196:                            # %for.end921
                                        #   in Loop: Header=BB107_191 Depth=2
	jmp	.LBB107_197
.LBB107_197:                            # %for.inc922
                                        #   in Loop: Header=BB107_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_191
.LBB107_198:                            # %for.end924
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	$0, -12(%rbp)
.LBB107_199:                            # %for.cond925
                                        #   Parent Loop BB107_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_201 Depth 3
                                        #         Child Loop BB107_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB107_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB107_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -20(%rbp)
.LBB107_201:                            # %for.cond985
                                        #   Parent Loop BB107_22 Depth=1
                                        #     Parent Loop BB107_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB107_203 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB107_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB107_201 Depth=3
	movl	$0, -24(%rbp)
.LBB107_203:                            # %for.cond989
                                        #   Parent Loop BB107_22 Depth=1
                                        #     Parent Loop BB107_199 Depth=2
                                        #       Parent Loop BB107_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -24(%rbp)
	jge	.LBB107_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB107_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB107_203 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB107_203
.LBB107_206:                            # %for.end1011
                                        #   in Loop: Header=BB107_201 Depth=3
	jmp	.LBB107_207
.LBB107_207:                            # %for.inc1012
                                        #   in Loop: Header=BB107_201 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_201
.LBB107_208:                            # %for.end1014
                                        #   in Loop: Header=BB107_199 Depth=2
	jmp	.LBB107_209
.LBB107_209:                            # %for.inc1015
                                        #   in Loop: Header=BB107_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_199
.LBB107_210:                            # %for.end1017
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	$0, -20(%rbp)
.LBB107_211:                            # %for.cond1018
                                        #   Parent Loop BB107_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_213 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB107_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB107_211 Depth=2
	movl	$0, -24(%rbp)
.LBB107_213:                            # %for.cond1022
                                        #   Parent Loop BB107_22 Depth=1
                                        #     Parent Loop BB107_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB107_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB107_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB107_213 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB107_213
.LBB107_216:                            # %for.end1040
                                        #   in Loop: Header=BB107_211 Depth=2
	jmp	.LBB107_217
.LBB107_217:                            # %for.inc1041
                                        #   in Loop: Header=BB107_211 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_211
.LBB107_218:                            # %for.end1043
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -100(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB107_219:                            # %if.end1044
                                        #   in Loop: Header=BB107_22 Depth=1
	jmp	.LBB107_220
.LBB107_220:                            # %if.end1045
                                        #   in Loop: Header=BB107_22 Depth=1
	jmp	.LBB107_221
.LBB107_221:                            # %if.end1046
                                        #   in Loop: Header=BB107_22 Depth=1
	jmp	.LBB107_222
.LBB107_222:                            # %if.end1047
                                        #   in Loop: Header=BB107_22 Depth=1
	jmp	.LBB107_223
.LBB107_223:                            # %for.inc1048
                                        #   in Loop: Header=BB107_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB107_22
.LBB107_224:                            # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-184(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-180(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB107_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB107_230
.LBB107_226:                            # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB107_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB107_229
.LBB107_228:                            # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB107_229:                            # %cond.end1065
.LBB107_230:                            # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	shll	$2, %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB107_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB107_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB107_233:                            # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB107_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB107_233 Depth=1
	movl	$0, -12(%rbp)
.LBB107_235:                            # %for.cond1087
                                        #   Parent Loop BB107_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB107_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB107_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB107_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_235
.LBB107_238:                            # %for.end1128
                                        #   in Loop: Header=BB107_233 Depth=1
	jmp	.LBB107_239
.LBB107_239:                            # %for.inc1129
                                        #   in Loop: Header=BB107_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_233
.LBB107_240:                            # %for.end1131
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-168(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -100(%rbp)
	jmp	.LBB107_317
.LBB107_241:                            # %if.else1133
	movl	$0, -16(%rbp)
.LBB107_242:                            # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB107_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB107_242 Depth=1
	movl	$0, -12(%rbp)
.LBB107_244:                            # %for.cond1138
                                        #   Parent Loop BB107_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB107_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB107_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB107_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_244
.LBB107_247:                            # %for.end1226
                                        #   in Loop: Header=BB107_242 Depth=1
	jmp	.LBB107_248
.LBB107_248:                            # %for.inc1227
                                        #   in Loop: Header=BB107_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_242
.LBB107_249:                            # %for.end1229
	movl	$0, -16(%rbp)
.LBB107_250:                            # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB107_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB107_250 Depth=1
	movl	$0, -12(%rbp)
.LBB107_252:                            # %for.cond1234
                                        #   Parent Loop BB107_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB107_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB107_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB107_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_252
.LBB107_255:                            # %for.end1249
                                        #   in Loop: Header=BB107_250 Depth=1
	jmp	.LBB107_256
.LBB107_256:                            # %for.inc1250
                                        #   in Loop: Header=BB107_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_250
.LBB107_257:                            # %for.end1252
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-168(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -100(%rbp)
	movl	$0, -16(%rbp)
.LBB107_258:                            # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB107_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB107_258 Depth=1
	movl	$0, -12(%rbp)
.LBB107_260:                            # %for.cond1258
                                        #   Parent Loop BB107_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB107_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB107_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB107_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_260
.LBB107_263:                            # %for.end1282
                                        #   in Loop: Header=BB107_258 Depth=1
	jmp	.LBB107_264
.LBB107_264:                            # %for.inc1283
                                        #   in Loop: Header=BB107_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_258
.LBB107_265:                            # %for.end1285
	movl	-28(%rbp), %esi
	addl	$4, %esi
	movl	-32(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB107_266:                            # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB107_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB107_266 Depth=1
	movl	$0, -12(%rbp)
.LBB107_268:                            # %for.cond1328
                                        #   Parent Loop BB107_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB107_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB107_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB107_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_268
.LBB107_271:                            # %for.end1352
                                        #   in Loop: Header=BB107_266 Depth=1
	jmp	.LBB107_272
.LBB107_272:                            # %for.inc1353
                                        #   in Loop: Header=BB107_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_266
.LBB107_273:                            # %for.end1355
	movl	-28(%rbp), %esi
	addl	$8, %esi
	movl	-32(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB107_274:                            # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB107_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB107_274 Depth=1
	movl	$0, -12(%rbp)
.LBB107_276:                            # %for.cond1398
                                        #   Parent Loop BB107_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB107_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB107_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB107_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_276
.LBB107_279:                            # %for.end1413
                                        #   in Loop: Header=BB107_274 Depth=1
	jmp	.LBB107_280
.LBB107_280:                            # %for.inc1414
                                        #   in Loop: Header=BB107_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_274
.LBB107_281:                            # %for.end1416
	movl	$0, -16(%rbp)
.LBB107_282:                            # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB107_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB107_282 Depth=1
	movl	$0, -12(%rbp)
.LBB107_284:                            # %for.cond1421
                                        #   Parent Loop BB107_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB107_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB107_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB107_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB107_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB107_288
.LBB107_287:                            # %cond.false1467
                                        #   in Loop: Header=BB107_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB107_288:                            # %cond.end1480
                                        #   in Loop: Header=BB107_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB107_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB107_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB107_294
.LBB107_290:                            # %cond.false1486
                                        #   in Loop: Header=BB107_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB107_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB107_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB107_293
.LBB107_292:                            # %cond.false1502
                                        #   in Loop: Header=BB107_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB107_293:                            # %cond.end1515
                                        #   in Loop: Header=BB107_284 Depth=2
.LBB107_294:                            # %cond.end1517
                                        #   in Loop: Header=BB107_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB107_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB107_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB107_297
.LBB107_296:                            # %cond.false1541
                                        #   in Loop: Header=BB107_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB107_297:                            # %cond.end1551
                                        #   in Loop: Header=BB107_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB107_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB107_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB107_303
.LBB107_299:                            # %cond.false1557
                                        #   in Loop: Header=BB107_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB107_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB107_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB107_302
.LBB107_301:                            # %cond.false1570
                                        #   in Loop: Header=BB107_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB107_302:                            # %cond.end1580
                                        #   in Loop: Header=BB107_284 Depth=2
.LBB107_303:                            # %cond.end1582
                                        #   in Loop: Header=BB107_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB107_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB107_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB107_306
.LBB107_305:                            # %cond.false1608
                                        #   in Loop: Header=BB107_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB107_306:                            # %cond.end1621
                                        #   in Loop: Header=BB107_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB107_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB107_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB107_312
.LBB107_308:                            # %cond.false1627
                                        #   in Loop: Header=BB107_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB107_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB107_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB107_311
.LBB107_310:                            # %cond.false1643
                                        #   in Loop: Header=BB107_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB107_311:                            # %cond.end1656
                                        #   in Loop: Header=BB107_284 Depth=2
.LBB107_312:                            # %cond.end1658
                                        #   in Loop: Header=BB107_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB107_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_284
.LBB107_314:                            # %for.end1671
                                        #   in Loop: Header=BB107_282 Depth=1
	jmp	.LBB107_315
.LBB107_315:                            # %for.inc1672
                                        #   in Loop: Header=BB107_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_282
.LBB107_316:                            # %for.end1674
	jmp	.LBB107_317
.LBB107_317:                            # %if.end1675
	jmp	.LBB107_367
.LBB107_318:                            # %if.else1676
	movl	$0, -16(%rbp)
.LBB107_319:                            # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB107_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB107_319 Depth=1
	movl	$0, -12(%rbp)
.LBB107_321:                            # %for.cond1681
                                        #   Parent Loop BB107_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB107_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB107_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB107_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_321
.LBB107_324:                            # %for.end1700
                                        #   in Loop: Header=BB107_319 Depth=1
	jmp	.LBB107_325
.LBB107_325:                            # %for.inc1701
                                        #   in Loop: Header=BB107_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_319
.LBB107_326:                            # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB107_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB107_328:                            # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB107_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB107_328 Depth=1
	movl	$0, -12(%rbp)
.LBB107_330:                            # %for.cond1711
                                        #   Parent Loop BB107_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB107_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB107_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB107_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_330
.LBB107_333:                            # %for.end1731
                                        #   in Loop: Header=BB107_328 Depth=1
	jmp	.LBB107_334
.LBB107_334:                            # %for.inc1732
                                        #   in Loop: Header=BB107_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_328
.LBB107_335:                            # %for.end1734
	movl	$0, -16(%rbp)
.LBB107_336:                            # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB107_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB107_336 Depth=1
	movl	$0, -12(%rbp)
.LBB107_338:                            # %for.cond1739
                                        #   Parent Loop BB107_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB107_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB107_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB107_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_338
.LBB107_341:                            # %for.end1759
                                        #   in Loop: Header=BB107_336 Depth=1
	jmp	.LBB107_342
.LBB107_342:                            # %for.inc1760
                                        #   in Loop: Header=BB107_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_336
.LBB107_343:                            # %for.end1762
	jmp	.LBB107_344
.LBB107_344:                            # %if.end1763
	movl	$0, -20(%rbp)
.LBB107_345:                            # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_347 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB107_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB107_345 Depth=1
	movl	$0, -24(%rbp)
.LBB107_347:                            # %for.cond1768
                                        #   Parent Loop BB107_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB107_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB107_347 Depth=2
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB107_347 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB107_347
.LBB107_350:                            # %for.end1800
                                        #   in Loop: Header=BB107_345 Depth=1
	jmp	.LBB107_351
.LBB107_351:                            # %for.inc1801
                                        #   in Loop: Header=BB107_345 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_345
.LBB107_352:                            # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB107_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB107_354:                            # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_356 Depth 2
                                        #       Child Loop BB107_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB107_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB107_354 Depth=1
	movl	$0, -20(%rbp)
.LBB107_356:                            # %for.cond1811
                                        #   Parent Loop BB107_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_358 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB107_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB107_356 Depth=2
	movl	$0, -24(%rbp)
.LBB107_358:                            # %for.cond1815
                                        #   Parent Loop BB107_354 Depth=1
                                        #     Parent Loop BB107_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB107_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB107_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB107_358 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB107_358
.LBB107_361:                            # %for.end1837
                                        #   in Loop: Header=BB107_356 Depth=2
	jmp	.LBB107_362
.LBB107_362:                            # %for.inc1838
                                        #   in Loop: Header=BB107_356 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_356
.LBB107_363:                            # %for.end1840
                                        #   in Loop: Header=BB107_354 Depth=1
	jmp	.LBB107_364
.LBB107_364:                            # %for.inc1841
                                        #   in Loop: Header=BB107_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_354
.LBB107_365:                            # %for.end1843
	jmp	.LBB107_366
.LBB107_366:                            # %if.end1844
	jmp	.LBB107_367
.LBB107_367:                            # %if.end1845
	movl	-100(%rbp), %ebx
	cmpl	$26488111, -160(%rbp)   # imm = 0x1942D2F
	jne	.LBB107_369
.LBB107_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_369:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_368
.Lfunc_end107:
	.size	Mode_Decision_for_4x4IntraBlocks.78, .Lfunc_end107-Mode_Decision_for_4x4IntraBlocks.78
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.79      # -- Begin function StoreMVBlock8x8.79
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.79,@function
StoreMVBlock8x8.79:                     # @StoreMVBlock8x8.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$630523079, -68(%rbp)   # imm = 0x259504C7
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -52(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB108_12
# %bb.1:                                # %if.then
	cmpl	$0, -52(%rbp)
	jl	.LBB108_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB108_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB108_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB108_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB108_5:                              # %for.cond7
                                        #   Parent Loop BB108_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB108_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB108_5 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB108_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_5
.LBB108_8:                              # %for.end
                                        #   in Loop: Header=BB108_3 Depth=1
	jmp	.LBB108_9
.LBB108_9:                              # %for.inc76
                                        #   in Loop: Header=BB108_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_3
.LBB108_10:                             # %for.end78
	jmp	.LBB108_11
.LBB108_11:                             # %if.end
	jmp	.LBB108_46
.LBB108_12:                             # %if.else
	cmpl	$0, -52(%rbp)
	jne	.LBB108_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB108_14:                             # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB108_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB108_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB108_16:                             # %for.cond84
                                        #   Parent Loop BB108_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB108_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB108_16 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB108_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_16
.LBB108_19:                             # %for.end161
                                        #   in Loop: Header=BB108_14 Depth=1
	jmp	.LBB108_20
.LBB108_20:                             # %for.inc162
                                        #   in Loop: Header=BB108_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_14
.LBB108_21:                             # %for.end164
	jmp	.LBB108_45
.LBB108_22:                             # %if.else165
	cmpl	$1, -52(%rbp)
	jne	.LBB108_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB108_24:                             # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB108_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB108_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB108_26:                             # %for.cond171
                                        #   Parent Loop BB108_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB108_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB108_26 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB108_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_26
.LBB108_29:                             # %for.end248
                                        #   in Loop: Header=BB108_24 Depth=1
	jmp	.LBB108_30
.LBB108_30:                             # %for.inc249
                                        #   in Loop: Header=BB108_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_24
.LBB108_31:                             # %for.end251
	jmp	.LBB108_44
.LBB108_32:                             # %if.else252
	cmpl	$2, -52(%rbp)
	jne	.LBB108_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB108_34:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB108_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB108_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB108_36:                             # %for.cond258
                                        #   Parent Loop BB108_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB108_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB108_36 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB108_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_36
.LBB108_39:                             # %for.end407
                                        #   in Loop: Header=BB108_34 Depth=1
	jmp	.LBB108_40
.LBB108_40:                             # %for.inc408
                                        #   in Loop: Header=BB108_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_34
.LBB108_41:                             # %for.end410
	jmp	.LBB108_43
.LBB108_42:                             # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB108_43:                             # %if.end412
	jmp	.LBB108_44
.LBB108_44:                             # %if.end413
	jmp	.LBB108_45
.LBB108_45:                             # %if.end414
	jmp	.LBB108_46
.LBB108_46:                             # %if.end415
	cmpl	$630523079, -68(%rbp)   # imm = 0x259504C7
	jne	.LBB108_48
.LBB108_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_47
.Lfunc_end108:
	.size	StoreMVBlock8x8.79, .Lfunc_end108-StoreMVBlock8x8.79
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.80 # -- Begin function set_mbaff_parameters.80
	.p2align	4, 0x90
	.type	set_mbaff_parameters.80,@function
set_mbaff_parameters.80:                # @set_mbaff_parameters.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1547390975, -36(%rbp)  # imm = 0x5C3B4FFF
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB109_2
# %bb.1:                                # %if.then
	jmp	.LBB109_82
.LBB109_2:                              # %if.end
	movl	$0, -8(%rbp)
.LBB109_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB109_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB109_3 Depth=1
	movl	$0, -4(%rbp)
.LBB109_5:                              # %for.cond3
                                        #   Parent Loop BB109_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB109_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB109_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB109_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_5
.LBB109_8:                              # %for.end
                                        #   in Loop: Header=BB109_3 Depth=1
	jmp	.LBB109_9
.LBB109_9:                              # %for.inc17
                                        #   in Loop: Header=BB109_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_3
.LBB109_10:                             # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB109_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB109_12:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB109_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB109_12 Depth=1
	movl	$0, -4(%rbp)
.LBB109_14:                             # %for.cond27
                                        #   Parent Loop BB109_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB109_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB109_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB109_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_14
.LBB109_17:                             # %for.end60
                                        #   in Loop: Header=BB109_12 Depth=1
	jmp	.LBB109_18
.LBB109_18:                             # %for.inc61
                                        #   in Loop: Header=BB109_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_12
.LBB109_19:                             # %for.end63
	jmp	.LBB109_20
.LBB109_20:                             # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB109_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB109_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB109_23:                             # %if.end78
	movl	$0, -4(%rbp)
.LBB109_24:                             # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_26 Depth 2
                                        #       Child Loop BB109_28 Depth 3
                                        #         Child Loop BB109_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB109_24 Depth=1
	movl	$0, -8(%rbp)
.LBB109_26:                             # %for.cond84
                                        #   Parent Loop BB109_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_28 Depth 3
                                        #         Child Loop BB109_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB109_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB109_26 Depth=2
	movl	$0, -12(%rbp)
.LBB109_28:                             # %for.cond88
                                        #   Parent Loop BB109_24 Depth=1
                                        #     Parent Loop BB109_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB109_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB109_28 Depth=3
	movl	$0, -16(%rbp)
.LBB109_30:                             # %for.cond92
                                        #   Parent Loop BB109_24 Depth=1
                                        #     Parent Loop BB109_26 Depth=2
                                        #       Parent Loop BB109_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB109_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB109_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB109_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_30
.LBB109_33:                             # %for.end115
                                        #   in Loop: Header=BB109_28 Depth=3
	jmp	.LBB109_34
.LBB109_34:                             # %for.inc116
                                        #   in Loop: Header=BB109_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_28
.LBB109_35:                             # %for.end118
                                        #   in Loop: Header=BB109_26 Depth=2
	jmp	.LBB109_36
.LBB109_36:                             # %for.inc119
                                        #   in Loop: Header=BB109_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_26
.LBB109_37:                             # %for.end121
                                        #   in Loop: Header=BB109_24 Depth=1
	jmp	.LBB109_38
.LBB109_38:                             # %for.inc122
                                        #   in Loop: Header=BB109_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_24
.LBB109_39:                             # %for.end124
	movl	$0, -4(%rbp)
.LBB109_40:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_42 Depth 2
                                        #       Child Loop BB109_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB109_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB109_40 Depth=1
	movl	$0, -12(%rbp)
.LBB109_42:                             # %for.cond129
                                        #   Parent Loop BB109_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB109_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB109_42 Depth=2
	movl	$0, -16(%rbp)
.LBB109_44:                             # %for.cond133
                                        #   Parent Loop BB109_40 Depth=1
                                        #     Parent Loop BB109_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB109_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB109_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB109_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_44
.LBB109_47:                             # %for.end152
                                        #   in Loop: Header=BB109_42 Depth=2
	jmp	.LBB109_48
.LBB109_48:                             # %for.inc153
                                        #   in Loop: Header=BB109_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_42
.LBB109_49:                             # %for.end155
                                        #   in Loop: Header=BB109_40 Depth=1
	jmp	.LBB109_50
.LBB109_50:                             # %for.inc156
                                        #   in Loop: Header=BB109_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_40
.LBB109_51:                             # %for.end158
	movl	$0, -4(%rbp)
.LBB109_52:                             # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB109_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB109_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB109_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_52
.LBB109_55:                             # %for.end175
	movl	$0, -8(%rbp)
.LBB109_56:                             # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB109_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB109_56 Depth=1
	movl	$0, -4(%rbp)
.LBB109_58:                             # %for.cond180
                                        #   Parent Loop BB109_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB109_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB109_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB109_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_58
.LBB109_61:                             # %for.end198
                                        #   in Loop: Header=BB109_56 Depth=1
	jmp	.LBB109_62
.LBB109_62:                             # %for.inc199
                                        #   in Loop: Header=BB109_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_56
.LBB109_63:                             # %for.end201
	cmpl	$0, -32(%rbp)
	je	.LBB109_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB109_65:                             # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB109_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB109_65 Depth=1
	movl	$0, -4(%rbp)
.LBB109_67:                             # %for.cond208
                                        #   Parent Loop BB109_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB109_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB109_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB109_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_67
.LBB109_70:                             # %for.end230
                                        #   in Loop: Header=BB109_65 Depth=1
	jmp	.LBB109_71
.LBB109_71:                             # %for.inc231
                                        #   in Loop: Header=BB109_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_65
.LBB109_72:                             # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB109_73:                             # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB109_74:                             # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB109_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB109_76:                             # %for.cond244
                                        #   Parent Loop BB109_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB109_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB109_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_76
.LBB109_79:                             # %for.end267
                                        #   in Loop: Header=BB109_74 Depth=1
	jmp	.LBB109_80
.LBB109_80:                             # %for.inc268
                                        #   in Loop: Header=BB109_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_74
.LBB109_81:                             # %for.end270.loopexit
	jmp	.LBB109_82
.LBB109_82:                             # %for.end270
	cmpl	$1547390975, -36(%rbp)  # imm = 0x5C3B4FFF
	jne	.LBB109_84
.LBB109_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_83
.Lfunc_end109:
	.size	set_mbaff_parameters.80, .Lfunc_end109-set_mbaff_parameters.80
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.81
.LCPI110_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI110_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.81
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.81,@function
Mode_Decision_for_4x4IntraBlocks.81:    # @Mode_Decision_for_4x4IntraBlocks.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI110_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$73067179, -168(%rbp)   # imm = 0x45AEAAB
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -96(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -176(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -164(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB110_8
# %bb.1:                                # %if.then
	cmpl	$0, -208(%rbp)
	je	.LBB110_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB110_4
.LBB110_3:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB110_4
.LBB110_4:                              # %cond.end
	movl	%eax, -208(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB110_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB110_7
.LBB110_6:                              # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB110_7
.LBB110_7:                              # %cond.end31
	movl	%eax, -232(%rbp)
.LBB110_8:                              # %if.end
	cmpl	$0, -232(%rbp)
	je	.LBB110_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB110_11
.LBB110_10:                             # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_11
.LBB110_11:                             # %cond.end42
	movl	%eax, -108(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB110_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB110_14
.LBB110_13:                             # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_14
.LBB110_14:                             # %cond.end55
	movl	%eax, -116(%rbp)
	cmpl	$0, -108(%rbp)
	jl	.LBB110_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -116(%rbp)
	jge	.LBB110_17
.LBB110_16:                             # %cond.true58
	movl	$2, %eax
	jmp	.LBB110_21
.LBB110_17:                             # %cond.false59
	movl	-108(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB110_19
# %bb.18:                               # %cond.true61
	movl	-108(%rbp), %eax
	jmp	.LBB110_20
.LBB110_19:                             # %cond.false62
	movl	-116(%rbp), %eax
.LBB110_20:                             # %cond.end63
.LBB110_21:                             # %cond.end65
	movl	%eax, -100(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-184(%rbp), %rdx
	leaq	-172(%rbp), %rcx
	leaq	-160(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB110_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_49 Depth 2
                                        #       Child Loop BB110_51 Depth 3
                                        #     Child Loop BB110_64 Depth 2
                                        #       Child Loop BB110_66 Depth 3
                                        #     Child Loop BB110_73 Depth 2
                                        #       Child Loop BB110_75 Depth 3
                                        #     Child Loop BB110_81 Depth 2
                                        #       Child Loop BB110_83 Depth 3
                                        #     Child Loop BB110_91 Depth 2
                                        #       Child Loop BB110_93 Depth 3
                                        #     Child Loop BB110_99 Depth 2
                                        #       Child Loop BB110_101 Depth 3
                                        #     Child Loop BB110_107 Depth 2
                                        #       Child Loop BB110_109 Depth 3
                                        #     Child Loop BB110_115 Depth 2
                                        #       Child Loop BB110_117 Depth 3
                                        #     Child Loop BB110_123 Depth 2
                                        #       Child Loop BB110_125 Depth 3
                                        #     Child Loop BB110_131 Depth 2
                                        #       Child Loop BB110_133 Depth 3
                                        #     Child Loop BB110_166 Depth 2
                                        #       Child Loop BB110_168 Depth 3
                                        #     Child Loop BB110_175 Depth 2
                                        #       Child Loop BB110_177 Depth 3
                                        #     Child Loop BB110_183 Depth 2
                                        #       Child Loop BB110_185 Depth 3
                                        #     Child Loop BB110_191 Depth 2
                                        #       Child Loop BB110_193 Depth 3
                                        #     Child Loop BB110_199 Depth 2
                                        #       Child Loop BB110_201 Depth 3
                                        #         Child Loop BB110_203 Depth 4
                                        #     Child Loop BB110_211 Depth 2
                                        #       Child Loop BB110_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB110_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB110_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB110_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB110_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB110_28
.LBB110_27:                             # %land.lhs.true
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -172(%rbp)
	movb	$1, %al
	jne	.LBB110_32
.LBB110_28:                             # %lor.lhs.false76
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB110_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB110_31
.LBB110_30:                             # %land.lhs.true80
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -184(%rbp)
	movb	$1, %al
	jne	.LBB110_32
.LBB110_31:                             # %lor.rhs
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -160(%rbp)
	setne	%al
.LBB110_32:                             # %lor.end
                                        #   in Loop: Header=BB110_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -156(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB110_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB110_46
.LBB110_34:                             # %if.then86
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB110_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB110_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB110_38
.LBB110_37:                             # %if.then92
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_223
.LBB110_38:                             # %if.end93
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB110_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB110_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB110_42
.LBB110_41:                             # %if.then99
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_223
.LBB110_42:                             # %if.end100
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB110_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB110_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_223
.LBB110_45:                             # %if.end105
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_46
.LBB110_46:                             # %if.end106
                                        #   in Loop: Header=BB110_22 Depth=1
	cmpl	$0, -156(%rbp)
	je	.LBB110_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB110_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -120(%rbp)
.LBB110_49:                             # %for.cond111
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB110_49 Depth=2
	movl	$0, -12(%rbp)
.LBB110_51:                             # %for.cond114
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB110_51 Depth=3
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB110_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB110_51
.LBB110_54:                             # %for.end
                                        #   in Loop: Header=BB110_49 Depth=2
	jmp	.LBB110_55
.LBB110_55:                             # %for.inc133
                                        #   in Loop: Header=BB110_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_49
.LBB110_56:                             # %for.end135
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jne	.LBB110_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB110_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB110_59
.LBB110_58:                             # %cond.false139
                                        #   in Loop: Header=BB110_22 Depth=1
	vmovsd	.LCPI110_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-136(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB110_59:                             # %cond.end142
                                        #   in Loop: Header=BB110_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB110_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB110_61:                             # %if.end148
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_221
.LBB110_62:                             # %if.else
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB110_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_64:                             # %for.cond151
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB110_64 Depth=2
	movl	$0, -12(%rbp)
.LBB110_66:                             # %for.cond155
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB110_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB110_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_66
.LBB110_69:                             # %for.end194
                                        #   in Loop: Header=BB110_64 Depth=2
	jmp	.LBB110_70
.LBB110_70:                             # %for.inc195
                                        #   in Loop: Header=BB110_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_64
.LBB110_71:                             # %for.end197
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-112(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB110_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_73:                             # %for.cond202
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB110_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB110_73 Depth=2
	movl	$0, -12(%rbp)
.LBB110_75:                             # %for.cond206
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB110_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB110_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB110_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_75
.LBB110_78:                             # %for.end224
                                        #   in Loop: Header=BB110_73 Depth=2
	jmp	.LBB110_79
.LBB110_79:                             # %for.inc225
                                        #   in Loop: Header=BB110_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_73
.LBB110_80:                             # %for.end227
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -24(%rbp)
.LBB110_81:                             # %for.cond228
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_83 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB110_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB110_81 Depth=2
	movl	$0, -20(%rbp)
.LBB110_83:                             # %for.cond232
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB110_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB110_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB110_83 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_83
.LBB110_86:                             # %for.end249
                                        #   in Loop: Header=BB110_81 Depth=2
	jmp	.LBB110_87
.LBB110_87:                             # %for.inc250
                                        #   in Loop: Header=BB110_81 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_81
.LBB110_88:                             # %for.end252
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-112(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB110_89:                             # %if.end253
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB110_220
.LBB110_90:                             # %if.else254
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_91:                             # %for.cond255
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB110_91 Depth=2
	movl	$0, -12(%rbp)
.LBB110_93:                             # %for.cond259
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB110_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB110_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_93
.LBB110_96:                             # %for.end345
                                        #   in Loop: Header=BB110_91 Depth=2
	jmp	.LBB110_97
.LBB110_97:                             # %for.inc346
                                        #   in Loop: Header=BB110_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_91
.LBB110_98:                             # %for.end348
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_99:                             # %for.cond349
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB110_99 Depth=2
	movl	$0, -12(%rbp)
.LBB110_101:                            # %for.cond353
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB110_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB110_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_101
.LBB110_104:                            # %for.end368
                                        #   in Loop: Header=BB110_99 Depth=2
	jmp	.LBB110_105
.LBB110_105:                            # %for.inc369
                                        #   in Loop: Header=BB110_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_99
.LBB110_106:                            # %for.end371
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-112(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB110_107:                            # %for.cond374
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB110_107 Depth=2
	movl	$0, -12(%rbp)
.LBB110_109:                            # %for.cond378
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB110_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB110_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_109
.LBB110_112:                            # %for.end402
                                        #   in Loop: Header=BB110_107 Depth=2
	jmp	.LBB110_113
.LBB110_113:                            # %for.inc403
                                        #   in Loop: Header=BB110_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_107
.LBB110_114:                            # %for.end405
                                        #   in Loop: Header=BB110_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %edi
	addl	$4, %edi
	movl	-32(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB110_115:                            # %for.cond409
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB110_115 Depth=2
	movl	$0, -12(%rbp)
.LBB110_117:                            # %for.cond413
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB110_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB110_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_117
.LBB110_120:                            # %for.end437
                                        #   in Loop: Header=BB110_115 Depth=2
	jmp	.LBB110_121
.LBB110_121:                            # %for.inc438
                                        #   in Loop: Header=BB110_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_115
.LBB110_122:                            # %for.end440
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-28(%rbp), %edi
	addl	$8, %edi
	movl	-32(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB110_123:                            # %for.cond444
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB110_123 Depth=2
	movl	$0, -12(%rbp)
.LBB110_125:                            # %for.cond448
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB110_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB110_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_125
.LBB110_128:                            # %for.end463
                                        #   in Loop: Header=BB110_123 Depth=2
	jmp	.LBB110_129
.LBB110_129:                            # %for.inc464
                                        #   in Loop: Header=BB110_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_123
.LBB110_130:                            # %for.end466
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_131:                            # %for.cond467
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB110_131 Depth=2
	movl	$0, -12(%rbp)
.LBB110_133:                            # %for.cond471
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB110_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB110_137
.LBB110_136:                            # %cond.false516
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB110_137:                            # %cond.end529
                                        #   in Loop: Header=BB110_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB110_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB110_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB110_143
.LBB110_139:                            # %cond.false535
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB110_142
.LBB110_141:                            # %cond.false551
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_142:                            # %cond.end564
                                        #   in Loop: Header=BB110_133 Depth=3
.LBB110_143:                            # %cond.end566
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB110_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB110_146
.LBB110_145:                            # %cond.false588
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB110_146:                            # %cond.end598
                                        #   in Loop: Header=BB110_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB110_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB110_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB110_152
.LBB110_148:                            # %cond.false604
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB110_151
.LBB110_150:                            # %cond.false617
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_151:                            # %cond.end627
                                        #   in Loop: Header=BB110_133 Depth=3
.LBB110_152:                            # %cond.end629
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB110_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB110_155
.LBB110_154:                            # %cond.false655
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB110_155:                            # %cond.end668
                                        #   in Loop: Header=BB110_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB110_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB110_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB110_161
.LBB110_157:                            # %cond.false674
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB110_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB110_160
.LBB110_159:                            # %cond.false690
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_160:                            # %cond.end703
                                        #   in Loop: Header=BB110_133 Depth=3
.LBB110_161:                            # %cond.end705
                                        #   in Loop: Header=BB110_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB110_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_133
.LBB110_163:                            # %for.end718
                                        #   in Loop: Header=BB110_131 Depth=2
	jmp	.LBB110_164
.LBB110_164:                            # %for.inc719
                                        #   in Loop: Header=BB110_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_131
.LBB110_165:                            # %for.end721
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -24(%rbp)
.LBB110_166:                            # %for.cond722
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_168 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB110_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB110_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB110_168:                            # %for.cond726
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB110_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB110_168 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_168
.LBB110_171:                            # %for.end831
                                        #   in Loop: Header=BB110_166 Depth=2
	jmp	.LBB110_172
.LBB110_172:                            # %for.inc832
                                        #   in Loop: Header=BB110_166 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_166
.LBB110_173:                            # %for.end834
                                        #   in Loop: Header=BB110_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-92(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB110_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_175:                            # %for.cond842
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB110_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB110_175 Depth=2
	movl	$0, -12(%rbp)
.LBB110_177:                            # %for.cond846
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB110_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB110_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB110_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_177
.LBB110_180:                            # %for.end865
                                        #   in Loop: Header=BB110_175 Depth=2
	jmp	.LBB110_181
.LBB110_181:                            # %for.inc866
                                        #   in Loop: Header=BB110_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_175
.LBB110_182:                            # %for.end868
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_183:                            # %for.cond869
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB110_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB110_183 Depth=2
	movl	$0, -12(%rbp)
.LBB110_185:                            # %for.cond873
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB110_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB110_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB110_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_185
.LBB110_188:                            # %for.end893
                                        #   in Loop: Header=BB110_183 Depth=2
	jmp	.LBB110_189
.LBB110_189:                            # %for.inc894
                                        #   in Loop: Header=BB110_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_183
.LBB110_190:                            # %for.end896
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -16(%rbp)
.LBB110_191:                            # %for.cond897
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB110_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB110_191 Depth=2
	movl	$0, -12(%rbp)
.LBB110_193:                            # %for.cond901
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB110_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB110_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB110_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_193
.LBB110_196:                            # %for.end921
                                        #   in Loop: Header=BB110_191 Depth=2
	jmp	.LBB110_197
.LBB110_197:                            # %for.inc922
                                        #   in Loop: Header=BB110_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_191
.LBB110_198:                            # %for.end924
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -12(%rbp)
.LBB110_199:                            # %for.cond925
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_201 Depth 3
                                        #         Child Loop BB110_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB110_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB110_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -24(%rbp)
.LBB110_201:                            # %for.cond985
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB110_203 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB110_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB110_201 Depth=3
	movl	$0, -20(%rbp)
.LBB110_203:                            # %for.cond989
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_199 Depth=2
                                        #       Parent Loop BB110_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -20(%rbp)
	jge	.LBB110_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB110_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB110_203 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_203
.LBB110_206:                            # %for.end1011
                                        #   in Loop: Header=BB110_201 Depth=3
	jmp	.LBB110_207
.LBB110_207:                            # %for.inc1012
                                        #   in Loop: Header=BB110_201 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_201
.LBB110_208:                            # %for.end1014
                                        #   in Loop: Header=BB110_199 Depth=2
	jmp	.LBB110_209
.LBB110_209:                            # %for.inc1015
                                        #   in Loop: Header=BB110_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_199
.LBB110_210:                            # %for.end1017
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	$0, -24(%rbp)
.LBB110_211:                            # %for.cond1018
                                        #   Parent Loop BB110_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_213 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB110_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB110_211 Depth=2
	movl	$0, -20(%rbp)
.LBB110_213:                            # %for.cond1022
                                        #   Parent Loop BB110_22 Depth=1
                                        #     Parent Loop BB110_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB110_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB110_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB110_213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_213
.LBB110_216:                            # %for.end1040
                                        #   in Loop: Header=BB110_211 Depth=2
	jmp	.LBB110_217
.LBB110_217:                            # %for.inc1041
                                        #   in Loop: Header=BB110_211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_211
.LBB110_218:                            # %for.end1043
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-112(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB110_219:                            # %if.end1044
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_220
.LBB110_220:                            # %if.end1045
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_221
.LBB110_221:                            # %if.end1046
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_222
.LBB110_222:                            # %if.end1047
                                        #   in Loop: Header=BB110_22 Depth=1
	jmp	.LBB110_223
.LBB110_223:                            # %for.inc1048
                                        #   in Loop: Header=BB110_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB110_22
.LBB110_224:                            # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-176(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-164(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB110_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_230
.LBB110_226:                            # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB110_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB110_229
.LBB110_228:                            # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB110_229:                            # %cond.end1065
.LBB110_230:                            # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	shll	$2, %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB110_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB110_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB110_233:                            # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB110_233 Depth=1
	movl	$0, -12(%rbp)
.LBB110_235:                            # %for.cond1087
                                        #   Parent Loop BB110_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB110_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB110_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_235
.LBB110_238:                            # %for.end1128
                                        #   in Loop: Header=BB110_233 Depth=1
	jmp	.LBB110_239
.LBB110_239:                            # %for.inc1129
                                        #   in Loop: Header=BB110_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_233
.LBB110_240:                            # %for.end1131
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-180(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	jmp	.LBB110_317
.LBB110_241:                            # %if.else1133
	movl	$0, -16(%rbp)
.LBB110_242:                            # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB110_242 Depth=1
	movl	$0, -12(%rbp)
.LBB110_244:                            # %for.cond1138
                                        #   Parent Loop BB110_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB110_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB110_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_244
.LBB110_247:                            # %for.end1226
                                        #   in Loop: Header=BB110_242 Depth=1
	jmp	.LBB110_248
.LBB110_248:                            # %for.inc1227
                                        #   in Loop: Header=BB110_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_242
.LBB110_249:                            # %for.end1229
	movl	$0, -16(%rbp)
.LBB110_250:                            # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB110_250 Depth=1
	movl	$0, -12(%rbp)
.LBB110_252:                            # %for.cond1234
                                        #   Parent Loop BB110_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB110_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB110_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_252
.LBB110_255:                            # %for.end1249
                                        #   in Loop: Header=BB110_250 Depth=1
	jmp	.LBB110_256
.LBB110_256:                            # %for.inc1250
                                        #   in Loop: Header=BB110_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_250
.LBB110_257:                            # %for.end1252
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-180(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB110_258:                            # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB110_258 Depth=1
	movl	$0, -12(%rbp)
.LBB110_260:                            # %for.cond1258
                                        #   Parent Loop BB110_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB110_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB110_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_260
.LBB110_263:                            # %for.end1282
                                        #   in Loop: Header=BB110_258 Depth=1
	jmp	.LBB110_264
.LBB110_264:                            # %for.inc1283
                                        #   in Loop: Header=BB110_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_258
.LBB110_265:                            # %for.end1285
	movl	-28(%rbp), %esi
	addl	$4, %esi
	movl	-32(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB110_266:                            # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB110_266 Depth=1
	movl	$0, -12(%rbp)
.LBB110_268:                            # %for.cond1328
                                        #   Parent Loop BB110_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB110_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB110_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_268
.LBB110_271:                            # %for.end1352
                                        #   in Loop: Header=BB110_266 Depth=1
	jmp	.LBB110_272
.LBB110_272:                            # %for.inc1353
                                        #   in Loop: Header=BB110_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_266
.LBB110_273:                            # %for.end1355
	movl	-28(%rbp), %esi
	addl	$8, %esi
	movl	-32(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB110_274:                            # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB110_274 Depth=1
	movl	$0, -12(%rbp)
.LBB110_276:                            # %for.cond1398
                                        #   Parent Loop BB110_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB110_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB110_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_276
.LBB110_279:                            # %for.end1413
                                        #   in Loop: Header=BB110_274 Depth=1
	jmp	.LBB110_280
.LBB110_280:                            # %for.inc1414
                                        #   in Loop: Header=BB110_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_274
.LBB110_281:                            # %for.end1416
	movl	$0, -16(%rbp)
.LBB110_282:                            # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB110_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB110_282 Depth=1
	movl	$0, -12(%rbp)
.LBB110_284:                            # %for.cond1421
                                        #   Parent Loop BB110_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB110_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB110_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_288
.LBB110_287:                            # %cond.false1467
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB110_288:                            # %cond.end1480
                                        #   in Loop: Header=BB110_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB110_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB110_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB110_294
.LBB110_290:                            # %cond.false1486
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_293
.LBB110_292:                            # %cond.false1502
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_293:                            # %cond.end1515
                                        #   in Loop: Header=BB110_284 Depth=2
.LBB110_294:                            # %cond.end1517
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB110_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB110_297
.LBB110_296:                            # %cond.false1541
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB110_297:                            # %cond.end1551
                                        #   in Loop: Header=BB110_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB110_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB110_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB110_303
.LBB110_299:                            # %cond.false1557
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_302
.LBB110_301:                            # %cond.false1570
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_302:                            # %cond.end1580
                                        #   in Loop: Header=BB110_284 Depth=2
.LBB110_303:                            # %cond.end1582
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB110_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB110_306
.LBB110_305:                            # %cond.false1608
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB110_306:                            # %cond.end1621
                                        #   in Loop: Header=BB110_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB110_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB110_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB110_312
.LBB110_308:                            # %cond.false1627
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB110_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB110_311
.LBB110_310:                            # %cond.false1643
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB110_311:                            # %cond.end1656
                                        #   in Loop: Header=BB110_284 Depth=2
.LBB110_312:                            # %cond.end1658
                                        #   in Loop: Header=BB110_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB110_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_284
.LBB110_314:                            # %for.end1671
                                        #   in Loop: Header=BB110_282 Depth=1
	jmp	.LBB110_315
.LBB110_315:                            # %for.inc1672
                                        #   in Loop: Header=BB110_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_282
.LBB110_316:                            # %for.end1674
	jmp	.LBB110_317
.LBB110_317:                            # %if.end1675
	jmp	.LBB110_367
.LBB110_318:                            # %if.else1676
	movl	$0, -16(%rbp)
.LBB110_319:                            # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB110_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB110_319 Depth=1
	movl	$0, -12(%rbp)
.LBB110_321:                            # %for.cond1681
                                        #   Parent Loop BB110_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB110_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB110_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB110_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_321
.LBB110_324:                            # %for.end1700
                                        #   in Loop: Header=BB110_319 Depth=1
	jmp	.LBB110_325
.LBB110_325:                            # %for.inc1701
                                        #   in Loop: Header=BB110_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_319
.LBB110_326:                            # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB110_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB110_328:                            # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB110_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB110_328 Depth=1
	movl	$0, -12(%rbp)
.LBB110_330:                            # %for.cond1711
                                        #   Parent Loop BB110_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB110_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB110_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB110_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_330
.LBB110_333:                            # %for.end1731
                                        #   in Loop: Header=BB110_328 Depth=1
	jmp	.LBB110_334
.LBB110_334:                            # %for.inc1732
                                        #   in Loop: Header=BB110_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_328
.LBB110_335:                            # %for.end1734
	movl	$0, -16(%rbp)
.LBB110_336:                            # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB110_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB110_336 Depth=1
	movl	$0, -12(%rbp)
.LBB110_338:                            # %for.cond1739
                                        #   Parent Loop BB110_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB110_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB110_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB110_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_338
.LBB110_341:                            # %for.end1759
                                        #   in Loop: Header=BB110_336 Depth=1
	jmp	.LBB110_342
.LBB110_342:                            # %for.inc1760
                                        #   in Loop: Header=BB110_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_336
.LBB110_343:                            # %for.end1762
	jmp	.LBB110_344
.LBB110_344:                            # %if.end1763
	movl	$0, -24(%rbp)
.LBB110_345:                            # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_347 Depth 2
	cmpl	$4, -24(%rbp)
	jge	.LBB110_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB110_345 Depth=1
	movl	$0, -20(%rbp)
.LBB110_347:                            # %for.cond1768
                                        #   Parent Loop BB110_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB110_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB110_347 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB110_347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_347
.LBB110_350:                            # %for.end1800
                                        #   in Loop: Header=BB110_345 Depth=1
	jmp	.LBB110_351
.LBB110_351:                            # %for.inc1801
                                        #   in Loop: Header=BB110_345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_345
.LBB110_352:                            # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB110_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB110_354:                            # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_356 Depth 2
                                        #       Child Loop BB110_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB110_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB110_354 Depth=1
	movl	$0, -24(%rbp)
.LBB110_356:                            # %for.cond1811
                                        #   Parent Loop BB110_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_358 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB110_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB110_356 Depth=2
	movl	$0, -20(%rbp)
.LBB110_358:                            # %for.cond1815
                                        #   Parent Loop BB110_354 Depth=1
                                        #     Parent Loop BB110_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB110_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB110_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB110_358 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_358
.LBB110_361:                            # %for.end1837
                                        #   in Loop: Header=BB110_356 Depth=2
	jmp	.LBB110_362
.LBB110_362:                            # %for.inc1838
                                        #   in Loop: Header=BB110_356 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_356
.LBB110_363:                            # %for.end1840
                                        #   in Loop: Header=BB110_354 Depth=1
	jmp	.LBB110_364
.LBB110_364:                            # %for.inc1841
                                        #   in Loop: Header=BB110_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_354
.LBB110_365:                            # %for.end1843
	jmp	.LBB110_366
.LBB110_366:                            # %if.end1844
	jmp	.LBB110_367
.LBB110_367:                            # %if.end1845
	movl	-96(%rbp), %ebx
	cmpl	$73067179, -168(%rbp)   # imm = 0x45AEAAB
	jne	.LBB110_369
.LBB110_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_369:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_368
.Lfunc_end110:
	.size	Mode_Decision_for_4x4IntraBlocks.81, .Lfunc_end110-Mode_Decision_for_4x4IntraBlocks.81
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.82 # -- Begin function SetRefAndMotionVectors.82
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.82,@function
SetRefAndMotionVectors.82:              # @SetRefAndMotionVectors.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$8393136, -68(%rbp)     # imm = 0x8011B0
	movl	%edi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB111_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB111_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB111_4
.LBB111_3:                              # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB111_5
.LBB111_4:                              # %cond.false
	movl	$4, %eax
	jmp	.LBB111_5
.LBB111_5:                              # %cond.end
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-36(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB111_9
.LBB111_8:                              # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB111_9
.LBB111_9:                              # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB111_19
# %bb.10:                               # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB111_11:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB111_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB111_11 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB111_13:                             # %for.cond34
                                        #   Parent Loop BB111_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB111_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB111_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB111_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_13
.LBB111_16:                             # %for.end
                                        #   in Loop: Header=BB111_11 Depth=1
	jmp	.LBB111_17
.LBB111_17:                             # %for.inc117
                                        #   in Loop: Header=BB111_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_11
.LBB111_18:                             # %for.end119
	jmp	.LBB111_64
.LBB111_19:                             # %if.end
	cmpl	$0, -72(%rbp)
	jne	.LBB111_29
# %bb.20:                               # %if.then121
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB111_21:                             # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB111_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB111_21 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB111_23:                             # %for.cond126
                                        #   Parent Loop BB111_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB111_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB111_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB111_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_23
.LBB111_26:                             # %for.end211
                                        #   in Loop: Header=BB111_21 Depth=1
	jmp	.LBB111_27
.LBB111_27:                             # %for.inc212
                                        #   in Loop: Header=BB111_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_21
.LBB111_28:                             # %for.end214
	jmp	.LBB111_64
.LBB111_29:                             # %if.else
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB111_30:                             # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB111_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB111_30 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB111_32:                             # %for.cond219
                                        #   Parent Loop BB111_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB111_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB111_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB111_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB111_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
.LBB111_35:                             # %if.end255
                                        #   in Loop: Header=BB111_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB111_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB111_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB111_46
.LBB111_37:                             # %if.then261
                                        #   in Loop: Header=BB111_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB111_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB111_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB111_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB111_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB111_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB111_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB111_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB111_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB111_43
.LBB111_42:                             # %cond.false274
                                        #   in Loop: Header=BB111_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB111_43:                             # %cond.end275
                                        #   in Loop: Header=BB111_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB111_45
.LBB111_44:                             # %if.else342
                                        #   in Loop: Header=BB111_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB111_45:                             # %if.end424
                                        #   in Loop: Header=BB111_32 Depth=2
	jmp	.LBB111_47
.LBB111_46:                             # %if.else425
                                        #   in Loop: Header=BB111_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB111_47:                             # %if.end468
                                        #   in Loop: Header=BB111_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB111_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB111_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB111_58
.LBB111_49:                             # %if.then474
                                        #   in Loop: Header=BB111_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB111_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB111_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB111_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB111_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB111_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB111_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB111_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB111_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB111_55
.LBB111_54:                             # %cond.false490
                                        #   in Loop: Header=BB111_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB111_55:                             # %cond.end492
                                        #   in Loop: Header=BB111_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB111_57
.LBB111_56:                             # %if.else559
                                        #   in Loop: Header=BB111_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-28(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB111_57:                             # %if.end641
                                        #   in Loop: Header=BB111_32 Depth=2
	jmp	.LBB111_59
.LBB111_58:                             # %if.else642
                                        #   in Loop: Header=BB111_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB111_59:                             # %if.end685
                                        #   in Loop: Header=BB111_32 Depth=2
	jmp	.LBB111_60
.LBB111_60:                             # %for.inc686
                                        #   in Loop: Header=BB111_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_32
.LBB111_61:                             # %for.end688
                                        #   in Loop: Header=BB111_30 Depth=1
	jmp	.LBB111_62
.LBB111_62:                             # %for.inc689
                                        #   in Loop: Header=BB111_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_30
.LBB111_63:                             # %for.end691
	jmp	.LBB111_64
.LBB111_64:                             # %if.end692
	cmpl	$8393136, -68(%rbp)     # imm = 0x8011B0
	jne	.LBB111_66
.LBB111_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_66:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_65
.Lfunc_end111:
	.size	SetRefAndMotionVectors.82, .Lfunc_end111-SetRefAndMotionVectors.82
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.83         # -- Begin function RestoreMV8x8.83
	.p2align	4, 0x90
	.type	RestoreMV8x8.83,@function
RestoreMV8x8.83:                        # @RestoreMV8x8.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1148940703, -16(%rbp)  # imm = 0x447B719F
	movl	%edi, -12(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB112_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB112_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB112_1 Depth=1
	movl	-12(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB112_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_1
.LBB112_4:                              # %for.end
	cmpl	$1148940703, -16(%rbp)  # imm = 0x447B719F
	jne	.LBB112_6
.LBB112_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_5
.Lfunc_end112:
	.size	RestoreMV8x8.83, .Lfunc_end112-RestoreMV8x8.83
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.84
.LCPI113_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.84
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.84,@function
RDCost_for_8x8blocks.84:                # @RDCost_for_8x8blocks.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$1707735043, -156(%rbp) # imm = 0x65C9F803
	movq	%rdi, -136(%rbp)
	movq	%rsi, -200(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -116(%rbp)
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -164(%rbp)
	cmpl	$0, -164(%rbp)
	je	.LBB113_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -36(%rbp)
	sete	%r10b
.LBB113_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -128(%rbp)
	movl	-36(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -120(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -128(%rbp)
	je	.LBB113_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB113_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI113_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	%xmm0, -192(%rbp)
	jmp	.LBB113_139
.LBB113_5:                              # %if.else
	xorl	%r8d, %r8d
	movq	-200(%rbp), %rsi
	movl	-40(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB113_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB113_8
.LBB113_7:                              # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB113_8:                              # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-116(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB113_19
.LBB113_10:                             # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB113_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB113_13
.LBB113_12:                             # %cond.true69
	movl	-36(%rbp), %eax
	jmp	.LBB113_14
.LBB113_13:                             # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB113_14
.LBB113_14:                             # %cond.end71
	movl	%eax, -168(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB113_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB113_17
.LBB113_16:                             # %cond.true80
	movl	-36(%rbp), %eax
	jmp	.LBB113_18
.LBB113_17:                             # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB113_18
.LBB113_18:                             # %cond.end82
	movl	%eax, -160(%rbp)
	movq	-200(%rbp), %rsi
	movl	-40(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-168(%rbp), %r8d
	movl	-160(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-116(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB113_19:                             # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB113_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB113_21:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_23 Depth 2
                                        #       Child Loop BB113_25 Depth 3
                                        #     Child Loop BB113_31 Depth 2
                                        #       Child Loop BB113_33 Depth 3
                                        #     Child Loop BB113_39 Depth 2
                                        #       Child Loop BB113_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB113_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB113_21 Depth=1
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -84(%rbp)
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB113_23:                             # %for.cond96
                                        #   Parent Loop BB113_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_25 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB113_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB113_23 Depth=2
	movl	$0, -12(%rbp)
.LBB113_25:                             # %for.cond100
                                        #   Parent Loop BB113_21 Depth=1
                                        #     Parent Loop BB113_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB113_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB113_25 Depth=3
	movl	-12(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB113_25 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_25
.LBB113_28:                             # %for.end
                                        #   in Loop: Header=BB113_23 Depth=2
	jmp	.LBB113_29
.LBB113_29:                             # %for.inc114
                                        #   in Loop: Header=BB113_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_23
.LBB113_30:                             # %for.end116
                                        #   in Loop: Header=BB113_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB113_31:                             # %for.cond120
                                        #   Parent Loop BB113_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB113_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB113_31 Depth=2
	movl	$0, -12(%rbp)
.LBB113_33:                             # %for.cond124
                                        #   Parent Loop BB113_21 Depth=1
                                        #     Parent Loop BB113_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB113_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB113_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-12(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB113_33 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_33
.LBB113_36:                             # %for.end152
                                        #   in Loop: Header=BB113_31 Depth=2
	jmp	.LBB113_37
.LBB113_37:                             # %for.inc153
                                        #   in Loop: Header=BB113_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_31
.LBB113_38:                             # %for.end155
                                        #   in Loop: Header=BB113_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB113_39:                             # %for.cond159
                                        #   Parent Loop BB113_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB113_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB113_39 Depth=2
	movl	$0, -12(%rbp)
.LBB113_41:                             # %for.cond163
                                        #   Parent Loop BB113_21 Depth=1
                                        #     Parent Loop BB113_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB113_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB113_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB113_41 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_41
.LBB113_44:                             # %for.end180
                                        #   in Loop: Header=BB113_39 Depth=2
	jmp	.LBB113_45
.LBB113_45:                             # %for.inc181
                                        #   in Loop: Header=BB113_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_39
.LBB113_46:                             # %for.end183
                                        #   in Loop: Header=BB113_21 Depth=1
	jmp	.LBB113_47
.LBB113_47:                             # %for.inc184
                                        #   in Loop: Header=BB113_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB113_21
.LBB113_48:                             # %for.end186
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB113_49:                             # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_51 Depth 2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB113_49 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB113_51:                             # %for.cond192
                                        #   Parent Loop BB113_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -124(%rbp)
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-16(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-124(%rbp), %edx
	movl	%edx, -88(%rbp)
	movl	-124(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -76(%rbp)
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-16(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -80(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-76(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-16(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB113_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_55
.LBB113_54:                             # %cond.false229
                                        #   in Loop: Header=BB113_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB113_55:                             # %cond.end235
                                        #   in Loop: Header=BB113_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB113_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB113_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB113_61
.LBB113_57:                             # %cond.false241
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB113_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_60
.LBB113_59:                             # %cond.false250
                                        #   in Loop: Header=BB113_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB113_60:                             # %cond.end256
                                        #   in Loop: Header=BB113_51 Depth=2
.LBB113_61:                             # %cond.end258
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-88(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB113_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB113_64
.LBB113_63:                             # %cond.false276
                                        #   in Loop: Header=BB113_51 Depth=2
	movl	-88(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB113_64:                             # %cond.end282
                                        #   in Loop: Header=BB113_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB113_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB113_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_70
.LBB113_66:                             # %cond.false288
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%eax, %eax
	movl	-88(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB113_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_69
.LBB113_68:                             # %cond.false297
                                        #   in Loop: Header=BB113_51 Depth=2
	movl	-88(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB113_69:                             # %cond.end303
                                        #   in Loop: Header=BB113_51 Depth=2
.LBB113_70:                             # %cond.end305
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-80(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-16(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB113_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB113_73
.LBB113_72:                             # %cond.false325
                                        #   in Loop: Header=BB113_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-80(%rbp), %ecx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB113_73:                             # %cond.end331
                                        #   in Loop: Header=BB113_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB113_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB113_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB113_79
.LBB113_75:                             # %cond.false337
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB113_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB113_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_78
.LBB113_77:                             # %cond.false346
                                        #   in Loop: Header=BB113_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB113_78:                             # %cond.end352
                                        #   in Loop: Header=BB113_51 Depth=2
.LBB113_79:                             # %cond.end354
                                        #   in Loop: Header=BB113_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB113_51 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_51
.LBB113_81:                             # %for.end369
                                        #   in Loop: Header=BB113_49 Depth=1
	jmp	.LBB113_82
.LBB113_82:                             # %for.inc370
                                        #   in Loop: Header=BB113_49 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_49
.LBB113_83:                             # %for.end372
	jmp	.LBB113_84
.LBB113_84:                             # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB113_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB113_87
# %bb.86:                               # %if.then379
	movl	-40(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB113_87:                             # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB113_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB113_102
# %bb.89:                               # %if.then388
	movl	$0, -68(%rbp)
.LBB113_90:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_92 Depth 2
                                        #       Child Loop BB113_94 Depth 3
	movl	-68(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB113_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB113_90 Depth=1
	movl	-68(%rbp), %edi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB113_92:                             # %for.cond395
                                        #   Parent Loop BB113_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_94 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB113_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB113_94:                             # %for.cond403
                                        #   Parent Loop BB113_90 Depth=1
                                        #     Parent Loop BB113_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB113_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB113_94 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_94
.LBB113_97:                             # %for.end429
                                        #   in Loop: Header=BB113_92 Depth=2
	jmp	.LBB113_98
.LBB113_98:                             # %for.inc430
                                        #   in Loop: Header=BB113_92 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_92
.LBB113_99:                             # %for.end432
                                        #   in Loop: Header=BB113_90 Depth=1
	jmp	.LBB113_100
.LBB113_100:                            # %for.inc433
                                        #   in Loop: Header=BB113_90 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB113_90
.LBB113_101:                            # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB113_113
.LBB113_102:                            # %if.else439
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB113_103:                            # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_105 Depth 2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB113_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB113_105:                            # %for.cond447
                                        #   Parent Loop BB113_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB113_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB113_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB113_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB113_108:                            # %if.end524
                                        #   in Loop: Header=BB113_105 Depth=2
	jmp	.LBB113_109
.LBB113_109:                            # %for.inc525
                                        #   in Loop: Header=BB113_105 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_105
.LBB113_110:                            # %for.end527
                                        #   in Loop: Header=BB113_103 Depth=1
	jmp	.LBB113_111
.LBB113_111:                            # %for.inc528
                                        #   in Loop: Header=BB113_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_103
.LBB113_112:                            # %for.end530
	jmp	.LBB113_113
.LBB113_113:                            # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB113_115
# %bb.114:                              # %if.then534
	movl	-120(%rbp), %edi
	movl	-172(%rbp), %esi
	leaq	-72(%rbp), %rdx
	leaq	-172(%rbp), %rcx
	callq	ue_linfo
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB113_116
.LBB113_115:                            # %if.else536
	movl	-120(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-184(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-144(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB113_116:                            # %if.end547
	cmpl	$0, -128(%rbp)
	jne	.LBB113_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB113_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB113_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB113_121
.LBB113_120:                            # %if.then560
	movl	-36(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB113_121:                            # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB113_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB113_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB113_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB113_126
.LBB113_125:                            # %if.then579
	movl	-36(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB113_126:                            # %if.end583
	jmp	.LBB113_127
.LBB113_127:                            # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB113_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB113_130
.LBB113_129:                            # %if.then592
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-36(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB113_130:                            # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB113_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB113_133
.LBB113_132:                            # %if.then606
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-36(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB113_133:                            # %if.end612
	jmp	.LBB113_134
.LBB113_134:                            # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB113_136
# %bb.135:                              # %if.then617
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-184(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -72(%rbp)
	movl	-40(%rbp), %edi
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB113_136:                            # %if.end629
	movq	-136(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB113_138
# %bb.137:                              # %if.then631
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB113_138:                            # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
.LBB113_139:                            # %return
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$1707735043, -156(%rbp) # imm = 0x65C9F803
	jne	.LBB113_141
.LBB113_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB113_140
.Lfunc_end113:
	.size	RDCost_for_8x8blocks.84, .Lfunc_end113-RDCost_for_8x8blocks.84
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.85           # -- Begin function StoreMV8x8.85
	.p2align	4, 0x90
	.type	StoreMV8x8.85,@function
StoreMV8x8.85:                          # @StoreMV8x8.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$527588963, -16(%rbp)   # imm = 0x1F725E63
	movl	%edi, -12(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB114_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB114_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	-12(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_1
.LBB114_4:                              # %for.end
	cmpl	$527588963, -16(%rbp)   # imm = 0x1F725E63
	jne	.LBB114_6
.LBB114_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_5
.Lfunc_end114:
	.size	StoreMV8x8.85, .Lfunc_end114-StoreMV8x8.85
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.86
.LCPI115_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI115_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.86
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.86,@function
Mode_Decision_for_4x4IntraBlocks.86:    # @Mode_Decision_for_4x4IntraBlocks.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI115_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$622935562, -164(%rbp)  # imm = 0x25213E0A
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -100(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -168(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -160(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB115_8
# %bb.1:                                # %if.then
	cmpl	$0, -232(%rbp)
	je	.LBB115_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB115_4
.LBB115_3:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB115_4
.LBB115_4:                              # %cond.end
	movl	%eax, -232(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB115_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB115_7
.LBB115_6:                              # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB115_7
.LBB115_7:                              # %cond.end31
	movl	%eax, -208(%rbp)
.LBB115_8:                              # %if.end
	cmpl	$0, -208(%rbp)
	je	.LBB115_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB115_11
.LBB115_10:                             # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_11
.LBB115_11:                             # %cond.end42
	movl	%eax, -116(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB115_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB115_14
.LBB115_13:                             # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_14
.LBB115_14:                             # %cond.end55
	movl	%eax, -112(%rbp)
	cmpl	$0, -116(%rbp)
	jl	.LBB115_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -112(%rbp)
	jge	.LBB115_17
.LBB115_16:                             # %cond.true58
	movl	$2, %eax
	jmp	.LBB115_21
.LBB115_17:                             # %cond.false59
	movl	-116(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB115_19
# %bb.18:                               # %cond.true61
	movl	-116(%rbp), %eax
	jmp	.LBB115_20
.LBB115_19:                             # %cond.false62
	movl	-112(%rbp), %eax
.LBB115_20:                             # %cond.end63
.LBB115_21:                             # %cond.end65
	movl	%eax, -96(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-184(%rbp), %rdx
	leaq	-176(%rbp), %rcx
	leaq	-172(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB115_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_49 Depth 2
                                        #       Child Loop BB115_51 Depth 3
                                        #     Child Loop BB115_64 Depth 2
                                        #       Child Loop BB115_66 Depth 3
                                        #     Child Loop BB115_73 Depth 2
                                        #       Child Loop BB115_75 Depth 3
                                        #     Child Loop BB115_81 Depth 2
                                        #       Child Loop BB115_83 Depth 3
                                        #     Child Loop BB115_91 Depth 2
                                        #       Child Loop BB115_93 Depth 3
                                        #     Child Loop BB115_99 Depth 2
                                        #       Child Loop BB115_101 Depth 3
                                        #     Child Loop BB115_107 Depth 2
                                        #       Child Loop BB115_109 Depth 3
                                        #     Child Loop BB115_115 Depth 2
                                        #       Child Loop BB115_117 Depth 3
                                        #     Child Loop BB115_123 Depth 2
                                        #       Child Loop BB115_125 Depth 3
                                        #     Child Loop BB115_131 Depth 2
                                        #       Child Loop BB115_133 Depth 3
                                        #     Child Loop BB115_166 Depth 2
                                        #       Child Loop BB115_168 Depth 3
                                        #     Child Loop BB115_175 Depth 2
                                        #       Child Loop BB115_177 Depth 3
                                        #     Child Loop BB115_183 Depth 2
                                        #       Child Loop BB115_185 Depth 3
                                        #     Child Loop BB115_191 Depth 2
                                        #       Child Loop BB115_193 Depth 3
                                        #     Child Loop BB115_199 Depth 2
                                        #       Child Loop BB115_201 Depth 3
                                        #         Child Loop BB115_203 Depth 4
                                        #     Child Loop BB115_211 Depth 2
                                        #       Child Loop BB115_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB115_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB115_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB115_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB115_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB115_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB115_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB115_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB115_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB115_28
.LBB115_27:                             # %land.lhs.true
                                        #   in Loop: Header=BB115_22 Depth=1
	cmpl	$0, -176(%rbp)
	movb	$1, %al
	jne	.LBB115_32
.LBB115_28:                             # %lor.lhs.false76
                                        #   in Loop: Header=BB115_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB115_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB115_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB115_31
.LBB115_30:                             # %land.lhs.true80
                                        #   in Loop: Header=BB115_22 Depth=1
	cmpl	$0, -184(%rbp)
	movb	$1, %al
	jne	.LBB115_32
.LBB115_31:                             # %lor.rhs
                                        #   in Loop: Header=BB115_22 Depth=1
	cmpl	$0, -172(%rbp)
	setne	%al
.LBB115_32:                             # %lor.end
                                        #   in Loop: Header=BB115_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB115_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB115_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB115_46
.LBB115_34:                             # %if.then86
                                        #   in Loop: Header=BB115_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB115_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB115_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB115_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB115_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB115_38
.LBB115_37:                             # %if.then92
                                        #   in Loop: Header=BB115_22 Depth=1
	jmp	.LBB115_223
.LBB115_38:                             # %if.end93
                                        #   in Loop: Header=BB115_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB115_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB115_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB115_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB115_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB115_42
.LBB115_41:                             # %if.then99
                                        #   in Loop: Header=BB115_22 Depth=1
	jmp	.LBB115_223
.LBB115_42:                             # %if.end100
                                        #   in Loop: Header=BB115_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB115_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB115_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB115_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB115_22 Depth=1
	jmp	.LBB115_223
.LBB115_45:                             # %if.end105
                                        #   in Loop: Header=BB115_22 Depth=1
	jmp	.LBB115_46
.LBB115_46:                             # %if.end106
                                        #   in Loop: Header=BB115_22 Depth=1
	cmpl	$0, -180(%rbp)
	je	.LBB115_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB115_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB115_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -108(%rbp)
.LBB115_49:                             # %for.cond111
                                        #   Parent Loop BB115_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB115_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB115_49 Depth=2
	movl	$0, -12(%rbp)
.LBB115_51:                             # %for.cond114
                                        #   Parent Loop BB115_22 Depth=1
                                        #     Parent Loop BB115_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB115_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB115_51 Depth=3
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-108(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB115_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB115_51
.LBB115_54:                             # %for.end
                                        #   in Loop: Header=BB115_49 Depth=2
	jmp	.LBB115_55
.LBB115_55:                             # %for.inc133
                                        #   in Loop: Header=BB115_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_49
.LBB115_56:                             # %for.end135
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jne	.LBB115_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB115_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_59
.LBB115_58:                             # %cond.false139
                                        #   in Loop: Header=BB115_22 Depth=1
	vmovsd	.LCPI115_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-136(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB115_59:                             # %cond.end142
                                        #   in Loop: Header=BB115_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB115_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB115_61:                             # %if.end148
                                        #   in Loop: Header=BB115_22 Depth=1
	jmp	.LBB115_221
.LBB115_62:                             # %if.else
                                        #   in Loop: Header=BB115_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB115_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	$0, -16(%rbp)
.LBB115_64:                             # %for.cond151
                                        #   Parent Loop BB115_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB115_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB115_64 Depth=2
	movl	$0, -12(%rbp)
.LBB115_66:                             # %for.cond155
                                        #   Parent Loop BB115_22 Depth=1
                                        #     Parent Loop BB115_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB115_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB115_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB115_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_66
.LBB115_69:                             # %for.end194
                                        #   in Loop: Header=BB115_64 Depth=2
	jmp	.LBB115_70
.LBB115_70:                             # %for.inc195
                                        #   in Loop: Header=BB115_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_64
.LBB115_71:                             # %for.end197
                                        #   in Loop: Header=BB115_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-96(%rbp), %r8d
	leaq	-120(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB115_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	$0, -16(%rbp)
.LBB115_73:                             # %for.cond202
                                        #   Parent Loop BB115_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB115_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB115_73 Depth=2
	movl	$0, -12(%rbp)
.LBB115_75:                             # %for.cond206
                                        #   Parent Loop BB115_22 Depth=1
                                        #     Parent Loop BB115_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB115_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB115_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB115_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_75
.LBB115_78:                             # %for.end224
                                        #   in Loop: Header=BB115_73 Depth=2
	jmp	.LBB115_79
.LBB115_79:                             # %for.inc225
                                        #   in Loop: Header=BB115_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_73
.LBB115_80:                             # %for.end227
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	$0, -20(%rbp)
.LBB115_81:                             # %for.cond228
                                        #   Parent Loop BB115_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_83 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB115_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB115_81 Depth=2
	movl	$0, -24(%rbp)
.LBB115_83:                             # %for.cond232
                                        #   Parent Loop BB115_22 Depth=1
                                        #     Parent Loop BB115_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB115_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB115_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB115_83 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB115_83
.LBB115_86:                             # %for.end249
                                        #   in Loop: Header=BB115_81 Depth=2
	jmp	.LBB115_87
.LBB115_87:                             # %for.inc250
                                        #   in Loop: Header=BB115_81 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_81
.LBB115_88:                             # %for.end252
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	-120(%rbp), %eax
	movl	%eax, -100(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB115_89:                             # %if.end253
                                        #   in Loop: Header=BB115_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB115_220
.LBB115_90:                             # %if.else254
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	$0, -16(%rbp)
.LBB115_91:                             # %for.cond255
                                        #   Parent Loop BB115_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB115_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB115_91 Depth=2
	movl	$0, -12(%rbp)
.LBB115_93:                             # %for.cond259
                                        #   Parent Loop BB115_22 Depth=1
                                        #     Parent Loop BB115_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB115_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB115_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB115_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_93
.LBB115_96:                             # %for.end345
                                        #   in Loop: Header=BB115_91 Depth=2
	jmp	.LBB115_97
.LBB115_97:                             # %for.inc346
                                        #   in Loop: Header=BB115_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_91
.LBB115_98:                             # %for.end348
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	$0, -16(%rbp)
.LBB115_99:                             # %for.cond349
                                        #   Parent Loop BB115_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB115_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB115_99 Depth=2
	movl	$0, -12(%rbp)
.LBB115_101:                            # %for.cond353
                                        #   Parent Loop BB115_22 Depth=1
                                        #     Parent Loop BB115_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB115_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB115_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB115_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_101
.LBB115_104:                            # %for.end368
                                        #   in Loop: Header=BB115_99 Depth=2
	jmp	.LBB115_105
.LBB115_105:                            # %for.inc369
                                        #   in Loop: Header=BB115_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_99
.LBB115_106:                            # %for.end371
                                        #   in Loop: Header=BB115_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-96(%rbp), %r8d
	leaq	-120(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB115_107:                            # %for.cond374
                                        #   Parent Loop BB115_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB115_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB115_107 Depth=2
	movl	$0, -12(%rbp)
.LBB115_109:                            # %for.cond378
                                        #   Parent Loop BB115_22 Depth=1
                                        #     Parent Loop BB115_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB115_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB115_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB115_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_109
.LBB115_112:                            # %for.end402
                                        #   in Loop: Header=BB115_107 Depth=2
	jmp	.LBB115_113
.LBB115_113:                            # %for.inc403
                                        #   in Loop: Header=BB115_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_107
.LBB115_114:                            # %for.end405
                                        #   in Loop: Header=BB115_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %edi
	addl	$4, %edi
	movl	-28(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB115_115:                            # %for.cond409
                                        #   Parent Loop BB115_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB115_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB115_115 Depth=2
	movl	$0, -12(%rbp)
.LBB115_117:                            # %for.cond413
                                        #   Parent Loop BB115_22 Depth=1
                                        #     Parent Loop BB115_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB115_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB115_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB115_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_117
.LBB115_120:                            # %for.end437
                                        #   in Loop: Header=BB115_115 Depth=2
	jmp	.LBB115_121
.LBB115_121:                            # %for.inc438
                                        #   in Loop: Header=BB115_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_115
.LBB115_122:                            # %for.end440
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	-32(%rbp), %edi
	addl	$8, %edi
	movl	-28(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB115_123:                            # %for.cond444
                                        #   Parent Loop BB115_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB115_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB115_123 Depth=2
	movl	$0, -12(%rbp)
.LBB115_125:                            # %for.cond448
                                        #   Parent Loop BB115_22 Depth=1
                                        #     Parent Loop BB115_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB115_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB115_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB115_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_125
.LBB115_128:                            # %for.end463
                                        #   in Loop: Header=BB115_123 Depth=2
	jmp	.LBB115_129
.LBB115_129:                            # %for.inc464
                                        #   in Loop: Header=BB115_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_123
.LBB115_130:                            # %for.end466
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	$0, -16(%rbp)
.LBB115_131:                            # %for.cond467
                                        #   Parent Loop BB115_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB115_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB115_131 Depth=2
	movl	$0, -12(%rbp)
.LBB115_133:                            # %for.cond471
                                        #   Parent Loop BB115_22 Depth=1
                                        #     Parent Loop BB115_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB115_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB115_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB115_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB115_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB115_137
.LBB115_136:                            # %cond.false516
                                        #   in Loop: Header=BB115_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB115_137:                            # %cond.end529
                                        #   in Loop: Header=BB115_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB115_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB115_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB115_143
.LBB115_139:                            # %cond.false535
                                        #   in Loop: Header=BB115_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB115_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB115_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB115_142
.LBB115_141:                            # %cond.false551
                                        #   in Loop: Header=BB115_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB115_142:                            # %cond.end564
                                        #   in Loop: Header=BB115_133 Depth=3
.LBB115_143:                            # %cond.end566
                                        #   in Loop: Header=BB115_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB115_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB115_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB115_146
.LBB115_145:                            # %cond.false588
                                        #   in Loop: Header=BB115_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB115_146:                            # %cond.end598
                                        #   in Loop: Header=BB115_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB115_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB115_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_152
.LBB115_148:                            # %cond.false604
                                        #   in Loop: Header=BB115_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB115_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB115_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB115_151
.LBB115_150:                            # %cond.false617
                                        #   in Loop: Header=BB115_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB115_151:                            # %cond.end627
                                        #   in Loop: Header=BB115_133 Depth=3
.LBB115_152:                            # %cond.end629
                                        #   in Loop: Header=BB115_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB115_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB115_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB115_155
.LBB115_154:                            # %cond.false655
                                        #   in Loop: Header=BB115_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB115_155:                            # %cond.end668
                                        #   in Loop: Header=BB115_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB115_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB115_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB115_161
.LBB115_157:                            # %cond.false674
                                        #   in Loop: Header=BB115_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB115_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB115_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB115_160
.LBB115_159:                            # %cond.false690
                                        #   in Loop: Header=BB115_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB115_160:                            # %cond.end703
                                        #   in Loop: Header=BB115_133 Depth=3
.LBB115_161:                            # %cond.end705
                                        #   in Loop: Header=BB115_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB115_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_133
.LBB115_163:                            # %for.end718
                                        #   in Loop: Header=BB115_131 Depth=2
	jmp	.LBB115_164
.LBB115_164:                            # %for.inc719
                                        #   in Loop: Header=BB115_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_131
.LBB115_165:                            # %for.end721
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -20(%rbp)
.LBB115_166:                            # %for.cond722
                                        #   Parent Loop BB115_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_168 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB115_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB115_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB115_168:                            # %for.cond726
                                        #   Parent Loop BB115_22 Depth=1
                                        #     Parent Loop BB115_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB115_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB115_168 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB115_168
.LBB115_171:                            # %for.end831
                                        #   in Loop: Header=BB115_166 Depth=2
	jmp	.LBB115_172
.LBB115_172:                            # %for.inc832
                                        #   in Loop: Header=BB115_166 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_166
.LBB115_173:                            # %for.end834
                                        #   in Loop: Header=BB115_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-92(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB115_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	$0, -16(%rbp)
.LBB115_175:                            # %for.cond842
                                        #   Parent Loop BB115_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB115_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB115_175 Depth=2
	movl	$0, -12(%rbp)
.LBB115_177:                            # %for.cond846
                                        #   Parent Loop BB115_22 Depth=1
                                        #     Parent Loop BB115_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB115_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB115_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB115_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_177
.LBB115_180:                            # %for.end865
                                        #   in Loop: Header=BB115_175 Depth=2
	jmp	.LBB115_181
.LBB115_181:                            # %for.inc866
                                        #   in Loop: Header=BB115_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_175
.LBB115_182:                            # %for.end868
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	$0, -16(%rbp)
.LBB115_183:                            # %for.cond869
                                        #   Parent Loop BB115_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB115_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB115_183 Depth=2
	movl	$0, -12(%rbp)
.LBB115_185:                            # %for.cond873
                                        #   Parent Loop BB115_22 Depth=1
                                        #     Parent Loop BB115_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB115_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB115_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-32(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB115_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_185
.LBB115_188:                            # %for.end893
                                        #   in Loop: Header=BB115_183 Depth=2
	jmp	.LBB115_189
.LBB115_189:                            # %for.inc894
                                        #   in Loop: Header=BB115_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_183
.LBB115_190:                            # %for.end896
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	$0, -16(%rbp)
.LBB115_191:                            # %for.cond897
                                        #   Parent Loop BB115_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB115_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB115_191 Depth=2
	movl	$0, -12(%rbp)
.LBB115_193:                            # %for.cond901
                                        #   Parent Loop BB115_22 Depth=1
                                        #     Parent Loop BB115_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB115_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB115_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB115_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_193
.LBB115_196:                            # %for.end921
                                        #   in Loop: Header=BB115_191 Depth=2
	jmp	.LBB115_197
.LBB115_197:                            # %for.inc922
                                        #   in Loop: Header=BB115_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_191
.LBB115_198:                            # %for.end924
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	$0, -12(%rbp)
.LBB115_199:                            # %for.cond925
                                        #   Parent Loop BB115_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_201 Depth 3
                                        #         Child Loop BB115_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB115_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB115_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -20(%rbp)
.LBB115_201:                            # %for.cond985
                                        #   Parent Loop BB115_22 Depth=1
                                        #     Parent Loop BB115_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB115_203 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB115_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB115_201 Depth=3
	movl	$0, -24(%rbp)
.LBB115_203:                            # %for.cond989
                                        #   Parent Loop BB115_22 Depth=1
                                        #     Parent Loop BB115_199 Depth=2
                                        #       Parent Loop BB115_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -24(%rbp)
	jge	.LBB115_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB115_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB115_203 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB115_203
.LBB115_206:                            # %for.end1011
                                        #   in Loop: Header=BB115_201 Depth=3
	jmp	.LBB115_207
.LBB115_207:                            # %for.inc1012
                                        #   in Loop: Header=BB115_201 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_201
.LBB115_208:                            # %for.end1014
                                        #   in Loop: Header=BB115_199 Depth=2
	jmp	.LBB115_209
.LBB115_209:                            # %for.inc1015
                                        #   in Loop: Header=BB115_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_199
.LBB115_210:                            # %for.end1017
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	$0, -20(%rbp)
.LBB115_211:                            # %for.cond1018
                                        #   Parent Loop BB115_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_213 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB115_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB115_211 Depth=2
	movl	$0, -24(%rbp)
.LBB115_213:                            # %for.cond1022
                                        #   Parent Loop BB115_22 Depth=1
                                        #     Parent Loop BB115_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB115_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB115_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB115_213 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB115_213
.LBB115_216:                            # %for.end1040
                                        #   in Loop: Header=BB115_211 Depth=2
	jmp	.LBB115_217
.LBB115_217:                            # %for.inc1041
                                        #   in Loop: Header=BB115_211 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_211
.LBB115_218:                            # %for.end1043
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	-120(%rbp), %eax
	movl	%eax, -100(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB115_219:                            # %if.end1044
                                        #   in Loop: Header=BB115_22 Depth=1
	jmp	.LBB115_220
.LBB115_220:                            # %if.end1045
                                        #   in Loop: Header=BB115_22 Depth=1
	jmp	.LBB115_221
.LBB115_221:                            # %if.end1046
                                        #   in Loop: Header=BB115_22 Depth=1
	jmp	.LBB115_222
.LBB115_222:                            # %if.end1047
                                        #   in Loop: Header=BB115_22 Depth=1
	jmp	.LBB115_223
.LBB115_223:                            # %for.inc1048
                                        #   in Loop: Header=BB115_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB115_22
.LBB115_224:                            # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-168(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-160(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB115_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_230
.LBB115_226:                            # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB115_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB115_229
.LBB115_228:                            # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB115_229:                            # %cond.end1065
.LBB115_230:                            # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	shll	$2, %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB115_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB115_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB115_233:                            # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB115_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB115_233 Depth=1
	movl	$0, -12(%rbp)
.LBB115_235:                            # %for.cond1087
                                        #   Parent Loop BB115_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB115_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB115_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB115_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_235
.LBB115_238:                            # %for.end1128
                                        #   in Loop: Header=BB115_233 Depth=1
	jmp	.LBB115_239
.LBB115_239:                            # %for.inc1129
                                        #   in Loop: Header=BB115_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_233
.LBB115_240:                            # %for.end1131
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-156(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -100(%rbp)
	jmp	.LBB115_317
.LBB115_241:                            # %if.else1133
	movl	$0, -16(%rbp)
.LBB115_242:                            # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB115_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB115_242 Depth=1
	movl	$0, -12(%rbp)
.LBB115_244:                            # %for.cond1138
                                        #   Parent Loop BB115_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB115_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB115_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB115_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_244
.LBB115_247:                            # %for.end1226
                                        #   in Loop: Header=BB115_242 Depth=1
	jmp	.LBB115_248
.LBB115_248:                            # %for.inc1227
                                        #   in Loop: Header=BB115_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_242
.LBB115_249:                            # %for.end1229
	movl	$0, -16(%rbp)
.LBB115_250:                            # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB115_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB115_250 Depth=1
	movl	$0, -12(%rbp)
.LBB115_252:                            # %for.cond1234
                                        #   Parent Loop BB115_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB115_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB115_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB115_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_252
.LBB115_255:                            # %for.end1249
                                        #   in Loop: Header=BB115_250 Depth=1
	jmp	.LBB115_256
.LBB115_256:                            # %for.inc1250
                                        #   in Loop: Header=BB115_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_250
.LBB115_257:                            # %for.end1252
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-156(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -100(%rbp)
	movl	$0, -16(%rbp)
.LBB115_258:                            # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB115_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB115_258 Depth=1
	movl	$0, -12(%rbp)
.LBB115_260:                            # %for.cond1258
                                        #   Parent Loop BB115_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB115_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB115_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB115_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_260
.LBB115_263:                            # %for.end1282
                                        #   in Loop: Header=BB115_258 Depth=1
	jmp	.LBB115_264
.LBB115_264:                            # %for.inc1283
                                        #   in Loop: Header=BB115_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_258
.LBB115_265:                            # %for.end1285
	movl	-32(%rbp), %esi
	addl	$4, %esi
	movl	-28(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB115_266:                            # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB115_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB115_266 Depth=1
	movl	$0, -12(%rbp)
.LBB115_268:                            # %for.cond1328
                                        #   Parent Loop BB115_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB115_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB115_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB115_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_268
.LBB115_271:                            # %for.end1352
                                        #   in Loop: Header=BB115_266 Depth=1
	jmp	.LBB115_272
.LBB115_272:                            # %for.inc1353
                                        #   in Loop: Header=BB115_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_266
.LBB115_273:                            # %for.end1355
	movl	-32(%rbp), %esi
	addl	$8, %esi
	movl	-28(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB115_274:                            # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB115_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB115_274 Depth=1
	movl	$0, -12(%rbp)
.LBB115_276:                            # %for.cond1398
                                        #   Parent Loop BB115_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB115_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB115_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB115_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_276
.LBB115_279:                            # %for.end1413
                                        #   in Loop: Header=BB115_274 Depth=1
	jmp	.LBB115_280
.LBB115_280:                            # %for.inc1414
                                        #   in Loop: Header=BB115_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_274
.LBB115_281:                            # %for.end1416
	movl	$0, -16(%rbp)
.LBB115_282:                            # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB115_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB115_282 Depth=1
	movl	$0, -12(%rbp)
.LBB115_284:                            # %for.cond1421
                                        #   Parent Loop BB115_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB115_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB115_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB115_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB115_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB115_288
.LBB115_287:                            # %cond.false1467
                                        #   in Loop: Header=BB115_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB115_288:                            # %cond.end1480
                                        #   in Loop: Header=BB115_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB115_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB115_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB115_294
.LBB115_290:                            # %cond.false1486
                                        #   in Loop: Header=BB115_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB115_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB115_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB115_293
.LBB115_292:                            # %cond.false1502
                                        #   in Loop: Header=BB115_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB115_293:                            # %cond.end1515
                                        #   in Loop: Header=BB115_284 Depth=2
.LBB115_294:                            # %cond.end1517
                                        #   in Loop: Header=BB115_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB115_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB115_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB115_297
.LBB115_296:                            # %cond.false1541
                                        #   in Loop: Header=BB115_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB115_297:                            # %cond.end1551
                                        #   in Loop: Header=BB115_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB115_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB115_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_303
.LBB115_299:                            # %cond.false1557
                                        #   in Loop: Header=BB115_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB115_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB115_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB115_302
.LBB115_301:                            # %cond.false1570
                                        #   in Loop: Header=BB115_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB115_302:                            # %cond.end1580
                                        #   in Loop: Header=BB115_284 Depth=2
.LBB115_303:                            # %cond.end1582
                                        #   in Loop: Header=BB115_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB115_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB115_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB115_306
.LBB115_305:                            # %cond.false1608
                                        #   in Loop: Header=BB115_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB115_306:                            # %cond.end1621
                                        #   in Loop: Header=BB115_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB115_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB115_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB115_312
.LBB115_308:                            # %cond.false1627
                                        #   in Loop: Header=BB115_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB115_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB115_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB115_311
.LBB115_310:                            # %cond.false1643
                                        #   in Loop: Header=BB115_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB115_311:                            # %cond.end1656
                                        #   in Loop: Header=BB115_284 Depth=2
.LBB115_312:                            # %cond.end1658
                                        #   in Loop: Header=BB115_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB115_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_284
.LBB115_314:                            # %for.end1671
                                        #   in Loop: Header=BB115_282 Depth=1
	jmp	.LBB115_315
.LBB115_315:                            # %for.inc1672
                                        #   in Loop: Header=BB115_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_282
.LBB115_316:                            # %for.end1674
	jmp	.LBB115_317
.LBB115_317:                            # %if.end1675
	jmp	.LBB115_367
.LBB115_318:                            # %if.else1676
	movl	$0, -16(%rbp)
.LBB115_319:                            # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB115_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB115_319 Depth=1
	movl	$0, -12(%rbp)
.LBB115_321:                            # %for.cond1681
                                        #   Parent Loop BB115_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB115_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB115_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB115_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_321
.LBB115_324:                            # %for.end1700
                                        #   in Loop: Header=BB115_319 Depth=1
	jmp	.LBB115_325
.LBB115_325:                            # %for.inc1701
                                        #   in Loop: Header=BB115_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_319
.LBB115_326:                            # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB115_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB115_328:                            # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB115_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB115_328 Depth=1
	movl	$0, -12(%rbp)
.LBB115_330:                            # %for.cond1711
                                        #   Parent Loop BB115_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB115_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB115_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB115_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_330
.LBB115_333:                            # %for.end1731
                                        #   in Loop: Header=BB115_328 Depth=1
	jmp	.LBB115_334
.LBB115_334:                            # %for.inc1732
                                        #   in Loop: Header=BB115_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_328
.LBB115_335:                            # %for.end1734
	movl	$0, -16(%rbp)
.LBB115_336:                            # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB115_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB115_336 Depth=1
	movl	$0, -12(%rbp)
.LBB115_338:                            # %for.cond1739
                                        #   Parent Loop BB115_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB115_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB115_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB115_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_338
.LBB115_341:                            # %for.end1759
                                        #   in Loop: Header=BB115_336 Depth=1
	jmp	.LBB115_342
.LBB115_342:                            # %for.inc1760
                                        #   in Loop: Header=BB115_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_336
.LBB115_343:                            # %for.end1762
	jmp	.LBB115_344
.LBB115_344:                            # %if.end1763
	movl	$0, -20(%rbp)
.LBB115_345:                            # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_347 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB115_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB115_345 Depth=1
	movl	$0, -24(%rbp)
.LBB115_347:                            # %for.cond1768
                                        #   Parent Loop BB115_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB115_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB115_347 Depth=2
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB115_347 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB115_347
.LBB115_350:                            # %for.end1800
                                        #   in Loop: Header=BB115_345 Depth=1
	jmp	.LBB115_351
.LBB115_351:                            # %for.inc1801
                                        #   in Loop: Header=BB115_345 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_345
.LBB115_352:                            # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB115_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB115_354:                            # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_356 Depth 2
                                        #       Child Loop BB115_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB115_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB115_354 Depth=1
	movl	$0, -20(%rbp)
.LBB115_356:                            # %for.cond1811
                                        #   Parent Loop BB115_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_358 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB115_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB115_356 Depth=2
	movl	$0, -24(%rbp)
.LBB115_358:                            # %for.cond1815
                                        #   Parent Loop BB115_354 Depth=1
                                        #     Parent Loop BB115_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB115_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB115_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB115_358 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB115_358
.LBB115_361:                            # %for.end1837
                                        #   in Loop: Header=BB115_356 Depth=2
	jmp	.LBB115_362
.LBB115_362:                            # %for.inc1838
                                        #   in Loop: Header=BB115_356 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_356
.LBB115_363:                            # %for.end1840
                                        #   in Loop: Header=BB115_354 Depth=1
	jmp	.LBB115_364
.LBB115_364:                            # %for.inc1841
                                        #   in Loop: Header=BB115_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_354
.LBB115_365:                            # %for.end1843
	jmp	.LBB115_366
.LBB115_366:                            # %if.end1844
	jmp	.LBB115_367
.LBB115_367:                            # %if.end1845
	movl	-100(%rbp), %ebx
	cmpl	$622935562, -164(%rbp)  # imm = 0x25213E0A
	jne	.LBB115_369
.LBB115_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_369:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_368
.Lfunc_end115:
	.size	Mode_Decision_for_4x4IntraBlocks.86, .Lfunc_end115-Mode_Decision_for_4x4IntraBlocks.86
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.87 # -- Begin function SetCoeffAndReconstruction8x8.87
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.87,@function
SetCoeffAndReconstruction8x8.87:        # @SetCoeffAndReconstruction8x8.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1093024600, -40(%rbp)  # imm = 0x41263B58
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB116_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB116_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB116_4
.LBB116_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB116_4
.LBB116_4:                              # %cond.end
	movl	%ecx, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB116_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB116_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB116_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB116_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB116_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_6
.LBB116_9:                              # %for.end
	cmpl	$0, -28(%rbp)
	je	.LBB116_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB116_11:                             # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB116_11 Depth=1
	movl	$0, -4(%rbp)
.LBB116_13:                             # %for.cond20
                                        #   Parent Loop BB116_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB116_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB116_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_13
.LBB116_16:                             # %for.end52
                                        #   in Loop: Header=BB116_11 Depth=1
	jmp	.LBB116_17
.LBB116_17:                             # %for.inc53
                                        #   in Loop: Header=BB116_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_11
.LBB116_18:                             # %for.end55
	jmp	.LBB116_28
.LBB116_19:                             # %if.else
	movl	$0, -8(%rbp)
.LBB116_20:                             # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB116_20 Depth=1
	movl	$0, -4(%rbp)
.LBB116_22:                             # %for.cond60
                                        #   Parent Loop BB116_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB116_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB116_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_22
.LBB116_25:                             # %for.end86
                                        #   in Loop: Header=BB116_20 Depth=1
	jmp	.LBB116_26
.LBB116_26:                             # %for.inc87
                                        #   in Loop: Header=BB116_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_20
.LBB116_27:                             # %for.end89
	jmp	.LBB116_28
.LBB116_28:                             # %if.end
	movl	$0, -8(%rbp)
.LBB116_29:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB116_29 Depth=1
	movl	$0, -4(%rbp)
.LBB116_31:                             # %for.cond94
                                        #   Parent Loop BB116_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB116_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB116_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB116_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB116_35
.LBB116_34:                             # %cond.false127
                                        #   in Loop: Header=BB116_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB116_35
.LBB116_35:                             # %cond.end128
                                        #   in Loop: Header=BB116_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB116_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_31
.LBB116_37:                             # %for.end141
                                        #   in Loop: Header=BB116_29 Depth=1
	jmp	.LBB116_38
.LBB116_38:                             # %for.inc142
                                        #   in Loop: Header=BB116_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_29
.LBB116_39:                             # %for.end144
	cmpl	$0, -28(%rbp)
	je	.LBB116_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB116_41:                             # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB116_41 Depth=1
	movl	$0, -4(%rbp)
.LBB116_43:                             # %for.cond151
                                        #   Parent Loop BB116_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB116_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB116_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB116_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB116_47
.LBB116_46:                             # %cond.false185
                                        #   in Loop: Header=BB116_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB116_47
.LBB116_47:                             # %cond.end186
                                        #   in Loop: Header=BB116_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB116_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_43
.LBB116_49:                             # %for.end200
                                        #   in Loop: Header=BB116_41 Depth=1
	jmp	.LBB116_50
.LBB116_50:                             # %for.inc201
                                        #   in Loop: Header=BB116_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_41
.LBB116_51:                             # %for.end203
	jmp	.LBB116_52
.LBB116_52:                             # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB116_53:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_55 Depth 2
                                        #       Child Loop BB116_57 Depth 3
                                        #         Child Loop BB116_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB116_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB116_53 Depth=1
	movl	$0, -12(%rbp)
.LBB116_55:                             # %for.cond209
                                        #   Parent Loop BB116_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_57 Depth 3
                                        #         Child Loop BB116_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB116_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB116_55 Depth=2
	movl	$0, -8(%rbp)
.LBB116_57:                             # %for.cond213
                                        #   Parent Loop BB116_53 Depth=1
                                        #     Parent Loop BB116_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB116_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB116_57 Depth=3
	movl	$0, -4(%rbp)
.LBB116_59:                             # %for.cond217
                                        #   Parent Loop BB116_53 Depth=1
                                        #     Parent Loop BB116_55 Depth=2
                                        #       Parent Loop BB116_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB116_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB116_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB116_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_59
.LBB116_62:                             # %for.end239
                                        #   in Loop: Header=BB116_57 Depth=3
	jmp	.LBB116_63
.LBB116_63:                             # %for.inc240
                                        #   in Loop: Header=BB116_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_57
.LBB116_64:                             # %for.end242
                                        #   in Loop: Header=BB116_55 Depth=2
	jmp	.LBB116_65
.LBB116_65:                             # %for.inc243
                                        #   in Loop: Header=BB116_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_55
.LBB116_66:                             # %for.end245
                                        #   in Loop: Header=BB116_53 Depth=1
	jmp	.LBB116_67
.LBB116_67:                             # %for.inc246
                                        #   in Loop: Header=BB116_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_53
.LBB116_68:                             # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB116_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB116_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB116_83
.LBB116_71:                             # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB116_72:                             # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB116_72 Depth=1
	movl	$0, -4(%rbp)
.LBB116_74:                             # %for.cond262
                                        #   Parent Loop BB116_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB116_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB116_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB116_78
.LBB116_77:                             # %if.else278
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB116_78:                             # %if.end283
                                        #   in Loop: Header=BB116_74 Depth=2
	jmp	.LBB116_79
.LBB116_79:                             # %for.inc284
                                        #   in Loop: Header=BB116_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_74
.LBB116_80:                             # %for.end286
                                        #   in Loop: Header=BB116_72 Depth=1
	jmp	.LBB116_81
.LBB116_81:                             # %for.inc287
                                        #   in Loop: Header=BB116_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_72
.LBB116_82:                             # %for.end289
	jmp	.LBB116_95
.LBB116_83:                             # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB116_84:                             # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB116_84 Depth=1
	movl	$0, -4(%rbp)
.LBB116_86:                             # %for.cond297
                                        #   Parent Loop BB116_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB116_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB116_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB116_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB116_90
.LBB116_89:                             # %if.else317
                                        #   in Loop: Header=BB116_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB116_90:                             # %if.end326
                                        #   in Loop: Header=BB116_86 Depth=2
	jmp	.LBB116_91
.LBB116_91:                             # %for.inc327
                                        #   in Loop: Header=BB116_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_86
.LBB116_92:                             # %for.end329
                                        #   in Loop: Header=BB116_84 Depth=1
	jmp	.LBB116_93
.LBB116_93:                             # %for.inc330
                                        #   in Loop: Header=BB116_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_84
.LBB116_94:                             # %for.end332
	jmp	.LBB116_95
.LBB116_95:                             # %if.end333
	movl	$0, -8(%rbp)
.LBB116_96:                             # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB116_96 Depth=1
	movl	$0, -4(%rbp)
.LBB116_98:                             # %for.cond338
                                        #   Parent Loop BB116_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB116_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB116_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_98
.LBB116_101:                            # %for.end384
                                        #   in Loop: Header=BB116_96 Depth=1
	jmp	.LBB116_102
.LBB116_102:                            # %for.inc385
                                        #   in Loop: Header=BB116_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_96
.LBB116_103:                            # %for.end387
	jmp	.LBB116_157
.LBB116_104:                            # %if.else388
	movl	$0, -16(%rbp)
.LBB116_105:                            # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_107 Depth 2
                                        #       Child Loop BB116_109 Depth 3
                                        #         Child Loop BB116_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB116_105 Depth=1
	movl	$0, -12(%rbp)
.LBB116_107:                            # %for.cond394
                                        #   Parent Loop BB116_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_109 Depth 3
                                        #         Child Loop BB116_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB116_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB116_107 Depth=2
	movl	$0, -8(%rbp)
.LBB116_109:                            # %for.cond398
                                        #   Parent Loop BB116_105 Depth=1
                                        #     Parent Loop BB116_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB116_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB116_109 Depth=3
	movl	$0, -4(%rbp)
.LBB116_111:                            # %for.cond402
                                        #   Parent Loop BB116_105 Depth=1
                                        #     Parent Loop BB116_107 Depth=2
                                        #       Parent Loop BB116_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB116_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB116_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB116_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_111
.LBB116_114:                            # %for.end425
                                        #   in Loop: Header=BB116_109 Depth=3
	jmp	.LBB116_115
.LBB116_115:                            # %for.inc426
                                        #   in Loop: Header=BB116_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_109
.LBB116_116:                            # %for.end428
                                        #   in Loop: Header=BB116_107 Depth=2
	jmp	.LBB116_117
.LBB116_117:                            # %for.inc429
                                        #   in Loop: Header=BB116_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_107
.LBB116_118:                            # %for.end431
                                        #   in Loop: Header=BB116_105 Depth=1
	jmp	.LBB116_119
.LBB116_119:                            # %for.inc432
                                        #   in Loop: Header=BB116_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_105
.LBB116_120:                            # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB116_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB116_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB116_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB116_136
.LBB116_124:                            # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB116_125:                            # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB116_125 Depth=1
	movl	$0, -4(%rbp)
.LBB116_127:                            # %for.cond458
                                        #   Parent Loop BB116_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB116_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB116_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB116_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB116_131
.LBB116_130:                            # %if.else478
                                        #   in Loop: Header=BB116_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB116_131:                            # %if.end483
                                        #   in Loop: Header=BB116_127 Depth=2
	jmp	.LBB116_132
.LBB116_132:                            # %for.inc484
                                        #   in Loop: Header=BB116_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_127
.LBB116_133:                            # %for.end486
                                        #   in Loop: Header=BB116_125 Depth=1
	jmp	.LBB116_134
.LBB116_134:                            # %for.inc487
                                        #   in Loop: Header=BB116_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_125
.LBB116_135:                            # %for.end489
	jmp	.LBB116_148
.LBB116_136:                            # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB116_137:                            # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB116_137 Depth=1
	movl	$0, -4(%rbp)
.LBB116_139:                            # %for.cond498
                                        #   Parent Loop BB116_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB116_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB116_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB116_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB116_143
.LBB116_142:                            # %if.else518
                                        #   in Loop: Header=BB116_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB116_143:                            # %if.end527
                                        #   in Loop: Header=BB116_139 Depth=2
	jmp	.LBB116_144
.LBB116_144:                            # %for.inc528
                                        #   in Loop: Header=BB116_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_139
.LBB116_145:                            # %for.end530
                                        #   in Loop: Header=BB116_137 Depth=1
	jmp	.LBB116_146
.LBB116_146:                            # %for.inc531
                                        #   in Loop: Header=BB116_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_137
.LBB116_147:                            # %for.end533
	jmp	.LBB116_148
.LBB116_148:                            # %if.end534
	movl	$0, -8(%rbp)
.LBB116_149:                            # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB116_149 Depth=1
	movl	$0, -4(%rbp)
.LBB116_151:                            # %for.cond539
                                        #   Parent Loop BB116_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB116_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB116_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_151
.LBB116_154:                            # %for.end585
                                        #   in Loop: Header=BB116_149 Depth=1
	jmp	.LBB116_155
.LBB116_155:                            # %for.inc586
                                        #   in Loop: Header=BB116_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_149
.LBB116_156:                            # %for.end588
	jmp	.LBB116_157
.LBB116_157:                            # %if.end589
	cmpl	$1093024600, -40(%rbp)  # imm = 0x41263B58
	jne	.LBB116_159
.LBB116_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_159:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_158
.Lfunc_end116:
	.size	SetCoeffAndReconstruction8x8.87, .Lfunc_end116-SetCoeffAndReconstruction8x8.87
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.88 # -- Begin function GetBestTransformP8x8.88
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.88,@function
GetBestTransformP8x8.88:                # @GetBestTransformP8x8.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$1710436368, -64(%rbp)  # imm = 0x65F33010
	movl	$0, -36(%rbp)
	movl	$0, -44(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB117_2
# %bb.1:                                # %if.then
	movl	$1, -40(%rbp)
	jmp	.LBB117_25
.LBB117_2:                              # %if.end
	movl	$0, -28(%rbp)
.LBB117_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_5 Depth 2
                                        #       Child Loop BB117_7 Depth 3
                                        #         Child Loop BB117_9 Depth 4
                                        #           Child Loop BB117_11 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB117_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB117_3 Depth=1
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -32(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB117_5:                              # %for.cond3
                                        #   Parent Loop BB117_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_7 Depth 3
                                        #         Child Loop BB117_9 Depth 4
                                        #           Child Loop BB117_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB117_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB117_7:                              # %for.cond7
                                        #   Parent Loop BB117_3 Depth=1
                                        #     Parent Loop BB117_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_9 Depth 4
                                        #           Child Loop BB117_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB117_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -16(%rbp)
.LBB117_9:                              # %for.cond12
                                        #   Parent Loop BB117_3 Depth=1
                                        #     Parent Loop BB117_5 Depth=2
                                        #       Parent Loop BB117_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_11 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB117_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB117_9 Depth=4
	movl	$0, -12(%rbp)
.LBB117_11:                             # %for.cond15
                                        #   Parent Loop BB117_3 Depth=1
                                        #     Parent Loop BB117_5 Depth=2
                                        #       Parent Loop BB117_7 Depth=3
                                        #         Parent Loop BB117_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB117_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB117_11 Depth=5
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB117_11 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB117_11
.LBB117_14:                             # %for.end
                                        #   in Loop: Header=BB117_9 Depth=4
	jmp	.LBB117_15
.LBB117_15:                             # %for.inc51
                                        #   in Loop: Header=BB117_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB117_9
.LBB117_16:                             # %for.end53
                                        #   in Loop: Header=BB117_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB117_7 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_7
.LBB117_18:                             # %for.end57
                                        #   in Loop: Header=BB117_5 Depth=2
	jmp	.LBB117_19
.LBB117_19:                             # %for.inc58
                                        #   in Loop: Header=BB117_5 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_5
.LBB117_20:                             # %for.end60
                                        #   in Loop: Header=BB117_3 Depth=1
	leaq	-336(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB117_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB117_3
.LBB117_22:                             # %for.end66
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB117_24
# %bb.23:                               # %if.then69
	movl	$1, -40(%rbp)
	jmp	.LBB117_25
.LBB117_24:                             # %if.else
	movl	$0, -40(%rbp)
.LBB117_25:                             # %return
	movl	-40(%rbp), %ebx
	cmpl	$1710436368, -64(%rbp)  # imm = 0x65F33010
	jne	.LBB117_27
.LBB117_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_26
.Lfunc_end117:
	.size	GetBestTransformP8x8.88, .Lfunc_end117-GetBestTransformP8x8.88
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.89 # -- Begin function CheckReliabilityOfRef.89
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.89,@function
CheckReliabilityOfRef.89:               # @CheckReliabilityOfRef.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1306999581, -108(%rbp) # imm = 0x4DE73B1D
	movl	%edi, -80(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB118_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB118_6
.LBB118_2:                              # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB118_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB118_5
.LBB118_4:                              # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB118_5
.LBB118_5:                              # %cond.end
.LBB118_6:                              # %cond.end6
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB118_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB118_8:                              # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -104(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB118_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB118_14
.LBB118_10:                             # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB118_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB118_13
.LBB118_12:                             # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB118_13
.LBB118_13:                             # %cond.end20
.LBB118_14:                             # %cond.end22
	movl	%edx, -96(%rbp)
	movl	-96(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB118_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB118_16:                             # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB118_17:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_19 Depth 2
                                        #       Child Loop BB118_23 Depth 3
                                        #         Child Loop BB118_25 Depth 4
                                        #       Child Loop BB118_53 Depth 3
                                        #         Child Loop BB118_55 Depth 4
                                        #           Child Loop BB118_66 Depth 5
                                        #       Child Loop BB118_87 Depth 3
                                        #         Child Loop BB118_89 Depth 4
                                        #           Child Loop BB118_100 Depth 5
                                        #       Child Loop BB118_121 Depth 3
                                        #         Child Loop BB118_123 Depth 4
                                        #           Child Loop BB118_125 Depth 5
                                        #             Child Loop BB118_136 Depth 6
                                        #       Child Loop BB118_159 Depth 3
                                        #         Child Loop BB118_161 Depth 4
                                        #           Child Loop BB118_163 Depth 5
                                        #             Child Loop BB118_174 Depth 6
                                        #       Child Loop BB118_196 Depth 3
                                        #         Child Loop BB118_198 Depth 4
                                        #           Child Loop BB118_212 Depth 5
                                        #           Child Loop BB118_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB118_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB118_17 Depth=1
	movl	-96(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB118_19:                             # %for.cond31
                                        #   Parent Loop BB118_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB118_23 Depth 3
                                        #         Child Loop BB118_25 Depth 4
                                        #       Child Loop BB118_53 Depth 3
                                        #         Child Loop BB118_55 Depth 4
                                        #           Child Loop BB118_66 Depth 5
                                        #       Child Loop BB118_87 Depth 3
                                        #         Child Loop BB118_89 Depth 4
                                        #           Child Loop BB118_100 Depth 5
                                        #       Child Loop BB118_121 Depth 3
                                        #         Child Loop BB118_123 Depth 4
                                        #           Child Loop BB118_125 Depth 5
                                        #             Child Loop BB118_136 Depth 6
                                        #       Child Loop BB118_159 Depth 3
                                        #         Child Loop BB118_161 Depth 4
                                        #           Child Loop BB118_163 Depth 5
                                        #             Child Loop BB118_174 Depth 6
                                        #       Child Loop BB118_196 Depth 3
                                        #         Child Loop BB118_198 Depth 4
                                        #           Child Loop BB118_212 Depth 5
                                        #           Child Loop BB118_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB118_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB118_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB118_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB118_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB118_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -16(%rbp)
.LBB118_23:                             # %for.cond75
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_25 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB118_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB118_23 Depth=3
	movl	$0, -12(%rbp)
.LBB118_25:                             # %for.cond79
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB118_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB118_25 Depth=4
	movq	pixel_map, %rax
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB118_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB118_29
.LBB118_28:                             # %cond.false87
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB118_29:                             # %cond.end89
                                        #   in Loop: Header=BB118_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB118_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB118_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB118_35
.LBB118_31:                             # %cond.false94
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB118_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB118_34
.LBB118_33:                             # %cond.false99
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB118_34:                             # %cond.end101
                                        #   in Loop: Header=BB118_25 Depth=4
.LBB118_35:                             # %cond.end103
                                        #   in Loop: Header=BB118_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB118_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB118_38
.LBB118_37:                             # %cond.false111
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB118_38:                             # %cond.end113
                                        #   in Loop: Header=BB118_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB118_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB118_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB118_44
.LBB118_40:                             # %cond.false118
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB118_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB118_43
.LBB118_42:                             # %cond.false123
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB118_43:                             # %cond.end125
                                        #   in Loop: Header=BB118_25 Depth=4
.LBB118_44:                             # %cond.end127
                                        #   in Loop: Header=BB118_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_46:                             # %if.end
                                        #   in Loop: Header=BB118_25 Depth=4
	jmp	.LBB118_47
.LBB118_47:                             # %for.inc
                                        #   in Loop: Header=BB118_25 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_25
.LBB118_48:                             # %for.end
                                        #   in Loop: Header=BB118_23 Depth=3
	jmp	.LBB118_49
.LBB118_49:                             # %for.inc135
                                        #   in Loop: Header=BB118_23 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_23
.LBB118_50:                             # %for.end137
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_262
.LBB118_51:                             # %if.else
                                        #   in Loop: Header=BB118_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB118_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -16(%rbp)
.LBB118_53:                             # %for.cond141
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_55 Depth 4
                                        #           Child Loop BB118_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB118_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB118_53 Depth=3
	movl	$0, -12(%rbp)
.LBB118_55:                             # %for.cond145
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB118_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB118_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB118_59
.LBB118_58:                             # %cond.false153
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_59:                             # %cond.end155
                                        #   in Loop: Header=BB118_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB118_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB118_65
.LBB118_61:                             # %cond.false160
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB118_64
.LBB118_63:                             # %cond.false165
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_64:                             # %cond.end167
                                        #   in Loop: Header=BB118_55 Depth=4
.LBB118_65:                             # %cond.end169
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -32(%rbp)
.LBB118_66:                             # %for.cond171
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_53 Depth=3
                                        #         Parent Loop BB118_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB118_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	addl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_70
.LBB118_69:                             # %cond.false180
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
.LBB118_70:                             # %cond.end183
                                        #   in Loop: Header=BB118_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB118_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_76
.LBB118_72:                             # %cond.false188
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	addl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_75
.LBB118_74:                             # %cond.false194
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
.LBB118_75:                             # %cond.end197
                                        #   in Loop: Header=BB118_66 Depth=5
.LBB118_76:                             # %cond.end199
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_78:                             # %if.end209
                                        #   in Loop: Header=BB118_66 Depth=5
	jmp	.LBB118_79
.LBB118_79:                             # %for.inc210
                                        #   in Loop: Header=BB118_66 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB118_66
.LBB118_80:                             # %for.end212
                                        #   in Loop: Header=BB118_55 Depth=4
	jmp	.LBB118_81
.LBB118_81:                             # %for.inc213
                                        #   in Loop: Header=BB118_55 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_55
.LBB118_82:                             # %for.end215
                                        #   in Loop: Header=BB118_53 Depth=3
	jmp	.LBB118_83
.LBB118_83:                             # %for.inc216
                                        #   in Loop: Header=BB118_53 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_53
.LBB118_84:                             # %for.end218
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_261
.LBB118_85:                             # %if.else219
                                        #   in Loop: Header=BB118_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB118_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -16(%rbp)
.LBB118_87:                             # %for.cond223
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_89 Depth 4
                                        #           Child Loop BB118_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB118_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB118_87 Depth=3
	movl	$0, -12(%rbp)
.LBB118_89:                             # %for.cond227
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB118_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB118_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB118_93
.LBB118_92:                             # %cond.false235
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_93:                             # %cond.end237
                                        #   in Loop: Header=BB118_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB118_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB118_99
.LBB118_95:                             # %cond.false242
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB118_98
.LBB118_97:                             # %cond.false247
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_98:                             # %cond.end249
                                        #   in Loop: Header=BB118_89 Depth=4
.LBB118_99:                             # %cond.end251
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -28(%rbp)
.LBB118_100:                            # %for.cond253
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_87 Depth=3
                                        #         Parent Loop BB118_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB118_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_104
.LBB118_103:                            # %cond.false262
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_104:                            # %cond.end265
                                        #   in Loop: Header=BB118_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB118_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_110
.LBB118_106:                            # %cond.false270
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_109
.LBB118_108:                            # %cond.false276
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_109:                            # %cond.end279
                                        #   in Loop: Header=BB118_100 Depth=5
.LBB118_110:                            # %cond.end281
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_112:                            # %if.end291
                                        #   in Loop: Header=BB118_100 Depth=5
	jmp	.LBB118_113
.LBB118_113:                            # %for.inc292
                                        #   in Loop: Header=BB118_100 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB118_100
.LBB118_114:                            # %for.end294
                                        #   in Loop: Header=BB118_89 Depth=4
	jmp	.LBB118_115
.LBB118_115:                            # %for.inc295
                                        #   in Loop: Header=BB118_89 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_89
.LBB118_116:                            # %for.end297
                                        #   in Loop: Header=BB118_87 Depth=3
	jmp	.LBB118_117
.LBB118_117:                            # %for.inc298
                                        #   in Loop: Header=BB118_87 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_87
.LBB118_118:                            # %for.end300
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_260
.LBB118_119:                            # %if.else301
                                        #   in Loop: Header=BB118_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB118_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -16(%rbp)
.LBB118_121:                            # %for.cond305
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_123 Depth 4
                                        #           Child Loop BB118_125 Depth 5
                                        #             Child Loop BB118_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB118_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB118_121 Depth=3
	movl	$0, -12(%rbp)
.LBB118_123:                            # %for.cond309
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB118_125 Depth 5
                                        #             Child Loop BB118_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB118_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB118_123 Depth=4
	movl	$-2, -28(%rbp)
.LBB118_125:                            # %for.cond313
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_121 Depth=3
                                        #         Parent Loop BB118_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB118_136 Depth 6
	cmpl	$4, -28(%rbp)
	jge	.LBB118_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_129
.LBB118_128:                            # %cond.false322
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_129:                            # %cond.end325
                                        #   in Loop: Header=BB118_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB118_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_135
.LBB118_131:                            # %cond.false330
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_134
.LBB118_133:                            # %cond.false336
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_134:                            # %cond.end339
                                        #   in Loop: Header=BB118_125 Depth=5
.LBB118_135:                            # %cond.end341
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -32(%rbp)
.LBB118_136:                            # %for.cond343
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_121 Depth=3
                                        #         Parent Loop BB118_123 Depth=4
                                        #           Parent Loop BB118_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -32(%rbp)
	jge	.LBB118_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB118_140
.LBB118_139:                            # %cond.false352
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_140:                            # %cond.end355
                                        #   in Loop: Header=BB118_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB118_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB118_146
.LBB118_142:                            # %cond.false360
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB118_145
.LBB118_144:                            # %cond.false366
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_145:                            # %cond.end369
                                        #   in Loop: Header=BB118_136 Depth=6
.LBB118_146:                            # %cond.end371
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_148:                            # %if.end381
                                        #   in Loop: Header=BB118_136 Depth=6
	jmp	.LBB118_149
.LBB118_149:                            # %for.inc382
                                        #   in Loop: Header=BB118_136 Depth=6
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB118_136
.LBB118_150:                            # %for.end384
                                        #   in Loop: Header=BB118_125 Depth=5
	jmp	.LBB118_151
.LBB118_151:                            # %for.inc385
                                        #   in Loop: Header=BB118_125 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB118_125
.LBB118_152:                            # %for.end387
                                        #   in Loop: Header=BB118_123 Depth=4
	jmp	.LBB118_153
.LBB118_153:                            # %for.inc388
                                        #   in Loop: Header=BB118_123 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_123
.LBB118_154:                            # %for.end390
                                        #   in Loop: Header=BB118_121 Depth=3
	jmp	.LBB118_155
.LBB118_155:                            # %for.inc391
                                        #   in Loop: Header=BB118_121 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_121
.LBB118_156:                            # %for.end393
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_259
.LBB118_157:                            # %if.else394
                                        #   in Loop: Header=BB118_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB118_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -16(%rbp)
.LBB118_159:                            # %for.cond398
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_161 Depth 4
                                        #           Child Loop BB118_163 Depth 5
                                        #             Child Loop BB118_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB118_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB118_159 Depth=3
	movl	$0, -12(%rbp)
.LBB118_161:                            # %for.cond402
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB118_163 Depth 5
                                        #             Child Loop BB118_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB118_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB118_161 Depth=4
	movl	$-2, -32(%rbp)
.LBB118_163:                            # %for.cond406
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_159 Depth=3
                                        #         Parent Loop BB118_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB118_174 Depth 6
	cmpl	$4, -32(%rbp)
	jge	.LBB118_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_167
.LBB118_166:                            # %cond.false415
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_167:                            # %cond.end418
                                        #   in Loop: Header=BB118_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB118_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_173
.LBB118_169:                            # %cond.false423
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_172
.LBB118_171:                            # %cond.false429
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_172:                            # %cond.end432
                                        #   in Loop: Header=BB118_163 Depth=5
.LBB118_173:                            # %cond.end434
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -28(%rbp)
.LBB118_174:                            # %for.cond436
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_159 Depth=3
                                        #         Parent Loop BB118_161 Depth=4
                                        #           Parent Loop BB118_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -28(%rbp)
	jge	.LBB118_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB118_178
.LBB118_177:                            # %cond.false445
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_178:                            # %cond.end448
                                        #   in Loop: Header=BB118_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB118_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB118_184
.LBB118_180:                            # %cond.false453
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB118_183
.LBB118_182:                            # %cond.false459
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_183:                            # %cond.end462
                                        #   in Loop: Header=BB118_174 Depth=6
.LBB118_184:                            # %cond.end464
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_186:                            # %if.end474
                                        #   in Loop: Header=BB118_174 Depth=6
	jmp	.LBB118_187
.LBB118_187:                            # %for.inc475
                                        #   in Loop: Header=BB118_174 Depth=6
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB118_174
.LBB118_188:                            # %for.end477
                                        #   in Loop: Header=BB118_163 Depth=5
	jmp	.LBB118_189
.LBB118_189:                            # %for.inc478
                                        #   in Loop: Header=BB118_163 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB118_163
.LBB118_190:                            # %for.end480
                                        #   in Loop: Header=BB118_161 Depth=4
	jmp	.LBB118_191
.LBB118_191:                            # %for.inc481
                                        #   in Loop: Header=BB118_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_161
.LBB118_192:                            # %for.end483
                                        #   in Loop: Header=BB118_159 Depth=3
	jmp	.LBB118_193
.LBB118_193:                            # %for.inc484
                                        #   in Loop: Header=BB118_159 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_159
.LBB118_194:                            # %for.end486
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_258
.LBB118_195:                            # %if.else487
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	$0, -16(%rbp)
.LBB118_196:                            # %for.cond488
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_198 Depth 4
                                        #           Child Loop BB118_212 Depth 5
                                        #           Child Loop BB118_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB118_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB118_196 Depth=3
	movl	$0, -12(%rbp)
.LBB118_198:                            # %for.cond492
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB118_212 Depth 5
                                        #           Child Loop BB118_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB118_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB118_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB118_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB118_202
.LBB118_201:                            # %cond.false500
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB118_202:                            # %cond.end503
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB118_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB118_205
.LBB118_204:                            # %cond.false508
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-48(%rbp), %eax
.LBB118_205:                            # %cond.end509
                                        #   in Loop: Header=BB118_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB118_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB118_211
.LBB118_207:                            # %cond.false514
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB118_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB118_210
.LBB118_209:                            # %cond.false518
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-48(%rbp), %eax
.LBB118_210:                            # %cond.end519
                                        #   in Loop: Header=BB118_198 Depth=4
.LBB118_211:                            # %cond.end521
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -32(%rbp)
.LBB118_212:                            # %for.cond523
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_196 Depth=3
                                        #         Parent Loop BB118_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB118_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_216
.LBB118_215:                            # %cond.false532
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_216:                            # %cond.end535
                                        #   in Loop: Header=BB118_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB118_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_222
.LBB118_218:                            # %cond.false540
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB118_221
.LBB118_220:                            # %cond.false546
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB118_221:                            # %cond.end549
                                        #   in Loop: Header=BB118_212 Depth=5
.LBB118_222:                            # %cond.end551
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_224:                            # %if.end561
                                        #   in Loop: Header=BB118_212 Depth=5
	jmp	.LBB118_225
.LBB118_225:                            # %for.inc562
                                        #   in Loop: Header=BB118_212 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB118_212
.LBB118_226:                            # %for.end564
                                        #   in Loop: Header=BB118_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB118_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB118_229
.LBB118_228:                            # %cond.false569
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB118_229:                            # %cond.end572
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB118_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB118_232
.LBB118_231:                            # %cond.false577
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-44(%rbp), %eax
.LBB118_232:                            # %cond.end578
                                        #   in Loop: Header=BB118_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB118_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB118_238
.LBB118_234:                            # %cond.false583
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB118_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB118_237
.LBB118_236:                            # %cond.false587
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-44(%rbp), %eax
.LBB118_237:                            # %cond.end588
                                        #   in Loop: Header=BB118_198 Depth=4
.LBB118_238:                            # %cond.end590
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -28(%rbp)
.LBB118_239:                            # %for.cond592
                                        #   Parent Loop BB118_17 Depth=1
                                        #     Parent Loop BB118_19 Depth=2
                                        #       Parent Loop BB118_196 Depth=3
                                        #         Parent Loop BB118_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB118_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_243
.LBB118_242:                            # %cond.false601
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_243:                            # %cond.end604
                                        #   in Loop: Header=BB118_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB118_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB118_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB118_249
.LBB118_245:                            # %cond.false609
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB118_248
.LBB118_247:                            # %cond.false615
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB118_248:                            # %cond.end618
                                        #   in Loop: Header=BB118_239 Depth=5
.LBB118_249:                            # %cond.end620
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB118_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB118_267
.LBB118_251:                            # %if.end630
                                        #   in Loop: Header=BB118_239 Depth=5
	jmp	.LBB118_252
.LBB118_252:                            # %for.inc631
                                        #   in Loop: Header=BB118_239 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB118_239
.LBB118_253:                            # %for.end633
                                        #   in Loop: Header=BB118_198 Depth=4
	jmp	.LBB118_254
.LBB118_254:                            # %for.inc634
                                        #   in Loop: Header=BB118_198 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_198
.LBB118_255:                            # %for.end636
                                        #   in Loop: Header=BB118_196 Depth=3
	jmp	.LBB118_256
.LBB118_256:                            # %for.inc637
                                        #   in Loop: Header=BB118_196 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_196
.LBB118_257:                            # %for.end639
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_258
.LBB118_258:                            # %if.end640
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_259
.LBB118_259:                            # %if.end641
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_260
.LBB118_260:                            # %if.end642
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_261
.LBB118_261:                            # %if.end643
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_262
.LBB118_262:                            # %if.end644
                                        #   in Loop: Header=BB118_19 Depth=2
	jmp	.LBB118_263
.LBB118_263:                            # %for.inc645
                                        #   in Loop: Header=BB118_19 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB118_19
.LBB118_264:                            # %for.end647
                                        #   in Loop: Header=BB118_17 Depth=1
	jmp	.LBB118_265
.LBB118_265:                            # %for.inc648
                                        #   in Loop: Header=BB118_17 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB118_17
.LBB118_266:                            # %for.end650
	movl	$1, -56(%rbp)
.LBB118_267:                            # %return
	movl	-56(%rbp), %ebx
	cmpl	$1306999581, -108(%rbp) # imm = 0x4DE73B1D
	jne	.LBB118_269
.LBB118_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_269:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_268
.Lfunc_end118:
	.size	CheckReliabilityOfRef.89, .Lfunc_end118-CheckReliabilityOfRef.89
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.90
.LCPI119_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI119_1:
	.quad	4622945017495814144     # double 12
.LCPI119_2:
	.quad	4607182418800017408     # double 1
.LCPI119_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI119_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI119_5:
	.quad	4611686018427387904     # double 2
.LCPI119_6:
	.quad	4613937818241073152     # double 3
.LCPI119_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI119_8:
	.quad	4616189618054758400     # double 4
.LCPI119_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI119_10:
	.quad	4618441417868443648     # double 6
.LCPI119_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI119_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI119_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI119_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI119_15:
	.quad	4602678819172646912     # double 0.5
.LCPI119_16:
	.quad	4679240012837945344     # double 65536
.LCPI119_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI119_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.90
	.p2align	4, 0x90
	.type	encode_one_macroblock.90,@function
encode_one_macroblock.90:               # @encode_one_macroblock.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI119_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$185756351, -412(%rbp)  # imm = 0xB126ABF
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -480(%rbp)
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -276(%rbp)
	movl	$0, -176(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -252(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -308(%rbp)
	movl	$0, -208(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB119_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB119_4
.LBB119_2:                              # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB119_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB119_5
.LBB119_4:                              # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB119_5:                              # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -300(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -404(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB119_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB119_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB119_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB119_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB119_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB119_11:                             # %land.end
.LBB119_12:                             # %lor.end36
.LBB119_13:                             # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -316(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB119_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB119_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB119_17:                             # %lor.end51
.LBB119_18:                             # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -284(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB119_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB119_21
.LBB119_20:                             # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB119_21
.LBB119_21:                             # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -432(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -400(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -440(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB119_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB119_23:                             # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -280(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -280(%rbp)
	je	.LBB119_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB119_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB119_27
.LBB119_26:                             # %if.else
	movl	$2, -64(%rbp)
.LBB119_27:                             # %if.end
	jmp	.LBB119_29
.LBB119_28:                             # %if.else70
	movl	$0, -64(%rbp)
.LBB119_29:                             # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB119_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB119_31:                             # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB119_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB119_33:                             # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB119_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB119_35:                             # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB119_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB119_37:                             # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB119_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB119_39:                             # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB119_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB119_41:                             # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB119_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB119_43:                             # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB119_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB119_45:                             # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB119_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB119_47:                             # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB119_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB119_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB119_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB119_51:                             # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-404(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB119_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB119_53:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_55 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB119_53 Depth=1
	movl	$0, -56(%rbp)
.LBB119_55:                             # %for.cond156
                                        #   Parent Loop BB119_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB119_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB119_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB119_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB119_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB119_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB119_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB119_59:                             # %if.end183
                                        #   in Loop: Header=BB119_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB119_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB119_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB119_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB119_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB119_62:                             # %if.end202
                                        #   in Loop: Header=BB119_55 Depth=2
	jmp	.LBB119_63
.LBB119_63:                             # %for.inc
                                        #   in Loop: Header=BB119_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB119_55
.LBB119_64:                             # %for.end
                                        #   in Loop: Header=BB119_53 Depth=1
	jmp	.LBB119_65
.LBB119_65:                             # %for.inc203
                                        #   in Loop: Header=BB119_53 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB119_53
.LBB119_66:                             # %for.end205
	jmp	.LBB119_93
.LBB119_67:                             # %if.else206
	cmpl	$0, -280(%rbp)
	je	.LBB119_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB119_69:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_71 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB119_69 Depth=1
	movl	$0, -56(%rbp)
.LBB119_71:                             # %for.cond215
                                        #   Parent Loop BB119_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB119_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB119_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB119_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB119_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB119_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB119_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB119_75:                             # %if.end244
                                        #   in Loop: Header=BB119_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB119_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB119_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB119_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB119_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB119_78:                             # %if.end263
                                        #   in Loop: Header=BB119_71 Depth=2
	jmp	.LBB119_79
.LBB119_79:                             # %for.inc264
                                        #   in Loop: Header=BB119_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB119_71
.LBB119_80:                             # %for.end266
                                        #   in Loop: Header=BB119_69 Depth=1
	jmp	.LBB119_81
.LBB119_81:                             # %for.inc267
                                        #   in Loop: Header=BB119_69 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB119_69
.LBB119_82:                             # %for.end269
	jmp	.LBB119_92
.LBB119_83:                             # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB119_84:                             # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_86 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB119_84 Depth=1
	movl	$0, -56(%rbp)
.LBB119_86:                             # %for.cond277
                                        #   Parent Loop BB119_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB119_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB119_86 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB119_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB119_86
.LBB119_89:                             # %for.end290
                                        #   in Loop: Header=BB119_84 Depth=1
	jmp	.LBB119_90
.LBB119_90:                             # %for.inc291
                                        #   in Loop: Header=BB119_84 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB119_84
.LBB119_91:                             # %for.end293
	jmp	.LBB119_92
.LBB119_92:                             # %if.end294
	jmp	.LBB119_93
.LBB119_93:                             # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI119_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB119_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB119_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB119_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI119_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI119_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB119_99
.LBB119_98:                             # %if.else315
	vmovsd	.LCPI119_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI119_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB119_99:                             # %if.end326
	jmp	.LBB119_159
.LBB119_100:                            # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB119_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB119_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI119_2(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB119_104
.LBB119_103:                            # %cond.false336
	vmovsd	.LCPI119_2(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI119_3(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB119_104:                            # %cond.end340
	vmovsd	%xmm0, -472(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB119_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI119_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI119_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI119_9(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB119_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI119_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI119_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB119_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI119_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB119_109
.LBB119_108:                            # %cond.false357
	vmovsd	.LCPI119_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB119_109:                            # %cond.end359
	vmovsd	.LCPI119_5(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB119_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI119_5(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB119_115
.LBB119_111:                            # %cond.false364
	vmovsd	.LCPI119_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI119_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB119_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI119_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB119_114
.LBB119_113:                            # %cond.false369
	vmovsd	.LCPI119_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB119_114:                            # %cond.end371
.LBB119_115:                            # %cond.end373
	jmp	.LBB119_129
.LBB119_116:                            # %cond.false375
	cmpl	$0, -300(%rbp)
	je	.LBB119_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI119_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI119_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB119_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI119_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB119_120
.LBB119_119:                            # %cond.false382
	vmovsd	.LCPI119_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB119_120:                            # %cond.end384
	vmovsd	.LCPI119_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB119_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI119_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB119_126
.LBB119_122:                            # %cond.false389
	vmovsd	.LCPI119_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI119_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB119_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI119_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB119_125
.LBB119_124:                            # %cond.false394
	vmovsd	.LCPI119_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB119_125:                            # %cond.end396
.LBB119_126:                            # %cond.end398
	jmp	.LBB119_128
.LBB119_127:                            # %cond.false400
	vmovsd	.LCPI119_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB119_128
.LBB119_128:                            # %cond.end401
.LBB119_129:                            # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB119_146
.LBB119_130:                            # %if.else406
	vmovsd	.LCPI119_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI119_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI119_4(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB119_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI119_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB119_145
.LBB119_132:                            # %cond.false415
	cmpl	$0, -300(%rbp)
	je	.LBB119_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI119_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI119_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB119_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI119_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB119_136
.LBB119_135:                            # %cond.false422
	vmovsd	.LCPI119_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB119_136:                            # %cond.end424
	vmovsd	.LCPI119_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB119_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI119_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB119_142
.LBB119_138:                            # %cond.false429
	vmovsd	.LCPI119_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI119_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB119_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI119_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB119_141
.LBB119_140:                            # %cond.false434
	vmovsd	.LCPI119_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB119_141:                            # %cond.end436
.LBB119_142:                            # %cond.end438
	jmp	.LBB119_144
.LBB119_143:                            # %cond.false440
	vmovsd	.LCPI119_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB119_144
.LBB119_144:                            # %cond.end441
.LBB119_145:                            # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB119_146:                            # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB119_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB119_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB119_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI119_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI119_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB119_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI119_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB119_152
.LBB119_151:                            # %cond.false465
	vmovsd	.LCPI119_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB119_152:                            # %cond.end473
	vmovsd	.LCPI119_2(%rip), %xmm1 # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB119_153:                            # %if.end477
	jmp	.LBB119_158
.LBB119_154:                            # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB119_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB119_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI119_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB119_157:                            # %if.end487
	jmp	.LBB119_158
.LBB119_158:                            # %if.end488
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB119_159:                            # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB119_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI119_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB119_161:                            # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB119_166
.LBB119_162:                            # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB119_165
.LBB119_164:                            # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB119_165:                            # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB119_166:                            # %if.end510
	vmovsd	.LCPI119_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI119_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB119_167:                            # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB119_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB119_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB119_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB119_167
.LBB119_170:                            # %for.end522
	movl	$0, -264(%rbp)
.LBB119_171:                            # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_181 Depth 2
                                        #       Child Loop BB119_184 Depth 3
                                        #         Child Loop BB119_190 Depth 4
                                        #         Child Loop BB119_210 Depth 4
                                        #         Child Loop BB119_300 Depth 4
                                        #           Child Loop BB119_302 Depth 5
                                        #         Child Loop BB119_309 Depth 4
                                        #           Child Loop BB119_311 Depth 5
                                        #         Child Loop BB119_326 Depth 4
                                        #           Child Loop BB119_328 Depth 5
                                        #         Child Loop BB119_335 Depth 4
                                        #           Child Loop BB119_337 Depth 5
                                        #         Child Loop BB119_355 Depth 4
                                        #           Child Loop BB119_357 Depth 5
                                        #         Child Loop BB119_374 Depth 4
                                        #           Child Loop BB119_376 Depth 5
                                        #     Child Loop BB119_416 Depth 2
                                        #       Child Loop BB119_418 Depth 3
                                        #         Child Loop BB119_445 Depth 4
                                        #         Child Loop BB119_464 Depth 4
                                        #           Child Loop BB119_466 Depth 5
                                        #         Child Loop BB119_473 Depth 4
                                        #         Child Loop BB119_508 Depth 4
                                        #           Child Loop BB119_510 Depth 5
                                        #         Child Loop BB119_532 Depth 4
                                        #           Child Loop BB119_534 Depth 5
                                        #             Child Loop BB119_536 Depth 6
                                        #         Child Loop BB119_544 Depth 4
                                        #           Child Loop BB119_546 Depth 5
                                        #       Child Loop BB119_569 Depth 3
                                        #         Child Loop BB119_571 Depth 4
                                        #           Child Loop BB119_573 Depth 5
                                        #       Child Loop BB119_581 Depth 3
                                        #         Child Loop BB119_583 Depth 4
                                        #     Child Loop BB119_601 Depth 2
                                        #       Child Loop BB119_603 Depth 3
                                        #         Child Loop BB119_614 Depth 4
                                        #         Child Loop BB119_633 Depth 4
                                        #           Child Loop BB119_635 Depth 5
                                        #         Child Loop BB119_642 Depth 4
                                        #         Child Loop BB119_677 Depth 4
                                        #           Child Loop BB119_679 Depth 5
                                        #         Child Loop BB119_701 Depth 4
                                        #           Child Loop BB119_703 Depth 5
                                        #             Child Loop BB119_705 Depth 6
                                        #         Child Loop BB119_713 Depth 4
                                        #           Child Loop BB119_715 Depth 5
                                        #         Child Loop BB119_723 Depth 4
                                        #           Child Loop BB119_725 Depth 5
                                        #       Child Loop BB119_745 Depth 3
                                        #         Child Loop BB119_747 Depth 4
                                        #           Child Loop BB119_749 Depth 5
                                        #       Child Loop BB119_757 Depth 3
                                        #         Child Loop BB119_759 Depth 4
                                        #       Child Loop BB119_766 Depth 3
                                        #         Child Loop BB119_768 Depth 4
                                        #       Child Loop BB119_778 Depth 3
                                        #         Child Loop BB119_780 Depth 4
                                        #       Child Loop BB119_786 Depth 3
                                        #       Child Loop BB119_791 Depth 3
                                        #         Child Loop BB119_793 Depth 4
                                        #     Child Loop BB119_803 Depth 2
                                        #       Child Loop BB119_805 Depth 3
                                        #     Child Loop BB119_835 Depth 2
                                        #       Child Loop BB119_853 Depth 3
                                        #         Child Loop BB119_908 Depth 4
                                        #           Child Loop BB119_911 Depth 5
                                        #             Child Loop BB119_913 Depth 6
                                        #           Child Loop BB119_920 Depth 5
                                        #             Child Loop BB119_922 Depth 6
                                        #         Child Loop BB119_955 Depth 4
                                        #           Child Loop BB119_957 Depth 5
                                        #     Child Loop BB119_981 Depth 2
                                        #       Child Loop BB119_1014 Depth 3
                                        #         Child Loop BB119_1017 Depth 4
                                        #           Child Loop BB119_1019 Depth 5
                                        #         Child Loop BB119_1026 Depth 4
                                        #           Child Loop BB119_1028 Depth 5
                                        #       Child Loop BB119_1061 Depth 3
                                        #         Child Loop BB119_1063 Depth 4
                                        #     Child Loop BB119_1113 Depth 2
                                        #       Child Loop BB119_1115 Depth 3
                                        #     Child Loop BB119_1127 Depth 2
                                        #       Child Loop BB119_1129 Depth 3
                                        #         Child Loop BB119_1131 Depth 4
                                        #     Child Loop BB119_1141 Depth 2
                                        #       Child Loop BB119_1143 Depth 3
                                        #     Child Loop BB119_1152 Depth 2
                                        #       Child Loop BB119_1154 Depth 3
                                        #     Child Loop BB119_1160 Depth 2
                                        #       Child Loop BB119_1162 Depth 3
                                        #     Child Loop BB119_1174 Depth 2
                                        #       Child Loop BB119_1176 Depth 3
                                        #         Child Loop BB119_1178 Depth 4
                                        #     Child Loop BB119_1189 Depth 2
                                        #       Child Loop BB119_1191 Depth 3
                                        #     Child Loop BB119_1202 Depth 2
                                        #       Child Loop BB119_1204 Depth 3
                                        #     Child Loop BB119_1211 Depth 2
                                        #       Child Loop BB119_1213 Depth 3
                                        #     Child Loop BB119_1221 Depth 2
                                        #       Child Loop BB119_1223 Depth 3
                                        #     Child Loop BB119_1229 Depth 2
                                        #       Child Loop BB119_1231 Depth 3
                                        #     Child Loop BB119_1237 Depth 2
                                        #       Child Loop BB119_1239 Depth 3
                                        #     Child Loop BB119_1245 Depth 2
                                        #       Child Loop BB119_1247 Depth 3
	movl	-264(%rbp), %eax
	cmpl	-316(%rbp), %eax
	jge	.LBB119_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB119_171 Depth=1
	cmpl	$2, -316(%rbp)
	jne	.LBB119_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB119_171 Depth=1
	cmpl	$0, -264(%rbp)
	jne	.LBB119_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB119_176
.LBB119_175:                            # %if.else534
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB119_176:                            # %if.end536
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_177
.LBB119_177:                            # %if.end537
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB119_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB119_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB119_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB119_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB119_180:                            # %if.end542
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB119_181:                            # %for.cond543
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_184 Depth 3
                                        #         Child Loop BB119_190 Depth 4
                                        #         Child Loop BB119_210 Depth 4
                                        #         Child Loop BB119_300 Depth 4
                                        #           Child Loop BB119_302 Depth 5
                                        #         Child Loop BB119_309 Depth 4
                                        #           Child Loop BB119_311 Depth 5
                                        #         Child Loop BB119_326 Depth 4
                                        #           Child Loop BB119_328 Depth 5
                                        #         Child Loop BB119_335 Depth 4
                                        #           Child Loop BB119_337 Depth 5
                                        #         Child Loop BB119_355 Depth 4
                                        #           Child Loop BB119_357 Depth 5
                                        #         Child Loop BB119_374 Depth 4
                                        #           Child Loop BB119_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB119_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB119_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB119_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB119_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB119_184:                            # %for.cond554
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_190 Depth 4
                                        #         Child Loop BB119_210 Depth 4
                                        #         Child Loop BB119_300 Depth 4
                                        #           Child Loop BB119_302 Depth 5
                                        #         Child Loop BB119_309 Depth 4
                                        #           Child Loop BB119_311 Depth 5
                                        #         Child Loop BB119_326 Depth 4
                                        #           Child Loop BB119_328 Depth 5
                                        #         Child Loop BB119_335 Depth 4
                                        #           Child Loop BB119_337 Depth 5
                                        #         Child Loop BB119_355 Depth 4
                                        #           Child Loop BB119_357 Depth 5
                                        #         Child Loop BB119_374 Depth 4
                                        #           Child Loop BB119_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB119_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB119_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB119_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB119_187:                            # %land.end566
                                        #   in Loop: Header=BB119_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB119_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB119_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB119_189:                            # %land.end574
                                        #   in Loop: Header=BB119_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB119_190:                            # %for.cond577
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_181 Depth=2
                                        #       Parent Loop BB119_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB119_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB119_190 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB119_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB119_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB119_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB119_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB119_206
.LBB119_194:                            # %if.then594
                                        #   in Loop: Header=BB119_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB119_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB119_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB119_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB119_198
.LBB119_197:                            # %cond.false604
                                        #   in Loop: Header=BB119_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB119_198:                            # %cond.end607
                                        #   in Loop: Header=BB119_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB119_203
.LBB119_199:                            # %cond.false610
                                        #   in Loop: Header=BB119_190 Depth=4
	vmovsd	.LCPI119_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB119_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB119_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB119_202
.LBB119_201:                            # %cond.false617
                                        #   in Loop: Header=BB119_190 Depth=4
	movl	$1, %eax
	jmp	.LBB119_202
.LBB119_202:                            # %cond.end618
                                        #   in Loop: Header=BB119_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB119_203:                            # %cond.end623
                                        #   in Loop: Header=BB119_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB119_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB119_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB119_205:                            # %if.end636
                                        #   in Loop: Header=BB119_190 Depth=4
	jmp	.LBB119_206
.LBB119_206:                            # %if.end637
                                        #   in Loop: Header=BB119_190 Depth=4
	jmp	.LBB119_207
.LBB119_207:                            # %for.inc638
                                        #   in Loop: Header=BB119_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB119_190
.LBB119_208:                            # %for.end640
                                        #   in Loop: Header=BB119_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB119_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB119_210:                            # %for.cond643
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_181 Depth=2
                                        #       Parent Loop BB119_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB119_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB119_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB119_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB119_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB119_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB119_215
.LBB119_214:                            # %cond.false660
                                        #   in Loop: Header=BB119_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB119_215:                            # %cond.end663
                                        #   in Loop: Header=BB119_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB119_220
.LBB119_216:                            # %cond.false667
                                        #   in Loop: Header=BB119_210 Depth=4
	vmovsd	.LCPI119_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB119_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB119_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB119_219
.LBB119_218:                            # %cond.false674
                                        #   in Loop: Header=BB119_210 Depth=4
	movl	$1, %eax
	jmp	.LBB119_219
.LBB119_219:                            # %cond.end675
                                        #   in Loop: Header=BB119_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB119_220:                            # %cond.end680
                                        #   in Loop: Header=BB119_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB119_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB119_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB119_222:                            # %if.end693
                                        #   in Loop: Header=BB119_210 Depth=4
	jmp	.LBB119_223
.LBB119_223:                            # %for.inc694
                                        #   in Loop: Header=BB119_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB119_210
.LBB119_224:                            # %for.end696
                                        #   in Loop: Header=BB119_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB119_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB119_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB119_228
.LBB119_227:                            # %cond.false706
                                        #   in Loop: Header=BB119_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB119_228:                            # %cond.end709
                                        #   in Loop: Header=BB119_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB119_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB119_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB119_231
.LBB119_230:                            # %cond.false719
                                        #   in Loop: Header=BB119_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB119_231:                            # %cond.end721
                                        #   in Loop: Header=BB119_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB119_236
.LBB119_232:                            # %cond.false726
                                        #   in Loop: Header=BB119_184 Depth=3
	vmovsd	.LCPI119_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB119_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB119_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB119_235
.LBB119_234:                            # %cond.false733
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	$1, %eax
	jmp	.LBB119_235
.LBB119_235:                            # %cond.end734
                                        #   in Loop: Header=BB119_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB119_236:                            # %cond.end739
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB119_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB119_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB119_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB119_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB119_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB119_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB119_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB119_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB119_243
.LBB119_242:                            # %cond.false761
                                        #   in Loop: Header=BB119_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB119_243:                            # %cond.end763
                                        #   in Loop: Header=BB119_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB119_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB119_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB119_246
.LBB119_245:                            # %cond.false773
                                        #   in Loop: Header=BB119_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB119_246:                            # %cond.end775
                                        #   in Loop: Header=BB119_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB119_248
.LBB119_247:                            # %cond.false780
                                        #   in Loop: Header=BB119_184 Depth=3
	vmovsd	.LCPI119_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB119_248:                            # %cond.end784
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB119_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB119_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB119_252
.LBB119_251:                            # %cond.false797
                                        #   in Loop: Header=BB119_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB119_252:                            # %cond.end799
                                        #   in Loop: Header=BB119_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB119_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB119_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB119_255
.LBB119_254:                            # %cond.false809
                                        #   in Loop: Header=BB119_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB119_255:                            # %cond.end811
                                        #   in Loop: Header=BB119_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB119_257
.LBB119_256:                            # %cond.false816
                                        #   in Loop: Header=BB119_184 Depth=3
	vmovsd	.LCPI119_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB119_257:                            # %cond.end820
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	%eax, -188(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-188(%rbp), %eax
	movl	%eax, -188(%rbp)
	jmp	.LBB119_259
.LBB119_258:                            # %if.else824
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -188(%rbp) # imm = 0x7FFFFFFF
.LBB119_259:                            # %if.end825
                                        #   in Loop: Header=BB119_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB119_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB119_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB119_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB119_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB119_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB119_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB119_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB119_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB119_285
.LBB119_266:                            # %if.else845
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB119_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB119_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB119_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB119_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB119_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB119_284
.LBB119_271:                            # %if.else859
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB119_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB119_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB119_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB119_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB119_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB119_283
.LBB119_276:                            # %if.else876
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB119_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB119_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB119_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jg	.LBB119_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB119_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB119_282
.LBB119_281:                            # %if.else893
                                        #   in Loop: Header=BB119_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-188(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB119_282:                            # %if.end898
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_283
.LBB119_283:                            # %if.end899
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_284
.LBB119_284:                            # %if.end900
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_285
.LBB119_285:                            # %if.end901
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_295
.LBB119_286:                            # %if.else902
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB119_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB119_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB119_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB119_294
.LBB119_289:                            # %if.else910
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB119_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB119_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB119_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB119_293
.LBB119_292:                            # %if.else918
                                        #   in Loop: Header=BB119_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB119_293:                            # %if.end920
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_294
.LBB119_294:                            # %if.end921
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_295
.LBB119_295:                            # %if.end922
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_297
.LBB119_296:                            # %if.else923
                                        #   in Loop: Header=BB119_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB119_297:                            # %if.end925
                                        #   in Loop: Header=BB119_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB119_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB119_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB119_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	$0, -24(%rbp)
.LBB119_300:                            # %for.cond933
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_181 Depth=2
                                        #       Parent Loop BB119_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB119_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB119_300 Depth=4
	movl	$0, -20(%rbp)
.LBB119_302:                            # %for.cond937
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_181 Depth=2
                                        #       Parent Loop BB119_184 Depth=3
                                        #         Parent Loop BB119_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB119_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB119_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB119_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_302
.LBB119_305:                            # %for.end999
                                        #   in Loop: Header=BB119_300 Depth=4
	jmp	.LBB119_306
.LBB119_306:                            # %for.inc1000
                                        #   in Loop: Header=BB119_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_300
.LBB119_307:                            # %for.end1002
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_323
.LBB119_308:                            # %if.else1003
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	$0, -24(%rbp)
.LBB119_309:                            # %for.cond1004
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_181 Depth=2
                                        #       Parent Loop BB119_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB119_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB119_309 Depth=4
	movl	$0, -20(%rbp)
.LBB119_311:                            # %for.cond1008
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_181 Depth=2
                                        #       Parent Loop BB119_184 Depth=3
                                        #         Parent Loop BB119_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB119_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB119_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB119_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB119_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB119_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB119_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB119_316
.LBB119_315:                            # %cond.false1024
                                        #   in Loop: Header=BB119_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB119_316:                            # %cond.end1025
                                        #   in Loop: Header=BB119_311 Depth=5
	movq	%rax, -448(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB119_318
.LBB119_317:                            # %if.else1111
                                        #   in Loop: Header=BB119_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB119_318:                            # %if.end1217
                                        #   in Loop: Header=BB119_311 Depth=5
	jmp	.LBB119_319
.LBB119_319:                            # %for.inc1218
                                        #   in Loop: Header=BB119_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_311
.LBB119_320:                            # %for.end1220
                                        #   in Loop: Header=BB119_309 Depth=4
	jmp	.LBB119_321
.LBB119_321:                            # %for.inc1221
                                        #   in Loop: Header=BB119_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_309
.LBB119_322:                            # %for.end1223
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_323
.LBB119_323:                            # %if.end1224
                                        #   in Loop: Header=BB119_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB119_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB119_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB119_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	$0, -24(%rbp)
.LBB119_326:                            # %for.cond1231
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_181 Depth=2
                                        #       Parent Loop BB119_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB119_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB119_326 Depth=4
	movl	$0, -20(%rbp)
.LBB119_328:                            # %for.cond1235
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_181 Depth=2
                                        #       Parent Loop BB119_184 Depth=3
                                        #         Parent Loop BB119_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB119_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB119_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB119_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_328
.LBB119_331:                            # %for.end1303
                                        #   in Loop: Header=BB119_326 Depth=4
	jmp	.LBB119_332
.LBB119_332:                            # %for.inc1304
                                        #   in Loop: Header=BB119_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_326
.LBB119_333:                            # %for.end1306
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_351
.LBB119_334:                            # %if.else1307
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	$0, -24(%rbp)
.LBB119_335:                            # %for.cond1308
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_181 Depth=2
                                        #       Parent Loop BB119_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB119_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB119_335 Depth=4
	movl	$0, -20(%rbp)
.LBB119_337:                            # %for.cond1312
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_181 Depth=2
                                        #       Parent Loop BB119_184 Depth=3
                                        #         Parent Loop BB119_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB119_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB119_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB119_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB119_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB119_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB119_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB119_342
.LBB119_341:                            # %cond.false1330
                                        #   in Loop: Header=BB119_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB119_342:                            # %cond.end1332
                                        #   in Loop: Header=BB119_337 Depth=5
	movq	%rax, -424(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB119_346
.LBB119_343:                            # %if.else1419
                                        #   in Loop: Header=BB119_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB119_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB119_345:                            # %if.end1529
                                        #   in Loop: Header=BB119_337 Depth=5
	jmp	.LBB119_346
.LBB119_346:                            # %if.end1530
                                        #   in Loop: Header=BB119_337 Depth=5
	jmp	.LBB119_347
.LBB119_347:                            # %for.inc1531
                                        #   in Loop: Header=BB119_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_337
.LBB119_348:                            # %for.end1533
                                        #   in Loop: Header=BB119_335 Depth=4
	jmp	.LBB119_349
.LBB119_349:                            # %for.inc1534
                                        #   in Loop: Header=BB119_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_335
.LBB119_350:                            # %for.end1536
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_351
.LBB119_351:                            # %if.end1537
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_352
.LBB119_352:                            # %if.end1538
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_393
.LBB119_353:                            # %if.else1539
                                        #   in Loop: Header=BB119_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB119_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB119_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB119_355:                            # %for.cond1546
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_181 Depth=2
                                        #       Parent Loop BB119_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB119_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB119_355 Depth=4
	movl	$0, -20(%rbp)
.LBB119_357:                            # %for.cond1550
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_181 Depth=2
                                        #       Parent Loop BB119_184 Depth=3
                                        #         Parent Loop BB119_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB119_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB119_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB119_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB119_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB119_361
.LBB119_360:                            # %if.else1596
                                        #   in Loop: Header=BB119_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB119_361:                            # %if.end1676
                                        #   in Loop: Header=BB119_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB119_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB119_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB119_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB119_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB119_367
.LBB119_364:                            # %if.else1721
                                        #   in Loop: Header=BB119_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB119_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB119_366:                            # %if.end1805
                                        #   in Loop: Header=BB119_357 Depth=5
	jmp	.LBB119_367
.LBB119_367:                            # %if.end1806
                                        #   in Loop: Header=BB119_357 Depth=5
	jmp	.LBB119_368
.LBB119_368:                            # %if.end1807
                                        #   in Loop: Header=BB119_357 Depth=5
	jmp	.LBB119_369
.LBB119_369:                            # %for.inc1808
                                        #   in Loop: Header=BB119_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_357
.LBB119_370:                            # %for.end1810
                                        #   in Loop: Header=BB119_355 Depth=4
	jmp	.LBB119_371
.LBB119_371:                            # %for.inc1811
                                        #   in Loop: Header=BB119_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_355
.LBB119_372:                            # %for.end1813
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_392
.LBB119_373:                            # %if.else1814
                                        #   in Loop: Header=BB119_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB119_374:                            # %for.cond1818
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_181 Depth=2
                                        #       Parent Loop BB119_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB119_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB119_374 Depth=4
	movl	$0, -20(%rbp)
.LBB119_376:                            # %for.cond1822
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_181 Depth=2
                                        #       Parent Loop BB119_184 Depth=3
                                        #         Parent Loop BB119_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB119_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB119_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB119_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB119_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB119_380
.LBB119_379:                            # %if.else1868
                                        #   in Loop: Header=BB119_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB119_380:                            # %if.end1948
                                        #   in Loop: Header=BB119_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB119_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB119_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB119_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB119_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB119_386
.LBB119_383:                            # %if.else1993
                                        #   in Loop: Header=BB119_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB119_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB119_385:                            # %if.end2077
                                        #   in Loop: Header=BB119_376 Depth=5
	jmp	.LBB119_386
.LBB119_386:                            # %if.end2078
                                        #   in Loop: Header=BB119_376 Depth=5
	jmp	.LBB119_387
.LBB119_387:                            # %if.end2079
                                        #   in Loop: Header=BB119_376 Depth=5
	jmp	.LBB119_388
.LBB119_388:                            # %for.inc2080
                                        #   in Loop: Header=BB119_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_376
.LBB119_389:                            # %for.end2082
                                        #   in Loop: Header=BB119_374 Depth=4
	jmp	.LBB119_390
.LBB119_390:                            # %for.inc2083
                                        #   in Loop: Header=BB119_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_374
.LBB119_391:                            # %for.end2085
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_392
.LBB119_392:                            # %if.end2086
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_393
.LBB119_393:                            # %if.end2087
                                        #   in Loop: Header=BB119_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB119_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB119_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB119_399
.LBB119_395:                            # %if.else2106
                                        #   in Loop: Header=BB119_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB119_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB119_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB119_398
.LBB119_397:                            # %if.else2131
                                        #   in Loop: Header=BB119_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB119_398:                            # %if.end2132
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_399
.LBB119_399:                            # %if.end2133
                                        #   in Loop: Header=BB119_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB119_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB119_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB119_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB119_402:                            # %if.end2143
                                        #   in Loop: Header=BB119_184 Depth=3
	jmp	.LBB119_403
.LBB119_403:                            # %for.inc2144
                                        #   in Loop: Header=BB119_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB119_184
.LBB119_404:                            # %for.end2146
                                        #   in Loop: Header=BB119_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB119_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB119_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB119_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB119_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB119_407:                            # %if.end2155
                                        #   in Loop: Header=BB119_181 Depth=2
	jmp	.LBB119_408
.LBB119_408:                            # %if.end2156
                                        #   in Loop: Header=BB119_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB119_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB119_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -308(%rbp)
.LBB119_410:                            # %if.end2161
                                        #   in Loop: Header=BB119_181 Depth=2
	jmp	.LBB119_411
.LBB119_411:                            # %if.end2162
                                        #   in Loop: Header=BB119_181 Depth=2
	jmp	.LBB119_412
.LBB119_412:                            # %for.inc2163
                                        #   in Loop: Header=BB119_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB119_181
.LBB119_413:                            # %for.end2165
                                        #   in Loop: Header=BB119_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB119_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB119_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB119_416:                            # %for.cond2172
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_418 Depth 3
                                        #         Child Loop BB119_445 Depth 4
                                        #         Child Loop BB119_464 Depth 4
                                        #           Child Loop BB119_466 Depth 5
                                        #         Child Loop BB119_473 Depth 4
                                        #         Child Loop BB119_508 Depth 4
                                        #           Child Loop BB119_510 Depth 5
                                        #         Child Loop BB119_532 Depth 4
                                        #           Child Loop BB119_534 Depth 5
                                        #             Child Loop BB119_536 Depth 6
                                        #         Child Loop BB119_544 Depth 4
                                        #           Child Loop BB119_546 Depth 5
                                        #       Child Loop BB119_569 Depth 3
                                        #         Child Loop BB119_571 Depth 4
                                        #           Child Loop BB119_573 Depth 5
                                        #       Child Loop BB119_581 Depth 3
                                        #         Child Loop BB119_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB119_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB119_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI119_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -180(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB119_418:                            # %for.cond2184
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_445 Depth 4
                                        #         Child Loop BB119_464 Depth 4
                                        #           Child Loop BB119_466 Depth 5
                                        #         Child Loop BB119_473 Depth 4
                                        #         Child Loop BB119_508 Depth 4
                                        #           Child Loop BB119_510 Depth 5
                                        #         Child Loop BB119_532 Depth 4
                                        #           Child Loop BB119_534 Depth 5
                                        #             Child Loop BB119_536 Depth 6
                                        #         Child Loop BB119_544 Depth 4
                                        #           Child Loop BB119_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB119_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB119_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB119_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB119_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB119_423
.LBB119_421:                            # %lor.lhs.false2196
                                        #   in Loop: Header=BB119_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB119_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB119_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB119_557
.LBB119_423:                            # %if.then2201
                                        #   in Loop: Header=BB119_418 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB119_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB119_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB119_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	$0, -216(%rbp)
	movl	$0, -220(%rbp)
	movl	-28(%rbp), %edi
	leaq	-220(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -216(%rbp)
	cmpl	$2147483647, -216(%rbp) # imm = 0x7FFFFFFF
	je	.LBB119_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB119_418 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB119_428
.LBB119_427:                            # %if.then2214
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB119_429
.LBB119_428:                            # %if.else2215
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-216(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-220(%rbp), %eax
	addl	-208(%rbp), %eax
	movl	%eax, -208(%rbp)
.LBB119_429:                            # %if.end2218
                                        #   in Loop: Header=BB119_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB119_431
	jmp	.LBB119_430
.LBB119_430:                            # %if.end2218
                                        #   in Loop: Header=BB119_418 Depth=3
	subl	$2, %eax
	je	.LBB119_438
	jmp	.LBB119_439
.LBB119_431:                            # %sw.bb
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-220(%rbp), %eax
	cmpl	-216(%rbp), %eax
	jl	.LBB119_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB119_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB119_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB119_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB119_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB119_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB119_436
.LBB119_435:                            # %if.then2231
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-220(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB119_437
.LBB119_436:                            # %if.else2232
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB119_437:                            # %if.end2233
                                        #   in Loop: Header=BB119_418 Depth=3
	jmp	.LBB119_440
.LBB119_438:                            # %sw.bb2234
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-220(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB119_440
.LBB119_439:                            # %sw.default
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB119_440:                            # %sw.epilog
                                        #   in Loop: Header=BB119_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB119_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-180(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB119_442:                            # %if.end2240
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB119_443:                            # %if.end2242
                                        #   in Loop: Header=BB119_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB119_518
.LBB119_444:                            # %if.else2278
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB119_445:                            # %for.cond2279
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_416 Depth=2
                                        #       Parent Loop BB119_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB119_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB119_445 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB119_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB119_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB119_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB119_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB119_461
.LBB119_449:                            # %if.then2296
                                        #   in Loop: Header=BB119_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB119_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB119_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB119_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB119_453
.LBB119_452:                            # %cond.false2306
                                        #   in Loop: Header=BB119_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB119_453:                            # %cond.end2309
                                        #   in Loop: Header=BB119_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB119_458
.LBB119_454:                            # %cond.false2313
                                        #   in Loop: Header=BB119_445 Depth=4
	vmovsd	.LCPI119_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB119_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB119_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB119_457
.LBB119_456:                            # %cond.false2320
                                        #   in Loop: Header=BB119_445 Depth=4
	movl	$1, %eax
	jmp	.LBB119_457
.LBB119_457:                            # %cond.end2321
                                        #   in Loop: Header=BB119_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB119_458:                            # %cond.end2326
                                        #   in Loop: Header=BB119_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB119_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB119_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB119_460:                            # %if.end2339
                                        #   in Loop: Header=BB119_445 Depth=4
	jmp	.LBB119_461
.LBB119_461:                            # %if.end2340
                                        #   in Loop: Header=BB119_445 Depth=4
	jmp	.LBB119_462
.LBB119_462:                            # %for.inc2341
                                        #   in Loop: Header=BB119_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB119_445
.LBB119_463:                            # %for.end2343
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	$0, -24(%rbp)
.LBB119_464:                            # %for.cond2344
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_416 Depth=2
                                        #       Parent Loop BB119_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB119_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB119_464 Depth=4
	movl	$0, -20(%rbp)
.LBB119_466:                            # %for.cond2348
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_416 Depth=2
                                        #       Parent Loop BB119_418 Depth=3
                                        #         Parent Loop BB119_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB119_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB119_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB119_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_466
.LBB119_469:                            # %for.end2405
                                        #   in Loop: Header=BB119_464 Depth=4
	jmp	.LBB119_470
.LBB119_470:                            # %for.inc2406
                                        #   in Loop: Header=BB119_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_464
.LBB119_471:                            # %for.end2408
                                        #   in Loop: Header=BB119_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB119_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB119_473:                            # %for.cond2411
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_416 Depth=2
                                        #       Parent Loop BB119_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB119_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB119_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB119_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB119_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB119_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB119_478
.LBB119_477:                            # %cond.false2428
                                        #   in Loop: Header=BB119_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB119_478:                            # %cond.end2431
                                        #   in Loop: Header=BB119_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB119_483
.LBB119_479:                            # %cond.false2435
                                        #   in Loop: Header=BB119_473 Depth=4
	vmovsd	.LCPI119_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB119_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB119_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB119_482
.LBB119_481:                            # %cond.false2442
                                        #   in Loop: Header=BB119_473 Depth=4
	movl	$1, %eax
	jmp	.LBB119_482
.LBB119_482:                            # %cond.end2443
                                        #   in Loop: Header=BB119_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB119_483:                            # %cond.end2448
                                        #   in Loop: Header=BB119_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB119_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB119_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB119_485:                            # %if.end2461
                                        #   in Loop: Header=BB119_473 Depth=4
	jmp	.LBB119_486
.LBB119_486:                            # %for.inc2462
                                        #   in Loop: Header=BB119_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB119_473
.LBB119_487:                            # %for.end2464
                                        #   in Loop: Header=BB119_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB119_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB119_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB119_491
.LBB119_490:                            # %cond.false2474
                                        #   in Loop: Header=BB119_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB119_491:                            # %cond.end2477
                                        #   in Loop: Header=BB119_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB119_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB119_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB119_494
.LBB119_493:                            # %cond.false2487
                                        #   in Loop: Header=BB119_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB119_494:                            # %cond.end2489
                                        #   in Loop: Header=BB119_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB119_499
.LBB119_495:                            # %cond.false2494
                                        #   in Loop: Header=BB119_418 Depth=3
	vmovsd	.LCPI119_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB119_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB119_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB119_498
.LBB119_497:                            # %cond.false2501
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	$1, %eax
	jmp	.LBB119_498
.LBB119_498:                            # %cond.end2502
                                        #   in Loop: Header=BB119_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB119_499:                            # %cond.end2507
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB119_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB119_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB119_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB119_507
.LBB119_502:                            # %if.else2517
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB119_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB119_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB119_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB119_506
.LBB119_505:                            # %if.else2524
                                        #   in Loop: Header=BB119_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB119_506:                            # %if.end2525
                                        #   in Loop: Header=BB119_418 Depth=3
	jmp	.LBB119_507
.LBB119_507:                            # %if.end2526
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	$0, -24(%rbp)
.LBB119_508:                            # %for.cond2527
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_416 Depth=2
                                        #       Parent Loop BB119_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB119_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB119_508 Depth=4
	movl	$0, -20(%rbp)
.LBB119_510:                            # %for.cond2531
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_416 Depth=2
                                        #       Parent Loop BB119_418 Depth=3
                                        #         Parent Loop BB119_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB119_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB119_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB119_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_510
.LBB119_513:                            # %for.end2567
                                        #   in Loop: Header=BB119_508 Depth=4
	jmp	.LBB119_514
.LBB119_514:                            # %for.inc2568
                                        #   in Loop: Header=BB119_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_508
.LBB119_515:                            # %for.end2570
                                        #   in Loop: Header=BB119_418 Depth=3
	jmp	.LBB119_517
.LBB119_516:                            # %if.else2571
                                        #   in Loop: Header=BB119_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB119_517:                            # %if.end2572
                                        #   in Loop: Header=BB119_418 Depth=3
	jmp	.LBB119_518
.LBB119_518:                            # %if.end2573
                                        #   in Loop: Header=BB119_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB119_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB119_526
.LBB119_520:                            # %if.else2578
                                        #   in Loop: Header=BB119_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB119_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB119_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB119_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB119_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB119_524
.LBB119_523:                            # %cond.false2592
                                        #   in Loop: Header=BB119_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB119_524:                            # %cond.end2597
                                        #   in Loop: Header=BB119_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB119_525:                            # %if.end2603
                                        #   in Loop: Header=BB119_418 Depth=3
	jmp	.LBB119_526
.LBB119_526:                            # %if.end2604
                                        #   in Loop: Header=BB119_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB119_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB119_530
.LBB119_528:                            # %lor.lhs.false2610
                                        #   in Loop: Header=BB119_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB119_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB119_556
.LBB119_530:                            # %if.then2616
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -180(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB119_532:                            # %for.cond2638
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_416 Depth=2
                                        #       Parent Loop BB119_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_534 Depth 5
                                        #             Child Loop BB119_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB119_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB119_532 Depth=4
	movl	$0, -24(%rbp)
.LBB119_534:                            # %for.cond2642
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_416 Depth=2
                                        #       Parent Loop BB119_418 Depth=3
                                        #         Parent Loop BB119_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB119_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB119_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB119_534 Depth=5
	movl	$0, -20(%rbp)
.LBB119_536:                            # %for.cond2646
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_416 Depth=2
                                        #       Parent Loop BB119_418 Depth=3
                                        #         Parent Loop BB119_532 Depth=4
                                        #           Parent Loop BB119_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB119_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB119_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB119_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_536
.LBB119_539:                            # %for.end2668
                                        #   in Loop: Header=BB119_534 Depth=5
	jmp	.LBB119_540
.LBB119_540:                            # %for.inc2669
                                        #   in Loop: Header=BB119_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_534
.LBB119_541:                            # %for.end2671
                                        #   in Loop: Header=BB119_532 Depth=4
	jmp	.LBB119_542
.LBB119_542:                            # %for.inc2672
                                        #   in Loop: Header=BB119_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB119_532
.LBB119_543:                            # %for.end2674
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB119_544:                            # %for.cond2675
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_416 Depth=2
                                        #       Parent Loop BB119_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB119_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB119_546:                            # %for.cond2680
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_416 Depth=2
                                        #       Parent Loop BB119_418 Depth=3
                                        #         Parent Loop BB119_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB119_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB119_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB119_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB119_550
.LBB119_549:                            # %if.else2705
                                        #   in Loop: Header=BB119_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB119_550:                            # %if.end2754
                                        #   in Loop: Header=BB119_546 Depth=5
	jmp	.LBB119_551
.LBB119_551:                            # %for.inc2755
                                        #   in Loop: Header=BB119_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_546
.LBB119_552:                            # %for.end2757
                                        #   in Loop: Header=BB119_544 Depth=4
	jmp	.LBB119_553
.LBB119_553:                            # %for.inc2758
                                        #   in Loop: Header=BB119_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_544
.LBB119_554:                            # %for.end2760
                                        #   in Loop: Header=BB119_418 Depth=3
	jmp	.LBB119_555
.LBB119_555:                            # %if.end2761
                                        #   in Loop: Header=BB119_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB119_556:                            # %if.end2762
                                        #   in Loop: Header=BB119_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB119_557:                            # %if.end2763
                                        #   in Loop: Header=BB119_418 Depth=3
	jmp	.LBB119_558
.LBB119_558:                            # %for.inc2764
                                        #   in Loop: Header=BB119_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB119_418
.LBB119_559:                            # %for.end2766
                                        #   in Loop: Header=BB119_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB119_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB119_416 Depth=2
	movl	-180(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB119_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB119_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB119_563
.LBB119_562:                            # %cond.true2782
                                        #   in Loop: Header=BB119_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB119_564
.LBB119_563:                            # %cond.false2783
                                        #   in Loop: Header=BB119_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB119_564
.LBB119_564:                            # %cond.end2784
                                        #   in Loop: Header=BB119_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB119_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB119_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB119_567
.LBB119_566:                            # %cond.true2793
                                        #   in Loop: Header=BB119_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB119_568
.LBB119_567:                            # %cond.false2794
                                        #   in Loop: Header=BB119_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB119_568
.LBB119_568:                            # %cond.end2795
                                        #   in Loop: Header=BB119_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -176(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB119_569:                            # %for.cond2813
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_571 Depth 4
                                        #           Child Loop BB119_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB119_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB119_569 Depth=3
	movl	$0, -24(%rbp)
.LBB119_571:                            # %for.cond2817
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_416 Depth=2
                                        #       Parent Loop BB119_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB119_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB119_571 Depth=4
	movl	$0, -20(%rbp)
.LBB119_573:                            # %for.cond2821
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_416 Depth=2
                                        #       Parent Loop BB119_569 Depth=3
                                        #         Parent Loop BB119_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB119_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB119_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB119_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_573
.LBB119_576:                            # %for.end2844
                                        #   in Loop: Header=BB119_571 Depth=4
	jmp	.LBB119_577
.LBB119_577:                            # %for.inc2845
                                        #   in Loop: Header=BB119_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_571
.LBB119_578:                            # %for.end2847
                                        #   in Loop: Header=BB119_569 Depth=3
	jmp	.LBB119_579
.LBB119_579:                            # %for.inc2848
                                        #   in Loop: Header=BB119_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB119_569
.LBB119_580:                            # %for.end2850
                                        #   in Loop: Header=BB119_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB119_581:                            # %for.cond2851
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB119_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB119_583:                            # %for.cond2856
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_416 Depth=2
                                        #       Parent Loop BB119_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB119_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB119_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB119_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB119_587
.LBB119_586:                            # %if.else2886
                                        #   in Loop: Header=BB119_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB119_587:                            # %if.end2935
                                        #   in Loop: Header=BB119_583 Depth=4
	jmp	.LBB119_588
.LBB119_588:                            # %for.inc2936
                                        #   in Loop: Header=BB119_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_583
.LBB119_589:                            # %for.end2938
                                        #   in Loop: Header=BB119_581 Depth=3
	jmp	.LBB119_590
.LBB119_590:                            # %for.inc2939
                                        #   in Loop: Header=BB119_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_581
.LBB119_591:                            # %for.end2941
                                        #   in Loop: Header=BB119_416 Depth=2
	jmp	.LBB119_592
.LBB119_592:                            # %if.end2942
                                        #   in Loop: Header=BB119_416 Depth=2
	cmpl	$0, -176(%rbp)
	je	.LBB119_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB119_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-176(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB119_594:                            # %if.end2948
                                        #   in Loop: Header=BB119_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB119_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB119_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB119_596:                            # %if.end2974
                                        #   in Loop: Header=BB119_416 Depth=2
	jmp	.LBB119_597
.LBB119_597:                            # %for.inc2975
                                        #   in Loop: Header=BB119_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB119_416
.LBB119_598:                            # %for.end2977
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-140(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB119_599:                            # %if.end2980
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB119_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB119_601:                            # %for.cond2985
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_603 Depth 3
                                        #         Child Loop BB119_614 Depth 4
                                        #         Child Loop BB119_633 Depth 4
                                        #           Child Loop BB119_635 Depth 5
                                        #         Child Loop BB119_642 Depth 4
                                        #         Child Loop BB119_677 Depth 4
                                        #           Child Loop BB119_679 Depth 5
                                        #         Child Loop BB119_701 Depth 4
                                        #           Child Loop BB119_703 Depth 5
                                        #             Child Loop BB119_705 Depth 6
                                        #         Child Loop BB119_713 Depth 4
                                        #           Child Loop BB119_715 Depth 5
                                        #         Child Loop BB119_723 Depth 4
                                        #           Child Loop BB119_725 Depth 5
                                        #       Child Loop BB119_745 Depth 3
                                        #         Child Loop BB119_747 Depth 4
                                        #           Child Loop BB119_749 Depth 5
                                        #       Child Loop BB119_757 Depth 3
                                        #         Child Loop BB119_759 Depth 4
                                        #       Child Loop BB119_766 Depth 3
                                        #         Child Loop BB119_768 Depth 4
                                        #       Child Loop BB119_778 Depth 3
                                        #         Child Loop BB119_780 Depth 4
                                        #       Child Loop BB119_786 Depth 3
                                        #       Child Loop BB119_791 Depth 3
                                        #         Child Loop BB119_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB119_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB119_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI119_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	$2147483647, -180(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB119_603:                            # %for.cond2997
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_614 Depth 4
                                        #         Child Loop BB119_633 Depth 4
                                        #           Child Loop BB119_635 Depth 5
                                        #         Child Loop BB119_642 Depth 4
                                        #         Child Loop BB119_677 Depth 4
                                        #           Child Loop BB119_679 Depth 5
                                        #         Child Loop BB119_701 Depth 4
                                        #           Child Loop BB119_703 Depth 5
                                        #             Child Loop BB119_705 Depth 6
                                        #         Child Loop BB119_713 Depth 4
                                        #           Child Loop BB119_715 Depth 5
                                        #         Child Loop BB119_723 Depth 4
                                        #           Child Loop BB119_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB119_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB119_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB119_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB119_603 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB119_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB119_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB119_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-220(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB119_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB119_603 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB119_610
.LBB119_609:                            # %if.then3019
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB119_611
.LBB119_610:                            # %if.else3020
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
.LBB119_611:                            # %if.end3022
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB119_612:                            # %if.end3024
                                        #   in Loop: Header=BB119_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB119_687
.LBB119_613:                            # %if.else3060
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB119_614:                            # %for.cond3061
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB119_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB119_614 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB119_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB119_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB119_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB119_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB119_630
.LBB119_618:                            # %if.then3078
                                        #   in Loop: Header=BB119_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB119_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB119_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB119_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB119_622
.LBB119_621:                            # %cond.false3088
                                        #   in Loop: Header=BB119_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB119_622:                            # %cond.end3091
                                        #   in Loop: Header=BB119_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB119_627
.LBB119_623:                            # %cond.false3095
                                        #   in Loop: Header=BB119_614 Depth=4
	vmovsd	.LCPI119_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB119_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB119_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB119_626
.LBB119_625:                            # %cond.false3102
                                        #   in Loop: Header=BB119_614 Depth=4
	movl	$1, %eax
	jmp	.LBB119_626
.LBB119_626:                            # %cond.end3103
                                        #   in Loop: Header=BB119_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB119_627:                            # %cond.end3108
                                        #   in Loop: Header=BB119_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB119_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB119_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB119_629:                            # %if.end3121
                                        #   in Loop: Header=BB119_614 Depth=4
	jmp	.LBB119_630
.LBB119_630:                            # %if.end3122
                                        #   in Loop: Header=BB119_614 Depth=4
	jmp	.LBB119_631
.LBB119_631:                            # %for.inc3123
                                        #   in Loop: Header=BB119_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB119_614
.LBB119_632:                            # %for.end3125
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	$0, -24(%rbp)
.LBB119_633:                            # %for.cond3126
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB119_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB119_633 Depth=4
	movl	$0, -20(%rbp)
.LBB119_635:                            # %for.cond3130
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_603 Depth=3
                                        #         Parent Loop BB119_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB119_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB119_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB119_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_635
.LBB119_638:                            # %for.end3187
                                        #   in Loop: Header=BB119_633 Depth=4
	jmp	.LBB119_639
.LBB119_639:                            # %for.inc3188
                                        #   in Loop: Header=BB119_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_633
.LBB119_640:                            # %for.end3190
                                        #   in Loop: Header=BB119_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB119_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB119_642:                            # %for.cond3193
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB119_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB119_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB119_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB119_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB119_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB119_647
.LBB119_646:                            # %cond.false3210
                                        #   in Loop: Header=BB119_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB119_647:                            # %cond.end3213
                                        #   in Loop: Header=BB119_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB119_652
.LBB119_648:                            # %cond.false3217
                                        #   in Loop: Header=BB119_642 Depth=4
	vmovsd	.LCPI119_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB119_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB119_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB119_651
.LBB119_650:                            # %cond.false3224
                                        #   in Loop: Header=BB119_642 Depth=4
	movl	$1, %eax
	jmp	.LBB119_651
.LBB119_651:                            # %cond.end3225
                                        #   in Loop: Header=BB119_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB119_652:                            # %cond.end3230
                                        #   in Loop: Header=BB119_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB119_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB119_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB119_654:                            # %if.end3243
                                        #   in Loop: Header=BB119_642 Depth=4
	jmp	.LBB119_655
.LBB119_655:                            # %for.inc3244
                                        #   in Loop: Header=BB119_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB119_642
.LBB119_656:                            # %for.end3246
                                        #   in Loop: Header=BB119_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB119_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB119_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB119_660
.LBB119_659:                            # %cond.false3256
                                        #   in Loop: Header=BB119_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB119_660:                            # %cond.end3259
                                        #   in Loop: Header=BB119_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB119_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB119_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB119_663
.LBB119_662:                            # %cond.false3269
                                        #   in Loop: Header=BB119_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB119_663:                            # %cond.end3271
                                        #   in Loop: Header=BB119_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB119_668
.LBB119_664:                            # %cond.false3276
                                        #   in Loop: Header=BB119_603 Depth=3
	vmovsd	.LCPI119_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB119_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB119_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB119_667
.LBB119_666:                            # %cond.false3283
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	$1, %eax
	jmp	.LBB119_667
.LBB119_667:                            # %cond.end3284
                                        #   in Loop: Header=BB119_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB119_668:                            # %cond.end3289
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB119_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB119_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB119_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB119_676
.LBB119_671:                            # %if.else3299
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB119_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB119_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB119_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB119_675
.LBB119_674:                            # %if.else3306
                                        #   in Loop: Header=BB119_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB119_675:                            # %if.end3307
                                        #   in Loop: Header=BB119_603 Depth=3
	jmp	.LBB119_676
.LBB119_676:                            # %if.end3308
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	$0, -24(%rbp)
.LBB119_677:                            # %for.cond3309
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB119_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB119_677 Depth=4
	movl	$0, -20(%rbp)
.LBB119_679:                            # %for.cond3313
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_603 Depth=3
                                        #         Parent Loop BB119_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB119_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB119_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB119_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_679
.LBB119_682:                            # %for.end3349
                                        #   in Loop: Header=BB119_677 Depth=4
	jmp	.LBB119_683
.LBB119_683:                            # %for.inc3350
                                        #   in Loop: Header=BB119_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_677
.LBB119_684:                            # %for.end3352
                                        #   in Loop: Header=BB119_603 Depth=3
	jmp	.LBB119_686
.LBB119_685:                            # %if.else3353
                                        #   in Loop: Header=BB119_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB119_686:                            # %if.end3354
                                        #   in Loop: Header=BB119_603 Depth=3
	jmp	.LBB119_687
.LBB119_687:                            # %if.end3355
                                        #   in Loop: Header=BB119_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB119_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB119_695
.LBB119_689:                            # %if.else3360
                                        #   in Loop: Header=BB119_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB119_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB119_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB119_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB119_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB119_693
.LBB119_692:                            # %cond.false3374
                                        #   in Loop: Header=BB119_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB119_693:                            # %cond.end3379
                                        #   in Loop: Header=BB119_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB119_694:                            # %if.end3385
                                        #   in Loop: Header=BB119_603 Depth=3
	jmp	.LBB119_695
.LBB119_695:                            # %if.end3386
                                        #   in Loop: Header=BB119_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB119_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB119_699
.LBB119_697:                            # %lor.lhs.false3392
                                        #   in Loop: Header=BB119_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB119_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB119_732
.LBB119_699:                            # %if.then3398
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -180(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB119_701:                            # %for.cond3422
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_703 Depth 5
                                        #             Child Loop BB119_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB119_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB119_701 Depth=4
	movl	$0, -24(%rbp)
.LBB119_703:                            # %for.cond3426
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_603 Depth=3
                                        #         Parent Loop BB119_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB119_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB119_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB119_703 Depth=5
	movl	$0, -20(%rbp)
.LBB119_705:                            # %for.cond3430
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_603 Depth=3
                                        #         Parent Loop BB119_701 Depth=4
                                        #           Parent Loop BB119_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB119_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB119_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB119_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_705
.LBB119_708:                            # %for.end3453
                                        #   in Loop: Header=BB119_703 Depth=5
	jmp	.LBB119_709
.LBB119_709:                            # %for.inc3454
                                        #   in Loop: Header=BB119_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_703
.LBB119_710:                            # %for.end3456
                                        #   in Loop: Header=BB119_701 Depth=4
	jmp	.LBB119_711
.LBB119_711:                            # %for.inc3457
                                        #   in Loop: Header=BB119_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB119_701
.LBB119_712:                            # %for.end3459
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB119_713:                            # %for.cond3460
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB119_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB119_715:                            # %for.cond3465
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_603 Depth=3
                                        #         Parent Loop BB119_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB119_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB119_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_715
.LBB119_718:                            # %for.end3494
                                        #   in Loop: Header=BB119_713 Depth=4
	jmp	.LBB119_719
.LBB119_719:                            # %for.inc3495
                                        #   in Loop: Header=BB119_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_713
.LBB119_720:                            # %for.end3497
                                        #   in Loop: Header=BB119_603 Depth=3
	jmp	.LBB119_721
.LBB119_721:                            # %if.end3498
                                        #   in Loop: Header=BB119_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB119_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB119_723:                            # %for.cond3502
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB119_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB119_725:                            # %for.cond3507
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_603 Depth=3
                                        #         Parent Loop BB119_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB119_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB119_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_725
.LBB119_728:                            # %for.end3562
                                        #   in Loop: Header=BB119_723 Depth=4
	jmp	.LBB119_729
.LBB119_729:                            # %for.inc3563
                                        #   in Loop: Header=BB119_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_723
.LBB119_730:                            # %for.end3565
                                        #   in Loop: Header=BB119_603 Depth=3
	jmp	.LBB119_731
.LBB119_731:                            # %if.end3566
                                        #   in Loop: Header=BB119_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB119_732:                            # %if.end3567
                                        #   in Loop: Header=BB119_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB119_733:                            # %if.end3568
                                        #   in Loop: Header=BB119_603 Depth=3
	jmp	.LBB119_734
.LBB119_734:                            # %for.inc3569
                                        #   in Loop: Header=BB119_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB119_603
.LBB119_735:                            # %for.end3571
                                        #   in Loop: Header=BB119_601 Depth=2
	movl	-180(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB119_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB119_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB119_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB119_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB119_739
.LBB119_738:                            # %cond.true3588
                                        #   in Loop: Header=BB119_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB119_740
.LBB119_739:                            # %cond.false3589
                                        #   in Loop: Header=BB119_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB119_740
.LBB119_740:                            # %cond.end3590
                                        #   in Loop: Header=BB119_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB119_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB119_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB119_743
.LBB119_742:                            # %cond.true3599
                                        #   in Loop: Header=BB119_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB119_744
.LBB119_743:                            # %cond.false3600
                                        #   in Loop: Header=BB119_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB119_744
.LBB119_744:                            # %cond.end3601
                                        #   in Loop: Header=BB119_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -176(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB119_745:                            # %for.cond3619
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_747 Depth 4
                                        #           Child Loop BB119_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB119_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB119_745 Depth=3
	movl	$0, -24(%rbp)
.LBB119_747:                            # %for.cond3623
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB119_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB119_747 Depth=4
	movl	$0, -20(%rbp)
.LBB119_749:                            # %for.cond3627
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_745 Depth=3
                                        #         Parent Loop BB119_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB119_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB119_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB119_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_749
.LBB119_752:                            # %for.end3650
                                        #   in Loop: Header=BB119_747 Depth=4
	jmp	.LBB119_753
.LBB119_753:                            # %for.inc3651
                                        #   in Loop: Header=BB119_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_747
.LBB119_754:                            # %for.end3653
                                        #   in Loop: Header=BB119_745 Depth=3
	jmp	.LBB119_755
.LBB119_755:                            # %for.inc3654
                                        #   in Loop: Header=BB119_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB119_745
.LBB119_756:                            # %for.end3656
                                        #   in Loop: Header=BB119_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB119_757:                            # %for.cond3657
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB119_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB119_759:                            # %for.cond3662
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB119_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB119_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_759
.LBB119_762:                            # %for.end3691
                                        #   in Loop: Header=BB119_757 Depth=3
	jmp	.LBB119_763
.LBB119_763:                            # %for.inc3692
                                        #   in Loop: Header=BB119_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_757
.LBB119_764:                            # %for.end3694
                                        #   in Loop: Header=BB119_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB119_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB119_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB119_766:                            # %for.cond3698
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB119_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB119_768:                            # %for.cond3703
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB119_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB119_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_768
.LBB119_771:                            # %for.end3758
                                        #   in Loop: Header=BB119_766 Depth=3
	jmp	.LBB119_772
.LBB119_772:                            # %for.inc3759
                                        #   in Loop: Header=BB119_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_766
.LBB119_773:                            # %for.end3761
                                        #   in Loop: Header=BB119_601 Depth=2
	jmp	.LBB119_774
.LBB119_774:                            # %if.end3762
                                        #   in Loop: Header=BB119_601 Depth=2
	jmp	.LBB119_775
.LBB119_775:                            # %if.end3763
                                        #   in Loop: Header=BB119_601 Depth=2
	cmpl	$0, -176(%rbp)
	je	.LBB119_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB119_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-176(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB119_777:                            # %if.end3769
                                        #   in Loop: Header=BB119_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB119_778:                            # %for.cond3781
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB119_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB119_780:                            # %for.cond3786
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB119_780 Depth=4
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB119_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_780
.LBB119_783:                            # %for.end3797
                                        #   in Loop: Header=BB119_778 Depth=3
	jmp	.LBB119_784
.LBB119_784:                            # %for.inc3798
                                        #   in Loop: Header=BB119_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_778
.LBB119_785:                            # %for.end3800
                                        #   in Loop: Header=BB119_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB119_786:                            # %for.cond3802
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB119_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB119_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_786
.LBB119_789:                            # %for.end3811
                                        #   in Loop: Header=BB119_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB119_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB119_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB119_791:                            # %for.cond3819
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB119_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB119_793:                            # %for.cond3824
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_601 Depth=2
                                        #       Parent Loop BB119_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB119_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB119_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_793
.LBB119_796:                            # %for.end3844
                                        #   in Loop: Header=BB119_791 Depth=3
	jmp	.LBB119_797
.LBB119_797:                            # %for.inc3845
                                        #   in Loop: Header=BB119_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_791
.LBB119_798:                            # %for.end3847
                                        #   in Loop: Header=BB119_601 Depth=2
	jmp	.LBB119_799
.LBB119_799:                            # %if.end3848
                                        #   in Loop: Header=BB119_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB119_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB119_601
.LBB119_801:                            # %for.end3860
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_802
.LBB119_802:                            # %if.end3861
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB119_803:                            # %for.cond3862
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB119_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB119_803 Depth=2
	movl	$0, -24(%rbp)
.LBB119_805:                            # %for.cond3866
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB119_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB119_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB119_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_805
.LBB119_808:                            # %for.end3890
                                        #   in Loop: Header=BB119_803 Depth=2
	jmp	.LBB119_809
.LBB119_809:                            # %for.inc3891
                                        #   in Loop: Header=BB119_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_803
.LBB119_810:                            # %for.end3893
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB119_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB119_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB119_825
.LBB119_813:                            # %if.then3902
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB119_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB119_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB119_822
.LBB119_816:                            # %if.else3910
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB119_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB119_821
.LBB119_818:                            # %if.else3915
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB119_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB119_820:                            # %if.end3922
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_821
.LBB119_821:                            # %if.end3923
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_822
.LBB119_822:                            # %if.end3924
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_824
.LBB119_823:                            # %if.else3925
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB119_824:                            # %if.end3927
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_825
.LBB119_825:                            # %if.end3928
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_827
.LBB119_826:                            # %if.else3929
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
.LBB119_827:                            # %if.end3930
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB119_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB119_830
.LBB119_829:                            # %if.then3938
                                        #   in Loop: Header=BB119_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB119_830:                            # %if.end3939
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_832
.LBB119_831:                            # %if.else3940
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB119_832:                            # %if.end3941
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB119_171 Depth=1
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB119_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB119_171 Depth=1
	leaq	-272(%rbp), %rdi
	leaq	-268(%rbp), %rsi
	leaq	-304(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB119_835:                            # %for.cond3949
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_853 Depth 3
                                        #         Child Loop BB119_908 Depth 4
                                        #           Child Loop BB119_911 Depth 5
                                        #             Child Loop BB119_913 Depth 6
                                        #           Child Loop BB119_920 Depth 5
                                        #             Child Loop BB119_922 Depth 6
                                        #         Child Loop BB119_955 Depth 4
                                        #           Child Loop BB119_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB119_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB119_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB119_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB119_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB119_846
.LBB119_838:                            # %lor.lhs.false3960
                                        #   in Loop: Header=BB119_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB119_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB119_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB119_846
.LBB119_840:                            # %lor.lhs.false3966
                                        #   in Loop: Header=BB119_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB119_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB119_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB119_846
.LBB119_842:                            # %lor.lhs.false3972
                                        #   in Loop: Header=BB119_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB119_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB119_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB119_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB119_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB119_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB119_835 Depth=2
	cmpl	$0, -304(%rbp)
	jne	.LBB119_847
.LBB119_846:                            # %if.then3982
                                        #   in Loop: Header=BB119_835 Depth=2
	jmp	.LBB119_976
.LBB119_847:                            # %if.end3983
                                        #   in Loop: Header=BB119_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB119_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB119_835 Depth=2
	movl	$11, -320(%rbp)
	jmp	.LBB119_850
.LBB119_849:                            # %if.else3987
                                        #   in Loop: Header=BB119_835 Depth=2
	movl	$8, -320(%rbp)
.LBB119_850:                            # %if.end3988
                                        #   in Loop: Header=BB119_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB119_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB119_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB119_852:                            # %if.end3994
                                        #   in Loop: Header=BB119_835 Depth=2
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB119_853:                            # %for.cond3995
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_908 Depth 4
                                        #           Child Loop BB119_911 Depth 5
                                        #             Child Loop BB119_913 Depth 6
                                        #           Child Loop BB119_920 Depth 5
                                        #             Child Loop BB119_922 Depth 6
                                        #         Child Loop BB119_955 Depth 4
                                        #           Child Loop BB119_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-320(%rbp), %eax
	jge	.LBB119_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB119_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB119_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB119_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB119_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB119_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -124(%rbp)
.LBB119_857:                            # %if.end4010
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB119_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$0, -124(%rbp)
	jne	.LBB119_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB119_866
.LBB119_860:                            # %lor.lhs.false4018
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB119_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB119_866
.LBB119_862:                            # %lor.lhs.false4023
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$3, -124(%rbp)
	jne	.LBB119_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB119_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB119_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$0, -304(%rbp)
	jne	.LBB119_867
.LBB119_866:                            # %if.then4032
                                        #   in Loop: Header=BB119_853 Depth=3
	jmp	.LBB119_974
.LBB119_867:                            # %if.end4033
                                        #   in Loop: Header=BB119_853 Depth=3
	jmp	.LBB119_869
.LBB119_868:                            # %if.else4034
                                        #   in Loop: Header=BB119_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -124(%rbp)
.LBB119_869:                            # %if.end4037
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB119_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB119_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB119_853 Depth=3
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB119_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB119_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB119_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB119_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB119_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB119_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB119_877:                            # %if.end4066
                                        #   in Loop: Header=BB119_853 Depth=3
	jmp	.LBB119_878
.LBB119_878:                            # %if.end4067
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$2, -128(%rbp)
	jge	.LBB119_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB119_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB119_880:                            # %if.end4072
                                        #   in Loop: Header=BB119_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB119_881:                            # %if.end4074
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB119_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB119_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB119_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB119_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB119_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB119_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB119_887:                            # %if.end4092
                                        #   in Loop: Header=BB119_853 Depth=3
	jmp	.LBB119_888
.LBB119_888:                            # %if.end4093
                                        #   in Loop: Header=BB119_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB119_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB119_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB119_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB119_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB119_902
.LBB119_893:                            # %if.else4110
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB119_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB119_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB119_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB119_901
.LBB119_897:                            # %if.else4120
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB119_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB119_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB119_900:                            # %if.end4128
                                        #   in Loop: Header=BB119_853 Depth=3
	jmp	.LBB119_901
.LBB119_901:                            # %if.end4129
                                        #   in Loop: Header=BB119_853 Depth=3
	jmp	.LBB119_902
.LBB119_902:                            # %if.end4130
                                        #   in Loop: Header=BB119_853 Depth=3
	jmp	.LBB119_903
.LBB119_903:                            # %if.end4131
                                        #   in Loop: Header=BB119_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB119_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB119_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB119_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB119_947
.LBB119_907:                            # %if.then4146
                                        #   in Loop: Header=BB119_853 Depth=3
	jmp	.LBB119_908
.LBB119_908:                            # %while.body
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_835 Depth=2
                                        #       Parent Loop BB119_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_911 Depth 5
                                        #             Child Loop BB119_913 Depth 6
                                        #           Child Loop BB119_920 Depth 5
                                        #             Child Loop BB119_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB119_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB119_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB119_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB119_908 Depth=4
	movl	$0, -20(%rbp)
.LBB119_911:                            # %for.cond4153
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_835 Depth=2
                                        #       Parent Loop BB119_853 Depth=3
                                        #         Parent Loop BB119_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB119_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB119_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB119_911 Depth=5
	movl	$0, -24(%rbp)
.LBB119_913:                            # %for.cond4157
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_835 Depth=2
                                        #       Parent Loop BB119_853 Depth=3
                                        #         Parent Loop BB119_908 Depth=4
                                        #           Parent Loop BB119_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB119_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB119_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB119_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_913
.LBB119_916:                            # %for.end4182
                                        #   in Loop: Header=BB119_911 Depth=5
	jmp	.LBB119_917
.LBB119_917:                            # %for.inc4183
                                        #   in Loop: Header=BB119_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_911
.LBB119_918:                            # %for.end4185
                                        #   in Loop: Header=BB119_908 Depth=4
	jmp	.LBB119_928
.LBB119_919:                            # %if.else4186
                                        #   in Loop: Header=BB119_908 Depth=4
	movl	$0, -20(%rbp)
.LBB119_920:                            # %for.cond4187
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_835 Depth=2
                                        #       Parent Loop BB119_853 Depth=3
                                        #         Parent Loop BB119_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB119_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB119_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB119_920 Depth=5
	movl	$0, -24(%rbp)
.LBB119_922:                            # %for.cond4191
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_835 Depth=2
                                        #       Parent Loop BB119_853 Depth=3
                                        #         Parent Loop BB119_908 Depth=4
                                        #           Parent Loop BB119_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB119_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB119_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB119_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_922
.LBB119_925:                            # %for.end4215
                                        #   in Loop: Header=BB119_920 Depth=5
	jmp	.LBB119_926
.LBB119_926:                            # %for.inc4216
                                        #   in Loop: Header=BB119_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_920
.LBB119_927:                            # %for.end4218
                                        #   in Loop: Header=BB119_908 Depth=4
	jmp	.LBB119_928
.LBB119_928:                            # %if.end4219
                                        #   in Loop: Header=BB119_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB119_929:                            # %if.end4220
                                        #   in Loop: Header=BB119_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB119_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB119_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB119_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB119_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB119_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB119_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB119_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB119_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB119_934:                            # %while.body.backedge
                                        #   in Loop: Header=BB119_908 Depth=4
	jmp	.LBB119_908
.LBB119_935:                            # %if.else4236
                                        #   in Loop: Header=BB119_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB119_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB119_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB119_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB119_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB119_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB119_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB119_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB119_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB119_934
.LBB119_940:                            # %if.else4250
                                        #   in Loop: Header=BB119_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB119_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB119_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB119_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB119_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB119_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB119_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB119_934
.LBB119_944:                            # %if.else4262
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB119_946
.LBB119_945:                            # %if.else4264
                                        #   in Loop: Header=BB119_853 Depth=3
	jmp	.LBB119_946
.LBB119_946:                            # %while.end
                                        #   in Loop: Header=BB119_853 Depth=3
	jmp	.LBB119_947
.LBB119_947:                            # %if.end4265
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB119_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB119_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB119_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB119_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB119_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB119_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB119_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB119_853 Depth=3
	movl	$0, -20(%rbp)
.LBB119_955:                            # %for.cond4288
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_835 Depth=2
                                        #       Parent Loop BB119_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB119_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB119_955 Depth=4
	movl	$0, -24(%rbp)
.LBB119_957:                            # %for.cond4292
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_835 Depth=2
                                        #       Parent Loop BB119_853 Depth=3
                                        #         Parent Loop BB119_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB119_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB119_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB119_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_957
.LBB119_960:                            # %for.end4316
                                        #   in Loop: Header=BB119_955 Depth=4
	jmp	.LBB119_961
.LBB119_961:                            # %for.inc4317
                                        #   in Loop: Header=BB119_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_955
.LBB119_962:                            # %for.end4319
                                        #   in Loop: Header=BB119_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB119_963:                            # %if.end4320
                                        #   in Loop: Header=BB119_853 Depth=3
	jmp	.LBB119_964
.LBB119_964:                            # %if.end4321
                                        #   in Loop: Header=BB119_853 Depth=3
	jmp	.LBB119_965
.LBB119_965:                            # %if.end4322
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB119_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB119_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB119_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB119_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB119_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB119_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB119_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB119_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB119_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB119_972:                            # %if.end4356
                                        #   in Loop: Header=BB119_853 Depth=3
	jmp	.LBB119_973
.LBB119_973:                            # %if.end4357
                                        #   in Loop: Header=BB119_853 Depth=3
	jmp	.LBB119_974
.LBB119_974:                            # %for.inc4358
                                        #   in Loop: Header=BB119_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB119_853
.LBB119_975:                            # %for.end4360
                                        #   in Loop: Header=BB119_835 Depth=2
	jmp	.LBB119_976
.LBB119_976:                            # %for.inc4361
                                        #   in Loop: Header=BB119_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB119_835
.LBB119_977:                            # %for.end4364
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_1082
.LBB119_978:                            # %if.else4365
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB119_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB119_980:                            # %if.end4371
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB119_981:                            # %for.cond4372
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_1014 Depth 3
                                        #         Child Loop BB119_1017 Depth 4
                                        #           Child Loop BB119_1019 Depth 5
                                        #         Child Loop BB119_1026 Depth 4
                                        #           Child Loop BB119_1028 Depth 5
                                        #       Child Loop BB119_1061 Depth 3
                                        #         Child Loop BB119_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB119_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB119_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB119_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB119_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB119_981 Depth=2
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB119_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB119_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB119_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB119_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB119_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB119_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB119_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB119_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB119_990:                            # %if.end4407
                                        #   in Loop: Header=BB119_981 Depth=2
	jmp	.LBB119_991
.LBB119_991:                            # %if.end4408
                                        #   in Loop: Header=BB119_981 Depth=2
	cmpl	$2, -128(%rbp)
	jge	.LBB119_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB119_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB119_993:                            # %if.end4413
                                        #   in Loop: Header=BB119_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB119_994:                            # %if.end4415
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB119_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB119_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB119_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB119_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB119_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB119_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB119_1008
.LBB119_999:                            # %if.else4433
                                        #   in Loop: Header=BB119_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB119_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB119_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB119_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB119_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB119_1007
.LBB119_1003:                           # %if.else4443
                                        #   in Loop: Header=BB119_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB119_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB119_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB119_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB119_1006:                           # %if.end4451
                                        #   in Loop: Header=BB119_981 Depth=2
	jmp	.LBB119_1007
.LBB119_1007:                           # %if.end4452
                                        #   in Loop: Header=BB119_981 Depth=2
	jmp	.LBB119_1008
.LBB119_1008:                           # %if.end4453
                                        #   in Loop: Header=BB119_981 Depth=2
	jmp	.LBB119_1009
.LBB119_1009:                           # %if.end4454
                                        #   in Loop: Header=BB119_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB119_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB119_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB119_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB119_1053
.LBB119_1013:                           # %if.then4470
                                        #   in Loop: Header=BB119_981 Depth=2
	jmp	.LBB119_1014
.LBB119_1014:                           # %while.body4471
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_1017 Depth 4
                                        #           Child Loop BB119_1019 Depth 5
                                        #         Child Loop BB119_1026 Depth 4
                                        #           Child Loop BB119_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB119_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB119_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB119_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB119_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB119_1017:                           # %for.cond4478
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_981 Depth=2
                                        #       Parent Loop BB119_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB119_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB119_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB119_1019:                           # %for.cond4482
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_981 Depth=2
                                        #       Parent Loop BB119_1014 Depth=3
                                        #         Parent Loop BB119_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB119_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB119_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB119_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1019
.LBB119_1022:                           # %for.end4507
                                        #   in Loop: Header=BB119_1017 Depth=4
	jmp	.LBB119_1023
.LBB119_1023:                           # %for.inc4508
                                        #   in Loop: Header=BB119_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1017
.LBB119_1024:                           # %for.end4510
                                        #   in Loop: Header=BB119_1014 Depth=3
	jmp	.LBB119_1034
.LBB119_1025:                           # %if.else4511
                                        #   in Loop: Header=BB119_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB119_1026:                           # %for.cond4512
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_981 Depth=2
                                        #       Parent Loop BB119_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB119_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB119_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB119_1028:                           # %for.cond4516
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_981 Depth=2
                                        #       Parent Loop BB119_1014 Depth=3
                                        #         Parent Loop BB119_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB119_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB119_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB119_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1028
.LBB119_1031:                           # %for.end4540
                                        #   in Loop: Header=BB119_1026 Depth=4
	jmp	.LBB119_1032
.LBB119_1032:                           # %for.inc4541
                                        #   in Loop: Header=BB119_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1026
.LBB119_1033:                           # %for.end4543
                                        #   in Loop: Header=BB119_1014 Depth=3
	jmp	.LBB119_1034
.LBB119_1034:                           # %if.end4544
                                        #   in Loop: Header=BB119_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB119_1035:                           # %if.end4545
                                        #   in Loop: Header=BB119_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB119_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB119_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB119_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB119_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB119_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB119_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB119_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB119_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB119_1040:                           # %while.body4471.backedge
                                        #   in Loop: Header=BB119_1014 Depth=3
	jmp	.LBB119_1014
.LBB119_1041:                           # %if.else4561
                                        #   in Loop: Header=BB119_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB119_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB119_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB119_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB119_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB119_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB119_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB119_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB119_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB119_1040
.LBB119_1046:                           # %if.else4575
                                        #   in Loop: Header=BB119_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB119_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB119_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB119_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB119_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB119_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB119_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB119_1040
.LBB119_1050:                           # %if.else4587
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB119_1052
.LBB119_1051:                           # %if.else4589
                                        #   in Loop: Header=BB119_981 Depth=2
	jmp	.LBB119_1052
.LBB119_1052:                           # %while.end4590
                                        #   in Loop: Header=BB119_981 Depth=2
	jmp	.LBB119_1053
.LBB119_1053:                           # %if.end4591
                                        #   in Loop: Header=BB119_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB119_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB119_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB119_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB119_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB119_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB119_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB119_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB119_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB119_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB119_981 Depth=2
	movl	$0, -20(%rbp)
.LBB119_1061:                           # %for.cond4615
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB119_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB119_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB119_1063:                           # %for.cond4619
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_981 Depth=2
                                        #       Parent Loop BB119_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB119_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB119_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB119_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1063
.LBB119_1066:                           # %for.end4643
                                        #   in Loop: Header=BB119_1061 Depth=3
	jmp	.LBB119_1067
.LBB119_1067:                           # %for.inc4644
                                        #   in Loop: Header=BB119_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1061
.LBB119_1068:                           # %for.end4646
                                        #   in Loop: Header=BB119_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB119_1069:                           # %if.end4647
                                        #   in Loop: Header=BB119_981 Depth=2
	jmp	.LBB119_1070
.LBB119_1070:                           # %if.end4648
                                        #   in Loop: Header=BB119_981 Depth=2
	jmp	.LBB119_1071
.LBB119_1071:                           # %if.end4649
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB119_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB119_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB119_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB119_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB119_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB119_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB119_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB119_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB119_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB119_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB119_1078:                           # %if.end4683
                                        #   in Loop: Header=BB119_981 Depth=2
	jmp	.LBB119_1079
.LBB119_1079:                           # %if.end4684
                                        #   in Loop: Header=BB119_981 Depth=2
	jmp	.LBB119_1080
.LBB119_1080:                           # %for.inc4685
                                        #   in Loop: Header=BB119_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB119_981
.LBB119_1081:                           # %for.end4687
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_1082
.LBB119_1082:                           # %if.end4688
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_1284
.LBB119_1083:                           # %if.else4689
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -312(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB119_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB119_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB119_1085:                           # %if.end4695
                                        #   in Loop: Header=BB119_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB119_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB119_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB119_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB119_171 Depth=1
	cmpl	$0, -260(%rbp)
	je	.LBB119_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB119_1090
	jmp	.LBB119_1089
.LBB119_1089:                           # %if.then4702
                                        #   in Loop: Header=BB119_171 Depth=1
	subl	$2, %eax
	je	.LBB119_1097
	jmp	.LBB119_1098
.LBB119_1090:                           # %sw.bb4704
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jl	.LBB119_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB119_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB119_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB119_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB119_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB119_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB119_1095
.LBB119_1094:                           # %if.then4716
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB119_1096
.LBB119_1095:                           # %if.else4717
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB119_1096:                           # %if.end4718
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_1099
.LBB119_1097:                           # %sw.bb4719
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB119_1099
.LBB119_1098:                           # %sw.default4720
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB119_1099:                           # %sw.epilog4721
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_1101
.LBB119_1100:                           # %if.else4722
                                        #   in Loop: Header=BB119_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB119_1101:                           # %if.end4724
                                        #   in Loop: Header=BB119_171 Depth=1
	vmovsd	.LCPI119_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI119_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB119_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB119_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB119_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB119_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB119_1110
.LBB119_1106:                           # %if.else4743
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB119_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB119_1109
.LBB119_1108:                           # %if.else4748
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB119_1109:                           # %if.end4750
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_1110
.LBB119_1110:                           # %if.end4751
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_1112
.LBB119_1111:                           # %if.else4752
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB119_1112:                           # %if.end4754
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$0, -20(%rbp)
.LBB119_1113:                           # %for.cond4755
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB119_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB119_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB119_1115:                           # %for.cond4759
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB119_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB119_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB119_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1115
.LBB119_1118:                           # %for.end4785
                                        #   in Loop: Header=BB119_1113 Depth=2
	jmp	.LBB119_1119
.LBB119_1119:                           # %for.inc4786
                                        #   in Loop: Header=BB119_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1113
.LBB119_1120:                           # %for.end4788
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB119_1122
.LBB119_1121:                           # %if.else4789
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-312(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB119_1122:                           # %if.end4792
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_1123
.LBB119_1123:                           # %if.end4793
                                        #   in Loop: Header=BB119_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB119_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -184(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB119_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB119_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$0, -20(%rbp)
.LBB119_1127:                           # %for.cond4806
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_1129 Depth 3
                                        #         Child Loop BB119_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB119_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB119_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB119_1129:                           # %for.cond4810
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB119_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB119_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB119_1131:                           # %for.cond4814
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_1127 Depth=2
                                        #       Parent Loop BB119_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB119_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB119_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB119_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB119_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB119_1134:                           # %if.end4826
                                        #   in Loop: Header=BB119_1131 Depth=4
	jmp	.LBB119_1135
.LBB119_1135:                           # %for.inc4827
                                        #   in Loop: Header=BB119_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB119_1131
.LBB119_1136:                           # %for.end4829
                                        #   in Loop: Header=BB119_1129 Depth=3
	jmp	.LBB119_1137
.LBB119_1137:                           # %for.inc4830
                                        #   in Loop: Header=BB119_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1129
.LBB119_1138:                           # %for.end4832
                                        #   in Loop: Header=BB119_1127 Depth=2
	jmp	.LBB119_1139
.LBB119_1139:                           # %for.inc4833
                                        #   in Loop: Header=BB119_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1127
.LBB119_1140:                           # %for.end4835
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-184(%rbp), %eax
	movl	%eax, -184(%rbp)
	movl	$0, -24(%rbp)
.LBB119_1141:                           # %for.cond4840
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB119_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB119_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB119_1143:                           # %for.cond4844
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB119_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB119_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB119_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1143
.LBB119_1146:                           # %for.end4877
                                        #   in Loop: Header=BB119_1141 Depth=2
	jmp	.LBB119_1147
.LBB119_1147:                           # %for.inc4878
                                        #   in Loop: Header=BB119_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1141
.LBB119_1148:                           # %for.end4880
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_1149
.LBB119_1149:                           # %if.end4881
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-184(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB119_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB119_1151:                           # %if.end4889
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$0, -24(%rbp)
.LBB119_1152:                           # %for.cond4890
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB119_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB119_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB119_1154:                           # %for.cond4894
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB119_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB119_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB119_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1154
.LBB119_1157:                           # %for.end4913
                                        #   in Loop: Header=BB119_1152 Depth=2
	jmp	.LBB119_1158
.LBB119_1158:                           # %for.inc4914
                                        #   in Loop: Header=BB119_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1152
.LBB119_1159:                           # %for.end4916
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$0, -20(%rbp)
.LBB119_1160:                           # %for.cond4917
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB119_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB119_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB119_1162:                           # %for.cond4921
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB119_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB119_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB119_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1162
.LBB119_1165:                           # %for.end4947
                                        #   in Loop: Header=BB119_1160 Depth=2
	jmp	.LBB119_1166
.LBB119_1166:                           # %for.inc4948
                                        #   in Loop: Header=BB119_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1160
.LBB119_1167:                           # %for.end4950
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB119_1169
.LBB119_1168:                           # %if.else4952
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB119_1169:                           # %if.end4954
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_1170
.LBB119_1170:                           # %if.end4955
                                        #   in Loop: Header=BB119_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB119_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -184(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB119_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB119_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$0, -20(%rbp)
.LBB119_1174:                           # %for.cond4968
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_1176 Depth 3
                                        #         Child Loop BB119_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB119_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB119_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB119_1176:                           # %for.cond4972
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB119_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB119_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB119_1178:                           # %for.cond4976
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_1174 Depth=2
                                        #       Parent Loop BB119_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB119_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB119_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB119_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB119_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB119_1181:                           # %if.end4988
                                        #   in Loop: Header=BB119_1178 Depth=4
	jmp	.LBB119_1182
.LBB119_1182:                           # %for.inc4989
                                        #   in Loop: Header=BB119_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB119_1178
.LBB119_1183:                           # %for.end4991
                                        #   in Loop: Header=BB119_1176 Depth=3
	jmp	.LBB119_1184
.LBB119_1184:                           # %for.inc4992
                                        #   in Loop: Header=BB119_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1176
.LBB119_1185:                           # %for.end4994
                                        #   in Loop: Header=BB119_1174 Depth=2
	jmp	.LBB119_1186
.LBB119_1186:                           # %for.inc4995
                                        #   in Loop: Header=BB119_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1174
.LBB119_1187:                           # %for.end4997
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-184(%rbp), %eax
	movl	%eax, -184(%rbp)
.LBB119_1188:                           # %if.end5002
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-184(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB119_1189:                           # %for.cond5004
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB119_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB119_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB119_1191:                           # %for.cond5008
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB119_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB119_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB119_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1191
.LBB119_1194:                           # %for.end5034
                                        #   in Loop: Header=BB119_1189 Depth=2
	jmp	.LBB119_1195
.LBB119_1195:                           # %for.inc5035
                                        #   in Loop: Header=BB119_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1189
.LBB119_1196:                           # %for.end5037
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB119_1198
.LBB119_1197:                           # %if.else5039
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB119_1198:                           # %if.end5043
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_1199
.LBB119_1199:                           # %if.end5044
                                        #   in Loop: Header=BB119_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB119_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-124(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB119_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$0, -20(%rbp)
.LBB119_1202:                           # %for.cond5053
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB119_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB119_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB119_1204:                           # %for.cond5057
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB119_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB119_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB119_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1204
.LBB119_1207:                           # %for.end5084
                                        #   in Loop: Header=BB119_1202 Depth=2
	jmp	.LBB119_1208
.LBB119_1208:                           # %for.inc5085
                                        #   in Loop: Header=BB119_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1202
.LBB119_1209:                           # %for.end5087
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB119_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$0, -24(%rbp)
.LBB119_1211:                           # %for.cond5091
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB119_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB119_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB119_1213:                           # %for.cond5095
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB119_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB119_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -172(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -224(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -212(%rbp)
	movl	-212(%rbp), %eax
	subl	-172(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-172(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -256(%rbp)
	movl	-224(%rbp), %eax
	subl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB119_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1213
.LBB119_1216:                           # %for.end5194
                                        #   in Loop: Header=BB119_1211 Depth=2
	jmp	.LBB119_1217
.LBB119_1217:                           # %for.inc5195
                                        #   in Loop: Header=BB119_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1211
.LBB119_1218:                           # %for.end5197
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_1219
.LBB119_1219:                           # %if.end5198
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$10, best_mode
	movl	-124(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB119_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	$0, -24(%rbp)
.LBB119_1221:                           # %for.cond5204
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB119_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB119_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB119_1223:                           # %for.cond5208
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB119_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB119_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB119_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1223
.LBB119_1226:                           # %for.end5232
                                        #   in Loop: Header=BB119_1221 Depth=2
	jmp	.LBB119_1227
.LBB119_1227:                           # %for.inc5233
                                        #   in Loop: Header=BB119_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1221
.LBB119_1228:                           # %for.end5235
                                        #   in Loop: Header=BB119_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB119_1229:                           # %for.cond5237
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB119_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB119_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB119_1231:                           # %for.cond5241
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB119_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB119_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB119_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1231
.LBB119_1234:                           # %for.end5265
                                        #   in Loop: Header=BB119_1229 Depth=2
	jmp	.LBB119_1235
.LBB119_1235:                           # %for.inc5266
                                        #   in Loop: Header=BB119_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1229
.LBB119_1236:                           # %for.end5268
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB119_1237:                           # %for.cond5270
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB119_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB119_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB119_1239:                           # %for.cond5274
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB119_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB119_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB119_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1239
.LBB119_1242:                           # %for.end5289
                                        #   in Loop: Header=BB119_1237 Depth=2
	jmp	.LBB119_1243
.LBB119_1243:                           # %for.inc5290
                                        #   in Loop: Header=BB119_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1237
.LBB119_1244:                           # %for.end5292
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB119_1245:                           # %for.cond5296
                                        #   Parent Loop BB119_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB119_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB119_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB119_1247:                           # %for.cond5300
                                        #   Parent Loop BB119_171 Depth=1
                                        #     Parent Loop BB119_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB119_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB119_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -256(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-256(%rbp), %ecx
	movl	%ecx, -224(%rbp)
	movl	-256(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -172(%rbp)
	movl	-172(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -212(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-172(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB119_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB119_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB119_1251
.LBB119_1250:                           # %cond.false5344
                                        #   in Loop: Header=BB119_1247 Depth=3
	movl	-172(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB119_1251:                           # %cond.end5356
                                        #   in Loop: Header=BB119_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB119_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB119_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB119_1257
.LBB119_1253:                           # %cond.false5362
                                        #   in Loop: Header=BB119_1247 Depth=3
	xorl	%eax, %eax
	movl	-172(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB119_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB119_1256
.LBB119_1255:                           # %cond.false5377
                                        #   in Loop: Header=BB119_1247 Depth=3
	movl	-172(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB119_1256:                           # %cond.end5389
                                        #   in Loop: Header=BB119_1247 Depth=3
.LBB119_1257:                           # %cond.end5391
                                        #   in Loop: Header=BB119_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-224(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-124(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB119_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB119_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB119_1260
.LBB119_1259:                           # %cond.false5416
                                        #   in Loop: Header=BB119_1247 Depth=3
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB119_1260:                           # %cond.end5426
                                        #   in Loop: Header=BB119_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB119_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB119_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_1266
.LBB119_1262:                           # %cond.false5432
                                        #   in Loop: Header=BB119_1247 Depth=3
	xorl	%eax, %eax
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB119_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB119_1265
.LBB119_1264:                           # %cond.false5445
                                        #   in Loop: Header=BB119_1247 Depth=3
	movl	-224(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB119_1265:                           # %cond.end5455
                                        #   in Loop: Header=BB119_1247 Depth=3
.LBB119_1266:                           # %cond.end5457
                                        #   in Loop: Header=BB119_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-212(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB119_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB119_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB119_1269
.LBB119_1268:                           # %cond.false5484
                                        #   in Loop: Header=BB119_1247 Depth=3
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB119_1269:                           # %cond.end5496
                                        #   in Loop: Header=BB119_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB119_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB119_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB119_1275
.LBB119_1271:                           # %cond.false5502
                                        #   in Loop: Header=BB119_1247 Depth=3
	xorl	%eax, %eax
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB119_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB119_1274
.LBB119_1273:                           # %cond.false5517
                                        #   in Loop: Header=BB119_1247 Depth=3
	movl	-212(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB119_1274:                           # %cond.end5529
                                        #   in Loop: Header=BB119_1247 Depth=3
.LBB119_1275:                           # %cond.end5531
                                        #   in Loop: Header=BB119_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB119_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1247
.LBB119_1277:                           # %for.end5546
                                        #   in Loop: Header=BB119_1245 Depth=2
	jmp	.LBB119_1278
.LBB119_1278:                           # %for.inc5547
                                        #   in Loop: Header=BB119_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1245
.LBB119_1279:                           # %for.end5549
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_1280
.LBB119_1280:                           # %if.end5550
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_1282
.LBB119_1281:                           # %if.else5551
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-312(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB119_1282:                           # %if.end5554
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_1283
.LBB119_1283:                           # %if.end5555
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_1284
.LBB119_1284:                           # %if.end5556
                                        #   in Loop: Header=BB119_171 Depth=1
	cmpl	$0, -264(%rbp)
	jne	.LBB119_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB119_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB119_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB119_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB119_1288:                           # %lor.end5571
                                        #   in Loop: Header=BB119_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -252(%rbp)
.LBB119_1289:                           # %if.end5574
                                        #   in Loop: Header=BB119_171 Depth=1
	jmp	.LBB119_1290
.LBB119_1290:                           # %for.inc5575
                                        #   in Loop: Header=BB119_171 Depth=1
	movl	-264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -264(%rbp)
	jmp	.LBB119_171
.LBB119_1291:                           # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB119_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB119_1295
.LBB119_1294:                           # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB119_1299
.LBB119_1295:                           # %if.else5587
	cmpl	$0, cbp
	jne	.LBB119_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB119_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB119_1298:                           # %if.end5597
	jmp	.LBB119_1299
.LBB119_1299:                           # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB119_1395
.LBB119_1300:                           # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB119_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB119_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB119_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB119_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB119_1305:                           # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB119_1306:                           # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB119_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB119_1308:                           # %for.cond5623
                                        #   Parent Loop BB119_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB119_1308 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB119_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB119_1308
.LBB119_1311:                           # %for.end5639
                                        #   in Loop: Header=BB119_1306 Depth=1
	jmp	.LBB119_1312
.LBB119_1312:                           # %for.inc5640
                                        #   in Loop: Header=BB119_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1306
.LBB119_1313:                           # %for.end5642
	jmp	.LBB119_1370
.LBB119_1314:                           # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB119_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB119_1316:                           # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB119_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB119_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB119_1318:                           # %for.cond5651
                                        #   Parent Loop BB119_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB119_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB119_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB119_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB119_1318
.LBB119_1321:                           # %for.end5680
                                        #   in Loop: Header=BB119_1316 Depth=1
	jmp	.LBB119_1322
.LBB119_1322:                           # %for.inc5681
                                        #   in Loop: Header=BB119_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1316
.LBB119_1323:                           # %for.end5683
	movl	$0, -24(%rbp)
.LBB119_1324:                           # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB119_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB119_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB119_1326:                           # %for.cond5688
                                        #   Parent Loop BB119_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB119_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB119_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB119_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1326
.LBB119_1329:                           # %for.end5707
                                        #   in Loop: Header=BB119_1324 Depth=1
	jmp	.LBB119_1330
.LBB119_1330:                           # %for.inc5708
                                        #   in Loop: Header=BB119_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1324
.LBB119_1331:                           # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB119_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB119_1333:                           # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB119_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB119_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB119_1335:                           # %for.cond5718
                                        #   Parent Loop BB119_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB119_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB119_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB119_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1335
.LBB119_1338:                           # %for.end5752
                                        #   in Loop: Header=BB119_1333 Depth=1
	jmp	.LBB119_1339
.LBB119_1339:                           # %for.inc5753
                                        #   in Loop: Header=BB119_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1333
.LBB119_1340:                           # %for.end5755
	jmp	.LBB119_1341
.LBB119_1341:                           # %if.end5756
	jmp	.LBB119_1342
.LBB119_1342:                           # %if.end5757
	cmpl	$9, best_mode
	je	.LBB119_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB119_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB119_1345:                           # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB119_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB119_1347:                           # %for.cond5772
                                        #   Parent Loop BB119_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB119_1347 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB119_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB119_1347
.LBB119_1350:                           # %for.end5788
                                        #   in Loop: Header=BB119_1345 Depth=1
	jmp	.LBB119_1351
.LBB119_1351:                           # %for.inc5789
                                        #   in Loop: Header=BB119_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1345
.LBB119_1352:                           # %for.end5791
	cmpl	$10, best_mode
	je	.LBB119_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB119_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB119_1356
# %bb.1355:                             # %if.then5800
	movl	-308(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB119_1356:                           # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB119_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB119_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB119_1359:                           # %if.end5811
	movl	$0, -20(%rbp)
.LBB119_1360:                           # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB119_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB119_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB119_1362:                           # %for.cond5816
                                        #   Parent Loop BB119_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB119_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB119_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB119_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_1362
.LBB119_1365:                           # %for.end5842
                                        #   in Loop: Header=BB119_1360 Depth=1
	jmp	.LBB119_1366
.LBB119_1366:                           # %for.inc5843
                                        #   in Loop: Header=BB119_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_1360
.LBB119_1367:                           # %for.end5845
	jmp	.LBB119_1368
.LBB119_1368:                           # %if.end5846
	jmp	.LBB119_1369
.LBB119_1369:                           # %if.end5847
	jmp	.LBB119_1370
.LBB119_1370:                           # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB119_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB119_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB119_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB119_1374:                           # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB119_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB119_1376:                           # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -288(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB119_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB119_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB119_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB119_1382
.LBB119_1380:                           # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB119_1382
# %bb.1381:                             # %if.then5884
	leaq	-288(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB119_1382:                           # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB119_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-124(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB119_1384:                           # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB119_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB119_1392
.LBB119_1386:                           # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB119_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB119_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB119_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB119_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB119_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB119_1392:                           # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB119_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB119_1394:                           # %if.end5973
	jmp	.LBB119_1395
.LBB119_1395:                           # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB119_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB119_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB119_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB119_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB119_1401
.LBB119_1400:                           # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB119_1402
.LBB119_1401:                           # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB119_1402:                           # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB119_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB119_1406
.LBB119_1405:                           # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB119_1406:                           # %if.end6019
	jmp	.LBB119_1407
.LBB119_1407:                           # %if.end6020
	jmp	.LBB119_1408
.LBB119_1408:                           # %if.end6021
	jmp	.LBB119_1409
.LBB119_1409:                           # %if.end6022
	jmp	.LBB119_1410
.LBB119_1410:                           # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB119_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-240(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB119_1413
.LBB119_1412:                           # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB119_1413:                           # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB119_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB119_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB119_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB119_1420
	jmp	.LBB119_1428
.LBB119_1417:                           # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB119_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB119_1428
	jmp	.LBB119_1420
.LBB119_1419:                           # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB119_1420
	jmp	.LBB119_1428
.LBB119_1420:                           # %land.lhs.true6050
	movq	-432(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB119_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB119_1425
	jmp	.LBB119_1428
.LBB119_1422:                           # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB119_1424
# %bb.1423:                             # %cond.true6058
	movq	-432(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB119_1428
	jmp	.LBB119_1425
.LBB119_1424:                           # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB119_1425
	jmp	.LBB119_1428
.LBB119_1425:                           # %if.then6062
	callq	field_flag_inference
	cmpl	-280(%rbp), %eax
	je	.LBB119_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI119_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB119_1427:                           # %if.end6068
	jmp	.LBB119_1428
.LBB119_1428:                           # %if.end6069
	jmp	.LBB119_1429
.LBB119_1429:                           # %if.end6070
	jmp	.LBB119_1430
.LBB119_1430:                           # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB119_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB119_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB119_1452
.LBB119_1433:                           # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB119_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -252(%rbp)
	jne	.LBB119_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB119_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB119_1437:                           # %lor.end6142
.LBB119_1438:                           # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB119_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB119_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB119_1441:                           # %lor.end6166
.LBB119_1442:                           # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB119_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB119_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB119_1445:                           # %lor.end6191
.LBB119_1446:                           # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB119_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB119_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB119_1449:                           # %lor.end6216
.LBB119_1450:                           # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB119_1451:                           # %if.end6232
	jmp	.LBB119_1452
.LBB119_1452:                           # %if.end6233
	jmp	.LBB119_1464
.LBB119_1453:                           # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB119_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB119_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB119_1456:                           # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB119_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB119_1458:                           # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB119_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB119_1460:                           # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB119_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB119_1462:                           # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB119_1463:                           # %if.end6319
	jmp	.LBB119_1464
.LBB119_1464:                           # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB119_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB119_1466:                           # %if.end6327
	cmpl	$185756351, -412(%rbp)  # imm = 0xB126ABF
	jne	.LBB119_1468
.LBB119_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_1468:                           # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_1467
.Lfunc_end119:
	.size	encode_one_macroblock.90, .Lfunc_end119-encode_one_macroblock.90
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.91           # -- Begin function StoreMV8x8.91
	.p2align	4, 0x90
	.type	StoreMV8x8.91,@function
StoreMV8x8.91:                          # @StoreMV8x8.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$31989891, -16(%rbp)    # imm = 0x1E82083
	movl	%edi, -12(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB120_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB120_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB120_1 Depth=1
	movl	-12(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB120_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_1
.LBB120_4:                              # %for.end
	cmpl	$31989891, -16(%rbp)    # imm = 0x1E82083
	jne	.LBB120_6
.LBB120_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_5
.Lfunc_end120:
	.size	StoreMV8x8.91, .Lfunc_end120-StoreMV8x8.91
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.92           # -- Begin function StoreMV8x8.92
	.p2align	4, 0x90
	.type	StoreMV8x8.92,@function
StoreMV8x8.92:                          # @StoreMV8x8.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$504687070, -12(%rbp)   # imm = 0x1E14E9DE
	movl	%edi, -16(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB121_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB121_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-16(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_1
.LBB121_4:                              # %for.end
	cmpl	$504687070, -12(%rbp)   # imm = 0x1E14E9DE
	jne	.LBB121_6
.LBB121_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_5
.Lfunc_end121:
	.size	StoreMV8x8.92, .Lfunc_end121-StoreMV8x8.92
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.93 # -- Begin function SetRefAndMotionVectors.93
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.93,@function
SetRefAndMotionVectors.93:              # @SetRefAndMotionVectors.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1193987008, -72(%rbp)  # imm = 0x472ACBC0
	movl	%edi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB122_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB122_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB122_4
.LBB122_3:                              # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB122_5
.LBB122_4:                              # %cond.false
	movl	$4, %eax
	jmp	.LBB122_5
.LBB122_5:                              # %cond.end
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -36(%rbp)
	movl	-32(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB122_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB122_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB122_9
.LBB122_8:                              # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB122_9
.LBB122_9:                              # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB122_19
# %bb.10:                               # %if.then
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB122_11:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB122_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB122_11 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB122_13:                             # %for.cond34
                                        #   Parent Loop BB122_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB122_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB122_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB122_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_13
.LBB122_16:                             # %for.end
                                        #   in Loop: Header=BB122_11 Depth=1
	jmp	.LBB122_17
.LBB122_17:                             # %for.inc117
                                        #   in Loop: Header=BB122_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_11
.LBB122_18:                             # %for.end119
	jmp	.LBB122_64
.LBB122_19:                             # %if.end
	cmpl	$0, -68(%rbp)
	jne	.LBB122_29
# %bb.20:                               # %if.then121
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB122_21:                             # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB122_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB122_21 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB122_23:                             # %for.cond126
                                        #   Parent Loop BB122_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB122_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB122_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB122_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_23
.LBB122_26:                             # %for.end211
                                        #   in Loop: Header=BB122_21 Depth=1
	jmp	.LBB122_27
.LBB122_27:                             # %for.inc212
                                        #   in Loop: Header=BB122_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_21
.LBB122_28:                             # %for.end214
	jmp	.LBB122_64
.LBB122_29:                             # %if.else
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB122_30:                             # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB122_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB122_30 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB122_32:                             # %for.cond219
                                        #   Parent Loop BB122_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB122_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB122_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB122_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB122_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
.LBB122_35:                             # %if.end255
                                        #   in Loop: Header=BB122_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB122_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB122_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB122_46
.LBB122_37:                             # %if.then261
                                        #   in Loop: Header=BB122_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB122_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB122_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB122_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB122_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB122_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB122_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB122_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB122_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB122_43
.LBB122_42:                             # %cond.false274
                                        #   in Loop: Header=BB122_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB122_43:                             # %cond.end275
                                        #   in Loop: Header=BB122_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB122_45
.LBB122_44:                             # %if.else342
                                        #   in Loop: Header=BB122_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB122_45:                             # %if.end424
                                        #   in Loop: Header=BB122_32 Depth=2
	jmp	.LBB122_47
.LBB122_46:                             # %if.else425
                                        #   in Loop: Header=BB122_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB122_47:                             # %if.end468
                                        #   in Loop: Header=BB122_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB122_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB122_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB122_58
.LBB122_49:                             # %if.then474
                                        #   in Loop: Header=BB122_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB122_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB122_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB122_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB122_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB122_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB122_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB122_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB122_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB122_55
.LBB122_54:                             # %cond.false490
                                        #   in Loop: Header=BB122_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB122_55:                             # %cond.end492
                                        #   in Loop: Header=BB122_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB122_57
.LBB122_56:                             # %if.else559
                                        #   in Loop: Header=BB122_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-28(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB122_57:                             # %if.end641
                                        #   in Loop: Header=BB122_32 Depth=2
	jmp	.LBB122_59
.LBB122_58:                             # %if.else642
                                        #   in Loop: Header=BB122_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB122_59:                             # %if.end685
                                        #   in Loop: Header=BB122_32 Depth=2
	jmp	.LBB122_60
.LBB122_60:                             # %for.inc686
                                        #   in Loop: Header=BB122_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_32
.LBB122_61:                             # %for.end688
                                        #   in Loop: Header=BB122_30 Depth=1
	jmp	.LBB122_62
.LBB122_62:                             # %for.inc689
                                        #   in Loop: Header=BB122_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_30
.LBB122_63:                             # %for.end691
	jmp	.LBB122_64
.LBB122_64:                             # %if.end692
	cmpl	$1193987008, -72(%rbp)  # imm = 0x472ACBC0
	jne	.LBB122_66
.LBB122_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_66:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_65
.Lfunc_end122:
	.size	SetRefAndMotionVectors.93, .Lfunc_end122-SetRefAndMotionVectors.93
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.94 # -- Begin function SetCoeffAndReconstruction8x8.94
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.94,@function
SetCoeffAndReconstruction8x8.94:        # @SetCoeffAndReconstruction8x8.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1108060177, -40(%rbp)  # imm = 0x420BA811
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB123_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB123_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB123_4
.LBB123_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB123_4
.LBB123_4:                              # %cond.end
	movl	%ecx, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB123_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB123_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB123_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB123_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB123_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_6
.LBB123_9:                              # %for.end
	cmpl	$0, -32(%rbp)
	je	.LBB123_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB123_11:                             # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB123_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB123_11 Depth=1
	movl	$0, -4(%rbp)
.LBB123_13:                             # %for.cond20
                                        #   Parent Loop BB123_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB123_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB123_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB123_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_13
.LBB123_16:                             # %for.end52
                                        #   in Loop: Header=BB123_11 Depth=1
	jmp	.LBB123_17
.LBB123_17:                             # %for.inc53
                                        #   in Loop: Header=BB123_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_11
.LBB123_18:                             # %for.end55
	jmp	.LBB123_28
.LBB123_19:                             # %if.else
	movl	$0, -8(%rbp)
.LBB123_20:                             # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB123_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB123_20 Depth=1
	movl	$0, -4(%rbp)
.LBB123_22:                             # %for.cond60
                                        #   Parent Loop BB123_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB123_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB123_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB123_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_22
.LBB123_25:                             # %for.end86
                                        #   in Loop: Header=BB123_20 Depth=1
	jmp	.LBB123_26
.LBB123_26:                             # %for.inc87
                                        #   in Loop: Header=BB123_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_20
.LBB123_27:                             # %for.end89
	jmp	.LBB123_28
.LBB123_28:                             # %if.end
	movl	$0, -8(%rbp)
.LBB123_29:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB123_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB123_29 Depth=1
	movl	$0, -4(%rbp)
.LBB123_31:                             # %for.cond94
                                        #   Parent Loop BB123_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB123_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB123_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB123_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB123_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB123_35
.LBB123_34:                             # %cond.false127
                                        #   in Loop: Header=BB123_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB123_35
.LBB123_35:                             # %cond.end128
                                        #   in Loop: Header=BB123_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB123_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_31
.LBB123_37:                             # %for.end141
                                        #   in Loop: Header=BB123_29 Depth=1
	jmp	.LBB123_38
.LBB123_38:                             # %for.inc142
                                        #   in Loop: Header=BB123_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_29
.LBB123_39:                             # %for.end144
	cmpl	$0, -32(%rbp)
	je	.LBB123_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB123_41:                             # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB123_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB123_41 Depth=1
	movl	$0, -4(%rbp)
.LBB123_43:                             # %for.cond151
                                        #   Parent Loop BB123_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB123_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB123_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB123_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB123_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB123_47
.LBB123_46:                             # %cond.false185
                                        #   in Loop: Header=BB123_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB123_47
.LBB123_47:                             # %cond.end186
                                        #   in Loop: Header=BB123_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB123_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_43
.LBB123_49:                             # %for.end200
                                        #   in Loop: Header=BB123_41 Depth=1
	jmp	.LBB123_50
.LBB123_50:                             # %for.inc201
                                        #   in Loop: Header=BB123_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_41
.LBB123_51:                             # %for.end203
	jmp	.LBB123_52
.LBB123_52:                             # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB123_53:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_55 Depth 2
                                        #       Child Loop BB123_57 Depth 3
                                        #         Child Loop BB123_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB123_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB123_53 Depth=1
	movl	$0, -12(%rbp)
.LBB123_55:                             # %for.cond209
                                        #   Parent Loop BB123_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_57 Depth 3
                                        #         Child Loop BB123_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB123_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB123_55 Depth=2
	movl	$0, -8(%rbp)
.LBB123_57:                             # %for.cond213
                                        #   Parent Loop BB123_53 Depth=1
                                        #     Parent Loop BB123_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB123_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB123_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB123_57 Depth=3
	movl	$0, -4(%rbp)
.LBB123_59:                             # %for.cond217
                                        #   Parent Loop BB123_53 Depth=1
                                        #     Parent Loop BB123_55 Depth=2
                                        #       Parent Loop BB123_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB123_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB123_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB123_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_59
.LBB123_62:                             # %for.end239
                                        #   in Loop: Header=BB123_57 Depth=3
	jmp	.LBB123_63
.LBB123_63:                             # %for.inc240
                                        #   in Loop: Header=BB123_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_57
.LBB123_64:                             # %for.end242
                                        #   in Loop: Header=BB123_55 Depth=2
	jmp	.LBB123_65
.LBB123_65:                             # %for.inc243
                                        #   in Loop: Header=BB123_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_55
.LBB123_66:                             # %for.end245
                                        #   in Loop: Header=BB123_53 Depth=1
	jmp	.LBB123_67
.LBB123_67:                             # %for.inc246
                                        #   in Loop: Header=BB123_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_53
.LBB123_68:                             # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB123_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB123_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB123_83
.LBB123_71:                             # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB123_72:                             # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB123_72 Depth=1
	movl	$0, -4(%rbp)
.LBB123_74:                             # %for.cond262
                                        #   Parent Loop BB123_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB123_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB123_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB123_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB123_78
.LBB123_77:                             # %if.else278
                                        #   in Loop: Header=BB123_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB123_78:                             # %if.end283
                                        #   in Loop: Header=BB123_74 Depth=2
	jmp	.LBB123_79
.LBB123_79:                             # %for.inc284
                                        #   in Loop: Header=BB123_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_74
.LBB123_80:                             # %for.end286
                                        #   in Loop: Header=BB123_72 Depth=1
	jmp	.LBB123_81
.LBB123_81:                             # %for.inc287
                                        #   in Loop: Header=BB123_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_72
.LBB123_82:                             # %for.end289
	jmp	.LBB123_95
.LBB123_83:                             # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB123_84:                             # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB123_84 Depth=1
	movl	$0, -4(%rbp)
.LBB123_86:                             # %for.cond297
                                        #   Parent Loop BB123_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB123_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB123_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB123_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB123_90
.LBB123_89:                             # %if.else317
                                        #   in Loop: Header=BB123_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB123_90:                             # %if.end326
                                        #   in Loop: Header=BB123_86 Depth=2
	jmp	.LBB123_91
.LBB123_91:                             # %for.inc327
                                        #   in Loop: Header=BB123_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_86
.LBB123_92:                             # %for.end329
                                        #   in Loop: Header=BB123_84 Depth=1
	jmp	.LBB123_93
.LBB123_93:                             # %for.inc330
                                        #   in Loop: Header=BB123_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_84
.LBB123_94:                             # %for.end332
	jmp	.LBB123_95
.LBB123_95:                             # %if.end333
	movl	$0, -8(%rbp)
.LBB123_96:                             # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB123_96 Depth=1
	movl	$0, -4(%rbp)
.LBB123_98:                             # %for.cond338
                                        #   Parent Loop BB123_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB123_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB123_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_98
.LBB123_101:                            # %for.end384
                                        #   in Loop: Header=BB123_96 Depth=1
	jmp	.LBB123_102
.LBB123_102:                            # %for.inc385
                                        #   in Loop: Header=BB123_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_96
.LBB123_103:                            # %for.end387
	jmp	.LBB123_157
.LBB123_104:                            # %if.else388
	movl	$0, -16(%rbp)
.LBB123_105:                            # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_107 Depth 2
                                        #       Child Loop BB123_109 Depth 3
                                        #         Child Loop BB123_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB123_105 Depth=1
	movl	$0, -12(%rbp)
.LBB123_107:                            # %for.cond394
                                        #   Parent Loop BB123_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_109 Depth 3
                                        #         Child Loop BB123_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB123_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB123_107 Depth=2
	movl	$0, -8(%rbp)
.LBB123_109:                            # %for.cond398
                                        #   Parent Loop BB123_105 Depth=1
                                        #     Parent Loop BB123_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB123_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB123_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB123_109 Depth=3
	movl	$0, -4(%rbp)
.LBB123_111:                            # %for.cond402
                                        #   Parent Loop BB123_105 Depth=1
                                        #     Parent Loop BB123_107 Depth=2
                                        #       Parent Loop BB123_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB123_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB123_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB123_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_111
.LBB123_114:                            # %for.end425
                                        #   in Loop: Header=BB123_109 Depth=3
	jmp	.LBB123_115
.LBB123_115:                            # %for.inc426
                                        #   in Loop: Header=BB123_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_109
.LBB123_116:                            # %for.end428
                                        #   in Loop: Header=BB123_107 Depth=2
	jmp	.LBB123_117
.LBB123_117:                            # %for.inc429
                                        #   in Loop: Header=BB123_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_107
.LBB123_118:                            # %for.end431
                                        #   in Loop: Header=BB123_105 Depth=1
	jmp	.LBB123_119
.LBB123_119:                            # %for.inc432
                                        #   in Loop: Header=BB123_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_105
.LBB123_120:                            # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB123_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB123_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB123_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB123_136
.LBB123_124:                            # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB123_125:                            # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB123_125 Depth=1
	movl	$0, -4(%rbp)
.LBB123_127:                            # %for.cond458
                                        #   Parent Loop BB123_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB123_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB123_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB123_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB123_131
.LBB123_130:                            # %if.else478
                                        #   in Loop: Header=BB123_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB123_131:                            # %if.end483
                                        #   in Loop: Header=BB123_127 Depth=2
	jmp	.LBB123_132
.LBB123_132:                            # %for.inc484
                                        #   in Loop: Header=BB123_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_127
.LBB123_133:                            # %for.end486
                                        #   in Loop: Header=BB123_125 Depth=1
	jmp	.LBB123_134
.LBB123_134:                            # %for.inc487
                                        #   in Loop: Header=BB123_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_125
.LBB123_135:                            # %for.end489
	jmp	.LBB123_148
.LBB123_136:                            # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB123_137:                            # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB123_137 Depth=1
	movl	$0, -4(%rbp)
.LBB123_139:                            # %for.cond498
                                        #   Parent Loop BB123_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB123_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB123_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB123_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB123_143
.LBB123_142:                            # %if.else518
                                        #   in Loop: Header=BB123_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB123_143:                            # %if.end527
                                        #   in Loop: Header=BB123_139 Depth=2
	jmp	.LBB123_144
.LBB123_144:                            # %for.inc528
                                        #   in Loop: Header=BB123_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_139
.LBB123_145:                            # %for.end530
                                        #   in Loop: Header=BB123_137 Depth=1
	jmp	.LBB123_146
.LBB123_146:                            # %for.inc531
                                        #   in Loop: Header=BB123_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_137
.LBB123_147:                            # %for.end533
	jmp	.LBB123_148
.LBB123_148:                            # %if.end534
	movl	$0, -8(%rbp)
.LBB123_149:                            # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB123_149 Depth=1
	movl	$0, -4(%rbp)
.LBB123_151:                            # %for.cond539
                                        #   Parent Loop BB123_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB123_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB123_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_151
.LBB123_154:                            # %for.end585
                                        #   in Loop: Header=BB123_149 Depth=1
	jmp	.LBB123_155
.LBB123_155:                            # %for.inc586
                                        #   in Loop: Header=BB123_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_149
.LBB123_156:                            # %for.end588
	jmp	.LBB123_157
.LBB123_157:                            # %if.end589
	cmpl	$1108060177, -40(%rbp)  # imm = 0x420BA811
	jne	.LBB123_159
.LBB123_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_159:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_158
.Lfunc_end123:
	.size	SetCoeffAndReconstruction8x8.94, .Lfunc_end123-SetCoeffAndReconstruction8x8.94
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.95
.LCPI124_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI124_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.95
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.95,@function
Mode_Decision_for_4x4IntraBlocks.95:    # @Mode_Decision_for_4x4IntraBlocks.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI124_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$1737016782, -176(%rbp) # imm = 0x6788C5CE
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -96(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -172(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -184(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB124_8
# %bb.1:                                # %if.then
	cmpl	$0, -208(%rbp)
	je	.LBB124_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB124_4
.LBB124_3:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB124_4
.LBB124_4:                              # %cond.end
	movl	%eax, -208(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB124_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB124_7
.LBB124_6:                              # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB124_7
.LBB124_7:                              # %cond.end31
	movl	%eax, -232(%rbp)
.LBB124_8:                              # %if.end
	cmpl	$0, -232(%rbp)
	je	.LBB124_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB124_11
.LBB124_10:                             # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB124_11
.LBB124_11:                             # %cond.end42
	movl	%eax, -112(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB124_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB124_14
.LBB124_13:                             # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB124_14
.LBB124_14:                             # %cond.end55
	movl	%eax, -120(%rbp)
	cmpl	$0, -112(%rbp)
	jl	.LBB124_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -120(%rbp)
	jge	.LBB124_17
.LBB124_16:                             # %cond.true58
	movl	$2, %eax
	jmp	.LBB124_21
.LBB124_17:                             # %cond.false59
	movl	-112(%rbp), %eax
	cmpl	-120(%rbp), %eax
	jge	.LBB124_19
# %bb.18:                               # %cond.true61
	movl	-112(%rbp), %eax
	jmp	.LBB124_20
.LBB124_19:                             # %cond.false62
	movl	-120(%rbp), %eax
.LBB124_20:                             # %cond.end63
.LBB124_21:                             # %cond.end65
	movl	%eax, -100(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-156(%rbp), %rdx
	leaq	-180(%rbp), %rcx
	leaq	-164(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB124_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_49 Depth 2
                                        #       Child Loop BB124_51 Depth 3
                                        #     Child Loop BB124_64 Depth 2
                                        #       Child Loop BB124_66 Depth 3
                                        #     Child Loop BB124_73 Depth 2
                                        #       Child Loop BB124_75 Depth 3
                                        #     Child Loop BB124_81 Depth 2
                                        #       Child Loop BB124_83 Depth 3
                                        #     Child Loop BB124_91 Depth 2
                                        #       Child Loop BB124_93 Depth 3
                                        #     Child Loop BB124_99 Depth 2
                                        #       Child Loop BB124_101 Depth 3
                                        #     Child Loop BB124_107 Depth 2
                                        #       Child Loop BB124_109 Depth 3
                                        #     Child Loop BB124_115 Depth 2
                                        #       Child Loop BB124_117 Depth 3
                                        #     Child Loop BB124_123 Depth 2
                                        #       Child Loop BB124_125 Depth 3
                                        #     Child Loop BB124_131 Depth 2
                                        #       Child Loop BB124_133 Depth 3
                                        #     Child Loop BB124_166 Depth 2
                                        #       Child Loop BB124_168 Depth 3
                                        #     Child Loop BB124_175 Depth 2
                                        #       Child Loop BB124_177 Depth 3
                                        #     Child Loop BB124_183 Depth 2
                                        #       Child Loop BB124_185 Depth 3
                                        #     Child Loop BB124_191 Depth 2
                                        #       Child Loop BB124_193 Depth 3
                                        #     Child Loop BB124_199 Depth 2
                                        #       Child Loop BB124_201 Depth 3
                                        #         Child Loop BB124_203 Depth 4
                                        #     Child Loop BB124_211 Depth 2
                                        #       Child Loop BB124_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB124_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB124_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB124_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB124_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB124_28
.LBB124_27:                             # %land.lhs.true
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$0, -180(%rbp)
	movb	$1, %al
	jne	.LBB124_32
.LBB124_28:                             # %lor.lhs.false76
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB124_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB124_31
.LBB124_30:                             # %land.lhs.true80
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$0, -156(%rbp)
	movb	$1, %al
	jne	.LBB124_32
.LBB124_31:                             # %lor.rhs
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$0, -164(%rbp)
	setne	%al
.LBB124_32:                             # %lor.end
                                        #   in Loop: Header=BB124_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -160(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB124_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB124_46
.LBB124_34:                             # %if.then86
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB124_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB124_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB124_38
.LBB124_37:                             # %if.then92
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_223
.LBB124_38:                             # %if.end93
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB124_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB124_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB124_42
.LBB124_41:                             # %if.then99
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_223
.LBB124_42:                             # %if.end100
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB124_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB124_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_223
.LBB124_45:                             # %if.end105
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_46
.LBB124_46:                             # %if.end106
                                        #   in Loop: Header=BB124_22 Depth=1
	cmpl	$0, -160(%rbp)
	je	.LBB124_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB124_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -108(%rbp)
.LBB124_49:                             # %for.cond111
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB124_49 Depth=2
	movl	$0, -12(%rbp)
.LBB124_51:                             # %for.cond114
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB124_51 Depth=3
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-108(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB124_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB124_51
.LBB124_54:                             # %for.end
                                        #   in Loop: Header=BB124_49 Depth=2
	jmp	.LBB124_55
.LBB124_55:                             # %for.inc133
                                        #   in Loop: Header=BB124_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_49
.LBB124_56:                             # %for.end135
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jne	.LBB124_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB124_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB124_59
.LBB124_58:                             # %cond.false139
                                        #   in Loop: Header=BB124_22 Depth=1
	vmovsd	.LCPI124_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-136(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB124_59:                             # %cond.end142
                                        #   in Loop: Header=BB124_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB124_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB124_61:                             # %if.end148
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_221
.LBB124_62:                             # %if.else
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB124_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
.LBB124_64:                             # %for.cond151
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB124_64 Depth=2
	movl	$0, -12(%rbp)
.LBB124_66:                             # %for.cond155
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB124_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB124_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_66
.LBB124_69:                             # %for.end194
                                        #   in Loop: Header=BB124_64 Depth=2
	jmp	.LBB124_70
.LBB124_70:                             # %for.inc195
                                        #   in Loop: Header=BB124_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_64
.LBB124_71:                             # %for.end197
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB124_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
.LBB124_73:                             # %for.cond202
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB124_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB124_73 Depth=2
	movl	$0, -12(%rbp)
.LBB124_75:                             # %for.cond206
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB124_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB124_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB124_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_75
.LBB124_78:                             # %for.end224
                                        #   in Loop: Header=BB124_73 Depth=2
	jmp	.LBB124_79
.LBB124_79:                             # %for.inc225
                                        #   in Loop: Header=BB124_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_73
.LBB124_80:                             # %for.end227
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -20(%rbp)
.LBB124_81:                             # %for.cond228
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_83 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB124_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB124_81 Depth=2
	movl	$0, -24(%rbp)
.LBB124_83:                             # %for.cond232
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB124_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB124_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB124_83 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_83
.LBB124_86:                             # %for.end249
                                        #   in Loop: Header=BB124_81 Depth=2
	jmp	.LBB124_87
.LBB124_87:                             # %for.inc250
                                        #   in Loop: Header=BB124_81 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_81
.LBB124_88:                             # %for.end252
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB124_89:                             # %if.end253
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB124_220
.LBB124_90:                             # %if.else254
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
.LBB124_91:                             # %for.cond255
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB124_91 Depth=2
	movl	$0, -12(%rbp)
.LBB124_93:                             # %for.cond259
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB124_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB124_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_93
.LBB124_96:                             # %for.end345
                                        #   in Loop: Header=BB124_91 Depth=2
	jmp	.LBB124_97
.LBB124_97:                             # %for.inc346
                                        #   in Loop: Header=BB124_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_91
.LBB124_98:                             # %for.end348
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
.LBB124_99:                             # %for.cond349
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB124_99 Depth=2
	movl	$0, -12(%rbp)
.LBB124_101:                            # %for.cond353
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB124_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB124_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_101
.LBB124_104:                            # %for.end368
                                        #   in Loop: Header=BB124_99 Depth=2
	jmp	.LBB124_105
.LBB124_105:                            # %for.inc369
                                        #   in Loop: Header=BB124_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_99
.LBB124_106:                            # %for.end371
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB124_107:                            # %for.cond374
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB124_107 Depth=2
	movl	$0, -12(%rbp)
.LBB124_109:                            # %for.cond378
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB124_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB124_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_109
.LBB124_112:                            # %for.end402
                                        #   in Loop: Header=BB124_107 Depth=2
	jmp	.LBB124_113
.LBB124_113:                            # %for.inc403
                                        #   in Loop: Header=BB124_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_107
.LBB124_114:                            # %for.end405
                                        #   in Loop: Header=BB124_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %edi
	addl	$4, %edi
	movl	-32(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB124_115:                            # %for.cond409
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB124_115 Depth=2
	movl	$0, -12(%rbp)
.LBB124_117:                            # %for.cond413
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB124_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB124_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_117
.LBB124_120:                            # %for.end437
                                        #   in Loop: Header=BB124_115 Depth=2
	jmp	.LBB124_121
.LBB124_121:                            # %for.inc438
                                        #   in Loop: Header=BB124_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_115
.LBB124_122:                            # %for.end440
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	-28(%rbp), %edi
	addl	$8, %edi
	movl	-32(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB124_123:                            # %for.cond444
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB124_123 Depth=2
	movl	$0, -12(%rbp)
.LBB124_125:                            # %for.cond448
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB124_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB124_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_125
.LBB124_128:                            # %for.end463
                                        #   in Loop: Header=BB124_123 Depth=2
	jmp	.LBB124_129
.LBB124_129:                            # %for.inc464
                                        #   in Loop: Header=BB124_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_123
.LBB124_130:                            # %for.end466
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
.LBB124_131:                            # %for.cond467
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB124_131 Depth=2
	movl	$0, -12(%rbp)
.LBB124_133:                            # %for.cond471
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB124_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB124_137
.LBB124_136:                            # %cond.false516
                                        #   in Loop: Header=BB124_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB124_137:                            # %cond.end529
                                        #   in Loop: Header=BB124_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB124_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB124_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB124_143
.LBB124_139:                            # %cond.false535
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB124_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB124_142
.LBB124_141:                            # %cond.false551
                                        #   in Loop: Header=BB124_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB124_142:                            # %cond.end564
                                        #   in Loop: Header=BB124_133 Depth=3
.LBB124_143:                            # %cond.end566
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB124_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB124_146
.LBB124_145:                            # %cond.false588
                                        #   in Loop: Header=BB124_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB124_146:                            # %cond.end598
                                        #   in Loop: Header=BB124_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB124_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB124_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB124_152
.LBB124_148:                            # %cond.false604
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB124_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB124_151
.LBB124_150:                            # %cond.false617
                                        #   in Loop: Header=BB124_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB124_151:                            # %cond.end627
                                        #   in Loop: Header=BB124_133 Depth=3
.LBB124_152:                            # %cond.end629
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB124_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB124_155
.LBB124_154:                            # %cond.false655
                                        #   in Loop: Header=BB124_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB124_155:                            # %cond.end668
                                        #   in Loop: Header=BB124_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB124_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB124_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB124_161
.LBB124_157:                            # %cond.false674
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB124_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB124_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB124_160
.LBB124_159:                            # %cond.false690
                                        #   in Loop: Header=BB124_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB124_160:                            # %cond.end703
                                        #   in Loop: Header=BB124_133 Depth=3
.LBB124_161:                            # %cond.end705
                                        #   in Loop: Header=BB124_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB124_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_133
.LBB124_163:                            # %for.end718
                                        #   in Loop: Header=BB124_131 Depth=2
	jmp	.LBB124_164
.LBB124_164:                            # %for.inc719
                                        #   in Loop: Header=BB124_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_131
.LBB124_165:                            # %for.end721
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -20(%rbp)
.LBB124_166:                            # %for.cond722
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_168 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB124_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB124_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB124_168:                            # %for.cond726
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB124_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB124_168 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_168
.LBB124_171:                            # %for.end831
                                        #   in Loop: Header=BB124_166 Depth=2
	jmp	.LBB124_172
.LBB124_172:                            # %for.inc832
                                        #   in Loop: Header=BB124_166 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_166
.LBB124_173:                            # %for.end834
                                        #   in Loop: Header=BB124_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-92(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB124_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
.LBB124_175:                            # %for.cond842
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB124_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB124_175 Depth=2
	movl	$0, -12(%rbp)
.LBB124_177:                            # %for.cond846
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB124_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB124_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB124_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_177
.LBB124_180:                            # %for.end865
                                        #   in Loop: Header=BB124_175 Depth=2
	jmp	.LBB124_181
.LBB124_181:                            # %for.inc866
                                        #   in Loop: Header=BB124_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_175
.LBB124_182:                            # %for.end868
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
.LBB124_183:                            # %for.cond869
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB124_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB124_183 Depth=2
	movl	$0, -12(%rbp)
.LBB124_185:                            # %for.cond873
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB124_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB124_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB124_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_185
.LBB124_188:                            # %for.end893
                                        #   in Loop: Header=BB124_183 Depth=2
	jmp	.LBB124_189
.LBB124_189:                            # %for.inc894
                                        #   in Loop: Header=BB124_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_183
.LBB124_190:                            # %for.end896
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -16(%rbp)
.LBB124_191:                            # %for.cond897
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB124_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB124_191 Depth=2
	movl	$0, -12(%rbp)
.LBB124_193:                            # %for.cond901
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB124_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB124_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB124_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_193
.LBB124_196:                            # %for.end921
                                        #   in Loop: Header=BB124_191 Depth=2
	jmp	.LBB124_197
.LBB124_197:                            # %for.inc922
                                        #   in Loop: Header=BB124_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_191
.LBB124_198:                            # %for.end924
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -12(%rbp)
.LBB124_199:                            # %for.cond925
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_201 Depth 3
                                        #         Child Loop BB124_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB124_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB124_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -20(%rbp)
.LBB124_201:                            # %for.cond985
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_203 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB124_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB124_201 Depth=3
	movl	$0, -24(%rbp)
.LBB124_203:                            # %for.cond989
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_199 Depth=2
                                        #       Parent Loop BB124_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -24(%rbp)
	jge	.LBB124_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB124_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB124_203 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_203
.LBB124_206:                            # %for.end1011
                                        #   in Loop: Header=BB124_201 Depth=3
	jmp	.LBB124_207
.LBB124_207:                            # %for.inc1012
                                        #   in Loop: Header=BB124_201 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_201
.LBB124_208:                            # %for.end1014
                                        #   in Loop: Header=BB124_199 Depth=2
	jmp	.LBB124_209
.LBB124_209:                            # %for.inc1015
                                        #   in Loop: Header=BB124_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_199
.LBB124_210:                            # %for.end1017
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	$0, -20(%rbp)
.LBB124_211:                            # %for.cond1018
                                        #   Parent Loop BB124_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_213 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB124_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB124_211 Depth=2
	movl	$0, -24(%rbp)
.LBB124_213:                            # %for.cond1022
                                        #   Parent Loop BB124_22 Depth=1
                                        #     Parent Loop BB124_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB124_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB124_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB124_213 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_213
.LBB124_216:                            # %for.end1040
                                        #   in Loop: Header=BB124_211 Depth=2
	jmp	.LBB124_217
.LBB124_217:                            # %for.inc1041
                                        #   in Loop: Header=BB124_211 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_211
.LBB124_218:                            # %for.end1043
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB124_219:                            # %if.end1044
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_220
.LBB124_220:                            # %if.end1045
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_221
.LBB124_221:                            # %if.end1046
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_222
.LBB124_222:                            # %if.end1047
                                        #   in Loop: Header=BB124_22 Depth=1
	jmp	.LBB124_223
.LBB124_223:                            # %for.inc1048
                                        #   in Loop: Header=BB124_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB124_22
.LBB124_224:                            # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-172(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-184(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB124_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB124_230
.LBB124_226:                            # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB124_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB124_229
.LBB124_228:                            # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB124_229:                            # %cond.end1065
.LBB124_230:                            # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	shll	$2, %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB124_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB124_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB124_233:                            # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB124_233 Depth=1
	movl	$0, -12(%rbp)
.LBB124_235:                            # %for.cond1087
                                        #   Parent Loop BB124_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB124_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB124_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_235
.LBB124_238:                            # %for.end1128
                                        #   in Loop: Header=BB124_233 Depth=1
	jmp	.LBB124_239
.LBB124_239:                            # %for.inc1129
                                        #   in Loop: Header=BB124_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_233
.LBB124_240:                            # %for.end1131
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-168(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	jmp	.LBB124_317
.LBB124_241:                            # %if.else1133
	movl	$0, -16(%rbp)
.LBB124_242:                            # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB124_242 Depth=1
	movl	$0, -12(%rbp)
.LBB124_244:                            # %for.cond1138
                                        #   Parent Loop BB124_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB124_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB124_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_244
.LBB124_247:                            # %for.end1226
                                        #   in Loop: Header=BB124_242 Depth=1
	jmp	.LBB124_248
.LBB124_248:                            # %for.inc1227
                                        #   in Loop: Header=BB124_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_242
.LBB124_249:                            # %for.end1229
	movl	$0, -16(%rbp)
.LBB124_250:                            # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB124_250 Depth=1
	movl	$0, -12(%rbp)
.LBB124_252:                            # %for.cond1234
                                        #   Parent Loop BB124_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB124_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB124_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_252
.LBB124_255:                            # %for.end1249
                                        #   in Loop: Header=BB124_250 Depth=1
	jmp	.LBB124_256
.LBB124_256:                            # %for.inc1250
                                        #   in Loop: Header=BB124_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_250
.LBB124_257:                            # %for.end1252
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-168(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB124_258:                            # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB124_258 Depth=1
	movl	$0, -12(%rbp)
.LBB124_260:                            # %for.cond1258
                                        #   Parent Loop BB124_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB124_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB124_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_260
.LBB124_263:                            # %for.end1282
                                        #   in Loop: Header=BB124_258 Depth=1
	jmp	.LBB124_264
.LBB124_264:                            # %for.inc1283
                                        #   in Loop: Header=BB124_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_258
.LBB124_265:                            # %for.end1285
	movl	-28(%rbp), %esi
	addl	$4, %esi
	movl	-32(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB124_266:                            # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB124_266 Depth=1
	movl	$0, -12(%rbp)
.LBB124_268:                            # %for.cond1328
                                        #   Parent Loop BB124_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB124_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB124_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_268
.LBB124_271:                            # %for.end1352
                                        #   in Loop: Header=BB124_266 Depth=1
	jmp	.LBB124_272
.LBB124_272:                            # %for.inc1353
                                        #   in Loop: Header=BB124_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_266
.LBB124_273:                            # %for.end1355
	movl	-28(%rbp), %esi
	addl	$8, %esi
	movl	-32(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB124_274:                            # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB124_274 Depth=1
	movl	$0, -12(%rbp)
.LBB124_276:                            # %for.cond1398
                                        #   Parent Loop BB124_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB124_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB124_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_276
.LBB124_279:                            # %for.end1413
                                        #   in Loop: Header=BB124_274 Depth=1
	jmp	.LBB124_280
.LBB124_280:                            # %for.inc1414
                                        #   in Loop: Header=BB124_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_274
.LBB124_281:                            # %for.end1416
	movl	$0, -16(%rbp)
.LBB124_282:                            # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB124_282 Depth=1
	movl	$0, -12(%rbp)
.LBB124_284:                            # %for.cond1421
                                        #   Parent Loop BB124_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB124_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB124_288
.LBB124_287:                            # %cond.false1467
                                        #   in Loop: Header=BB124_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB124_288:                            # %cond.end1480
                                        #   in Loop: Header=BB124_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB124_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB124_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB124_294
.LBB124_290:                            # %cond.false1486
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB124_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB124_293
.LBB124_292:                            # %cond.false1502
                                        #   in Loop: Header=BB124_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB124_293:                            # %cond.end1515
                                        #   in Loop: Header=BB124_284 Depth=2
.LBB124_294:                            # %cond.end1517
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB124_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB124_297
.LBB124_296:                            # %cond.false1541
                                        #   in Loop: Header=BB124_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB124_297:                            # %cond.end1551
                                        #   in Loop: Header=BB124_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB124_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB124_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB124_303
.LBB124_299:                            # %cond.false1557
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB124_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB124_302
.LBB124_301:                            # %cond.false1570
                                        #   in Loop: Header=BB124_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB124_302:                            # %cond.end1580
                                        #   in Loop: Header=BB124_284 Depth=2
.LBB124_303:                            # %cond.end1582
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB124_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB124_306
.LBB124_305:                            # %cond.false1608
                                        #   in Loop: Header=BB124_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB124_306:                            # %cond.end1621
                                        #   in Loop: Header=BB124_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB124_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB124_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB124_312
.LBB124_308:                            # %cond.false1627
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB124_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB124_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB124_311
.LBB124_310:                            # %cond.false1643
                                        #   in Loop: Header=BB124_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB124_311:                            # %cond.end1656
                                        #   in Loop: Header=BB124_284 Depth=2
.LBB124_312:                            # %cond.end1658
                                        #   in Loop: Header=BB124_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB124_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_284
.LBB124_314:                            # %for.end1671
                                        #   in Loop: Header=BB124_282 Depth=1
	jmp	.LBB124_315
.LBB124_315:                            # %for.inc1672
                                        #   in Loop: Header=BB124_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_282
.LBB124_316:                            # %for.end1674
	jmp	.LBB124_317
.LBB124_317:                            # %if.end1675
	jmp	.LBB124_367
.LBB124_318:                            # %if.else1676
	movl	$0, -16(%rbp)
.LBB124_319:                            # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB124_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB124_319 Depth=1
	movl	$0, -12(%rbp)
.LBB124_321:                            # %for.cond1681
                                        #   Parent Loop BB124_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB124_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB124_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB124_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_321
.LBB124_324:                            # %for.end1700
                                        #   in Loop: Header=BB124_319 Depth=1
	jmp	.LBB124_325
.LBB124_325:                            # %for.inc1701
                                        #   in Loop: Header=BB124_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_319
.LBB124_326:                            # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB124_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB124_328:                            # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB124_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB124_328 Depth=1
	movl	$0, -12(%rbp)
.LBB124_330:                            # %for.cond1711
                                        #   Parent Loop BB124_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB124_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB124_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB124_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_330
.LBB124_333:                            # %for.end1731
                                        #   in Loop: Header=BB124_328 Depth=1
	jmp	.LBB124_334
.LBB124_334:                            # %for.inc1732
                                        #   in Loop: Header=BB124_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_328
.LBB124_335:                            # %for.end1734
	movl	$0, -16(%rbp)
.LBB124_336:                            # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB124_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB124_336 Depth=1
	movl	$0, -12(%rbp)
.LBB124_338:                            # %for.cond1739
                                        #   Parent Loop BB124_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB124_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB124_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB124_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_338
.LBB124_341:                            # %for.end1759
                                        #   in Loop: Header=BB124_336 Depth=1
	jmp	.LBB124_342
.LBB124_342:                            # %for.inc1760
                                        #   in Loop: Header=BB124_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_336
.LBB124_343:                            # %for.end1762
	jmp	.LBB124_344
.LBB124_344:                            # %if.end1763
	movl	$0, -20(%rbp)
.LBB124_345:                            # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_347 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB124_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB124_345 Depth=1
	movl	$0, -24(%rbp)
.LBB124_347:                            # %for.cond1768
                                        #   Parent Loop BB124_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB124_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB124_347 Depth=2
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB124_347 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_347
.LBB124_350:                            # %for.end1800
                                        #   in Loop: Header=BB124_345 Depth=1
	jmp	.LBB124_351
.LBB124_351:                            # %for.inc1801
                                        #   in Loop: Header=BB124_345 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_345
.LBB124_352:                            # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB124_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB124_354:                            # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_356 Depth 2
                                        #       Child Loop BB124_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB124_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB124_354 Depth=1
	movl	$0, -20(%rbp)
.LBB124_356:                            # %for.cond1811
                                        #   Parent Loop BB124_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_358 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB124_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB124_356 Depth=2
	movl	$0, -24(%rbp)
.LBB124_358:                            # %for.cond1815
                                        #   Parent Loop BB124_354 Depth=1
                                        #     Parent Loop BB124_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB124_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB124_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB124_358 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_358
.LBB124_361:                            # %for.end1837
                                        #   in Loop: Header=BB124_356 Depth=2
	jmp	.LBB124_362
.LBB124_362:                            # %for.inc1838
                                        #   in Loop: Header=BB124_356 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_356
.LBB124_363:                            # %for.end1840
                                        #   in Loop: Header=BB124_354 Depth=1
	jmp	.LBB124_364
.LBB124_364:                            # %for.inc1841
                                        #   in Loop: Header=BB124_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_354
.LBB124_365:                            # %for.end1843
	jmp	.LBB124_366
.LBB124_366:                            # %if.end1844
	jmp	.LBB124_367
.LBB124_367:                            # %if.end1845
	movl	-96(%rbp), %ebx
	cmpl	$1737016782, -176(%rbp) # imm = 0x6788C5CE
	jne	.LBB124_369
.LBB124_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_369:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_368
.Lfunc_end124:
	.size	Mode_Decision_for_4x4IntraBlocks.95, .Lfunc_end124-Mode_Decision_for_4x4IntraBlocks.95
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.96
.LCPI125_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI125_1:
	.quad	4622945017495814144     # double 12
.LCPI125_2:
	.quad	4607182418800017408     # double 1
.LCPI125_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI125_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI125_5:
	.quad	4611686018427387904     # double 2
.LCPI125_6:
	.quad	4613937818241073152     # double 3
.LCPI125_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI125_8:
	.quad	4616189618054758400     # double 4
.LCPI125_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI125_10:
	.quad	4618441417868443648     # double 6
.LCPI125_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI125_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI125_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI125_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI125_15:
	.quad	4602678819172646912     # double 0.5
.LCPI125_16:
	.quad	4679240012837945344     # double 65536
.LCPI125_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI125_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.96
	.p2align	4, 0x90
	.type	encode_one_macroblock.96,@function
encode_one_macroblock.96:               # @encode_one_macroblock.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI125_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$897248418, -416(%rbp)  # imm = 0x357AECA2
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -480(%rbp)
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -272(%rbp)
	movl	$0, -180(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -264(%rbp)
	movl	$0, -252(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -320(%rbp)
	movl	$0, -208(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB125_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB125_4
.LBB125_2:                              # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB125_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB125_5
.LBB125_4:                              # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB125_5:                              # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -308(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -412(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB125_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB125_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB125_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB125_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB125_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB125_11:                             # %land.end
.LBB125_12:                             # %lor.end36
.LBB125_13:                             # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -304(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB125_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB125_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB125_17:                             # %lor.end51
.LBB125_18:                             # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -284(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB125_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB125_21
.LBB125_20:                             # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB125_21
.LBB125_21:                             # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -424(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -392(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -448(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB125_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB125_23:                             # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -288(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -288(%rbp)
	je	.LBB125_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB125_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB125_27
.LBB125_26:                             # %if.else
	movl	$2, -64(%rbp)
.LBB125_27:                             # %if.end
	jmp	.LBB125_29
.LBB125_28:                             # %if.else70
	movl	$0, -64(%rbp)
.LBB125_29:                             # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB125_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB125_31:                             # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB125_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB125_33:                             # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB125_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB125_35:                             # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB125_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB125_37:                             # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB125_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB125_39:                             # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB125_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB125_41:                             # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB125_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB125_43:                             # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB125_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB125_45:                             # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB125_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB125_47:                             # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB125_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB125_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB125_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB125_51:                             # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-412(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB125_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB125_53:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_55 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB125_53 Depth=1
	movl	$0, -56(%rbp)
.LBB125_55:                             # %for.cond156
                                        #   Parent Loop BB125_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB125_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB125_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB125_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB125_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB125_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB125_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB125_59:                             # %if.end183
                                        #   in Loop: Header=BB125_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB125_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB125_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB125_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB125_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB125_62:                             # %if.end202
                                        #   in Loop: Header=BB125_55 Depth=2
	jmp	.LBB125_63
.LBB125_63:                             # %for.inc
                                        #   in Loop: Header=BB125_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB125_55
.LBB125_64:                             # %for.end
                                        #   in Loop: Header=BB125_53 Depth=1
	jmp	.LBB125_65
.LBB125_65:                             # %for.inc203
                                        #   in Loop: Header=BB125_53 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB125_53
.LBB125_66:                             # %for.end205
	jmp	.LBB125_93
.LBB125_67:                             # %if.else206
	cmpl	$0, -288(%rbp)
	je	.LBB125_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB125_69:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_71 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB125_69 Depth=1
	movl	$0, -56(%rbp)
.LBB125_71:                             # %for.cond215
                                        #   Parent Loop BB125_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB125_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB125_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB125_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB125_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB125_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB125_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB125_75:                             # %if.end244
                                        #   in Loop: Header=BB125_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB125_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB125_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB125_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB125_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB125_78:                             # %if.end263
                                        #   in Loop: Header=BB125_71 Depth=2
	jmp	.LBB125_79
.LBB125_79:                             # %for.inc264
                                        #   in Loop: Header=BB125_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB125_71
.LBB125_80:                             # %for.end266
                                        #   in Loop: Header=BB125_69 Depth=1
	jmp	.LBB125_81
.LBB125_81:                             # %for.inc267
                                        #   in Loop: Header=BB125_69 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB125_69
.LBB125_82:                             # %for.end269
	jmp	.LBB125_92
.LBB125_83:                             # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB125_84:                             # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_86 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB125_84 Depth=1
	movl	$0, -56(%rbp)
.LBB125_86:                             # %for.cond277
                                        #   Parent Loop BB125_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB125_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB125_86 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB125_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB125_86
.LBB125_89:                             # %for.end290
                                        #   in Loop: Header=BB125_84 Depth=1
	jmp	.LBB125_90
.LBB125_90:                             # %for.inc291
                                        #   in Loop: Header=BB125_84 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB125_84
.LBB125_91:                             # %for.end293
	jmp	.LBB125_92
.LBB125_92:                             # %if.end294
	jmp	.LBB125_93
.LBB125_93:                             # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI125_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB125_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB125_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI125_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI125_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB125_99
.LBB125_98:                             # %if.else315
	vmovsd	.LCPI125_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI125_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB125_99:                             # %if.end326
	jmp	.LBB125_159
.LBB125_100:                            # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB125_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI125_2(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB125_104
.LBB125_103:                            # %cond.false336
	vmovsd	.LCPI125_2(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI125_3(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB125_104:                            # %cond.end340
	vmovsd	%xmm0, -472(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB125_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI125_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI125_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI125_9(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB125_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI125_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI125_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB125_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI125_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB125_109
.LBB125_108:                            # %cond.false357
	vmovsd	.LCPI125_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB125_109:                            # %cond.end359
	vmovsd	.LCPI125_5(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB125_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI125_5(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB125_115
.LBB125_111:                            # %cond.false364
	vmovsd	.LCPI125_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI125_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB125_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI125_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB125_114
.LBB125_113:                            # %cond.false369
	vmovsd	.LCPI125_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB125_114:                            # %cond.end371
.LBB125_115:                            # %cond.end373
	jmp	.LBB125_129
.LBB125_116:                            # %cond.false375
	cmpl	$0, -308(%rbp)
	je	.LBB125_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI125_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI125_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB125_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI125_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB125_120
.LBB125_119:                            # %cond.false382
	vmovsd	.LCPI125_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB125_120:                            # %cond.end384
	vmovsd	.LCPI125_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB125_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI125_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB125_126
.LBB125_122:                            # %cond.false389
	vmovsd	.LCPI125_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI125_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB125_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI125_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB125_125
.LBB125_124:                            # %cond.false394
	vmovsd	.LCPI125_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB125_125:                            # %cond.end396
.LBB125_126:                            # %cond.end398
	jmp	.LBB125_128
.LBB125_127:                            # %cond.false400
	vmovsd	.LCPI125_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB125_128
.LBB125_128:                            # %cond.end401
.LBB125_129:                            # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB125_146
.LBB125_130:                            # %if.else406
	vmovsd	.LCPI125_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI125_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI125_4(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB125_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI125_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB125_145
.LBB125_132:                            # %cond.false415
	cmpl	$0, -308(%rbp)
	je	.LBB125_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI125_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI125_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB125_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI125_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB125_136
.LBB125_135:                            # %cond.false422
	vmovsd	.LCPI125_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB125_136:                            # %cond.end424
	vmovsd	.LCPI125_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB125_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI125_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB125_142
.LBB125_138:                            # %cond.false429
	vmovsd	.LCPI125_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI125_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB125_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI125_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB125_141
.LBB125_140:                            # %cond.false434
	vmovsd	.LCPI125_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB125_141:                            # %cond.end436
.LBB125_142:                            # %cond.end438
	jmp	.LBB125_144
.LBB125_143:                            # %cond.false440
	vmovsd	.LCPI125_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB125_144
.LBB125_144:                            # %cond.end441
.LBB125_145:                            # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB125_146:                            # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB125_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB125_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI125_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI125_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB125_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI125_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB125_152
.LBB125_151:                            # %cond.false465
	vmovsd	.LCPI125_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB125_152:                            # %cond.end473
	vmovsd	.LCPI125_2(%rip), %xmm1 # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB125_153:                            # %if.end477
	jmp	.LBB125_158
.LBB125_154:                            # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB125_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI125_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB125_157:                            # %if.end487
	jmp	.LBB125_158
.LBB125_158:                            # %if.end488
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB125_159:                            # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB125_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI125_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB125_161:                            # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB125_166
.LBB125_162:                            # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB125_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB125_165
.LBB125_164:                            # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB125_165:                            # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB125_166:                            # %if.end510
	vmovsd	.LCPI125_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI125_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB125_167:                            # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB125_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB125_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB125_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB125_167
.LBB125_170:                            # %for.end522
	movl	$0, -256(%rbp)
.LBB125_171:                            # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_181 Depth 2
                                        #       Child Loop BB125_184 Depth 3
                                        #         Child Loop BB125_190 Depth 4
                                        #         Child Loop BB125_210 Depth 4
                                        #         Child Loop BB125_300 Depth 4
                                        #           Child Loop BB125_302 Depth 5
                                        #         Child Loop BB125_309 Depth 4
                                        #           Child Loop BB125_311 Depth 5
                                        #         Child Loop BB125_326 Depth 4
                                        #           Child Loop BB125_328 Depth 5
                                        #         Child Loop BB125_335 Depth 4
                                        #           Child Loop BB125_337 Depth 5
                                        #         Child Loop BB125_355 Depth 4
                                        #           Child Loop BB125_357 Depth 5
                                        #         Child Loop BB125_374 Depth 4
                                        #           Child Loop BB125_376 Depth 5
                                        #     Child Loop BB125_416 Depth 2
                                        #       Child Loop BB125_418 Depth 3
                                        #         Child Loop BB125_445 Depth 4
                                        #         Child Loop BB125_464 Depth 4
                                        #           Child Loop BB125_466 Depth 5
                                        #         Child Loop BB125_473 Depth 4
                                        #         Child Loop BB125_508 Depth 4
                                        #           Child Loop BB125_510 Depth 5
                                        #         Child Loop BB125_532 Depth 4
                                        #           Child Loop BB125_534 Depth 5
                                        #             Child Loop BB125_536 Depth 6
                                        #         Child Loop BB125_544 Depth 4
                                        #           Child Loop BB125_546 Depth 5
                                        #       Child Loop BB125_569 Depth 3
                                        #         Child Loop BB125_571 Depth 4
                                        #           Child Loop BB125_573 Depth 5
                                        #       Child Loop BB125_581 Depth 3
                                        #         Child Loop BB125_583 Depth 4
                                        #     Child Loop BB125_601 Depth 2
                                        #       Child Loop BB125_603 Depth 3
                                        #         Child Loop BB125_614 Depth 4
                                        #         Child Loop BB125_633 Depth 4
                                        #           Child Loop BB125_635 Depth 5
                                        #         Child Loop BB125_642 Depth 4
                                        #         Child Loop BB125_677 Depth 4
                                        #           Child Loop BB125_679 Depth 5
                                        #         Child Loop BB125_701 Depth 4
                                        #           Child Loop BB125_703 Depth 5
                                        #             Child Loop BB125_705 Depth 6
                                        #         Child Loop BB125_713 Depth 4
                                        #           Child Loop BB125_715 Depth 5
                                        #         Child Loop BB125_723 Depth 4
                                        #           Child Loop BB125_725 Depth 5
                                        #       Child Loop BB125_745 Depth 3
                                        #         Child Loop BB125_747 Depth 4
                                        #           Child Loop BB125_749 Depth 5
                                        #       Child Loop BB125_757 Depth 3
                                        #         Child Loop BB125_759 Depth 4
                                        #       Child Loop BB125_766 Depth 3
                                        #         Child Loop BB125_768 Depth 4
                                        #       Child Loop BB125_778 Depth 3
                                        #         Child Loop BB125_780 Depth 4
                                        #       Child Loop BB125_786 Depth 3
                                        #       Child Loop BB125_791 Depth 3
                                        #         Child Loop BB125_793 Depth 4
                                        #     Child Loop BB125_803 Depth 2
                                        #       Child Loop BB125_805 Depth 3
                                        #     Child Loop BB125_835 Depth 2
                                        #       Child Loop BB125_853 Depth 3
                                        #         Child Loop BB125_908 Depth 4
                                        #           Child Loop BB125_911 Depth 5
                                        #             Child Loop BB125_913 Depth 6
                                        #           Child Loop BB125_920 Depth 5
                                        #             Child Loop BB125_922 Depth 6
                                        #         Child Loop BB125_955 Depth 4
                                        #           Child Loop BB125_957 Depth 5
                                        #     Child Loop BB125_981 Depth 2
                                        #       Child Loop BB125_1014 Depth 3
                                        #         Child Loop BB125_1017 Depth 4
                                        #           Child Loop BB125_1019 Depth 5
                                        #         Child Loop BB125_1026 Depth 4
                                        #           Child Loop BB125_1028 Depth 5
                                        #       Child Loop BB125_1061 Depth 3
                                        #         Child Loop BB125_1063 Depth 4
                                        #     Child Loop BB125_1113 Depth 2
                                        #       Child Loop BB125_1115 Depth 3
                                        #     Child Loop BB125_1127 Depth 2
                                        #       Child Loop BB125_1129 Depth 3
                                        #         Child Loop BB125_1131 Depth 4
                                        #     Child Loop BB125_1141 Depth 2
                                        #       Child Loop BB125_1143 Depth 3
                                        #     Child Loop BB125_1152 Depth 2
                                        #       Child Loop BB125_1154 Depth 3
                                        #     Child Loop BB125_1160 Depth 2
                                        #       Child Loop BB125_1162 Depth 3
                                        #     Child Loop BB125_1174 Depth 2
                                        #       Child Loop BB125_1176 Depth 3
                                        #         Child Loop BB125_1178 Depth 4
                                        #     Child Loop BB125_1189 Depth 2
                                        #       Child Loop BB125_1191 Depth 3
                                        #     Child Loop BB125_1202 Depth 2
                                        #       Child Loop BB125_1204 Depth 3
                                        #     Child Loop BB125_1211 Depth 2
                                        #       Child Loop BB125_1213 Depth 3
                                        #     Child Loop BB125_1221 Depth 2
                                        #       Child Loop BB125_1223 Depth 3
                                        #     Child Loop BB125_1229 Depth 2
                                        #       Child Loop BB125_1231 Depth 3
                                        #     Child Loop BB125_1237 Depth 2
                                        #       Child Loop BB125_1239 Depth 3
                                        #     Child Loop BB125_1245 Depth 2
                                        #       Child Loop BB125_1247 Depth 3
	movl	-256(%rbp), %eax
	cmpl	-304(%rbp), %eax
	jge	.LBB125_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB125_171 Depth=1
	cmpl	$2, -304(%rbp)
	jne	.LBB125_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB125_171 Depth=1
	cmpl	$0, -256(%rbp)
	jne	.LBB125_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB125_176
.LBB125_175:                            # %if.else534
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB125_176:                            # %if.end536
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_177
.LBB125_177:                            # %if.end537
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB125_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB125_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB125_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB125_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB125_180:                            # %if.end542
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB125_181:                            # %for.cond543
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_184 Depth 3
                                        #         Child Loop BB125_190 Depth 4
                                        #         Child Loop BB125_210 Depth 4
                                        #         Child Loop BB125_300 Depth 4
                                        #           Child Loop BB125_302 Depth 5
                                        #         Child Loop BB125_309 Depth 4
                                        #           Child Loop BB125_311 Depth 5
                                        #         Child Loop BB125_326 Depth 4
                                        #           Child Loop BB125_328 Depth 5
                                        #         Child Loop BB125_335 Depth 4
                                        #           Child Loop BB125_337 Depth 5
                                        #         Child Loop BB125_355 Depth 4
                                        #           Child Loop BB125_357 Depth 5
                                        #         Child Loop BB125_374 Depth 4
                                        #           Child Loop BB125_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB125_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB125_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB125_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB125_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB125_184:                            # %for.cond554
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_190 Depth 4
                                        #         Child Loop BB125_210 Depth 4
                                        #         Child Loop BB125_300 Depth 4
                                        #           Child Loop BB125_302 Depth 5
                                        #         Child Loop BB125_309 Depth 4
                                        #           Child Loop BB125_311 Depth 5
                                        #         Child Loop BB125_326 Depth 4
                                        #           Child Loop BB125_328 Depth 5
                                        #         Child Loop BB125_335 Depth 4
                                        #           Child Loop BB125_337 Depth 5
                                        #         Child Loop BB125_355 Depth 4
                                        #           Child Loop BB125_357 Depth 5
                                        #         Child Loop BB125_374 Depth 4
                                        #           Child Loop BB125_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB125_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB125_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB125_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB125_187:                            # %land.end566
                                        #   in Loop: Header=BB125_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB125_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB125_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB125_189:                            # %land.end574
                                        #   in Loop: Header=BB125_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB125_190:                            # %for.cond577
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_181 Depth=2
                                        #       Parent Loop BB125_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB125_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB125_190 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB125_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB125_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB125_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB125_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB125_206
.LBB125_194:                            # %if.then594
                                        #   in Loop: Header=BB125_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB125_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB125_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB125_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB125_198
.LBB125_197:                            # %cond.false604
                                        #   in Loop: Header=BB125_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB125_198:                            # %cond.end607
                                        #   in Loop: Header=BB125_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB125_203
.LBB125_199:                            # %cond.false610
                                        #   in Loop: Header=BB125_190 Depth=4
	vmovsd	.LCPI125_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB125_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB125_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB125_202
.LBB125_201:                            # %cond.false617
                                        #   in Loop: Header=BB125_190 Depth=4
	movl	$1, %eax
	jmp	.LBB125_202
.LBB125_202:                            # %cond.end618
                                        #   in Loop: Header=BB125_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB125_203:                            # %cond.end623
                                        #   in Loop: Header=BB125_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB125_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB125_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB125_205:                            # %if.end636
                                        #   in Loop: Header=BB125_190 Depth=4
	jmp	.LBB125_206
.LBB125_206:                            # %if.end637
                                        #   in Loop: Header=BB125_190 Depth=4
	jmp	.LBB125_207
.LBB125_207:                            # %for.inc638
                                        #   in Loop: Header=BB125_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB125_190
.LBB125_208:                            # %for.end640
                                        #   in Loop: Header=BB125_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB125_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB125_210:                            # %for.cond643
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_181 Depth=2
                                        #       Parent Loop BB125_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB125_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB125_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB125_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB125_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB125_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB125_215
.LBB125_214:                            # %cond.false660
                                        #   in Loop: Header=BB125_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB125_215:                            # %cond.end663
                                        #   in Loop: Header=BB125_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB125_220
.LBB125_216:                            # %cond.false667
                                        #   in Loop: Header=BB125_210 Depth=4
	vmovsd	.LCPI125_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB125_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB125_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB125_219
.LBB125_218:                            # %cond.false674
                                        #   in Loop: Header=BB125_210 Depth=4
	movl	$1, %eax
	jmp	.LBB125_219
.LBB125_219:                            # %cond.end675
                                        #   in Loop: Header=BB125_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB125_220:                            # %cond.end680
                                        #   in Loop: Header=BB125_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB125_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB125_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB125_222:                            # %if.end693
                                        #   in Loop: Header=BB125_210 Depth=4
	jmp	.LBB125_223
.LBB125_223:                            # %for.inc694
                                        #   in Loop: Header=BB125_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB125_210
.LBB125_224:                            # %for.end696
                                        #   in Loop: Header=BB125_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB125_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB125_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB125_228
.LBB125_227:                            # %cond.false706
                                        #   in Loop: Header=BB125_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB125_228:                            # %cond.end709
                                        #   in Loop: Header=BB125_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB125_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB125_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB125_231
.LBB125_230:                            # %cond.false719
                                        #   in Loop: Header=BB125_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB125_231:                            # %cond.end721
                                        #   in Loop: Header=BB125_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB125_236
.LBB125_232:                            # %cond.false726
                                        #   in Loop: Header=BB125_184 Depth=3
	vmovsd	.LCPI125_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB125_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB125_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB125_235
.LBB125_234:                            # %cond.false733
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	$1, %eax
	jmp	.LBB125_235
.LBB125_235:                            # %cond.end734
                                        #   in Loop: Header=BB125_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB125_236:                            # %cond.end739
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB125_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB125_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB125_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB125_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB125_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB125_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB125_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB125_243
.LBB125_242:                            # %cond.false761
                                        #   in Loop: Header=BB125_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB125_243:                            # %cond.end763
                                        #   in Loop: Header=BB125_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB125_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB125_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB125_246
.LBB125_245:                            # %cond.false773
                                        #   in Loop: Header=BB125_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB125_246:                            # %cond.end775
                                        #   in Loop: Header=BB125_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB125_248
.LBB125_247:                            # %cond.false780
                                        #   in Loop: Header=BB125_184 Depth=3
	vmovsd	.LCPI125_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB125_248:                            # %cond.end784
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB125_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB125_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB125_252
.LBB125_251:                            # %cond.false797
                                        #   in Loop: Header=BB125_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB125_252:                            # %cond.end799
                                        #   in Loop: Header=BB125_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB125_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB125_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB125_255
.LBB125_254:                            # %cond.false809
                                        #   in Loop: Header=BB125_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB125_255:                            # %cond.end811
                                        #   in Loop: Header=BB125_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB125_257
.LBB125_256:                            # %cond.false816
                                        #   in Loop: Header=BB125_184 Depth=3
	vmovsd	.LCPI125_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB125_257:                            # %cond.end820
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	%eax, -172(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-172(%rbp), %eax
	movl	%eax, -172(%rbp)
	jmp	.LBB125_259
.LBB125_258:                            # %if.else824
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
.LBB125_259:                            # %if.end825
                                        #   in Loop: Header=BB125_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB125_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB125_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB125_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB125_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB125_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB125_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB125_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB125_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB125_285
.LBB125_266:                            # %if.else845
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB125_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB125_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB125_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB125_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB125_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB125_284
.LBB125_271:                            # %if.else859
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB125_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB125_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB125_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB125_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB125_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB125_283
.LBB125_276:                            # %if.else876
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB125_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB125_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB125_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jg	.LBB125_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB125_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB125_282
.LBB125_281:                            # %if.else893
                                        #   in Loop: Header=BB125_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-172(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB125_282:                            # %if.end898
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_283
.LBB125_283:                            # %if.end899
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_284
.LBB125_284:                            # %if.end900
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_285
.LBB125_285:                            # %if.end901
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_295
.LBB125_286:                            # %if.else902
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB125_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB125_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB125_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB125_294
.LBB125_289:                            # %if.else910
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB125_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB125_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB125_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB125_293
.LBB125_292:                            # %if.else918
                                        #   in Loop: Header=BB125_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB125_293:                            # %if.end920
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_294
.LBB125_294:                            # %if.end921
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_295
.LBB125_295:                            # %if.end922
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_297
.LBB125_296:                            # %if.else923
                                        #   in Loop: Header=BB125_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB125_297:                            # %if.end925
                                        #   in Loop: Header=BB125_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB125_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB125_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB125_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	$0, -24(%rbp)
.LBB125_300:                            # %for.cond933
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_181 Depth=2
                                        #       Parent Loop BB125_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB125_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB125_300 Depth=4
	movl	$0, -20(%rbp)
.LBB125_302:                            # %for.cond937
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_181 Depth=2
                                        #       Parent Loop BB125_184 Depth=3
                                        #         Parent Loop BB125_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB125_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB125_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB125_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_302
.LBB125_305:                            # %for.end999
                                        #   in Loop: Header=BB125_300 Depth=4
	jmp	.LBB125_306
.LBB125_306:                            # %for.inc1000
                                        #   in Loop: Header=BB125_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_300
.LBB125_307:                            # %for.end1002
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_323
.LBB125_308:                            # %if.else1003
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	$0, -24(%rbp)
.LBB125_309:                            # %for.cond1004
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_181 Depth=2
                                        #       Parent Loop BB125_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB125_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB125_309 Depth=4
	movl	$0, -20(%rbp)
.LBB125_311:                            # %for.cond1008
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_181 Depth=2
                                        #       Parent Loop BB125_184 Depth=3
                                        #         Parent Loop BB125_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB125_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB125_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB125_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB125_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB125_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB125_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB125_316
.LBB125_315:                            # %cond.false1024
                                        #   in Loop: Header=BB125_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB125_316:                            # %cond.end1025
                                        #   in Loop: Header=BB125_311 Depth=5
	movq	%rax, -432(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB125_318
.LBB125_317:                            # %if.else1111
                                        #   in Loop: Header=BB125_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB125_318:                            # %if.end1217
                                        #   in Loop: Header=BB125_311 Depth=5
	jmp	.LBB125_319
.LBB125_319:                            # %for.inc1218
                                        #   in Loop: Header=BB125_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_311
.LBB125_320:                            # %for.end1220
                                        #   in Loop: Header=BB125_309 Depth=4
	jmp	.LBB125_321
.LBB125_321:                            # %for.inc1221
                                        #   in Loop: Header=BB125_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_309
.LBB125_322:                            # %for.end1223
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_323
.LBB125_323:                            # %if.end1224
                                        #   in Loop: Header=BB125_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB125_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB125_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB125_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	$0, -24(%rbp)
.LBB125_326:                            # %for.cond1231
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_181 Depth=2
                                        #       Parent Loop BB125_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB125_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB125_326 Depth=4
	movl	$0, -20(%rbp)
.LBB125_328:                            # %for.cond1235
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_181 Depth=2
                                        #       Parent Loop BB125_184 Depth=3
                                        #         Parent Loop BB125_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB125_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB125_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB125_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_328
.LBB125_331:                            # %for.end1303
                                        #   in Loop: Header=BB125_326 Depth=4
	jmp	.LBB125_332
.LBB125_332:                            # %for.inc1304
                                        #   in Loop: Header=BB125_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_326
.LBB125_333:                            # %for.end1306
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_351
.LBB125_334:                            # %if.else1307
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	$0, -24(%rbp)
.LBB125_335:                            # %for.cond1308
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_181 Depth=2
                                        #       Parent Loop BB125_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB125_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB125_335 Depth=4
	movl	$0, -20(%rbp)
.LBB125_337:                            # %for.cond1312
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_181 Depth=2
                                        #       Parent Loop BB125_184 Depth=3
                                        #         Parent Loop BB125_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB125_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB125_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB125_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB125_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB125_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB125_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB125_342
.LBB125_341:                            # %cond.false1330
                                        #   in Loop: Header=BB125_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB125_342:                            # %cond.end1332
                                        #   in Loop: Header=BB125_337 Depth=5
	movq	%rax, -440(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB125_346
.LBB125_343:                            # %if.else1419
                                        #   in Loop: Header=BB125_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB125_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB125_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB125_345:                            # %if.end1529
                                        #   in Loop: Header=BB125_337 Depth=5
	jmp	.LBB125_346
.LBB125_346:                            # %if.end1530
                                        #   in Loop: Header=BB125_337 Depth=5
	jmp	.LBB125_347
.LBB125_347:                            # %for.inc1531
                                        #   in Loop: Header=BB125_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_337
.LBB125_348:                            # %for.end1533
                                        #   in Loop: Header=BB125_335 Depth=4
	jmp	.LBB125_349
.LBB125_349:                            # %for.inc1534
                                        #   in Loop: Header=BB125_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_335
.LBB125_350:                            # %for.end1536
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_351
.LBB125_351:                            # %if.end1537
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_352
.LBB125_352:                            # %if.end1538
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_393
.LBB125_353:                            # %if.else1539
                                        #   in Loop: Header=BB125_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB125_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB125_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB125_355:                            # %for.cond1546
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_181 Depth=2
                                        #       Parent Loop BB125_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB125_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB125_355 Depth=4
	movl	$0, -20(%rbp)
.LBB125_357:                            # %for.cond1550
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_181 Depth=2
                                        #       Parent Loop BB125_184 Depth=3
                                        #         Parent Loop BB125_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB125_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB125_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB125_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB125_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB125_361
.LBB125_360:                            # %if.else1596
                                        #   in Loop: Header=BB125_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB125_361:                            # %if.end1676
                                        #   in Loop: Header=BB125_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB125_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB125_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB125_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB125_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB125_367
.LBB125_364:                            # %if.else1721
                                        #   in Loop: Header=BB125_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB125_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB125_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB125_366:                            # %if.end1805
                                        #   in Loop: Header=BB125_357 Depth=5
	jmp	.LBB125_367
.LBB125_367:                            # %if.end1806
                                        #   in Loop: Header=BB125_357 Depth=5
	jmp	.LBB125_368
.LBB125_368:                            # %if.end1807
                                        #   in Loop: Header=BB125_357 Depth=5
	jmp	.LBB125_369
.LBB125_369:                            # %for.inc1808
                                        #   in Loop: Header=BB125_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_357
.LBB125_370:                            # %for.end1810
                                        #   in Loop: Header=BB125_355 Depth=4
	jmp	.LBB125_371
.LBB125_371:                            # %for.inc1811
                                        #   in Loop: Header=BB125_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_355
.LBB125_372:                            # %for.end1813
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_392
.LBB125_373:                            # %if.else1814
                                        #   in Loop: Header=BB125_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB125_374:                            # %for.cond1818
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_181 Depth=2
                                        #       Parent Loop BB125_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB125_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB125_374 Depth=4
	movl	$0, -20(%rbp)
.LBB125_376:                            # %for.cond1822
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_181 Depth=2
                                        #       Parent Loop BB125_184 Depth=3
                                        #         Parent Loop BB125_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB125_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB125_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB125_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB125_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB125_380
.LBB125_379:                            # %if.else1868
                                        #   in Loop: Header=BB125_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB125_380:                            # %if.end1948
                                        #   in Loop: Header=BB125_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB125_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB125_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB125_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB125_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB125_386
.LBB125_383:                            # %if.else1993
                                        #   in Loop: Header=BB125_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB125_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB125_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB125_385:                            # %if.end2077
                                        #   in Loop: Header=BB125_376 Depth=5
	jmp	.LBB125_386
.LBB125_386:                            # %if.end2078
                                        #   in Loop: Header=BB125_376 Depth=5
	jmp	.LBB125_387
.LBB125_387:                            # %if.end2079
                                        #   in Loop: Header=BB125_376 Depth=5
	jmp	.LBB125_388
.LBB125_388:                            # %for.inc2080
                                        #   in Loop: Header=BB125_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_376
.LBB125_389:                            # %for.end2082
                                        #   in Loop: Header=BB125_374 Depth=4
	jmp	.LBB125_390
.LBB125_390:                            # %for.inc2083
                                        #   in Loop: Header=BB125_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_374
.LBB125_391:                            # %for.end2085
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_392
.LBB125_392:                            # %if.end2086
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_393
.LBB125_393:                            # %if.end2087
                                        #   in Loop: Header=BB125_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB125_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB125_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB125_399
.LBB125_395:                            # %if.else2106
                                        #   in Loop: Header=BB125_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB125_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB125_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB125_398
.LBB125_397:                            # %if.else2131
                                        #   in Loop: Header=BB125_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB125_398:                            # %if.end2132
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_399
.LBB125_399:                            # %if.end2133
                                        #   in Loop: Header=BB125_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB125_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB125_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB125_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB125_402:                            # %if.end2143
                                        #   in Loop: Header=BB125_184 Depth=3
	jmp	.LBB125_403
.LBB125_403:                            # %for.inc2144
                                        #   in Loop: Header=BB125_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB125_184
.LBB125_404:                            # %for.end2146
                                        #   in Loop: Header=BB125_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB125_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB125_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB125_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB125_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB125_407:                            # %if.end2155
                                        #   in Loop: Header=BB125_181 Depth=2
	jmp	.LBB125_408
.LBB125_408:                            # %if.end2156
                                        #   in Loop: Header=BB125_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB125_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB125_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -320(%rbp)
.LBB125_410:                            # %if.end2161
                                        #   in Loop: Header=BB125_181 Depth=2
	jmp	.LBB125_411
.LBB125_411:                            # %if.end2162
                                        #   in Loop: Header=BB125_181 Depth=2
	jmp	.LBB125_412
.LBB125_412:                            # %for.inc2163
                                        #   in Loop: Header=BB125_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB125_181
.LBB125_413:                            # %for.end2165
                                        #   in Loop: Header=BB125_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB125_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB125_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB125_416:                            # %for.cond2172
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_418 Depth 3
                                        #         Child Loop BB125_445 Depth 4
                                        #         Child Loop BB125_464 Depth 4
                                        #           Child Loop BB125_466 Depth 5
                                        #         Child Loop BB125_473 Depth 4
                                        #         Child Loop BB125_508 Depth 4
                                        #           Child Loop BB125_510 Depth 5
                                        #         Child Loop BB125_532 Depth 4
                                        #           Child Loop BB125_534 Depth 5
                                        #             Child Loop BB125_536 Depth 6
                                        #         Child Loop BB125_544 Depth 4
                                        #           Child Loop BB125_546 Depth 5
                                        #       Child Loop BB125_569 Depth 3
                                        #         Child Loop BB125_571 Depth 4
                                        #           Child Loop BB125_573 Depth 5
                                        #       Child Loop BB125_581 Depth 3
                                        #         Child Loop BB125_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB125_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB125_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI125_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -176(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB125_418:                            # %for.cond2184
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_445 Depth 4
                                        #         Child Loop BB125_464 Depth 4
                                        #           Child Loop BB125_466 Depth 5
                                        #         Child Loop BB125_473 Depth 4
                                        #         Child Loop BB125_508 Depth 4
                                        #           Child Loop BB125_510 Depth 5
                                        #         Child Loop BB125_532 Depth 4
                                        #           Child Loop BB125_534 Depth 5
                                        #             Child Loop BB125_536 Depth 6
                                        #         Child Loop BB125_544 Depth 4
                                        #           Child Loop BB125_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB125_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB125_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB125_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB125_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB125_423
.LBB125_421:                            # %lor.lhs.false2196
                                        #   in Loop: Header=BB125_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB125_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB125_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB125_557
.LBB125_423:                            # %if.then2201
                                        #   in Loop: Header=BB125_418 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB125_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB125_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB125_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	$0, -220(%rbp)
	movl	$0, -224(%rbp)
	movl	-28(%rbp), %edi
	leaq	-224(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -220(%rbp)
	cmpl	$2147483647, -220(%rbp) # imm = 0x7FFFFFFF
	je	.LBB125_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB125_418 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB125_428
.LBB125_427:                            # %if.then2214
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB125_429
.LBB125_428:                            # %if.else2215
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-220(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-224(%rbp), %eax
	addl	-208(%rbp), %eax
	movl	%eax, -208(%rbp)
.LBB125_429:                            # %if.end2218
                                        #   in Loop: Header=BB125_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB125_431
	jmp	.LBB125_430
.LBB125_430:                            # %if.end2218
                                        #   in Loop: Header=BB125_418 Depth=3
	subl	$2, %eax
	je	.LBB125_438
	jmp	.LBB125_439
.LBB125_431:                            # %sw.bb
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-224(%rbp), %eax
	cmpl	-220(%rbp), %eax
	jl	.LBB125_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB125_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB125_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB125_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB125_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB125_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB125_436
.LBB125_435:                            # %if.then2231
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB125_437
.LBB125_436:                            # %if.else2232
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-220(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB125_437:                            # %if.end2233
                                        #   in Loop: Header=BB125_418 Depth=3
	jmp	.LBB125_440
.LBB125_438:                            # %sw.bb2234
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB125_440
.LBB125_439:                            # %sw.default
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-220(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB125_440:                            # %sw.epilog
                                        #   in Loop: Header=BB125_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB125_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-176(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB125_442:                            # %if.end2240
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -264(%rbp)
.LBB125_443:                            # %if.end2242
                                        #   in Loop: Header=BB125_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB125_518
.LBB125_444:                            # %if.else2278
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB125_445:                            # %for.cond2279
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_416 Depth=2
                                        #       Parent Loop BB125_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB125_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB125_445 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB125_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB125_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB125_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB125_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB125_461
.LBB125_449:                            # %if.then2296
                                        #   in Loop: Header=BB125_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB125_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB125_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB125_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB125_453
.LBB125_452:                            # %cond.false2306
                                        #   in Loop: Header=BB125_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB125_453:                            # %cond.end2309
                                        #   in Loop: Header=BB125_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB125_458
.LBB125_454:                            # %cond.false2313
                                        #   in Loop: Header=BB125_445 Depth=4
	vmovsd	.LCPI125_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB125_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB125_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB125_457
.LBB125_456:                            # %cond.false2320
                                        #   in Loop: Header=BB125_445 Depth=4
	movl	$1, %eax
	jmp	.LBB125_457
.LBB125_457:                            # %cond.end2321
                                        #   in Loop: Header=BB125_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB125_458:                            # %cond.end2326
                                        #   in Loop: Header=BB125_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB125_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB125_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB125_460:                            # %if.end2339
                                        #   in Loop: Header=BB125_445 Depth=4
	jmp	.LBB125_461
.LBB125_461:                            # %if.end2340
                                        #   in Loop: Header=BB125_445 Depth=4
	jmp	.LBB125_462
.LBB125_462:                            # %for.inc2341
                                        #   in Loop: Header=BB125_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB125_445
.LBB125_463:                            # %for.end2343
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	$0, -24(%rbp)
.LBB125_464:                            # %for.cond2344
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_416 Depth=2
                                        #       Parent Loop BB125_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB125_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB125_464 Depth=4
	movl	$0, -20(%rbp)
.LBB125_466:                            # %for.cond2348
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_416 Depth=2
                                        #       Parent Loop BB125_418 Depth=3
                                        #         Parent Loop BB125_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB125_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB125_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB125_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_466
.LBB125_469:                            # %for.end2405
                                        #   in Loop: Header=BB125_464 Depth=4
	jmp	.LBB125_470
.LBB125_470:                            # %for.inc2406
                                        #   in Loop: Header=BB125_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_464
.LBB125_471:                            # %for.end2408
                                        #   in Loop: Header=BB125_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB125_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB125_473:                            # %for.cond2411
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_416 Depth=2
                                        #       Parent Loop BB125_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB125_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB125_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB125_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB125_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB125_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB125_478
.LBB125_477:                            # %cond.false2428
                                        #   in Loop: Header=BB125_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB125_478:                            # %cond.end2431
                                        #   in Loop: Header=BB125_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB125_483
.LBB125_479:                            # %cond.false2435
                                        #   in Loop: Header=BB125_473 Depth=4
	vmovsd	.LCPI125_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB125_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB125_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB125_482
.LBB125_481:                            # %cond.false2442
                                        #   in Loop: Header=BB125_473 Depth=4
	movl	$1, %eax
	jmp	.LBB125_482
.LBB125_482:                            # %cond.end2443
                                        #   in Loop: Header=BB125_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB125_483:                            # %cond.end2448
                                        #   in Loop: Header=BB125_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB125_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB125_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB125_485:                            # %if.end2461
                                        #   in Loop: Header=BB125_473 Depth=4
	jmp	.LBB125_486
.LBB125_486:                            # %for.inc2462
                                        #   in Loop: Header=BB125_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB125_473
.LBB125_487:                            # %for.end2464
                                        #   in Loop: Header=BB125_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB125_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB125_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB125_491
.LBB125_490:                            # %cond.false2474
                                        #   in Loop: Header=BB125_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB125_491:                            # %cond.end2477
                                        #   in Loop: Header=BB125_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB125_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB125_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB125_494
.LBB125_493:                            # %cond.false2487
                                        #   in Loop: Header=BB125_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB125_494:                            # %cond.end2489
                                        #   in Loop: Header=BB125_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB125_499
.LBB125_495:                            # %cond.false2494
                                        #   in Loop: Header=BB125_418 Depth=3
	vmovsd	.LCPI125_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB125_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB125_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB125_498
.LBB125_497:                            # %cond.false2501
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	$1, %eax
	jmp	.LBB125_498
.LBB125_498:                            # %cond.end2502
                                        #   in Loop: Header=BB125_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB125_499:                            # %cond.end2507
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB125_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB125_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB125_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB125_507
.LBB125_502:                            # %if.else2517
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB125_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB125_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB125_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB125_506
.LBB125_505:                            # %if.else2524
                                        #   in Loop: Header=BB125_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB125_506:                            # %if.end2525
                                        #   in Loop: Header=BB125_418 Depth=3
	jmp	.LBB125_507
.LBB125_507:                            # %if.end2526
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	$0, -24(%rbp)
.LBB125_508:                            # %for.cond2527
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_416 Depth=2
                                        #       Parent Loop BB125_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB125_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB125_508 Depth=4
	movl	$0, -20(%rbp)
.LBB125_510:                            # %for.cond2531
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_416 Depth=2
                                        #       Parent Loop BB125_418 Depth=3
                                        #         Parent Loop BB125_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB125_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB125_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB125_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_510
.LBB125_513:                            # %for.end2567
                                        #   in Loop: Header=BB125_508 Depth=4
	jmp	.LBB125_514
.LBB125_514:                            # %for.inc2568
                                        #   in Loop: Header=BB125_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_508
.LBB125_515:                            # %for.end2570
                                        #   in Loop: Header=BB125_418 Depth=3
	jmp	.LBB125_517
.LBB125_516:                            # %if.else2571
                                        #   in Loop: Header=BB125_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB125_517:                            # %if.end2572
                                        #   in Loop: Header=BB125_418 Depth=3
	jmp	.LBB125_518
.LBB125_518:                            # %if.end2573
                                        #   in Loop: Header=BB125_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB125_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB125_526
.LBB125_520:                            # %if.else2578
                                        #   in Loop: Header=BB125_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB125_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB125_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB125_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB125_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB125_524
.LBB125_523:                            # %cond.false2592
                                        #   in Loop: Header=BB125_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB125_524:                            # %cond.end2597
                                        #   in Loop: Header=BB125_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB125_525:                            # %if.end2603
                                        #   in Loop: Header=BB125_418 Depth=3
	jmp	.LBB125_526
.LBB125_526:                            # %if.end2604
                                        #   in Loop: Header=BB125_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB125_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB125_530
.LBB125_528:                            # %lor.lhs.false2610
                                        #   in Loop: Header=BB125_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB125_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB125_556
.LBB125_530:                            # %if.then2616
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -176(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB125_532:                            # %for.cond2638
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_416 Depth=2
                                        #       Parent Loop BB125_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_534 Depth 5
                                        #             Child Loop BB125_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB125_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB125_532 Depth=4
	movl	$0, -24(%rbp)
.LBB125_534:                            # %for.cond2642
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_416 Depth=2
                                        #       Parent Loop BB125_418 Depth=3
                                        #         Parent Loop BB125_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB125_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB125_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB125_534 Depth=5
	movl	$0, -20(%rbp)
.LBB125_536:                            # %for.cond2646
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_416 Depth=2
                                        #       Parent Loop BB125_418 Depth=3
                                        #         Parent Loop BB125_532 Depth=4
                                        #           Parent Loop BB125_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB125_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB125_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB125_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_536
.LBB125_539:                            # %for.end2668
                                        #   in Loop: Header=BB125_534 Depth=5
	jmp	.LBB125_540
.LBB125_540:                            # %for.inc2669
                                        #   in Loop: Header=BB125_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_534
.LBB125_541:                            # %for.end2671
                                        #   in Loop: Header=BB125_532 Depth=4
	jmp	.LBB125_542
.LBB125_542:                            # %for.inc2672
                                        #   in Loop: Header=BB125_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB125_532
.LBB125_543:                            # %for.end2674
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB125_544:                            # %for.cond2675
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_416 Depth=2
                                        #       Parent Loop BB125_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB125_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB125_546:                            # %for.cond2680
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_416 Depth=2
                                        #       Parent Loop BB125_418 Depth=3
                                        #         Parent Loop BB125_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB125_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB125_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB125_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB125_550
.LBB125_549:                            # %if.else2705
                                        #   in Loop: Header=BB125_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB125_550:                            # %if.end2754
                                        #   in Loop: Header=BB125_546 Depth=5
	jmp	.LBB125_551
.LBB125_551:                            # %for.inc2755
                                        #   in Loop: Header=BB125_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_546
.LBB125_552:                            # %for.end2757
                                        #   in Loop: Header=BB125_544 Depth=4
	jmp	.LBB125_553
.LBB125_553:                            # %for.inc2758
                                        #   in Loop: Header=BB125_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_544
.LBB125_554:                            # %for.end2760
                                        #   in Loop: Header=BB125_418 Depth=3
	jmp	.LBB125_555
.LBB125_555:                            # %if.end2761
                                        #   in Loop: Header=BB125_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB125_556:                            # %if.end2762
                                        #   in Loop: Header=BB125_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB125_557:                            # %if.end2763
                                        #   in Loop: Header=BB125_418 Depth=3
	jmp	.LBB125_558
.LBB125_558:                            # %for.inc2764
                                        #   in Loop: Header=BB125_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB125_418
.LBB125_559:                            # %for.end2766
                                        #   in Loop: Header=BB125_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB125_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB125_416 Depth=2
	movl	-176(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB125_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB125_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB125_563
.LBB125_562:                            # %cond.true2782
                                        #   in Loop: Header=BB125_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB125_564
.LBB125_563:                            # %cond.false2783
                                        #   in Loop: Header=BB125_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB125_564
.LBB125_564:                            # %cond.end2784
                                        #   in Loop: Header=BB125_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB125_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB125_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB125_567
.LBB125_566:                            # %cond.true2793
                                        #   in Loop: Header=BB125_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB125_568
.LBB125_567:                            # %cond.false2794
                                        #   in Loop: Header=BB125_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB125_568
.LBB125_568:                            # %cond.end2795
                                        #   in Loop: Header=BB125_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-280(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -180(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB125_569:                            # %for.cond2813
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_571 Depth 4
                                        #           Child Loop BB125_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB125_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB125_569 Depth=3
	movl	$0, -24(%rbp)
.LBB125_571:                            # %for.cond2817
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_416 Depth=2
                                        #       Parent Loop BB125_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB125_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB125_571 Depth=4
	movl	$0, -20(%rbp)
.LBB125_573:                            # %for.cond2821
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_416 Depth=2
                                        #       Parent Loop BB125_569 Depth=3
                                        #         Parent Loop BB125_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB125_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB125_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB125_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_573
.LBB125_576:                            # %for.end2844
                                        #   in Loop: Header=BB125_571 Depth=4
	jmp	.LBB125_577
.LBB125_577:                            # %for.inc2845
                                        #   in Loop: Header=BB125_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_571
.LBB125_578:                            # %for.end2847
                                        #   in Loop: Header=BB125_569 Depth=3
	jmp	.LBB125_579
.LBB125_579:                            # %for.inc2848
                                        #   in Loop: Header=BB125_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB125_569
.LBB125_580:                            # %for.end2850
                                        #   in Loop: Header=BB125_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB125_581:                            # %for.cond2851
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB125_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB125_583:                            # %for.cond2856
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_416 Depth=2
                                        #       Parent Loop BB125_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB125_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB125_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB125_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB125_587
.LBB125_586:                            # %if.else2886
                                        #   in Loop: Header=BB125_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB125_587:                            # %if.end2935
                                        #   in Loop: Header=BB125_583 Depth=4
	jmp	.LBB125_588
.LBB125_588:                            # %for.inc2936
                                        #   in Loop: Header=BB125_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_583
.LBB125_589:                            # %for.end2938
                                        #   in Loop: Header=BB125_581 Depth=3
	jmp	.LBB125_590
.LBB125_590:                            # %for.inc2939
                                        #   in Loop: Header=BB125_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_581
.LBB125_591:                            # %for.end2941
                                        #   in Loop: Header=BB125_416 Depth=2
	jmp	.LBB125_592
.LBB125_592:                            # %if.end2942
                                        #   in Loop: Header=BB125_416 Depth=2
	cmpl	$0, -180(%rbp)
	je	.LBB125_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB125_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-180(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB125_594:                            # %if.end2948
                                        #   in Loop: Header=BB125_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB125_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB125_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB125_596:                            # %if.end2974
                                        #   in Loop: Header=BB125_416 Depth=2
	jmp	.LBB125_597
.LBB125_597:                            # %for.inc2975
                                        #   in Loop: Header=BB125_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB125_416
.LBB125_598:                            # %for.end2977
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-140(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB125_599:                            # %if.end2980
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB125_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB125_601:                            # %for.cond2985
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_603 Depth 3
                                        #         Child Loop BB125_614 Depth 4
                                        #         Child Loop BB125_633 Depth 4
                                        #           Child Loop BB125_635 Depth 5
                                        #         Child Loop BB125_642 Depth 4
                                        #         Child Loop BB125_677 Depth 4
                                        #           Child Loop BB125_679 Depth 5
                                        #         Child Loop BB125_701 Depth 4
                                        #           Child Loop BB125_703 Depth 5
                                        #             Child Loop BB125_705 Depth 6
                                        #         Child Loop BB125_713 Depth 4
                                        #           Child Loop BB125_715 Depth 5
                                        #         Child Loop BB125_723 Depth 4
                                        #           Child Loop BB125_725 Depth 5
                                        #       Child Loop BB125_745 Depth 3
                                        #         Child Loop BB125_747 Depth 4
                                        #           Child Loop BB125_749 Depth 5
                                        #       Child Loop BB125_757 Depth 3
                                        #         Child Loop BB125_759 Depth 4
                                        #       Child Loop BB125_766 Depth 3
                                        #         Child Loop BB125_768 Depth 4
                                        #       Child Loop BB125_778 Depth 3
                                        #         Child Loop BB125_780 Depth 4
                                        #       Child Loop BB125_786 Depth 3
                                        #       Child Loop BB125_791 Depth 3
                                        #         Child Loop BB125_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB125_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB125_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI125_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	$2147483647, -176(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB125_603:                            # %for.cond2997
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_614 Depth 4
                                        #         Child Loop BB125_633 Depth 4
                                        #           Child Loop BB125_635 Depth 5
                                        #         Child Loop BB125_642 Depth 4
                                        #         Child Loop BB125_677 Depth 4
                                        #           Child Loop BB125_679 Depth 5
                                        #         Child Loop BB125_701 Depth 4
                                        #           Child Loop BB125_703 Depth 5
                                        #             Child Loop BB125_705 Depth 6
                                        #         Child Loop BB125_713 Depth 4
                                        #           Child Loop BB125_715 Depth 5
                                        #         Child Loop BB125_723 Depth 4
                                        #           Child Loop BB125_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB125_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB125_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB125_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB125_603 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB125_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB125_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB125_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-224(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB125_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB125_603 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB125_610
.LBB125_609:                            # %if.then3019
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB125_611
.LBB125_610:                            # %if.else3020
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
.LBB125_611:                            # %if.end3022
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	-264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -264(%rbp)
.LBB125_612:                            # %if.end3024
                                        #   in Loop: Header=BB125_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB125_687
.LBB125_613:                            # %if.else3060
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB125_614:                            # %for.cond3061
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB125_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB125_614 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB125_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB125_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB125_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB125_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB125_630
.LBB125_618:                            # %if.then3078
                                        #   in Loop: Header=BB125_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB125_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB125_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB125_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB125_622
.LBB125_621:                            # %cond.false3088
                                        #   in Loop: Header=BB125_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB125_622:                            # %cond.end3091
                                        #   in Loop: Header=BB125_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB125_627
.LBB125_623:                            # %cond.false3095
                                        #   in Loop: Header=BB125_614 Depth=4
	vmovsd	.LCPI125_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB125_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB125_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB125_626
.LBB125_625:                            # %cond.false3102
                                        #   in Loop: Header=BB125_614 Depth=4
	movl	$1, %eax
	jmp	.LBB125_626
.LBB125_626:                            # %cond.end3103
                                        #   in Loop: Header=BB125_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB125_627:                            # %cond.end3108
                                        #   in Loop: Header=BB125_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB125_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB125_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB125_629:                            # %if.end3121
                                        #   in Loop: Header=BB125_614 Depth=4
	jmp	.LBB125_630
.LBB125_630:                            # %if.end3122
                                        #   in Loop: Header=BB125_614 Depth=4
	jmp	.LBB125_631
.LBB125_631:                            # %for.inc3123
                                        #   in Loop: Header=BB125_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB125_614
.LBB125_632:                            # %for.end3125
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	$0, -24(%rbp)
.LBB125_633:                            # %for.cond3126
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB125_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB125_633 Depth=4
	movl	$0, -20(%rbp)
.LBB125_635:                            # %for.cond3130
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_603 Depth=3
                                        #         Parent Loop BB125_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB125_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB125_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB125_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_635
.LBB125_638:                            # %for.end3187
                                        #   in Loop: Header=BB125_633 Depth=4
	jmp	.LBB125_639
.LBB125_639:                            # %for.inc3188
                                        #   in Loop: Header=BB125_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_633
.LBB125_640:                            # %for.end3190
                                        #   in Loop: Header=BB125_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB125_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB125_642:                            # %for.cond3193
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB125_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB125_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB125_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB125_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB125_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB125_647
.LBB125_646:                            # %cond.false3210
                                        #   in Loop: Header=BB125_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB125_647:                            # %cond.end3213
                                        #   in Loop: Header=BB125_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB125_652
.LBB125_648:                            # %cond.false3217
                                        #   in Loop: Header=BB125_642 Depth=4
	vmovsd	.LCPI125_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB125_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB125_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB125_651
.LBB125_650:                            # %cond.false3224
                                        #   in Loop: Header=BB125_642 Depth=4
	movl	$1, %eax
	jmp	.LBB125_651
.LBB125_651:                            # %cond.end3225
                                        #   in Loop: Header=BB125_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB125_652:                            # %cond.end3230
                                        #   in Loop: Header=BB125_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB125_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB125_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB125_654:                            # %if.end3243
                                        #   in Loop: Header=BB125_642 Depth=4
	jmp	.LBB125_655
.LBB125_655:                            # %for.inc3244
                                        #   in Loop: Header=BB125_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB125_642
.LBB125_656:                            # %for.end3246
                                        #   in Loop: Header=BB125_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB125_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB125_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB125_660
.LBB125_659:                            # %cond.false3256
                                        #   in Loop: Header=BB125_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB125_660:                            # %cond.end3259
                                        #   in Loop: Header=BB125_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB125_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB125_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB125_663
.LBB125_662:                            # %cond.false3269
                                        #   in Loop: Header=BB125_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB125_663:                            # %cond.end3271
                                        #   in Loop: Header=BB125_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB125_668
.LBB125_664:                            # %cond.false3276
                                        #   in Loop: Header=BB125_603 Depth=3
	vmovsd	.LCPI125_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB125_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB125_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB125_667
.LBB125_666:                            # %cond.false3283
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	$1, %eax
	jmp	.LBB125_667
.LBB125_667:                            # %cond.end3284
                                        #   in Loop: Header=BB125_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB125_668:                            # %cond.end3289
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB125_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB125_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB125_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB125_676
.LBB125_671:                            # %if.else3299
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB125_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB125_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB125_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB125_675
.LBB125_674:                            # %if.else3306
                                        #   in Loop: Header=BB125_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB125_675:                            # %if.end3307
                                        #   in Loop: Header=BB125_603 Depth=3
	jmp	.LBB125_676
.LBB125_676:                            # %if.end3308
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	$0, -24(%rbp)
.LBB125_677:                            # %for.cond3309
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB125_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB125_677 Depth=4
	movl	$0, -20(%rbp)
.LBB125_679:                            # %for.cond3313
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_603 Depth=3
                                        #         Parent Loop BB125_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB125_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB125_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB125_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_679
.LBB125_682:                            # %for.end3349
                                        #   in Loop: Header=BB125_677 Depth=4
	jmp	.LBB125_683
.LBB125_683:                            # %for.inc3350
                                        #   in Loop: Header=BB125_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_677
.LBB125_684:                            # %for.end3352
                                        #   in Loop: Header=BB125_603 Depth=3
	jmp	.LBB125_686
.LBB125_685:                            # %if.else3353
                                        #   in Loop: Header=BB125_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB125_686:                            # %if.end3354
                                        #   in Loop: Header=BB125_603 Depth=3
	jmp	.LBB125_687
.LBB125_687:                            # %if.end3355
                                        #   in Loop: Header=BB125_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB125_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB125_695
.LBB125_689:                            # %if.else3360
                                        #   in Loop: Header=BB125_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB125_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB125_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB125_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB125_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB125_693
.LBB125_692:                            # %cond.false3374
                                        #   in Loop: Header=BB125_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB125_693:                            # %cond.end3379
                                        #   in Loop: Header=BB125_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB125_694:                            # %if.end3385
                                        #   in Loop: Header=BB125_603 Depth=3
	jmp	.LBB125_695
.LBB125_695:                            # %if.end3386
                                        #   in Loop: Header=BB125_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB125_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB125_699
.LBB125_697:                            # %lor.lhs.false3392
                                        #   in Loop: Header=BB125_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB125_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB125_732
.LBB125_699:                            # %if.then3398
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -176(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB125_701:                            # %for.cond3422
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_703 Depth 5
                                        #             Child Loop BB125_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB125_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB125_701 Depth=4
	movl	$0, -24(%rbp)
.LBB125_703:                            # %for.cond3426
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_603 Depth=3
                                        #         Parent Loop BB125_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB125_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB125_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB125_703 Depth=5
	movl	$0, -20(%rbp)
.LBB125_705:                            # %for.cond3430
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_603 Depth=3
                                        #         Parent Loop BB125_701 Depth=4
                                        #           Parent Loop BB125_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB125_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB125_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB125_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_705
.LBB125_708:                            # %for.end3453
                                        #   in Loop: Header=BB125_703 Depth=5
	jmp	.LBB125_709
.LBB125_709:                            # %for.inc3454
                                        #   in Loop: Header=BB125_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_703
.LBB125_710:                            # %for.end3456
                                        #   in Loop: Header=BB125_701 Depth=4
	jmp	.LBB125_711
.LBB125_711:                            # %for.inc3457
                                        #   in Loop: Header=BB125_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB125_701
.LBB125_712:                            # %for.end3459
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB125_713:                            # %for.cond3460
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB125_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB125_715:                            # %for.cond3465
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_603 Depth=3
                                        #         Parent Loop BB125_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB125_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB125_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_715
.LBB125_718:                            # %for.end3494
                                        #   in Loop: Header=BB125_713 Depth=4
	jmp	.LBB125_719
.LBB125_719:                            # %for.inc3495
                                        #   in Loop: Header=BB125_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_713
.LBB125_720:                            # %for.end3497
                                        #   in Loop: Header=BB125_603 Depth=3
	jmp	.LBB125_721
.LBB125_721:                            # %if.end3498
                                        #   in Loop: Header=BB125_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB125_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB125_723:                            # %for.cond3502
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB125_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB125_725:                            # %for.cond3507
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_603 Depth=3
                                        #         Parent Loop BB125_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB125_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB125_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_725
.LBB125_728:                            # %for.end3562
                                        #   in Loop: Header=BB125_723 Depth=4
	jmp	.LBB125_729
.LBB125_729:                            # %for.inc3563
                                        #   in Loop: Header=BB125_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_723
.LBB125_730:                            # %for.end3565
                                        #   in Loop: Header=BB125_603 Depth=3
	jmp	.LBB125_731
.LBB125_731:                            # %if.end3566
                                        #   in Loop: Header=BB125_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB125_732:                            # %if.end3567
                                        #   in Loop: Header=BB125_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB125_733:                            # %if.end3568
                                        #   in Loop: Header=BB125_603 Depth=3
	jmp	.LBB125_734
.LBB125_734:                            # %for.inc3569
                                        #   in Loop: Header=BB125_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB125_603
.LBB125_735:                            # %for.end3571
                                        #   in Loop: Header=BB125_601 Depth=2
	movl	-176(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB125_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB125_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB125_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB125_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB125_739
.LBB125_738:                            # %cond.true3588
                                        #   in Loop: Header=BB125_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB125_740
.LBB125_739:                            # %cond.false3589
                                        #   in Loop: Header=BB125_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB125_740
.LBB125_740:                            # %cond.end3590
                                        #   in Loop: Header=BB125_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB125_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB125_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB125_743
.LBB125_742:                            # %cond.true3599
                                        #   in Loop: Header=BB125_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB125_744
.LBB125_743:                            # %cond.false3600
                                        #   in Loop: Header=BB125_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB125_744
.LBB125_744:                            # %cond.end3601
                                        #   in Loop: Header=BB125_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-280(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -180(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB125_745:                            # %for.cond3619
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_747 Depth 4
                                        #           Child Loop BB125_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB125_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB125_745 Depth=3
	movl	$0, -24(%rbp)
.LBB125_747:                            # %for.cond3623
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB125_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB125_747 Depth=4
	movl	$0, -20(%rbp)
.LBB125_749:                            # %for.cond3627
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_745 Depth=3
                                        #         Parent Loop BB125_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB125_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB125_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB125_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_749
.LBB125_752:                            # %for.end3650
                                        #   in Loop: Header=BB125_747 Depth=4
	jmp	.LBB125_753
.LBB125_753:                            # %for.inc3651
                                        #   in Loop: Header=BB125_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_747
.LBB125_754:                            # %for.end3653
                                        #   in Loop: Header=BB125_745 Depth=3
	jmp	.LBB125_755
.LBB125_755:                            # %for.inc3654
                                        #   in Loop: Header=BB125_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB125_745
.LBB125_756:                            # %for.end3656
                                        #   in Loop: Header=BB125_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB125_757:                            # %for.cond3657
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB125_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB125_759:                            # %for.cond3662
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB125_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB125_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_759
.LBB125_762:                            # %for.end3691
                                        #   in Loop: Header=BB125_757 Depth=3
	jmp	.LBB125_763
.LBB125_763:                            # %for.inc3692
                                        #   in Loop: Header=BB125_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_757
.LBB125_764:                            # %for.end3694
                                        #   in Loop: Header=BB125_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB125_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB125_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB125_766:                            # %for.cond3698
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB125_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB125_768:                            # %for.cond3703
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB125_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB125_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_768
.LBB125_771:                            # %for.end3758
                                        #   in Loop: Header=BB125_766 Depth=3
	jmp	.LBB125_772
.LBB125_772:                            # %for.inc3759
                                        #   in Loop: Header=BB125_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_766
.LBB125_773:                            # %for.end3761
                                        #   in Loop: Header=BB125_601 Depth=2
	jmp	.LBB125_774
.LBB125_774:                            # %if.end3762
                                        #   in Loop: Header=BB125_601 Depth=2
	jmp	.LBB125_775
.LBB125_775:                            # %if.end3763
                                        #   in Loop: Header=BB125_601 Depth=2
	cmpl	$0, -180(%rbp)
	je	.LBB125_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB125_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-180(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB125_777:                            # %if.end3769
                                        #   in Loop: Header=BB125_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB125_778:                            # %for.cond3781
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB125_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB125_780:                            # %for.cond3786
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB125_780 Depth=4
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB125_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_780
.LBB125_783:                            # %for.end3797
                                        #   in Loop: Header=BB125_778 Depth=3
	jmp	.LBB125_784
.LBB125_784:                            # %for.inc3798
                                        #   in Loop: Header=BB125_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_778
.LBB125_785:                            # %for.end3800
                                        #   in Loop: Header=BB125_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB125_786:                            # %for.cond3802
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB125_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB125_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_786
.LBB125_789:                            # %for.end3811
                                        #   in Loop: Header=BB125_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB125_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB125_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB125_791:                            # %for.cond3819
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB125_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB125_793:                            # %for.cond3824
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_601 Depth=2
                                        #       Parent Loop BB125_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB125_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB125_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_793
.LBB125_796:                            # %for.end3844
                                        #   in Loop: Header=BB125_791 Depth=3
	jmp	.LBB125_797
.LBB125_797:                            # %for.inc3845
                                        #   in Loop: Header=BB125_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_791
.LBB125_798:                            # %for.end3847
                                        #   in Loop: Header=BB125_601 Depth=2
	jmp	.LBB125_799
.LBB125_799:                            # %if.end3848
                                        #   in Loop: Header=BB125_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB125_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB125_601
.LBB125_801:                            # %for.end3860
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_802
.LBB125_802:                            # %if.end3861
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB125_803:                            # %for.cond3862
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB125_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB125_803 Depth=2
	movl	$0, -24(%rbp)
.LBB125_805:                            # %for.cond3866
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB125_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB125_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB125_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_805
.LBB125_808:                            # %for.end3890
                                        #   in Loop: Header=BB125_803 Depth=2
	jmp	.LBB125_809
.LBB125_809:                            # %for.inc3891
                                        #   in Loop: Header=BB125_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_803
.LBB125_810:                            # %for.end3893
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB125_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB125_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB125_825
.LBB125_813:                            # %if.then3902
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB125_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB125_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB125_822
.LBB125_816:                            # %if.else3910
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB125_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB125_821
.LBB125_818:                            # %if.else3915
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB125_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB125_820:                            # %if.end3922
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_821
.LBB125_821:                            # %if.end3923
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_822
.LBB125_822:                            # %if.end3924
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_824
.LBB125_823:                            # %if.else3925
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB125_824:                            # %if.end3927
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_825
.LBB125_825:                            # %if.end3928
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_827
.LBB125_826:                            # %if.else3929
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
.LBB125_827:                            # %if.end3930
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB125_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB125_830
.LBB125_829:                            # %if.then3938
                                        #   in Loop: Header=BB125_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB125_830:                            # %if.end3939
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_832
.LBB125_831:                            # %if.else3940
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB125_832:                            # %if.end3941
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB125_171 Depth=1
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB125_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB125_171 Depth=1
	leaq	-276(%rbp), %rdi
	leaq	-268(%rbp), %rsi
	leaq	-300(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB125_835:                            # %for.cond3949
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_853 Depth 3
                                        #         Child Loop BB125_908 Depth 4
                                        #           Child Loop BB125_911 Depth 5
                                        #             Child Loop BB125_913 Depth 6
                                        #           Child Loop BB125_920 Depth 5
                                        #             Child Loop BB125_922 Depth 6
                                        #         Child Loop BB125_955 Depth 4
                                        #           Child Loop BB125_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB125_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB125_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB125_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB125_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB125_846
.LBB125_838:                            # %lor.lhs.false3960
                                        #   in Loop: Header=BB125_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB125_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB125_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB125_846
.LBB125_840:                            # %lor.lhs.false3966
                                        #   in Loop: Header=BB125_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB125_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB125_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB125_846
.LBB125_842:                            # %lor.lhs.false3972
                                        #   in Loop: Header=BB125_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB125_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB125_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB125_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB125_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB125_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB125_835 Depth=2
	cmpl	$0, -300(%rbp)
	jne	.LBB125_847
.LBB125_846:                            # %if.then3982
                                        #   in Loop: Header=BB125_835 Depth=2
	jmp	.LBB125_976
.LBB125_847:                            # %if.end3983
                                        #   in Loop: Header=BB125_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB125_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB125_835 Depth=2
	movl	$11, -312(%rbp)
	jmp	.LBB125_850
.LBB125_849:                            # %if.else3987
                                        #   in Loop: Header=BB125_835 Depth=2
	movl	$8, -312(%rbp)
.LBB125_850:                            # %if.end3988
                                        #   in Loop: Header=BB125_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB125_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB125_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB125_852:                            # %if.end3994
                                        #   in Loop: Header=BB125_835 Depth=2
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB125_853:                            # %for.cond3995
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_908 Depth 4
                                        #           Child Loop BB125_911 Depth 5
                                        #             Child Loop BB125_913 Depth 6
                                        #           Child Loop BB125_920 Depth 5
                                        #             Child Loop BB125_922 Depth 6
                                        #         Child Loop BB125_955 Depth 4
                                        #           Child Loop BB125_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-312(%rbp), %eax
	jge	.LBB125_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB125_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB125_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB125_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB125_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB125_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -124(%rbp)
.LBB125_857:                            # %if.end4010
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB125_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$0, -124(%rbp)
	jne	.LBB125_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB125_866
.LBB125_860:                            # %lor.lhs.false4018
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB125_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB125_866
.LBB125_862:                            # %lor.lhs.false4023
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$3, -124(%rbp)
	jne	.LBB125_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB125_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB125_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$0, -300(%rbp)
	jne	.LBB125_867
.LBB125_866:                            # %if.then4032
                                        #   in Loop: Header=BB125_853 Depth=3
	jmp	.LBB125_974
.LBB125_867:                            # %if.end4033
                                        #   in Loop: Header=BB125_853 Depth=3
	jmp	.LBB125_869
.LBB125_868:                            # %if.else4034
                                        #   in Loop: Header=BB125_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -124(%rbp)
.LBB125_869:                            # %if.end4037
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB125_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB125_853 Depth=3
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB125_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB125_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB125_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB125_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB125_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB125_877:                            # %if.end4066
                                        #   in Loop: Header=BB125_853 Depth=3
	jmp	.LBB125_878
.LBB125_878:                            # %if.end4067
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$2, -128(%rbp)
	jge	.LBB125_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB125_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB125_880:                            # %if.end4072
                                        #   in Loop: Header=BB125_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB125_881:                            # %if.end4074
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB125_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB125_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB125_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB125_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB125_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB125_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB125_887:                            # %if.end4092
                                        #   in Loop: Header=BB125_853 Depth=3
	jmp	.LBB125_888
.LBB125_888:                            # %if.end4093
                                        #   in Loop: Header=BB125_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB125_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB125_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB125_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB125_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB125_902
.LBB125_893:                            # %if.else4110
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB125_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB125_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB125_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB125_901
.LBB125_897:                            # %if.else4120
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB125_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB125_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB125_900:                            # %if.end4128
                                        #   in Loop: Header=BB125_853 Depth=3
	jmp	.LBB125_901
.LBB125_901:                            # %if.end4129
                                        #   in Loop: Header=BB125_853 Depth=3
	jmp	.LBB125_902
.LBB125_902:                            # %if.end4130
                                        #   in Loop: Header=BB125_853 Depth=3
	jmp	.LBB125_903
.LBB125_903:                            # %if.end4131
                                        #   in Loop: Header=BB125_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB125_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB125_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB125_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB125_947
.LBB125_907:                            # %if.then4146
                                        #   in Loop: Header=BB125_853 Depth=3
	jmp	.LBB125_908
.LBB125_908:                            # %while.body
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_835 Depth=2
                                        #       Parent Loop BB125_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_911 Depth 5
                                        #             Child Loop BB125_913 Depth 6
                                        #           Child Loop BB125_920 Depth 5
                                        #             Child Loop BB125_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB125_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB125_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB125_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB125_908 Depth=4
	movl	$0, -20(%rbp)
.LBB125_911:                            # %for.cond4153
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_835 Depth=2
                                        #       Parent Loop BB125_853 Depth=3
                                        #         Parent Loop BB125_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB125_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB125_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB125_911 Depth=5
	movl	$0, -24(%rbp)
.LBB125_913:                            # %for.cond4157
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_835 Depth=2
                                        #       Parent Loop BB125_853 Depth=3
                                        #         Parent Loop BB125_908 Depth=4
                                        #           Parent Loop BB125_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB125_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB125_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB125_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_913
.LBB125_916:                            # %for.end4182
                                        #   in Loop: Header=BB125_911 Depth=5
	jmp	.LBB125_917
.LBB125_917:                            # %for.inc4183
                                        #   in Loop: Header=BB125_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_911
.LBB125_918:                            # %for.end4185
                                        #   in Loop: Header=BB125_908 Depth=4
	jmp	.LBB125_928
.LBB125_919:                            # %if.else4186
                                        #   in Loop: Header=BB125_908 Depth=4
	movl	$0, -20(%rbp)
.LBB125_920:                            # %for.cond4187
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_835 Depth=2
                                        #       Parent Loop BB125_853 Depth=3
                                        #         Parent Loop BB125_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB125_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB125_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB125_920 Depth=5
	movl	$0, -24(%rbp)
.LBB125_922:                            # %for.cond4191
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_835 Depth=2
                                        #       Parent Loop BB125_853 Depth=3
                                        #         Parent Loop BB125_908 Depth=4
                                        #           Parent Loop BB125_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB125_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB125_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB125_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_922
.LBB125_925:                            # %for.end4215
                                        #   in Loop: Header=BB125_920 Depth=5
	jmp	.LBB125_926
.LBB125_926:                            # %for.inc4216
                                        #   in Loop: Header=BB125_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_920
.LBB125_927:                            # %for.end4218
                                        #   in Loop: Header=BB125_908 Depth=4
	jmp	.LBB125_928
.LBB125_928:                            # %if.end4219
                                        #   in Loop: Header=BB125_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB125_929:                            # %if.end4220
                                        #   in Loop: Header=BB125_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB125_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB125_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB125_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB125_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB125_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB125_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB125_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB125_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB125_934:                            # %while.body.backedge
                                        #   in Loop: Header=BB125_908 Depth=4
	jmp	.LBB125_908
.LBB125_935:                            # %if.else4236
                                        #   in Loop: Header=BB125_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB125_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB125_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB125_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB125_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB125_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB125_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB125_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB125_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB125_934
.LBB125_940:                            # %if.else4250
                                        #   in Loop: Header=BB125_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB125_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB125_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB125_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB125_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB125_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB125_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB125_934
.LBB125_944:                            # %if.else4262
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB125_946
.LBB125_945:                            # %if.else4264
                                        #   in Loop: Header=BB125_853 Depth=3
	jmp	.LBB125_946
.LBB125_946:                            # %while.end
                                        #   in Loop: Header=BB125_853 Depth=3
	jmp	.LBB125_947
.LBB125_947:                            # %if.end4265
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB125_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB125_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB125_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB125_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB125_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB125_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB125_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB125_853 Depth=3
	movl	$0, -20(%rbp)
.LBB125_955:                            # %for.cond4288
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_835 Depth=2
                                        #       Parent Loop BB125_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB125_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB125_955 Depth=4
	movl	$0, -24(%rbp)
.LBB125_957:                            # %for.cond4292
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_835 Depth=2
                                        #       Parent Loop BB125_853 Depth=3
                                        #         Parent Loop BB125_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB125_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB125_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB125_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_957
.LBB125_960:                            # %for.end4316
                                        #   in Loop: Header=BB125_955 Depth=4
	jmp	.LBB125_961
.LBB125_961:                            # %for.inc4317
                                        #   in Loop: Header=BB125_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_955
.LBB125_962:                            # %for.end4319
                                        #   in Loop: Header=BB125_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB125_963:                            # %if.end4320
                                        #   in Loop: Header=BB125_853 Depth=3
	jmp	.LBB125_964
.LBB125_964:                            # %if.end4321
                                        #   in Loop: Header=BB125_853 Depth=3
	jmp	.LBB125_965
.LBB125_965:                            # %if.end4322
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB125_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB125_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB125_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB125_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB125_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB125_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB125_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB125_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB125_972:                            # %if.end4356
                                        #   in Loop: Header=BB125_853 Depth=3
	jmp	.LBB125_973
.LBB125_973:                            # %if.end4357
                                        #   in Loop: Header=BB125_853 Depth=3
	jmp	.LBB125_974
.LBB125_974:                            # %for.inc4358
                                        #   in Loop: Header=BB125_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB125_853
.LBB125_975:                            # %for.end4360
                                        #   in Loop: Header=BB125_835 Depth=2
	jmp	.LBB125_976
.LBB125_976:                            # %for.inc4361
                                        #   in Loop: Header=BB125_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB125_835
.LBB125_977:                            # %for.end4364
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_1082
.LBB125_978:                            # %if.else4365
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB125_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB125_980:                            # %if.end4371
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB125_981:                            # %for.cond4372
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_1014 Depth 3
                                        #         Child Loop BB125_1017 Depth 4
                                        #           Child Loop BB125_1019 Depth 5
                                        #         Child Loop BB125_1026 Depth 4
                                        #           Child Loop BB125_1028 Depth 5
                                        #       Child Loop BB125_1061 Depth 3
                                        #         Child Loop BB125_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB125_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB125_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB125_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB125_981 Depth=2
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB125_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB125_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB125_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB125_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB125_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB125_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB125_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB125_990:                            # %if.end4407
                                        #   in Loop: Header=BB125_981 Depth=2
	jmp	.LBB125_991
.LBB125_991:                            # %if.end4408
                                        #   in Loop: Header=BB125_981 Depth=2
	cmpl	$2, -128(%rbp)
	jge	.LBB125_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB125_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB125_993:                            # %if.end4413
                                        #   in Loop: Header=BB125_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB125_994:                            # %if.end4415
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB125_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB125_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB125_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB125_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB125_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB125_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB125_1008
.LBB125_999:                            # %if.else4433
                                        #   in Loop: Header=BB125_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB125_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB125_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB125_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB125_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB125_1007
.LBB125_1003:                           # %if.else4443
                                        #   in Loop: Header=BB125_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB125_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB125_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB125_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB125_1006:                           # %if.end4451
                                        #   in Loop: Header=BB125_981 Depth=2
	jmp	.LBB125_1007
.LBB125_1007:                           # %if.end4452
                                        #   in Loop: Header=BB125_981 Depth=2
	jmp	.LBB125_1008
.LBB125_1008:                           # %if.end4453
                                        #   in Loop: Header=BB125_981 Depth=2
	jmp	.LBB125_1009
.LBB125_1009:                           # %if.end4454
                                        #   in Loop: Header=BB125_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB125_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB125_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB125_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB125_1053
.LBB125_1013:                           # %if.then4470
                                        #   in Loop: Header=BB125_981 Depth=2
	jmp	.LBB125_1014
.LBB125_1014:                           # %while.body4471
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_1017 Depth 4
                                        #           Child Loop BB125_1019 Depth 5
                                        #         Child Loop BB125_1026 Depth 4
                                        #           Child Loop BB125_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB125_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB125_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB125_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB125_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB125_1017:                           # %for.cond4478
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_981 Depth=2
                                        #       Parent Loop BB125_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB125_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB125_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB125_1019:                           # %for.cond4482
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_981 Depth=2
                                        #       Parent Loop BB125_1014 Depth=3
                                        #         Parent Loop BB125_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB125_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB125_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB125_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1019
.LBB125_1022:                           # %for.end4507
                                        #   in Loop: Header=BB125_1017 Depth=4
	jmp	.LBB125_1023
.LBB125_1023:                           # %for.inc4508
                                        #   in Loop: Header=BB125_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1017
.LBB125_1024:                           # %for.end4510
                                        #   in Loop: Header=BB125_1014 Depth=3
	jmp	.LBB125_1034
.LBB125_1025:                           # %if.else4511
                                        #   in Loop: Header=BB125_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB125_1026:                           # %for.cond4512
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_981 Depth=2
                                        #       Parent Loop BB125_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB125_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB125_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB125_1028:                           # %for.cond4516
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_981 Depth=2
                                        #       Parent Loop BB125_1014 Depth=3
                                        #         Parent Loop BB125_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB125_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB125_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB125_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1028
.LBB125_1031:                           # %for.end4540
                                        #   in Loop: Header=BB125_1026 Depth=4
	jmp	.LBB125_1032
.LBB125_1032:                           # %for.inc4541
                                        #   in Loop: Header=BB125_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1026
.LBB125_1033:                           # %for.end4543
                                        #   in Loop: Header=BB125_1014 Depth=3
	jmp	.LBB125_1034
.LBB125_1034:                           # %if.end4544
                                        #   in Loop: Header=BB125_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB125_1035:                           # %if.end4545
                                        #   in Loop: Header=BB125_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB125_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB125_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB125_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB125_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB125_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB125_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB125_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB125_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB125_1040:                           # %while.body4471.backedge
                                        #   in Loop: Header=BB125_1014 Depth=3
	jmp	.LBB125_1014
.LBB125_1041:                           # %if.else4561
                                        #   in Loop: Header=BB125_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB125_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB125_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB125_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB125_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB125_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB125_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB125_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB125_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB125_1040
.LBB125_1046:                           # %if.else4575
                                        #   in Loop: Header=BB125_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB125_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB125_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB125_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB125_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB125_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB125_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB125_1040
.LBB125_1050:                           # %if.else4587
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB125_1052
.LBB125_1051:                           # %if.else4589
                                        #   in Loop: Header=BB125_981 Depth=2
	jmp	.LBB125_1052
.LBB125_1052:                           # %while.end4590
                                        #   in Loop: Header=BB125_981 Depth=2
	jmp	.LBB125_1053
.LBB125_1053:                           # %if.end4591
                                        #   in Loop: Header=BB125_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB125_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB125_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB125_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB125_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB125_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB125_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB125_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB125_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB125_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB125_981 Depth=2
	movl	$0, -20(%rbp)
.LBB125_1061:                           # %for.cond4615
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB125_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB125_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB125_1063:                           # %for.cond4619
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_981 Depth=2
                                        #       Parent Loop BB125_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB125_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB125_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB125_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1063
.LBB125_1066:                           # %for.end4643
                                        #   in Loop: Header=BB125_1061 Depth=3
	jmp	.LBB125_1067
.LBB125_1067:                           # %for.inc4644
                                        #   in Loop: Header=BB125_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1061
.LBB125_1068:                           # %for.end4646
                                        #   in Loop: Header=BB125_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB125_1069:                           # %if.end4647
                                        #   in Loop: Header=BB125_981 Depth=2
	jmp	.LBB125_1070
.LBB125_1070:                           # %if.end4648
                                        #   in Loop: Header=BB125_981 Depth=2
	jmp	.LBB125_1071
.LBB125_1071:                           # %if.end4649
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB125_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB125_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB125_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB125_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB125_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB125_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB125_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB125_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB125_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB125_1078:                           # %if.end4683
                                        #   in Loop: Header=BB125_981 Depth=2
	jmp	.LBB125_1079
.LBB125_1079:                           # %if.end4684
                                        #   in Loop: Header=BB125_981 Depth=2
	jmp	.LBB125_1080
.LBB125_1080:                           # %for.inc4685
                                        #   in Loop: Header=BB125_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB125_981
.LBB125_1081:                           # %for.end4687
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_1082
.LBB125_1082:                           # %if.end4688
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_1284
.LBB125_1083:                           # %if.else4689
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -216(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -316(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB125_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB125_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB125_1085:                           # %if.end4695
                                        #   in Loop: Header=BB125_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB125_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB125_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB125_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB125_171 Depth=1
	cmpl	$0, -264(%rbp)
	je	.LBB125_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB125_1090
	jmp	.LBB125_1089
.LBB125_1089:                           # %if.then4702
                                        #   in Loop: Header=BB125_171 Depth=1
	subl	$2, %eax
	je	.LBB125_1097
	jmp	.LBB125_1098
.LBB125_1090:                           # %sw.bb4704
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jl	.LBB125_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB125_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB125_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB125_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB125_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB125_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB125_1095
.LBB125_1094:                           # %if.then4716
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB125_1096
.LBB125_1095:                           # %if.else4717
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB125_1096:                           # %if.end4718
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_1099
.LBB125_1097:                           # %sw.bb4719
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB125_1099
.LBB125_1098:                           # %sw.default4720
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB125_1099:                           # %sw.epilog4721
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_1101
.LBB125_1100:                           # %if.else4722
                                        #   in Loop: Header=BB125_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB125_1101:                           # %if.end4724
                                        #   in Loop: Header=BB125_171 Depth=1
	vmovsd	.LCPI125_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI125_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB125_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB125_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB125_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB125_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB125_1110
.LBB125_1106:                           # %if.else4743
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB125_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB125_1109
.LBB125_1108:                           # %if.else4748
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB125_1109:                           # %if.end4750
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_1110
.LBB125_1110:                           # %if.end4751
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_1112
.LBB125_1111:                           # %if.else4752
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB125_1112:                           # %if.end4754
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$0, -20(%rbp)
.LBB125_1113:                           # %for.cond4755
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB125_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB125_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB125_1115:                           # %for.cond4759
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB125_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB125_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB125_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1115
.LBB125_1118:                           # %for.end4785
                                        #   in Loop: Header=BB125_1113 Depth=2
	jmp	.LBB125_1119
.LBB125_1119:                           # %for.inc4786
                                        #   in Loop: Header=BB125_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1113
.LBB125_1120:                           # %for.end4788
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB125_1122
.LBB125_1121:                           # %if.else4789
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-216(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-316(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB125_1122:                           # %if.end4792
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_1123
.LBB125_1123:                           # %if.end4793
                                        #   in Loop: Header=BB125_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB125_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -184(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB125_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB125_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$0, -20(%rbp)
.LBB125_1127:                           # %for.cond4806
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_1129 Depth 3
                                        #         Child Loop BB125_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB125_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB125_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB125_1129:                           # %for.cond4810
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB125_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB125_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB125_1131:                           # %for.cond4814
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_1127 Depth=2
                                        #       Parent Loop BB125_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB125_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB125_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB125_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB125_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB125_1134:                           # %if.end4826
                                        #   in Loop: Header=BB125_1131 Depth=4
	jmp	.LBB125_1135
.LBB125_1135:                           # %for.inc4827
                                        #   in Loop: Header=BB125_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB125_1131
.LBB125_1136:                           # %for.end4829
                                        #   in Loop: Header=BB125_1129 Depth=3
	jmp	.LBB125_1137
.LBB125_1137:                           # %for.inc4830
                                        #   in Loop: Header=BB125_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1129
.LBB125_1138:                           # %for.end4832
                                        #   in Loop: Header=BB125_1127 Depth=2
	jmp	.LBB125_1139
.LBB125_1139:                           # %for.inc4833
                                        #   in Loop: Header=BB125_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1127
.LBB125_1140:                           # %for.end4835
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-184(%rbp), %eax
	movl	%eax, -184(%rbp)
	movl	$0, -24(%rbp)
.LBB125_1141:                           # %for.cond4840
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB125_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB125_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB125_1143:                           # %for.cond4844
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB125_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB125_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB125_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1143
.LBB125_1146:                           # %for.end4877
                                        #   in Loop: Header=BB125_1141 Depth=2
	jmp	.LBB125_1147
.LBB125_1147:                           # %for.inc4878
                                        #   in Loop: Header=BB125_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1141
.LBB125_1148:                           # %for.end4880
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_1149
.LBB125_1149:                           # %if.end4881
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-184(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB125_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB125_1151:                           # %if.end4889
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$0, -24(%rbp)
.LBB125_1152:                           # %for.cond4890
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB125_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB125_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB125_1154:                           # %for.cond4894
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB125_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB125_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB125_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1154
.LBB125_1157:                           # %for.end4913
                                        #   in Loop: Header=BB125_1152 Depth=2
	jmp	.LBB125_1158
.LBB125_1158:                           # %for.inc4914
                                        #   in Loop: Header=BB125_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1152
.LBB125_1159:                           # %for.end4916
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$0, -20(%rbp)
.LBB125_1160:                           # %for.cond4917
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB125_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB125_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB125_1162:                           # %for.cond4921
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB125_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB125_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB125_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1162
.LBB125_1165:                           # %for.end4947
                                        #   in Loop: Header=BB125_1160 Depth=2
	jmp	.LBB125_1166
.LBB125_1166:                           # %for.inc4948
                                        #   in Loop: Header=BB125_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1160
.LBB125_1167:                           # %for.end4950
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -216(%rbp)
	jmp	.LBB125_1169
.LBB125_1168:                           # %if.else4952
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-216(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB125_1169:                           # %if.end4954
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_1170
.LBB125_1170:                           # %if.end4955
                                        #   in Loop: Header=BB125_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB125_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -184(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB125_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB125_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$0, -20(%rbp)
.LBB125_1174:                           # %for.cond4968
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_1176 Depth 3
                                        #         Child Loop BB125_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB125_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB125_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB125_1176:                           # %for.cond4972
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB125_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB125_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB125_1178:                           # %for.cond4976
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_1174 Depth=2
                                        #       Parent Loop BB125_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB125_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB125_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB125_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB125_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB125_1181:                           # %if.end4988
                                        #   in Loop: Header=BB125_1178 Depth=4
	jmp	.LBB125_1182
.LBB125_1182:                           # %for.inc4989
                                        #   in Loop: Header=BB125_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB125_1178
.LBB125_1183:                           # %for.end4991
                                        #   in Loop: Header=BB125_1176 Depth=3
	jmp	.LBB125_1184
.LBB125_1184:                           # %for.inc4992
                                        #   in Loop: Header=BB125_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1176
.LBB125_1185:                           # %for.end4994
                                        #   in Loop: Header=BB125_1174 Depth=2
	jmp	.LBB125_1186
.LBB125_1186:                           # %for.inc4995
                                        #   in Loop: Header=BB125_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1174
.LBB125_1187:                           # %for.end4997
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-184(%rbp), %eax
	movl	%eax, -184(%rbp)
.LBB125_1188:                           # %if.end5002
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-184(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB125_1189:                           # %for.cond5004
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB125_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB125_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB125_1191:                           # %for.cond5008
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB125_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB125_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB125_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1191
.LBB125_1194:                           # %for.end5034
                                        #   in Loop: Header=BB125_1189 Depth=2
	jmp	.LBB125_1195
.LBB125_1195:                           # %for.inc5035
                                        #   in Loop: Header=BB125_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1189
.LBB125_1196:                           # %for.end5037
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -216(%rbp)
	jmp	.LBB125_1198
.LBB125_1197:                           # %if.else5039
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-216(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB125_1198:                           # %if.end5043
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_1199
.LBB125_1199:                           # %if.end5044
                                        #   in Loop: Header=BB125_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB125_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-124(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB125_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$0, -20(%rbp)
.LBB125_1202:                           # %for.cond5053
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB125_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB125_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB125_1204:                           # %for.cond5057
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB125_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB125_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB125_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1204
.LBB125_1207:                           # %for.end5084
                                        #   in Loop: Header=BB125_1202 Depth=2
	jmp	.LBB125_1208
.LBB125_1208:                           # %for.inc5085
                                        #   in Loop: Header=BB125_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1202
.LBB125_1209:                           # %for.end5087
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB125_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$0, -24(%rbp)
.LBB125_1211:                           # %for.cond5091
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB125_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB125_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB125_1213:                           # %for.cond5095
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB125_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB125_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -212(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -228(%rbp)
	movl	-228(%rbp), %eax
	subl	-188(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-188(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -260(%rbp)
	movl	-212(%rbp), %eax
	subl	-260(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-260(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB125_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1213
.LBB125_1216:                           # %for.end5194
                                        #   in Loop: Header=BB125_1211 Depth=2
	jmp	.LBB125_1217
.LBB125_1217:                           # %for.inc5195
                                        #   in Loop: Header=BB125_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1211
.LBB125_1218:                           # %for.end5197
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_1219
.LBB125_1219:                           # %if.end5198
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$10, best_mode
	movl	-124(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB125_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$0, -24(%rbp)
.LBB125_1221:                           # %for.cond5204
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB125_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB125_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB125_1223:                           # %for.cond5208
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB125_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB125_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB125_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1223
.LBB125_1226:                           # %for.end5232
                                        #   in Loop: Header=BB125_1221 Depth=2
	jmp	.LBB125_1227
.LBB125_1227:                           # %for.inc5233
                                        #   in Loop: Header=BB125_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1221
.LBB125_1228:                           # %for.end5235
                                        #   in Loop: Header=BB125_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB125_1229:                           # %for.cond5237
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB125_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB125_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB125_1231:                           # %for.cond5241
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB125_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB125_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB125_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1231
.LBB125_1234:                           # %for.end5265
                                        #   in Loop: Header=BB125_1229 Depth=2
	jmp	.LBB125_1235
.LBB125_1235:                           # %for.inc5266
                                        #   in Loop: Header=BB125_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1229
.LBB125_1236:                           # %for.end5268
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB125_1237:                           # %for.cond5270
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB125_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB125_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB125_1239:                           # %for.cond5274
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB125_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB125_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB125_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1239
.LBB125_1242:                           # %for.end5289
                                        #   in Loop: Header=BB125_1237 Depth=2
	jmp	.LBB125_1243
.LBB125_1243:                           # %for.inc5290
                                        #   in Loop: Header=BB125_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1237
.LBB125_1244:                           # %for.end5292
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB125_1245:                           # %for.cond5296
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB125_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB125_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB125_1247:                           # %for.cond5300
                                        #   Parent Loop BB125_171 Depth=1
                                        #     Parent Loop BB125_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB125_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB125_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -260(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-260(%rbp), %ecx
	movl	%ecx, -212(%rbp)
	movl	-260(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -188(%rbp)
	movl	-188(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -228(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-188(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB125_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB125_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB125_1251
.LBB125_1250:                           # %cond.false5344
                                        #   in Loop: Header=BB125_1247 Depth=3
	movl	-188(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB125_1251:                           # %cond.end5356
                                        #   in Loop: Header=BB125_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB125_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB125_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB125_1257
.LBB125_1253:                           # %cond.false5362
                                        #   in Loop: Header=BB125_1247 Depth=3
	xorl	%eax, %eax
	movl	-188(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB125_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB125_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB125_1256
.LBB125_1255:                           # %cond.false5377
                                        #   in Loop: Header=BB125_1247 Depth=3
	movl	-188(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB125_1256:                           # %cond.end5389
                                        #   in Loop: Header=BB125_1247 Depth=3
.LBB125_1257:                           # %cond.end5391
                                        #   in Loop: Header=BB125_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-212(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-124(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB125_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB125_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB125_1260
.LBB125_1259:                           # %cond.false5416
                                        #   in Loop: Header=BB125_1247 Depth=3
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB125_1260:                           # %cond.end5426
                                        #   in Loop: Header=BB125_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB125_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB125_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_1266
.LBB125_1262:                           # %cond.false5432
                                        #   in Loop: Header=BB125_1247 Depth=3
	xorl	%eax, %eax
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB125_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB125_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB125_1265
.LBB125_1264:                           # %cond.false5445
                                        #   in Loop: Header=BB125_1247 Depth=3
	movl	-212(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB125_1265:                           # %cond.end5455
                                        #   in Loop: Header=BB125_1247 Depth=3
.LBB125_1266:                           # %cond.end5457
                                        #   in Loop: Header=BB125_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-228(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB125_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB125_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB125_1269
.LBB125_1268:                           # %cond.false5484
                                        #   in Loop: Header=BB125_1247 Depth=3
	movl	-228(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB125_1269:                           # %cond.end5496
                                        #   in Loop: Header=BB125_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB125_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB125_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB125_1275
.LBB125_1271:                           # %cond.false5502
                                        #   in Loop: Header=BB125_1247 Depth=3
	xorl	%eax, %eax
	movl	-228(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB125_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB125_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB125_1274
.LBB125_1273:                           # %cond.false5517
                                        #   in Loop: Header=BB125_1247 Depth=3
	movl	-228(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB125_1274:                           # %cond.end5529
                                        #   in Loop: Header=BB125_1247 Depth=3
.LBB125_1275:                           # %cond.end5531
                                        #   in Loop: Header=BB125_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB125_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1247
.LBB125_1277:                           # %for.end5546
                                        #   in Loop: Header=BB125_1245 Depth=2
	jmp	.LBB125_1278
.LBB125_1278:                           # %for.inc5547
                                        #   in Loop: Header=BB125_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1245
.LBB125_1279:                           # %for.end5549
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_1280
.LBB125_1280:                           # %if.end5550
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_1282
.LBB125_1281:                           # %if.else5551
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-216(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-316(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB125_1282:                           # %if.end5554
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_1283
.LBB125_1283:                           # %if.end5555
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_1284
.LBB125_1284:                           # %if.end5556
                                        #   in Loop: Header=BB125_171 Depth=1
	cmpl	$0, -256(%rbp)
	jne	.LBB125_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB125_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB125_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB125_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB125_1288:                           # %lor.end5571
                                        #   in Loop: Header=BB125_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -252(%rbp)
.LBB125_1289:                           # %if.end5574
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_1290
.LBB125_1290:                           # %for.inc5575
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-256(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
	jmp	.LBB125_171
.LBB125_1291:                           # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB125_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB125_1295
.LBB125_1294:                           # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB125_1299
.LBB125_1295:                           # %if.else5587
	cmpl	$0, cbp
	jne	.LBB125_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB125_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB125_1298:                           # %if.end5597
	jmp	.LBB125_1299
.LBB125_1299:                           # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB125_1395
.LBB125_1300:                           # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB125_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB125_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB125_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB125_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB125_1305:                           # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB125_1306:                           # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB125_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB125_1308:                           # %for.cond5623
                                        #   Parent Loop BB125_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB125_1308 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB125_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB125_1308
.LBB125_1311:                           # %for.end5639
                                        #   in Loop: Header=BB125_1306 Depth=1
	jmp	.LBB125_1312
.LBB125_1312:                           # %for.inc5640
                                        #   in Loop: Header=BB125_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1306
.LBB125_1313:                           # %for.end5642
	jmp	.LBB125_1370
.LBB125_1314:                           # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB125_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB125_1316:                           # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB125_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB125_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB125_1318:                           # %for.cond5651
                                        #   Parent Loop BB125_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB125_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB125_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB125_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB125_1318
.LBB125_1321:                           # %for.end5680
                                        #   in Loop: Header=BB125_1316 Depth=1
	jmp	.LBB125_1322
.LBB125_1322:                           # %for.inc5681
                                        #   in Loop: Header=BB125_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1316
.LBB125_1323:                           # %for.end5683
	movl	$0, -24(%rbp)
.LBB125_1324:                           # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB125_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB125_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB125_1326:                           # %for.cond5688
                                        #   Parent Loop BB125_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB125_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB125_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB125_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1326
.LBB125_1329:                           # %for.end5707
                                        #   in Loop: Header=BB125_1324 Depth=1
	jmp	.LBB125_1330
.LBB125_1330:                           # %for.inc5708
                                        #   in Loop: Header=BB125_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1324
.LBB125_1331:                           # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB125_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB125_1333:                           # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB125_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB125_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB125_1335:                           # %for.cond5718
                                        #   Parent Loop BB125_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB125_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB125_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB125_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1335
.LBB125_1338:                           # %for.end5752
                                        #   in Loop: Header=BB125_1333 Depth=1
	jmp	.LBB125_1339
.LBB125_1339:                           # %for.inc5753
                                        #   in Loop: Header=BB125_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1333
.LBB125_1340:                           # %for.end5755
	jmp	.LBB125_1341
.LBB125_1341:                           # %if.end5756
	jmp	.LBB125_1342
.LBB125_1342:                           # %if.end5757
	cmpl	$9, best_mode
	je	.LBB125_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB125_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB125_1345:                           # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB125_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB125_1347:                           # %for.cond5772
                                        #   Parent Loop BB125_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB125_1347 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB125_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB125_1347
.LBB125_1350:                           # %for.end5788
                                        #   in Loop: Header=BB125_1345 Depth=1
	jmp	.LBB125_1351
.LBB125_1351:                           # %for.inc5789
                                        #   in Loop: Header=BB125_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1345
.LBB125_1352:                           # %for.end5791
	cmpl	$10, best_mode
	je	.LBB125_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB125_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB125_1356
# %bb.1355:                             # %if.then5800
	movl	-320(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB125_1356:                           # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB125_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB125_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB125_1359:                           # %if.end5811
	movl	$0, -20(%rbp)
.LBB125_1360:                           # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB125_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB125_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB125_1362:                           # %for.cond5816
                                        #   Parent Loop BB125_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB125_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB125_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB125_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_1362
.LBB125_1365:                           # %for.end5842
                                        #   in Loop: Header=BB125_1360 Depth=1
	jmp	.LBB125_1366
.LBB125_1366:                           # %for.inc5843
                                        #   in Loop: Header=BB125_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_1360
.LBB125_1367:                           # %for.end5845
	jmp	.LBB125_1368
.LBB125_1368:                           # %if.end5846
	jmp	.LBB125_1369
.LBB125_1369:                           # %if.end5847
	jmp	.LBB125_1370
.LBB125_1370:                           # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB125_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB125_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB125_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB125_1374:                           # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB125_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB125_1376:                           # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -280(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB125_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB125_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB125_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB125_1382
.LBB125_1380:                           # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB125_1382
# %bb.1381:                             # %if.then5884
	leaq	-280(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB125_1382:                           # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB125_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-124(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB125_1384:                           # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB125_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB125_1392
.LBB125_1386:                           # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB125_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB125_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB125_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-448(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB125_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-448(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB125_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB125_1392:                           # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB125_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB125_1394:                           # %if.end5973
	jmp	.LBB125_1395
.LBB125_1395:                           # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB125_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB125_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB125_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB125_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB125_1401
.LBB125_1400:                           # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB125_1402
.LBB125_1401:                           # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB125_1402:                           # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB125_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB125_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB125_1406
.LBB125_1405:                           # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB125_1406:                           # %if.end6019
	jmp	.LBB125_1407
.LBB125_1407:                           # %if.end6020
	jmp	.LBB125_1408
.LBB125_1408:                           # %if.end6021
	jmp	.LBB125_1409
.LBB125_1409:                           # %if.end6022
	jmp	.LBB125_1410
.LBB125_1410:                           # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB125_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-248(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB125_1413
.LBB125_1412:                           # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB125_1413:                           # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB125_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB125_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB125_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB125_1420
	jmp	.LBB125_1428
.LBB125_1417:                           # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB125_1428
	jmp	.LBB125_1420
.LBB125_1419:                           # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB125_1420
	jmp	.LBB125_1428
.LBB125_1420:                           # %land.lhs.true6050
	movq	-424(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB125_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB125_1425
	jmp	.LBB125_1428
.LBB125_1422:                           # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_1424
# %bb.1423:                             # %cond.true6058
	movq	-424(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB125_1428
	jmp	.LBB125_1425
.LBB125_1424:                           # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB125_1425
	jmp	.LBB125_1428
.LBB125_1425:                           # %if.then6062
	callq	field_flag_inference
	cmpl	-288(%rbp), %eax
	je	.LBB125_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI125_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB125_1427:                           # %if.end6068
	jmp	.LBB125_1428
.LBB125_1428:                           # %if.end6069
	jmp	.LBB125_1429
.LBB125_1429:                           # %if.end6070
	jmp	.LBB125_1430
.LBB125_1430:                           # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB125_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB125_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB125_1452
.LBB125_1433:                           # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB125_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -252(%rbp)
	jne	.LBB125_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB125_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB125_1437:                           # %lor.end6142
.LBB125_1438:                           # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB125_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB125_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB125_1441:                           # %lor.end6166
.LBB125_1442:                           # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB125_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB125_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB125_1445:                           # %lor.end6191
.LBB125_1446:                           # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB125_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB125_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB125_1449:                           # %lor.end6216
.LBB125_1450:                           # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB125_1451:                           # %if.end6232
	jmp	.LBB125_1452
.LBB125_1452:                           # %if.end6233
	jmp	.LBB125_1464
.LBB125_1453:                           # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB125_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB125_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB125_1456:                           # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB125_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB125_1458:                           # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB125_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB125_1460:                           # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB125_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB125_1462:                           # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB125_1463:                           # %if.end6319
	jmp	.LBB125_1464
.LBB125_1464:                           # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB125_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB125_1466:                           # %if.end6327
	cmpl	$897248418, -416(%rbp)  # imm = 0x357AECA2
	jne	.LBB125_1468
.LBB125_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_1468:                           # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_1467
.Lfunc_end125:
	.size	encode_one_macroblock.96, .Lfunc_end125-encode_one_macroblock.96
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.97 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.97
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.97,@function
Mode_Decision_for_Intra4x4Macroblock.97: # @Mode_Decision_for_Intra4x4Macroblock.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1079022844, -20(%rbp)  # imm = 0x405094FC
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB126_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB126_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-24(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB126_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB126_4:                              # %if.end
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_1
.LBB126_6:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1079022844, -20(%rbp)  # imm = 0x405094FC
	jne	.LBB126_8
.LBB126_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_7
.Lfunc_end126:
	.size	Mode_Decision_for_Intra4x4Macroblock.97, .Lfunc_end126-Mode_Decision_for_Intra4x4Macroblock.97
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.98 # -- Begin function set_mbaff_parameters.98
	.p2align	4, 0x90
	.type	set_mbaff_parameters.98,@function
set_mbaff_parameters.98:                # @set_mbaff_parameters.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$653499964, -32(%rbp)   # imm = 0x26F39E3C
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB127_2
# %bb.1:                                # %if.then
	jmp	.LBB127_82
.LBB127_2:                              # %if.end
	movl	$0, -8(%rbp)
.LBB127_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB127_3 Depth=1
	movl	$0, -4(%rbp)
.LBB127_5:                              # %for.cond3
                                        #   Parent Loop BB127_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB127_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB127_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_5
.LBB127_8:                              # %for.end
                                        #   in Loop: Header=BB127_3 Depth=1
	jmp	.LBB127_9
.LBB127_9:                              # %for.inc17
                                        #   in Loop: Header=BB127_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_3
.LBB127_10:                             # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB127_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB127_12:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB127_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB127_12 Depth=1
	movl	$0, -4(%rbp)
.LBB127_14:                             # %for.cond27
                                        #   Parent Loop BB127_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB127_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB127_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB127_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_14
.LBB127_17:                             # %for.end60
                                        #   in Loop: Header=BB127_12 Depth=1
	jmp	.LBB127_18
.LBB127_18:                             # %for.inc61
                                        #   in Loop: Header=BB127_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_12
.LBB127_19:                             # %for.end63
	jmp	.LBB127_20
.LBB127_20:                             # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB127_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB127_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB127_23:                             # %if.end78
	movl	$0, -4(%rbp)
.LBB127_24:                             # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_26 Depth 2
                                        #       Child Loop BB127_28 Depth 3
                                        #         Child Loop BB127_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB127_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB127_24 Depth=1
	movl	$0, -8(%rbp)
.LBB127_26:                             # %for.cond84
                                        #   Parent Loop BB127_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_28 Depth 3
                                        #         Child Loop BB127_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB127_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB127_26 Depth=2
	movl	$0, -12(%rbp)
.LBB127_28:                             # %for.cond88
                                        #   Parent Loop BB127_24 Depth=1
                                        #     Parent Loop BB127_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB127_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB127_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB127_28 Depth=3
	movl	$0, -16(%rbp)
.LBB127_30:                             # %for.cond92
                                        #   Parent Loop BB127_24 Depth=1
                                        #     Parent Loop BB127_26 Depth=2
                                        #       Parent Loop BB127_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB127_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB127_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB127_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB127_30
.LBB127_33:                             # %for.end115
                                        #   in Loop: Header=BB127_28 Depth=3
	jmp	.LBB127_34
.LBB127_34:                             # %for.inc116
                                        #   in Loop: Header=BB127_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_28
.LBB127_35:                             # %for.end118
                                        #   in Loop: Header=BB127_26 Depth=2
	jmp	.LBB127_36
.LBB127_36:                             # %for.inc119
                                        #   in Loop: Header=BB127_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_26
.LBB127_37:                             # %for.end121
                                        #   in Loop: Header=BB127_24 Depth=1
	jmp	.LBB127_38
.LBB127_38:                             # %for.inc122
                                        #   in Loop: Header=BB127_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_24
.LBB127_39:                             # %for.end124
	movl	$0, -4(%rbp)
.LBB127_40:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_42 Depth 2
                                        #       Child Loop BB127_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB127_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB127_40 Depth=1
	movl	$0, -12(%rbp)
.LBB127_42:                             # %for.cond129
                                        #   Parent Loop BB127_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB127_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB127_42 Depth=2
	movl	$0, -16(%rbp)
.LBB127_44:                             # %for.cond133
                                        #   Parent Loop BB127_40 Depth=1
                                        #     Parent Loop BB127_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB127_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB127_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB127_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB127_44
.LBB127_47:                             # %for.end152
                                        #   in Loop: Header=BB127_42 Depth=2
	jmp	.LBB127_48
.LBB127_48:                             # %for.inc153
                                        #   in Loop: Header=BB127_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_42
.LBB127_49:                             # %for.end155
                                        #   in Loop: Header=BB127_40 Depth=1
	jmp	.LBB127_50
.LBB127_50:                             # %for.inc156
                                        #   in Loop: Header=BB127_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_40
.LBB127_51:                             # %for.end158
	movl	$0, -4(%rbp)
.LBB127_52:                             # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB127_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB127_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB127_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_52
.LBB127_55:                             # %for.end175
	movl	$0, -8(%rbp)
.LBB127_56:                             # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB127_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB127_56 Depth=1
	movl	$0, -4(%rbp)
.LBB127_58:                             # %for.cond180
                                        #   Parent Loop BB127_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB127_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB127_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB127_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_58
.LBB127_61:                             # %for.end198
                                        #   in Loop: Header=BB127_56 Depth=1
	jmp	.LBB127_62
.LBB127_62:                             # %for.inc199
                                        #   in Loop: Header=BB127_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_56
.LBB127_63:                             # %for.end201
	cmpl	$0, -36(%rbp)
	je	.LBB127_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB127_65:                             # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB127_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB127_65 Depth=1
	movl	$0, -4(%rbp)
.LBB127_67:                             # %for.cond208
                                        #   Parent Loop BB127_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB127_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB127_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB127_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_67
.LBB127_70:                             # %for.end230
                                        #   in Loop: Header=BB127_65 Depth=1
	jmp	.LBB127_71
.LBB127_71:                             # %for.inc231
                                        #   in Loop: Header=BB127_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_65
.LBB127_72:                             # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB127_73:                             # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB127_74:                             # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB127_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB127_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB127_76:                             # %for.cond244
                                        #   Parent Loop BB127_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB127_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB127_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB127_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_76
.LBB127_79:                             # %for.end267
                                        #   in Loop: Header=BB127_74 Depth=1
	jmp	.LBB127_80
.LBB127_80:                             # %for.inc268
                                        #   in Loop: Header=BB127_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_74
.LBB127_81:                             # %for.end270.loopexit
	jmp	.LBB127_82
.LBB127_82:                             # %for.end270
	cmpl	$653499964, -32(%rbp)   # imm = 0x26F39E3C
	jne	.LBB127_84
.LBB127_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_83
.Lfunc_end127:
	.size	set_mbaff_parameters.98, .Lfunc_end127-set_mbaff_parameters.98
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.99 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.99
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.99,@function
Mode_Decision_for_Intra4x4Macroblock.99: # @Mode_Decision_for_Intra4x4Macroblock.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1804920061, -24(%rbp)  # imm = 0x6B94E4FD
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB128_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB128_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB128_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB128_4:                              # %if.end
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_1
.LBB128_6:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1804920061, -24(%rbp)  # imm = 0x6B94E4FD
	jne	.LBB128_8
.LBB128_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_7
.Lfunc_end128:
	.size	Mode_Decision_for_Intra4x4Macroblock.99, .Lfunc_end128-Mode_Decision_for_Intra4x4Macroblock.99
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.100 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.100
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.100,@function
Mode_Decision_for_Intra4x4Macroblock.100: # @Mode_Decision_for_Intra4x4Macroblock.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2028216175, -24(%rbp)  # imm = 0x78E41F6F
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB129_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB129_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB129_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB129_4:                              # %if.end
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB129_1
.LBB129_6:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$2028216175, -24(%rbp)  # imm = 0x78E41F6F
	jne	.LBB129_8
.LBB129_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_7
.Lfunc_end129:
	.size	Mode_Decision_for_Intra4x4Macroblock.100, .Lfunc_end129-Mode_Decision_for_Intra4x4Macroblock.100
	.cfi_endproc
                                        # -- End function
	.type	cofDC,@object           # @cofDC
	.bss
	.globl	cofDC
	.p2align	3
cofDC:
	.quad	0
	.size	cofDC, 8

	.type	cofAC,@object           # @cofAC
	.globl	cofAC
	.p2align	3
cofAC:
	.quad	0
	.size	cofAC, 8

	.type	cofAC8x8,@object        # @cofAC8x8
	.globl	cofAC8x8
	.p2align	3
cofAC8x8:
	.quad	0
	.size	cofAC8x8, 8

	.type	cofAC4x4intern,@object  # @cofAC4x4intern
	.globl	cofAC4x4intern
	.p2align	3
cofAC4x4intern:
	.quad	0
	.size	cofAC4x4intern, 8

	.type	cofAC_8x8ts,@object     # @cofAC_8x8ts
	.globl	cofAC_8x8ts
	.p2align	3
cofAC_8x8ts:
	.quad	0
	.size	cofAC_8x8ts, 8

	.type	cs_mb,@object           # @cs_mb
	.globl	cs_mb
	.p2align	3
cs_mb:
	.quad	0
	.size	cs_mb, 8

	.type	cs_b8,@object           # @cs_b8
	.globl	cs_b8
	.p2align	3
cs_b8:
	.quad	0
	.size	cs_b8, 8

	.type	cs_cm,@object           # @cs_cm
	.globl	cs_cm
	.p2align	3
cs_cm:
	.quad	0
	.size	cs_cm, 8

	.type	cs_imb,@object          # @cs_imb
	.globl	cs_imb
	.p2align	3
cs_imb:
	.quad	0
	.size	cs_imb, 8

	.type	cs_ib8,@object          # @cs_ib8
	.globl	cs_ib8
	.p2align	3
cs_ib8:
	.quad	0
	.size	cs_ib8, 8

	.type	cs_ib4,@object          # @cs_ib4
	.globl	cs_ib4
	.p2align	3
cs_ib4:
	.quad	0
	.size	cs_ib4, 8

	.type	cs_pc,@object           # @cs_pc
	.globl	cs_pc
	.p2align	3
cs_pc:
	.quad	0
	.size	cs_pc, 8

	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	cofAC4x4,@object        # @cofAC4x4
	.globl	cofAC4x4
	.p2align	3
cofAC4x4:
	.quad	0
	.size	cofAC4x4, 8

	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	cofAC4x4_chroma,@object # @cofAC4x4_chroma
	.comm	cofAC4x4_chroma,288,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	cbp8x8,@object          # @cbp8x8
	.comm	cbp8x8,4,4
	.type	best8x8pdir,@object     # @best8x8pdir
	.comm	best8x8pdir,120,16
	.type	best8x8mode,@object     # @best8x8mode
	.comm	best8x8mode,8,2
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Unsupported mode in SetModesAndRefframeForBlocks!\n"
	.size	.L.str, 51

	.type	best8x8fwref,@object    # @best8x8fwref
	.comm	best8x8fwref,120,16
	.type	best8x8bwref,@object    # @best8x8bwref
	.comm	best8x8bwref,120,16
	.type	part8x8mode,@object     # @part8x8mode
	.comm	part8x8mode,16,16
	.type	part8x8pdir,@object     # @part8x8pdir
	.comm	part8x8pdir,8,2
	.type	part8x8fwref,@object    # @part8x8fwref
	.comm	part8x8fwref,8,2
	.type	part8x8bwref,@object    # @part8x8bwref
	.comm	part8x8bwref,8,2
	.type	cnt_nonz8_8x8ts,@object # @cnt_nonz8_8x8ts
	.comm	cnt_nonz8_8x8ts,4,4
	.type	mpr_8x8ts,@object       # @mpr_8x8ts
	.comm	mpr_8x8ts,512,16
	.type	cbp8_8x8ts,@object      # @cbp8_8x8ts
	.comm	cbp8_8x8ts,4,4
	.type	cbp_blk8_8x8ts,@object  # @cbp_blk8_8x8ts
	.comm	cbp_blk8_8x8ts,8,8
	.type	rec_mbY_8x8ts,@object   # @rec_mbY_8x8ts
	.comm	rec_mbY_8x8ts,512,16
	.type	rec_resG_8x8ts,@object  # @rec_resG_8x8ts
	.comm	rec_resG_8x8ts,1024,16
	.type	mprRGB_8x8ts,@object    # @mprRGB_8x8ts
	.comm	mprRGB_8x8ts,3072,16
	.type	resTrans_R_8x8ts,@object # @resTrans_R_8x8ts
	.comm	resTrans_R_8x8ts,1024,16
	.type	resTrans_B_8x8ts,@object # @resTrans_B_8x8ts
	.comm	resTrans_B_8x8ts,1024,16
	.type	cnt_nonz_8x8,@object    # @cnt_nonz_8x8
	.comm	cnt_nonz_8x8,4,4
	.type	mpr8x8,@object          # @mpr8x8
	.comm	mpr8x8,512,16
	.type	cbp_blk8x8,@object      # @cbp_blk8x8
	.comm	cbp_blk8x8,4,4
	.type	rec_mbY8x8,@object      # @rec_mbY8x8
	.comm	rec_mbY8x8,512,16
	.type	rec_resG_8x8,@object    # @rec_resG_8x8
	.comm	rec_resG_8x8,1024,16
	.type	mprRGB_8x8,@object      # @mprRGB_8x8
	.comm	mprRGB_8x8,3072,16
	.type	resTrans_R_8x8,@object  # @resTrans_R_8x8
	.comm	resTrans_R_8x8,1024,16
	.type	resTrans_B_8x8,@object  # @resTrans_B_8x8
	.comm	resTrans_B_8x8,1024,16
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"invalid direction mode"
	.size	.L.str.1, 23

	.type	pred,@object            # @pred
	.local	pred
	.comm	pred,1024,16
	.type	best_mode,@object       # @best_mode
	.comm	best_mode,4,4
	.type	best_c_imode,@object    # @best_c_imode
	.comm	best_c_imode,4,4
	.type	best_i16offset,@object  # @best_i16offset
	.comm	best_i16offset,4,4
	.type	bi_pred_me,@object      # @bi_pred_me
	.comm	bi_pred_me,4,4
	.type	b8mode,@object          # @b8mode
	.comm	b8mode,8,2
	.type	b8pdir,@object          # @b8pdir
	.comm	b8pdir,8,2
	.type	b4_ipredmode,@object    # @b4_ipredmode
	.comm	b4_ipredmode,64,16
	.type	b4_intra_pred_modes,@object # @b4_intra_pred_modes
	.comm	b4_intra_pred_modes,64,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	rec_mbY,@object         # @rec_mbY
	.comm	rec_mbY,512,16
	.type	rec_mbU,@object         # @rec_mbU
	.comm	rec_mbU,512,16
	.type	rec_mbV,@object         # @rec_mbV
	.comm	rec_mbV,512,16
	.type	cbp,@object             # @cbp
	.comm	cbp,4,4
	.type	cbp_blk,@object         # @cbp_blk
	.comm	cbp_blk,8,8
	.type	luma_transform_size_8x8_flag,@object # @luma_transform_size_8x8_flag
	.comm	luma_transform_size_8x8_flag,4,4
	.type	frefframe,@object       # @frefframe
	.comm	frefframe,32,16
	.type	brefframe,@object       # @brefframe
	.comm	brefframe,32,16
	.type	all_mv8x8,@object       # @all_mv8x8
	.comm	all_mv8x8,256,16
	.type	pred_mv8x8,@object      # @pred_mv8x8
	.comm	pred_mv8x8,256,16
	.type	encode_one_macroblock.b8_mode_table,@object # @encode_one_macroblock.b8_mode_table
	.section	.rodata,"a",@progbits
	.p2align	4
encode_one_macroblock.b8_mode_table:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	0                       # 0x0
	.size	encode_one_macroblock.b8_mode_table, 24

	.type	encode_one_macroblock.mb_mode_table,@object # @encode_one_macroblock.mb_mode_table
	.p2align	4
encode_one_macroblock.mb_mode_table:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	13                      # 0xd
	.size	encode_one_macroblock.mb_mode_table, 32

	.type	encode_one_macroblock.mb_mode_table_RCT,@object # @encode_one_macroblock.mb_mode_table_RCT
	.p2align	4
encode_one_macroblock.mb_mode_table_RCT:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	13                      # 0xd
	.size	encode_one_macroblock.mb_mode_table_RCT, 44

	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	cost8_8x8ts,@object     # @cost8_8x8ts
	.comm	cost8_8x8ts,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	diffy,@object           # @diffy
	.comm	diffy,1024,16
	.type	temp_imgU,@object       # @temp_imgU
	.comm	temp_imgU,512,16
	.type	temp_imgV,@object       # @temp_imgV
	.comm	temp_imgV,512,16
	.type	temp_imgY,@object       # @temp_imgY
	.comm	temp_imgY,512,16
	.type	DELTA_QP,@object        # @DELTA_QP
	.comm	DELTA_QP,4,4
	.type	QP,@object              # @QP
	.comm	QP,4,4
	.type	DELTA_QP2,@object       # @DELTA_QP2
	.comm	DELTA_QP2,4,4
	.type	QP2,@object             # @QP2
	.comm	QP2,4,4
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	McostState,@object      # @McostState
	.comm	McostState,8,8
	.type	all_mincost,@object     # @all_mincost
	.comm	all_mincost,8,8
	.type	all_bwmincost,@object   # @all_bwmincost
	.comm	all_bwmincost,8,8
	.type	pred_SAD_space,@object  # @pred_SAD_space
	.comm	pred_SAD_space,4,4
	.type	pred_SAD_time,@object   # @pred_SAD_time
	.comm	pred_SAD_time,4,4
	.type	pred_SAD_ref,@object    # @pred_SAD_ref
	.comm	pred_SAD_ref,4,4
	.type	pred_SAD_uplayer,@object # @pred_SAD_uplayer
	.comm	pred_SAD_uplayer,4,4
	.type	FME_blocktype,@object   # @FME_blocktype
	.comm	FME_blocktype,4,4
	.type	pred_MV_time,@object    # @pred_MV_time
	.comm	pred_MV_time,8,4
	.type	pred_MV_ref,@object     # @pred_MV_ref
	.comm	pred_MV_ref,8,4
	.type	pred_MV_uplayer,@object # @pred_MV_uplayer
	.comm	pred_MV_uplayer,8,4
	.type	Quantize_step,@object   # @Quantize_step
	.comm	Quantize_step,4,4
	.type	Bsize,@object           # @Bsize
	.comm	Bsize,32,16
	.type	Thresh4x4,@object       # @Thresh4x4
	.comm	Thresh4x4,4,4
	.type	AlphaSec,@object        # @AlphaSec
	.comm	AlphaSec,32,16
	.type	AlphaThird,@object      # @AlphaThird
	.comm	AlphaThird,32,16
	.type	flag_intra,@object      # @flag_intra
	.comm	flag_intra,8,8
	.type	flag_intra_SAD,@object  # @flag_intra_SAD
	.comm	flag_intra_SAD,4,4
	.type	SearchState,@object     # @SearchState
	.comm	SearchState,8,8
	.type	bit_rate,@object        # @bit_rate
	.comm	bit_rate,8,8
	.type	frame_rate,@object      # @frame_rate
	.comm	frame_rate,8,8
	.type	GAMMAP,@object          # @GAMMAP
	.comm	GAMMAP,8,8
	.type	BETAP,@object           # @BETAP
	.comm	BETAP,8,8
	.type	RC_MAX_QUANT,@object    # @RC_MAX_QUANT
	.comm	RC_MAX_QUANT,4,4
	.type	RC_MIN_QUANT,@object    # @RC_MIN_QUANT
	.comm	RC_MIN_QUANT,4,4
	.type	BufferSize,@object      # @BufferSize
	.comm	BufferSize,8,8
	.type	GOPTargetBufferLevel,@object # @GOPTargetBufferLevel
	.comm	GOPTargetBufferLevel,8,8
	.type	CurrentBufferFullness,@object # @CurrentBufferFullness
	.comm	CurrentBufferFullness,8,8
	.type	TargetBufferLevel,@object # @TargetBufferLevel
	.comm	TargetBufferLevel,8,8
	.type	PreviousBit_Rate,@object # @PreviousBit_Rate
	.comm	PreviousBit_Rate,8,8
	.type	AWp,@object             # @AWp
	.comm	AWp,8,8
	.type	AWb,@object             # @AWb
	.comm	AWb,8,8
	.type	MyInitialQp,@object     # @MyInitialQp
	.comm	MyInitialQp,4,4
	.type	PAverageQp,@object      # @PAverageQp
	.comm	PAverageQp,4,4
	.type	PreviousPictureMAD,@object # @PreviousPictureMAD
	.comm	PreviousPictureMAD,8,8
	.type	MADPictureC1,@object    # @MADPictureC1
	.comm	MADPictureC1,8,8
	.type	MADPictureC2,@object    # @MADPictureC2
	.comm	MADPictureC2,8,8
	.type	PMADPictureC1,@object   # @PMADPictureC1
	.comm	PMADPictureC1,8,8
	.type	PMADPictureC2,@object   # @PMADPictureC2
	.comm	PMADPictureC2,8,8
	.type	PictureRejected,@object # @PictureRejected
	.comm	PictureRejected,84,16
	.type	PPictureMAD,@object     # @PPictureMAD
	.comm	PPictureMAD,168,16
	.type	PictureMAD,@object      # @PictureMAD
	.comm	PictureMAD,168,16
	.type	ReferenceMAD,@object    # @ReferenceMAD
	.comm	ReferenceMAD,168,16
	.type	m_rgRejected,@object    # @m_rgRejected
	.comm	m_rgRejected,84,16
	.type	m_rgQp,@object          # @m_rgQp
	.comm	m_rgQp,168,16
	.type	m_rgRp,@object          # @m_rgRp
	.comm	m_rgRp,168,16
	.type	m_X1,@object            # @m_X1
	.comm	m_X1,8,8
	.type	m_X2,@object            # @m_X2
	.comm	m_X2,8,8
	.type	m_Qc,@object            # @m_Qc
	.comm	m_Qc,4,4
	.type	m_Qstep,@object         # @m_Qstep
	.comm	m_Qstep,8,8
	.type	m_Qp,@object            # @m_Qp
	.comm	m_Qp,4,4
	.type	Pm_Qp,@object           # @Pm_Qp
	.comm	Pm_Qp,4,4
	.type	PreAveMBHeader,@object  # @PreAveMBHeader
	.comm	PreAveMBHeader,4,4
	.type	CurAveMBHeader,@object  # @CurAveMBHeader
	.comm	CurAveMBHeader,4,4
	.type	PPreHeader,@object      # @PPreHeader
	.comm	PPreHeader,4,4
	.type	PreviousQp1,@object     # @PreviousQp1
	.comm	PreviousQp1,4,4
	.type	PreviousQp2,@object     # @PreviousQp2
	.comm	PreviousQp2,4,4
	.type	NumberofBFrames,@object # @NumberofBFrames
	.comm	NumberofBFrames,4,4
	.type	TotalFrameQP,@object    # @TotalFrameQP
	.comm	TotalFrameQP,4,4
	.type	NumberofBasicUnit,@object # @NumberofBasicUnit
	.comm	NumberofBasicUnit,4,4
	.type	PAveHeaderBits1,@object # @PAveHeaderBits1
	.comm	PAveHeaderBits1,4,4
	.type	PAveHeaderBits2,@object # @PAveHeaderBits2
	.comm	PAveHeaderBits2,4,4
	.type	PAveHeaderBits3,@object # @PAveHeaderBits3
	.comm	PAveHeaderBits3,4,4
	.type	PAveFrameQP,@object     # @PAveFrameQP
	.comm	PAveFrameQP,4,4
	.type	TotalNumberofBasicUnit,@object # @TotalNumberofBasicUnit
	.comm	TotalNumberofBasicUnit,4,4
	.type	CodedBasicUnit,@object  # @CodedBasicUnit
	.comm	CodedBasicUnit,4,4
	.type	MINVALUE,@object        # @MINVALUE
	.comm	MINVALUE,8,8
	.type	CurrentFrameMAD,@object # @CurrentFrameMAD
	.comm	CurrentFrameMAD,8,8
	.type	CurrentBUMAD,@object    # @CurrentBUMAD
	.comm	CurrentBUMAD,8,8
	.type	TotalBUMAD,@object      # @TotalBUMAD
	.comm	TotalBUMAD,8,8
	.type	PreviousFrameMAD,@object # @PreviousFrameMAD
	.comm	PreviousFrameMAD,8,8
	.type	m_Hp,@object            # @m_Hp
	.comm	m_Hp,4,4
	.type	m_windowSize,@object    # @m_windowSize
	.comm	m_windowSize,4,4
	.type	MADm_windowSize,@object # @MADm_windowSize
	.comm	MADm_windowSize,4,4
	.type	DDquant,@object         # @DDquant
	.comm	DDquant,4,4
	.type	MBPerRow,@object        # @MBPerRow
	.comm	MBPerRow,4,4
	.type	AverageMADPreviousFrame,@object # @AverageMADPreviousFrame
	.comm	AverageMADPreviousFrame,8,8
	.type	TotalBasicUnitBits,@object # @TotalBasicUnitBits
	.comm	TotalBasicUnitBits,4,4
	.type	QPLastPFrame,@object    # @QPLastPFrame
	.comm	QPLastPFrame,4,4
	.type	QPLastGOP,@object       # @QPLastGOP
	.comm	QPLastGOP,4,4
	.type	Pm_rgQp,@object         # @Pm_rgQp
	.comm	Pm_rgQp,160,16
	.type	Pm_rgRp,@object         # @Pm_rgRp
	.comm	Pm_rgRp,160,16
	.type	Pm_X1,@object           # @Pm_X1
	.comm	Pm_X1,8,8
	.type	Pm_X2,@object           # @Pm_X2
	.comm	Pm_X2,8,8
	.type	Pm_Hp,@object           # @Pm_Hp
	.comm	Pm_Hp,4,4
	.type	FieldQPBuffer,@object   # @FieldQPBuffer
	.comm	FieldQPBuffer,4,4
	.type	FrameQPBuffer,@object   # @FrameQPBuffer
	.comm	FrameQPBuffer,4,4
	.type	FrameAveHeaderBits,@object # @FrameAveHeaderBits
	.comm	FrameAveHeaderBits,4,4
	.type	FieldAveHeaderBits,@object # @FieldAveHeaderBits
	.comm	FieldAveHeaderBits,4,4
	.type	BUPFMAD,@object         # @BUPFMAD
	.comm	BUPFMAD,8,8
	.type	BUCFMAD,@object         # @BUCFMAD
	.comm	BUCFMAD,8,8
	.type	FCBUCFMAD,@object       # @FCBUCFMAD
	.comm	FCBUCFMAD,8,8
	.type	FCBUPFMAD,@object       # @FCBUPFMAD
	.comm	FCBUPFMAD,8,8
	.type	GOPOverdue,@object      # @GOPOverdue
	.comm	GOPOverdue,4,4
	.type	diffyy,@object          # @diffyy
	.comm	diffyy,1024,16
	.type	diffy8,@object          # @diffy8
	.comm	diffy8,1024,16
	.type	best_transform_size,@object # @best_transform_size
	.comm	best_transform_size,16,16
	.type	NoMbPartLessThan8x8Flag,@object # @NoMbPartLessThan8x8Flag
	.comm	NoMbPartLessThan8x8Flag,4,4
	.type	mv8x8,@object           # @mv8x8
	.comm	mv8x8,128,16
	.type	ref8x8,@object          # @ref8x8
	.comm	ref8x8,64,16

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
