	.text
	.file	"decoder.c"
	.globl	decode_one_b8block      # -- Begin function decode_one_b8block
	.p2align	4, 0x90
	.type	decode_one_b8block,@function
decode_one_b8block:                     # @decode_one_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_9
# %bb.1:                                # %func_decode_one_b8block.1
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.1
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_decode_one_b8block.2
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.2
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_decode_one_b8block.8
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.8
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_decode_one_b8block.17
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.17
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_decode_one_b8block.24
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.24
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_decode_one_b8block.35
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.35
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_decode_one_b8block.39
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.39
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_decode_one_b8block.40
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.40
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
	jmp	.LBB0_8
.Lfunc_end0:
	.size	decode_one_b8block, .Lfunc_end0-decode_one_b8block
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block     # -- Begin function Get_Reference_Block
	.p2align	4, 0x90
	.type	Get_Reference_Block,@function
Get_Reference_Block:                    # @Get_Reference_Block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_9
# %bb.1:                                # %func_Get_Reference_Block.9
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	Get_Reference_Block.9
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_Get_Reference_Block.13
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	Get_Reference_Block.13
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_Get_Reference_Block.19
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	Get_Reference_Block.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_Get_Reference_Block.23
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	Get_Reference_Block.23
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_Get_Reference_Block.25
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	Get_Reference_Block.25
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_Get_Reference_Block.26
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	Get_Reference_Block.26
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_Get_Reference_Block.29
	.cfi_def_cfa %rbp, 16
	callq	Get_Reference_Block.29
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_Get_Reference_Block.38
	.cfi_def_cfa %rbp, 16
	callq	Get_Reference_Block.38
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movq	%r15, %rdi
	je	.LBB1_7
	jmp	.LBB1_8
.Lfunc_end1:
	.size	Get_Reference_Block, .Lfunc_end1-Get_Reference_Block
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb           # -- Begin function decode_one_mb
	.p2align	4, 0x90
	.type	decode_one_mb,@function
decode_one_mb:                          # @decode_one_mb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_decode_one_mb.3
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.3
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_decode_one_mb.6
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.6
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	decode_one_mb, .Lfunc_end2-decode_one_mb
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel     # -- Begin function Get_Reference_Pixel
	.p2align	4, 0x90
	.type	Get_Reference_Pixel,@function
Get_Reference_Pixel:                    # @Get_Reference_Pixel
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_9
# %bb.1:                                # %func_Get_Reference_Pixel.4
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.4
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_Get_Reference_Pixel.10
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.10
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_Get_Reference_Pixel.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.14
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_Get_Reference_Pixel.21
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.21
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_Get_Reference_Pixel.43
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.43
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_Get_Reference_Pixel.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.49
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_Get_Reference_Pixel.53
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.53
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_Get_Reference_Pixel.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.56
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
	jmp	.LBB3_8
.Lfunc_end3:
	.size	Get_Reference_Pixel, .Lfunc_end3-Get_Reference_Pixel
	.cfi_endproc
                                        # -- End function
	.globl	UpdateDecoders          # -- Begin function UpdateDecoders
	.p2align	4, 0x90
	.type	UpdateDecoders,@function
UpdateDecoders:                         # @UpdateDecoders
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB4_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB4_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	decs, %rax
	movq	40(%rax), %rdi
	callq	Build_Status_Map
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	40(%rax), %rsi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	callq	Error_Concealment
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	DecOneForthPix
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_1
.LBB4_4:                                # %for.end
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end4:
	.size	UpdateDecoders, .Lfunc_end4-UpdateDecoders
	.cfi_endproc
                                        # -- End function
	.globl	Build_Status_Map        # -- Begin function Build_Status_Map
	.p2align	4, 0x90
	.type	Build_Status_Map,@function
Build_Status_Map:                       # @Build_Status_Map
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_9
# %bb.1:                                # %func_Build_Status_Map.5
	movq	%rbx, %rdi
	callq	Build_Status_Map.5
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_Build_Status_Map.22
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.22
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_Build_Status_Map.27
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.27
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_Build_Status_Map.30
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.30
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_Build_Status_Map.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.45
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_Build_Status_Map.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.47
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_Build_Status_Map.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.50
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_Build_Status_Map.51
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.51
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
	jmp	.LBB5_8
.Lfunc_end5:
	.size	Build_Status_Map, .Lfunc_end5-Build_Status_Map
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment       # -- Begin function Error_Concealment
	.p2align	4, 0x90
	.type	Error_Concealment,@function
Error_Concealment:                      # @Error_Concealment
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_9
# %bb.1:                                # %func_Error_Concealment.7
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Error_Concealment.12
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.12
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Error_Concealment.16
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.16
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Error_Concealment.28
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.28
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_Error_Concealment.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.31
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_Error_Concealment.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.33
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_Error_Concealment.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_Error_Concealment.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.46
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
	jmp	.LBB6_8
.Lfunc_end6:
	.size	Error_Concealment, .Lfunc_end6-Error_Concealment
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix          # -- Begin function DecOneForthPix
	.p2align	4, 0x90
	.type	DecOneForthPix,@function
DecOneForthPix:                         # @DecOneForthPix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_9
# %bb.1:                                # %func_DecOneForthPix.11
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.11
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_DecOneForthPix.15
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.15
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_DecOneForthPix.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.37
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_DecOneForthPix.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.42
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_DecOneForthPix.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.61
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_DecOneForthPix.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.62
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_DecOneForthPix.63
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.63
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_DecOneForthPix.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.64
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB7_7
	jmp	.LBB7_8
.Lfunc_end7:
	.size	DecOneForthPix, .Lfunc_end7-DecOneForthPix
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block # -- Begin function compute_residue_b8block
	.p2align	4, 0x90
	.type	compute_residue_b8block,@function
compute_residue_b8block:                # @compute_residue_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_9
# %bb.1:                                # %func_compute_residue_b8block.18
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.18
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_compute_residue_b8block.20
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.20
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_compute_residue_b8block.32
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.32
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_compute_residue_b8block.34
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.34
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %func_compute_residue_b8block.44
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.44
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_6:                                # %func_compute_residue_b8block.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_7:                                # %func_compute_residue_b8block.55
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.55
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_8:                                # %func_compute_residue_b8block.58
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.58
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB8_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB8_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB8_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB8_7
	jmp	.LBB8_8
.Lfunc_end8:
	.size	compute_residue_b8block, .Lfunc_end8-compute_residue_b8block
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_mb      # -- Begin function compute_residue_mb
	.p2align	4, 0x90
	.type	compute_residue_mb,@function
compute_residue_mb:                     # @compute_residue_mb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %esi
	xorl	%edi, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$1, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$2, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$3, %edi
	callq	compute_residue_b8block
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end9:
	.size	compute_residue_mb, .Lfunc_end9-compute_residue_mb
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error           # -- Begin function Conceal_Error
	.p2align	4, 0x90
	.type	Conceal_Error,@function
Conceal_Error:                          # @Conceal_Error
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movl	%edx, %r12d
	movl	%esi, %r13d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_9
# %bb.1:                                # %func_Conceal_Error.41
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.41
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_Conceal_Error.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.48
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_Conceal_Error.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.52
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_Conceal_Error.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.57
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_Conceal_Error.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.59
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_Conceal_Error.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.60
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_Conceal_Error.65
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.65
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_Conceal_Error.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.66
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
	jmp	.LBB10_8
.Lfunc_end10:
	.size	Conceal_Error, .Lfunc_end10-Conceal_Error
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.1    # -- Begin function decode_one_b8block.1
	.p2align	4, 0x90
	.type	decode_one_b8block.1,@function
decode_one_b8block.1:                   # @decode_one_b8block.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1650544841, -84(%rbp)  # imm = 0x626150C9
	movl	%edi, -48(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB11_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB11_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB11_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB11_4:                               # %for.cond9
                                        #   Parent Loop BB11_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB11_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB11_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB11_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_4
.LBB11_7:                               # %for.end
                                        #   in Loop: Header=BB11_2 Depth=1
	jmp	.LBB11_8
.LBB11_8:                               # %for.inc26
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_2
.LBB11_9:                               # %for.end28
	jmp	.LBB11_96
.LBB11_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB11_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB11_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB11_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB11_31
.LBB11_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB11_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB11_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB11_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB11_17:                              # %for.cond40
                                        #   Parent Loop BB11_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB11_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB11_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB11_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_17
.LBB11_20:                              # %for.end49
                                        #   in Loop: Header=BB11_15 Depth=1
	jmp	.LBB11_21
.LBB11_21:                              # %for.inc50
                                        #   in Loop: Header=BB11_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_15
.LBB11_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB11_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB11_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB11_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB11_25:                              # %for.cond56
                                        #   Parent Loop BB11_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB11_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB11_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB11_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_25
.LBB11_28:                              # %for.end71
                                        #   in Loop: Header=BB11_23 Depth=1
	jmp	.LBB11_29
.LBB11_29:                              # %for.inc72
                                        #   in Loop: Header=BB11_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_23
.LBB11_30:                              # %for.end74
	jmp	.LBB11_60
.LBB11_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB11_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB11_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB11_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB11_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB11_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB11_36:                              # %for.cond83
                                        #   Parent Loop BB11_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB11_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB11_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB11_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_36
.LBB11_39:                              # %for.end120
                                        #   in Loop: Header=BB11_34 Depth=1
	jmp	.LBB11_40
.LBB11_40:                              # %for.inc121
                                        #   in Loop: Header=BB11_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_34
.LBB11_41:                              # %for.end123
	jmp	.LBB11_51
.LBB11_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB11_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB11_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB11_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB11_45:                              # %for.cond129
                                        #   Parent Loop BB11_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB11_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB11_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB11_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_45
.LBB11_48:                              # %for.end145
                                        #   in Loop: Header=BB11_43 Depth=1
	jmp	.LBB11_49
.LBB11_49:                              # %for.inc146
                                        #   in Loop: Header=BB11_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_43
.LBB11_50:                              # %for.end148
	jmp	.LBB11_51
.LBB11_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB11_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB11_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB11_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB11_54:                              # %for.cond153
                                        #   Parent Loop BB11_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB11_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB11_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB11_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_54
.LBB11_57:                              # %for.end167
                                        #   in Loop: Header=BB11_52 Depth=1
	jmp	.LBB11_58
.LBB11_58:                              # %for.inc168
                                        #   in Loop: Header=BB11_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_52
.LBB11_59:                              # %for.end170
	jmp	.LBB11_60
.LBB11_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB11_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB11_66
.LBB11_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB11_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB11_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB11_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB11_86
.LBB11_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB11_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_69 Depth 2
                                        #       Child Loop BB11_74 Depth 3
                                        #         Child Loop BB11_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB11_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB11_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB11_69:                              # %for.cond197
                                        #   Parent Loop BB11_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB11_74 Depth 3
                                        #         Child Loop BB11_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB11_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB11_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB11_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB11_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB11_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB11_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB11_73:                              # %if.end218
                                        #   in Loop: Header=BB11_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB11_74:                              # %for.cond233
                                        #   Parent Loop BB11_67 Depth=1
                                        #     Parent Loop BB11_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB11_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB11_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB11_74 Depth=3
	movl	$0, -4(%rbp)
.LBB11_76:                              # %for.cond237
                                        #   Parent Loop BB11_67 Depth=1
                                        #     Parent Loop BB11_69 Depth=2
                                        #       Parent Loop BB11_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB11_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB11_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB11_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_76
.LBB11_79:                              # %for.end269
                                        #   in Loop: Header=BB11_74 Depth=3
	jmp	.LBB11_80
.LBB11_80:                              # %for.inc270
                                        #   in Loop: Header=BB11_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_74
.LBB11_81:                              # %for.end272
                                        #   in Loop: Header=BB11_69 Depth=2
	jmp	.LBB11_82
.LBB11_82:                              # %for.inc273
                                        #   in Loop: Header=BB11_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_69
.LBB11_83:                              # %for.end275
                                        #   in Loop: Header=BB11_67 Depth=1
	jmp	.LBB11_84
.LBB11_84:                              # %for.inc276
                                        #   in Loop: Header=BB11_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_67
.LBB11_85:                              # %for.end278
	jmp	.LBB11_95
.LBB11_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB11_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB11_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB11_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB11_89:                              # %for.cond284
                                        #   Parent Loop BB11_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB11_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB11_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB11_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_89
.LBB11_92:                              # %for.end310
                                        #   in Loop: Header=BB11_87 Depth=1
	jmp	.LBB11_93
.LBB11_93:                              # %for.inc311
                                        #   in Loop: Header=BB11_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_87
.LBB11_94:                              # %for.end313
	jmp	.LBB11_95
.LBB11_95:                              # %if.end314
	jmp	.LBB11_96
.LBB11_96:                              # %if.end315
	cmpl	$1650544841, -84(%rbp)  # imm = 0x626150C9
	jne	.LBB11_98
.LBB11_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_97
.Lfunc_end11:
	.size	decode_one_b8block.1, .Lfunc_end11-decode_one_b8block.1
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.2    # -- Begin function decode_one_b8block.2
	.p2align	4, 0x90
	.type	decode_one_b8block.2,@function
decode_one_b8block.2:                   # @decode_one_b8block.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$866629439, -84(%rbp)   # imm = 0x33A7B73F
	movl	%edi, -48(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB12_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB12_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB12_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB12_4:                               # %for.cond9
                                        #   Parent Loop BB12_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB12_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB12_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB12_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_4
.LBB12_7:                               # %for.end
                                        #   in Loop: Header=BB12_2 Depth=1
	jmp	.LBB12_8
.LBB12_8:                               # %for.inc26
                                        #   in Loop: Header=BB12_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_2
.LBB12_9:                               # %for.end28
	jmp	.LBB12_96
.LBB12_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB12_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB12_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB12_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB12_31
.LBB12_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB12_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB12_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB12_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB12_17:                              # %for.cond40
                                        #   Parent Loop BB12_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB12_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB12_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB12_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_17
.LBB12_20:                              # %for.end49
                                        #   in Loop: Header=BB12_15 Depth=1
	jmp	.LBB12_21
.LBB12_21:                              # %for.inc50
                                        #   in Loop: Header=BB12_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_15
.LBB12_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB12_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB12_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB12_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB12_25:                              # %for.cond56
                                        #   Parent Loop BB12_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB12_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB12_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB12_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_25
.LBB12_28:                              # %for.end71
                                        #   in Loop: Header=BB12_23 Depth=1
	jmp	.LBB12_29
.LBB12_29:                              # %for.inc72
                                        #   in Loop: Header=BB12_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_23
.LBB12_30:                              # %for.end74
	jmp	.LBB12_60
.LBB12_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB12_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB12_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB12_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB12_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB12_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB12_36:                              # %for.cond83
                                        #   Parent Loop BB12_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB12_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB12_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB12_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_36
.LBB12_39:                              # %for.end120
                                        #   in Loop: Header=BB12_34 Depth=1
	jmp	.LBB12_40
.LBB12_40:                              # %for.inc121
                                        #   in Loop: Header=BB12_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_34
.LBB12_41:                              # %for.end123
	jmp	.LBB12_51
.LBB12_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB12_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB12_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB12_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB12_45:                              # %for.cond129
                                        #   Parent Loop BB12_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB12_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB12_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB12_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_45
.LBB12_48:                              # %for.end145
                                        #   in Loop: Header=BB12_43 Depth=1
	jmp	.LBB12_49
.LBB12_49:                              # %for.inc146
                                        #   in Loop: Header=BB12_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_43
.LBB12_50:                              # %for.end148
	jmp	.LBB12_51
.LBB12_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB12_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB12_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB12_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB12_54:                              # %for.cond153
                                        #   Parent Loop BB12_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB12_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB12_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB12_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_54
.LBB12_57:                              # %for.end167
                                        #   in Loop: Header=BB12_52 Depth=1
	jmp	.LBB12_58
.LBB12_58:                              # %for.inc168
                                        #   in Loop: Header=BB12_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_52
.LBB12_59:                              # %for.end170
	jmp	.LBB12_60
.LBB12_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB12_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB12_66
.LBB12_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB12_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB12_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB12_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB12_86
.LBB12_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB12_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_69 Depth 2
                                        #       Child Loop BB12_74 Depth 3
                                        #         Child Loop BB12_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB12_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB12_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB12_69:                              # %for.cond197
                                        #   Parent Loop BB12_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_74 Depth 3
                                        #         Child Loop BB12_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB12_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB12_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB12_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB12_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB12_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB12_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB12_73:                              # %if.end218
                                        #   in Loop: Header=BB12_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB12_74:                              # %for.cond233
                                        #   Parent Loop BB12_67 Depth=1
                                        #     Parent Loop BB12_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB12_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB12_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB12_74 Depth=3
	movl	$0, -8(%rbp)
.LBB12_76:                              # %for.cond237
                                        #   Parent Loop BB12_67 Depth=1
                                        #     Parent Loop BB12_69 Depth=2
                                        #       Parent Loop BB12_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB12_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB12_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB12_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_76
.LBB12_79:                              # %for.end269
                                        #   in Loop: Header=BB12_74 Depth=3
	jmp	.LBB12_80
.LBB12_80:                              # %for.inc270
                                        #   in Loop: Header=BB12_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_74
.LBB12_81:                              # %for.end272
                                        #   in Loop: Header=BB12_69 Depth=2
	jmp	.LBB12_82
.LBB12_82:                              # %for.inc273
                                        #   in Loop: Header=BB12_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_69
.LBB12_83:                              # %for.end275
                                        #   in Loop: Header=BB12_67 Depth=1
	jmp	.LBB12_84
.LBB12_84:                              # %for.inc276
                                        #   in Loop: Header=BB12_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_67
.LBB12_85:                              # %for.end278
	jmp	.LBB12_95
.LBB12_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB12_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB12_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB12_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB12_89:                              # %for.cond284
                                        #   Parent Loop BB12_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB12_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB12_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB12_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_89
.LBB12_92:                              # %for.end310
                                        #   in Loop: Header=BB12_87 Depth=1
	jmp	.LBB12_93
.LBB12_93:                              # %for.inc311
                                        #   in Loop: Header=BB12_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_87
.LBB12_94:                              # %for.end313
	jmp	.LBB12_95
.LBB12_95:                              # %if.end314
	jmp	.LBB12_96
.LBB12_96:                              # %if.end315
	cmpl	$866629439, -84(%rbp)   # imm = 0x33A7B73F
	jne	.LBB12_98
.LBB12_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_97
.Lfunc_end12:
	.size	decode_one_b8block.2, .Lfunc_end12-decode_one_b8block.2
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb.3         # -- Begin function decode_one_mb.3
	.p2align	4, 0x90
	.type	decode_one_mb.3,@function
decode_one_mb.3:                        # @decode_one_mb.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$436636123, -4(%rbp)    # imm = 0x1A0689DB
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$436636123, -4(%rbp)    # imm = 0x1A0689DB
	jne	.LBB13_2
.LBB13_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_1
.Lfunc_end13:
	.size	decode_one_mb.3, .Lfunc_end13-decode_one_mb.3
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.4   # -- Begin function Get_Reference_Pixel.4
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.4,@function
Get_Reference_Pixel.4:                  # @Get_Reference_Pixel.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1969745262, -104(%rbp) # imm = 0x7567ED6E
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB14_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB14_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB14_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB14_5
.LBB14_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB14_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB14_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB14_11
.LBB14_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB14_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB14_10
.LBB14_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB14_10:                              # %cond.end14
.LBB14_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB14_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB14_14
.LBB14_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB14_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB14_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB14_20
.LBB14_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB14_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB14_19
.LBB14_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB14_19:                              # %cond.end29
.LBB14_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_332
.LBB14_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB14_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB14_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB14_25
.LBB14_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB14_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB14_31
.LBB14_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB14_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB14_30
.LBB14_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB14_30:                              # %cond.end52
.LBB14_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB14_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB14_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_36
.LBB14_35:                              # %cond.false61
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_36:                              # %cond.end63
                                        #   in Loop: Header=BB14_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB14_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_42
.LBB14_38:                              # %cond.false68
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_41
.LBB14_40:                              # %cond.false73
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_41:                              # %cond.end75
                                        #   in Loop: Header=BB14_32 Depth=1
.LBB14_42:                              # %cond.end77
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_32
.LBB14_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_47
.LBB14_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB14_53
.LBB14_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_52
.LBB14_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_52:                              # %cond.end113
.LBB14_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB14_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB14_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB14_57
.LBB14_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB14_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB14_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB14_63
.LBB14_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB14_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB14_62
.LBB14_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB14_62:                              # %cond.end136
.LBB14_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB14_76
.LBB14_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB14_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB14_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB14_68
.LBB14_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB14_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB14_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB14_74
.LBB14_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB14_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB14_73
.LBB14_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB14_73:                              # %cond.end169
.LBB14_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB14_75:                              # %if.end
	jmp	.LBB14_76
.LBB14_76:                              # %if.end178
	jmp	.LBB14_331
.LBB14_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB14_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB14_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB14_81
.LBB14_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB14_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB14_87
.LBB14_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB14_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB14_86
.LBB14_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB14_86:                              # %cond.end197
.LBB14_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB14_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB14_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_92
.LBB14_91:                              # %cond.false209
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_92:                              # %cond.end211
                                        #   in Loop: Header=BB14_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB14_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_98
.LBB14_94:                              # %cond.false216
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_97
.LBB14_96:                              # %cond.false221
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_97:                              # %cond.end223
                                        #   in Loop: Header=BB14_88 Depth=1
.LBB14_98:                              # %cond.end225
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_88
.LBB14_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_103
.LBB14_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB14_109
.LBB14_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_108
.LBB14_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_108:                             # %cond.end266
.LBB14_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB14_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB14_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB14_113
.LBB14_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB14_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB14_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB14_119
.LBB14_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB14_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB14_118
.LBB14_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB14_118:                             # %cond.end287
.LBB14_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB14_132
.LBB14_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB14_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB14_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB14_124
.LBB14_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB14_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB14_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB14_130
.LBB14_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB14_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB14_129
.LBB14_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB14_129:                             # %cond.end320
.LBB14_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB14_131:                             # %if.end331
	jmp	.LBB14_132
.LBB14_132:                             # %if.end332
	jmp	.LBB14_330
.LBB14_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB14_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB14_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB14_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_139
.LBB14_138:                             # %cond.false345
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_139:                             # %cond.end347
                                        #   in Loop: Header=BB14_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB14_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_145
.LBB14_141:                             # %cond.false352
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_144
.LBB14_143:                             # %cond.false357
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_144:                             # %cond.end359
                                        #   in Loop: Header=BB14_135 Depth=1
.LBB14_145:                             # %cond.end361
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB14_146:                             # %for.cond363
                                        #   Parent Loop BB14_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB14_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB14_150
.LBB14_149:                             # %cond.false371
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_150:                             # %cond.end373
                                        #   in Loop: Header=BB14_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB14_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB14_156
.LBB14_152:                             # %cond.false378
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB14_155
.LBB14_154:                             # %cond.false383
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_155:                             # %cond.end385
                                        #   in Loop: Header=BB14_146 Depth=2
.LBB14_156:                             # %cond.end387
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_146
.LBB14_158:                             # %for.end401
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_135
.LBB14_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB14_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB14_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB14_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB14_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_161
.LBB14_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_167
.LBB14_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB14_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB14_173
.LBB14_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_172
.LBB14_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB14_172:                             # %cond.end449
.LBB14_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB14_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_177
.LBB14_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB14_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB14_183
.LBB14_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_182
.LBB14_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_182:                             # %cond.end486
.LBB14_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB14_196
.LBB14_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB14_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_188
.LBB14_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB14_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB14_194
.LBB14_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_193
.LBB14_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_193:                             # %cond.end526
.LBB14_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB14_195:                             # %if.end532
	jmp	.LBB14_196
.LBB14_196:                             # %if.end533
	jmp	.LBB14_329
.LBB14_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB14_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB14_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB14_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_203
.LBB14_202:                             # %cond.false546
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_203:                             # %cond.end548
                                        #   in Loop: Header=BB14_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB14_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_209
.LBB14_205:                             # %cond.false553
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_208
.LBB14_207:                             # %cond.false558
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_208:                             # %cond.end560
                                        #   in Loop: Header=BB14_199 Depth=1
.LBB14_209:                             # %cond.end562
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB14_210:                             # %for.cond564
                                        #   Parent Loop BB14_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB14_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB14_214
.LBB14_213:                             # %cond.false572
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_214:                             # %cond.end574
                                        #   in Loop: Header=BB14_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB14_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB14_220
.LBB14_216:                             # %cond.false579
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB14_219
.LBB14_218:                             # %cond.false584
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_219:                             # %cond.end586
                                        #   in Loop: Header=BB14_210 Depth=2
.LBB14_220:                             # %cond.end588
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_210
.LBB14_222:                             # %for.end602
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_199
.LBB14_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB14_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB14_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB14_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB14_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_225
.LBB14_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_231
.LBB14_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB14_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB14_237
.LBB14_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_236
.LBB14_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB14_236:                             # %cond.end650
.LBB14_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB14_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_241
.LBB14_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB14_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB14_247
.LBB14_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_246
.LBB14_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_246:                             # %cond.end687
.LBB14_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB14_258
.LBB14_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_251
.LBB14_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB14_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB14_257
.LBB14_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_256
.LBB14_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_256:                             # %cond.end724
.LBB14_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB14_258:                             # %if.end730
	jmp	.LBB14_328
.LBB14_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB14_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB14_262
.LBB14_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB14_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB14_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB14_265
.LBB14_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB14_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB14_271
.LBB14_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB14_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB14_270
.LBB14_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB14_270:                             # %cond.end753
.LBB14_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB14_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB14_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_276
.LBB14_275:                             # %cond.false765
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_276:                             # %cond.end767
                                        #   in Loop: Header=BB14_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB14_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_282
.LBB14_278:                             # %cond.false772
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_281
.LBB14_280:                             # %cond.false777
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_281:                             # %cond.end779
                                        #   in Loop: Header=BB14_272 Depth=1
.LBB14_282:                             # %cond.end781
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_272
.LBB14_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_287
.LBB14_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB14_293
.LBB14_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_292
.LBB14_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_292:                             # %cond.end822
.LBB14_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB14_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB14_296
.LBB14_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB14_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB14_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB14_299
.LBB14_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB14_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB14_305
.LBB14_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB14_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB14_304
.LBB14_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB14_304:                             # %cond.end847
.LBB14_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB14_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB14_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_310
.LBB14_309:                             # %cond.false859
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_310:                             # %cond.end861
                                        #   in Loop: Header=BB14_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB14_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_316
.LBB14_312:                             # %cond.false866
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_315
.LBB14_314:                             # %cond.false871
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_315:                             # %cond.end873
                                        #   in Loop: Header=BB14_306 Depth=1
.LBB14_316:                             # %cond.end875
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_306
.LBB14_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_321
.LBB14_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB14_327
.LBB14_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_326
.LBB14_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_326:                             # %cond.end916
.LBB14_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB14_328:                             # %if.end922
	jmp	.LBB14_329
.LBB14_329:                             # %if.end923
	jmp	.LBB14_330
.LBB14_330:                             # %if.end924
	jmp	.LBB14_331
.LBB14_331:                             # %if.end925
	jmp	.LBB14_332
.LBB14_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1969745262, -104(%rbp) # imm = 0x7567ED6E
	jne	.LBB14_334
.LBB14_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_333
.Lfunc_end14:
	.size	Get_Reference_Pixel.4, .Lfunc_end14-Get_Reference_Pixel.4
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.5
.LCPI15_0:
	.quad	4636737291354636288     # double 100
.LCPI15_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.5
	.p2align	4, 0x90
	.type	Build_Status_Map.5,@function
Build_Status_Map.5:                     # @Build_Status_Map.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1876316334, -36(%rbp)  # imm = 0x6FD650AE
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB15_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB15_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -8(%rbp)
.LBB15_3:                               # %for.cond2
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB15_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB15_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB15_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB15_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB15_13
.LBB15_6:                               # %if.then
                                        #   in Loop: Header=BB15_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI15_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI15_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB15_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB15_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB15_8:                               # %if.end
                                        #   in Loop: Header=BB15_3 Depth=2
	callq	rand
	vmovsd	.LCPI15_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI15_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB15_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB15_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB15_10:                              # %if.end20
                                        #   in Loop: Header=BB15_3 Depth=2
	callq	rand
	vmovsd	.LCPI15_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI15_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB15_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB15_3 Depth=2
	movl	$1, -4(%rbp)
.LBB15_12:                              # %if.end29
                                        #   in Loop: Header=BB15_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB15_13:                              # %if.end30
                                        #   in Loop: Header=BB15_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB15_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB15_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB15_18
.LBB15_15:                              # %if.else
                                        #   in Loop: Header=BB15_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB15_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB15_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB15_17:                              # %if.end49
                                        #   in Loop: Header=BB15_3 Depth=2
	jmp	.LBB15_18
.LBB15_18:                              # %if.end50
                                        #   in Loop: Header=BB15_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB15_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_3
.LBB15_20:                              # %for.end
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_21
.LBB15_21:                              # %for.inc53
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_1
.LBB15_22:                              # %for.end55
	cmpl	$1876316334, -36(%rbp)  # imm = 0x6FD650AE
	jne	.LBB15_24
.LBB15_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_23
.Lfunc_end15:
	.size	Build_Status_Map.5, .Lfunc_end15-Build_Status_Map.5
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb.6         # -- Begin function decode_one_mb.6
	.p2align	4, 0x90
	.type	decode_one_mb.6,@function
decode_one_mb.6:                        # @decode_one_mb.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$816558126, -4(%rbp)    # imm = 0x30ABB02E
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$816558126, -4(%rbp)    # imm = 0x30ABB02E
	jne	.LBB16_2
.LBB16_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_1
.Lfunc_end16:
	.size	decode_one_mb.6, .Lfunc_end16-decode_one_mb.6
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.7     # -- Begin function Error_Concealment.7
	.p2align	4, 0x90
	.type	Error_Concealment.7,@function
Error_Concealment.7:                    # @Error_Concealment.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$128865848, -16(%rbp)   # imm = 0x7AE5638
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB17_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB17_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	$0, -4(%rbp)
.LBB17_3:                               # %for.cond2
                                        #   Parent Loop BB17_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB17_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB17_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB17_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB17_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB17_6:                               # %if.end
                                        #   in Loop: Header=BB17_3 Depth=2
	jmp	.LBB17_7
.LBB17_7:                               # %for.inc
                                        #   in Loop: Header=BB17_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_3
.LBB17_8:                               # %for.end
                                        #   in Loop: Header=BB17_1 Depth=1
	jmp	.LBB17_9
.LBB17_9:                               # %for.inc7
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_1
.LBB17_10:                              # %for.end9
	cmpl	$128865848, -16(%rbp)   # imm = 0x7AE5638
	jne	.LBB17_12
.LBB17_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_11
.Lfunc_end17:
	.size	Error_Concealment.7, .Lfunc_end17-Error_Concealment.7
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.8    # -- Begin function decode_one_b8block.8
	.p2align	4, 0x90
	.type	decode_one_b8block.8,@function
decode_one_b8block.8:                   # @decode_one_b8block.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$407043529, -84(%rbp)   # imm = 0x1842FDC9
	movl	%edi, -48(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB18_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB18_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB18_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB18_4:                               # %for.cond9
                                        #   Parent Loop BB18_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB18_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB18_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB18_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_4
.LBB18_7:                               # %for.end
                                        #   in Loop: Header=BB18_2 Depth=1
	jmp	.LBB18_8
.LBB18_8:                               # %for.inc26
                                        #   in Loop: Header=BB18_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_2
.LBB18_9:                               # %for.end28
	jmp	.LBB18_96
.LBB18_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB18_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB18_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB18_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB18_31
.LBB18_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB18_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB18_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB18_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB18_17:                              # %for.cond40
                                        #   Parent Loop BB18_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB18_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB18_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB18_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_17
.LBB18_20:                              # %for.end49
                                        #   in Loop: Header=BB18_15 Depth=1
	jmp	.LBB18_21
.LBB18_21:                              # %for.inc50
                                        #   in Loop: Header=BB18_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_15
.LBB18_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB18_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB18_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB18_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB18_25:                              # %for.cond56
                                        #   Parent Loop BB18_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB18_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB18_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB18_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_25
.LBB18_28:                              # %for.end71
                                        #   in Loop: Header=BB18_23 Depth=1
	jmp	.LBB18_29
.LBB18_29:                              # %for.inc72
                                        #   in Loop: Header=BB18_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_23
.LBB18_30:                              # %for.end74
	jmp	.LBB18_60
.LBB18_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB18_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB18_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB18_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB18_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB18_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB18_36:                              # %for.cond83
                                        #   Parent Loop BB18_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB18_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB18_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB18_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_36
.LBB18_39:                              # %for.end120
                                        #   in Loop: Header=BB18_34 Depth=1
	jmp	.LBB18_40
.LBB18_40:                              # %for.inc121
                                        #   in Loop: Header=BB18_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_34
.LBB18_41:                              # %for.end123
	jmp	.LBB18_51
.LBB18_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB18_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB18_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB18_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB18_45:                              # %for.cond129
                                        #   Parent Loop BB18_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB18_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB18_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB18_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_45
.LBB18_48:                              # %for.end145
                                        #   in Loop: Header=BB18_43 Depth=1
	jmp	.LBB18_49
.LBB18_49:                              # %for.inc146
                                        #   in Loop: Header=BB18_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_43
.LBB18_50:                              # %for.end148
	jmp	.LBB18_51
.LBB18_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB18_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB18_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB18_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB18_54:                              # %for.cond153
                                        #   Parent Loop BB18_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB18_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB18_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB18_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_54
.LBB18_57:                              # %for.end167
                                        #   in Loop: Header=BB18_52 Depth=1
	jmp	.LBB18_58
.LBB18_58:                              # %for.inc168
                                        #   in Loop: Header=BB18_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_52
.LBB18_59:                              # %for.end170
	jmp	.LBB18_60
.LBB18_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB18_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB18_66
.LBB18_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB18_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB18_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB18_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB18_86
.LBB18_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB18_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_69 Depth 2
                                        #       Child Loop BB18_74 Depth 3
                                        #         Child Loop BB18_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB18_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB18_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB18_69:                              # %for.cond197
                                        #   Parent Loop BB18_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_74 Depth 3
                                        #         Child Loop BB18_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB18_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB18_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB18_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB18_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB18_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB18_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB18_73:                              # %if.end218
                                        #   in Loop: Header=BB18_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB18_74:                              # %for.cond233
                                        #   Parent Loop BB18_67 Depth=1
                                        #     Parent Loop BB18_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB18_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB18_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB18_74 Depth=3
	movl	$0, -4(%rbp)
.LBB18_76:                              # %for.cond237
                                        #   Parent Loop BB18_67 Depth=1
                                        #     Parent Loop BB18_69 Depth=2
                                        #       Parent Loop BB18_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB18_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB18_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB18_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_76
.LBB18_79:                              # %for.end269
                                        #   in Loop: Header=BB18_74 Depth=3
	jmp	.LBB18_80
.LBB18_80:                              # %for.inc270
                                        #   in Loop: Header=BB18_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_74
.LBB18_81:                              # %for.end272
                                        #   in Loop: Header=BB18_69 Depth=2
	jmp	.LBB18_82
.LBB18_82:                              # %for.inc273
                                        #   in Loop: Header=BB18_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_69
.LBB18_83:                              # %for.end275
                                        #   in Loop: Header=BB18_67 Depth=1
	jmp	.LBB18_84
.LBB18_84:                              # %for.inc276
                                        #   in Loop: Header=BB18_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_67
.LBB18_85:                              # %for.end278
	jmp	.LBB18_95
.LBB18_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB18_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB18_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB18_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB18_89:                              # %for.cond284
                                        #   Parent Loop BB18_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB18_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB18_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB18_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_89
.LBB18_92:                              # %for.end310
                                        #   in Loop: Header=BB18_87 Depth=1
	jmp	.LBB18_93
.LBB18_93:                              # %for.inc311
                                        #   in Loop: Header=BB18_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_87
.LBB18_94:                              # %for.end313
	jmp	.LBB18_95
.LBB18_95:                              # %if.end314
	jmp	.LBB18_96
.LBB18_96:                              # %if.end315
	cmpl	$407043529, -84(%rbp)   # imm = 0x1842FDC9
	jne	.LBB18_98
.LBB18_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_97
.Lfunc_end18:
	.size	decode_one_b8block.8, .Lfunc_end18-decode_one_b8block.8
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.9   # -- Begin function Get_Reference_Block.9
	.p2align	4, 0x90
	.type	Get_Reference_Block.9,@function
Get_Reference_Block.9:                  # @Get_Reference_Block.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$157100417, -32(%rbp)   # imm = 0x95D2981
	movq	%rdi, -56(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -48(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB19_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB19_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -4(%rbp)
.LBB19_3:                               # %for.cond5
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_3
.LBB19_6:                               # %for.end
                                        #   in Loop: Header=BB19_1 Depth=1
	jmp	.LBB19_7
.LBB19_7:                               # %for.inc14
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_1
.LBB19_8:                               # %for.end16
	cmpl	$157100417, -32(%rbp)   # imm = 0x95D2981
	jne	.LBB19_10
.LBB19_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_9
.Lfunc_end19:
	.size	Get_Reference_Block.9, .Lfunc_end19-Get_Reference_Block.9
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.10  # -- Begin function Get_Reference_Pixel.10
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.10,@function
Get_Reference_Pixel.10:                 # @Get_Reference_Pixel.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1304908736, -108(%rbp) # imm = 0x4DC753C0
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB20_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB20_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB20_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB20_5
.LBB20_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB20_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB20_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB20_11
.LBB20_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB20_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB20_10
.LBB20_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB20_10:                              # %cond.end14
.LBB20_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB20_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB20_14
.LBB20_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB20_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB20_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB20_20
.LBB20_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB20_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB20_19
.LBB20_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB20_19:                              # %cond.end29
.LBB20_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_332
.LBB20_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB20_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB20_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB20_25
.LBB20_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB20_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB20_31
.LBB20_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB20_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB20_30
.LBB20_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB20_30:                              # %cond.end52
.LBB20_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB20_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB20_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB20_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB20_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB20_36
.LBB20_35:                              # %cond.false61
                                        #   in Loop: Header=BB20_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB20_36:                              # %cond.end63
                                        #   in Loop: Header=BB20_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB20_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB20_42
.LBB20_38:                              # %cond.false68
                                        #   in Loop: Header=BB20_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB20_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB20_41
.LBB20_40:                              # %cond.false73
                                        #   in Loop: Header=BB20_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB20_41:                              # %cond.end75
                                        #   in Loop: Header=BB20_32 Depth=1
.LBB20_42:                              # %cond.end77
                                        #   in Loop: Header=BB20_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB20_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_32
.LBB20_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB20_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_47
.LBB20_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB20_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB20_53
.LBB20_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB20_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_52
.LBB20_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB20_52:                              # %cond.end113
.LBB20_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB20_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB20_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB20_57
.LBB20_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB20_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB20_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB20_63
.LBB20_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB20_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB20_62
.LBB20_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB20_62:                              # %cond.end136
.LBB20_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB20_76
.LBB20_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB20_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB20_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB20_68
.LBB20_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB20_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB20_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB20_74
.LBB20_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB20_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB20_73
.LBB20_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB20_73:                              # %cond.end169
.LBB20_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB20_75:                              # %if.end
	jmp	.LBB20_76
.LBB20_76:                              # %if.end178
	jmp	.LBB20_331
.LBB20_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB20_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB20_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB20_81
.LBB20_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB20_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB20_87
.LBB20_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB20_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB20_86
.LBB20_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB20_86:                              # %cond.end197
.LBB20_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB20_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB20_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB20_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB20_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB20_92
.LBB20_91:                              # %cond.false209
                                        #   in Loop: Header=BB20_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB20_92:                              # %cond.end211
                                        #   in Loop: Header=BB20_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB20_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB20_98
.LBB20_94:                              # %cond.false216
                                        #   in Loop: Header=BB20_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB20_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB20_97
.LBB20_96:                              # %cond.false221
                                        #   in Loop: Header=BB20_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB20_97:                              # %cond.end223
                                        #   in Loop: Header=BB20_88 Depth=1
.LBB20_98:                              # %cond.end225
                                        #   in Loop: Header=BB20_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB20_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_88
.LBB20_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB20_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_103
.LBB20_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB20_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB20_109
.LBB20_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB20_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_108
.LBB20_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB20_108:                             # %cond.end266
.LBB20_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB20_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB20_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB20_113
.LBB20_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB20_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB20_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB20_119
.LBB20_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB20_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB20_118
.LBB20_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB20_118:                             # %cond.end287
.LBB20_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB20_132
.LBB20_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB20_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB20_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB20_124
.LBB20_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB20_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB20_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB20_130
.LBB20_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB20_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB20_129
.LBB20_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB20_129:                             # %cond.end320
.LBB20_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB20_131:                             # %if.end331
	jmp	.LBB20_132
.LBB20_132:                             # %if.end332
	jmp	.LBB20_330
.LBB20_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB20_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB20_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB20_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB20_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB20_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB20_139
.LBB20_138:                             # %cond.false345
                                        #   in Loop: Header=BB20_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB20_139:                             # %cond.end347
                                        #   in Loop: Header=BB20_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB20_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB20_145
.LBB20_141:                             # %cond.false352
                                        #   in Loop: Header=BB20_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB20_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB20_144
.LBB20_143:                             # %cond.false357
                                        #   in Loop: Header=BB20_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB20_144:                             # %cond.end359
                                        #   in Loop: Header=BB20_135 Depth=1
.LBB20_145:                             # %cond.end361
                                        #   in Loop: Header=BB20_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB20_146:                             # %for.cond363
                                        #   Parent Loop BB20_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB20_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB20_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB20_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB20_150
.LBB20_149:                             # %cond.false371
                                        #   in Loop: Header=BB20_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB20_150:                             # %cond.end373
                                        #   in Loop: Header=BB20_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB20_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB20_156
.LBB20_152:                             # %cond.false378
                                        #   in Loop: Header=BB20_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB20_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB20_155
.LBB20_154:                             # %cond.false383
                                        #   in Loop: Header=BB20_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB20_155:                             # %cond.end385
                                        #   in Loop: Header=BB20_146 Depth=2
.LBB20_156:                             # %cond.end387
                                        #   in Loop: Header=BB20_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB20_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_146
.LBB20_158:                             # %for.end401
                                        #   in Loop: Header=BB20_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB20_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_135
.LBB20_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB20_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB20_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB20_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB20_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_161
.LBB20_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB20_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_167
.LBB20_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB20_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB20_173
.LBB20_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB20_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_172
.LBB20_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB20_172:                             # %cond.end449
.LBB20_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB20_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB20_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_177
.LBB20_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB20_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB20_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB20_183
.LBB20_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB20_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_182
.LBB20_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB20_182:                             # %cond.end486
.LBB20_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB20_196
.LBB20_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB20_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB20_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_188
.LBB20_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB20_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB20_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB20_194
.LBB20_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB20_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_193
.LBB20_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB20_193:                             # %cond.end526
.LBB20_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB20_195:                             # %if.end532
	jmp	.LBB20_196
.LBB20_196:                             # %if.end533
	jmp	.LBB20_329
.LBB20_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB20_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB20_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB20_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB20_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB20_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB20_203
.LBB20_202:                             # %cond.false546
                                        #   in Loop: Header=BB20_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB20_203:                             # %cond.end548
                                        #   in Loop: Header=BB20_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB20_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB20_209
.LBB20_205:                             # %cond.false553
                                        #   in Loop: Header=BB20_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB20_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB20_208
.LBB20_207:                             # %cond.false558
                                        #   in Loop: Header=BB20_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB20_208:                             # %cond.end560
                                        #   in Loop: Header=BB20_199 Depth=1
.LBB20_209:                             # %cond.end562
                                        #   in Loop: Header=BB20_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB20_210:                             # %for.cond564
                                        #   Parent Loop BB20_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB20_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB20_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB20_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB20_214
.LBB20_213:                             # %cond.false572
                                        #   in Loop: Header=BB20_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB20_214:                             # %cond.end574
                                        #   in Loop: Header=BB20_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB20_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB20_220
.LBB20_216:                             # %cond.false579
                                        #   in Loop: Header=BB20_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB20_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB20_219
.LBB20_218:                             # %cond.false584
                                        #   in Loop: Header=BB20_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB20_219:                             # %cond.end586
                                        #   in Loop: Header=BB20_210 Depth=2
.LBB20_220:                             # %cond.end588
                                        #   in Loop: Header=BB20_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB20_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_210
.LBB20_222:                             # %for.end602
                                        #   in Loop: Header=BB20_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB20_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_199
.LBB20_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB20_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB20_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB20_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB20_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_225
.LBB20_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB20_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_231
.LBB20_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB20_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB20_237
.LBB20_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB20_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_236
.LBB20_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB20_236:                             # %cond.end650
.LBB20_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB20_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB20_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_241
.LBB20_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB20_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB20_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB20_247
.LBB20_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB20_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_246
.LBB20_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB20_246:                             # %cond.end687
.LBB20_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB20_258
.LBB20_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB20_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_251
.LBB20_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB20_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB20_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB20_257
.LBB20_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB20_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_256
.LBB20_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB20_256:                             # %cond.end724
.LBB20_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB20_258:                             # %if.end730
	jmp	.LBB20_328
.LBB20_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB20_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB20_262
.LBB20_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB20_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB20_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB20_265
.LBB20_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB20_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB20_271
.LBB20_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB20_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB20_270
.LBB20_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB20_270:                             # %cond.end753
.LBB20_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB20_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB20_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB20_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB20_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB20_276
.LBB20_275:                             # %cond.false765
                                        #   in Loop: Header=BB20_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB20_276:                             # %cond.end767
                                        #   in Loop: Header=BB20_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB20_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB20_282
.LBB20_278:                             # %cond.false772
                                        #   in Loop: Header=BB20_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB20_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB20_281
.LBB20_280:                             # %cond.false777
                                        #   in Loop: Header=BB20_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB20_281:                             # %cond.end779
                                        #   in Loop: Header=BB20_272 Depth=1
.LBB20_282:                             # %cond.end781
                                        #   in Loop: Header=BB20_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB20_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_272
.LBB20_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB20_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_287
.LBB20_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB20_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB20_293
.LBB20_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB20_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_292
.LBB20_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB20_292:                             # %cond.end822
.LBB20_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB20_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB20_296
.LBB20_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB20_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB20_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB20_299
.LBB20_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB20_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB20_305
.LBB20_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB20_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB20_304
.LBB20_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB20_304:                             # %cond.end847
.LBB20_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB20_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB20_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB20_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB20_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB20_310
.LBB20_309:                             # %cond.false859
                                        #   in Loop: Header=BB20_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB20_310:                             # %cond.end861
                                        #   in Loop: Header=BB20_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB20_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB20_316
.LBB20_312:                             # %cond.false866
                                        #   in Loop: Header=BB20_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB20_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB20_315
.LBB20_314:                             # %cond.false871
                                        #   in Loop: Header=BB20_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB20_315:                             # %cond.end873
                                        #   in Loop: Header=BB20_306 Depth=1
.LBB20_316:                             # %cond.end875
                                        #   in Loop: Header=BB20_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB20_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_306
.LBB20_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB20_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_321
.LBB20_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB20_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB20_327
.LBB20_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB20_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_326
.LBB20_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB20_326:                             # %cond.end916
.LBB20_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB20_328:                             # %if.end922
	jmp	.LBB20_329
.LBB20_329:                             # %if.end923
	jmp	.LBB20_330
.LBB20_330:                             # %if.end924
	jmp	.LBB20_331
.LBB20_331:                             # %if.end925
	jmp	.LBB20_332
.LBB20_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1304908736, -108(%rbp) # imm = 0x4DC753C0
	jne	.LBB20_334
.LBB20_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_333
.Lfunc_end20:
	.size	Get_Reference_Pixel.10, .Lfunc_end20-Get_Reference_Pixel.10
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.11       # -- Begin function DecOneForthPix.11
	.p2align	4, 0x90
	.type	DecOneForthPix.11,@function
DecOneForthPix.11:                      # @DecOneForthPix.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1591496930, -8(%rbp)   # imm = 0x5EDC50E2
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB21_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB21_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_1
.LBB21_4:                               # %for.end
	cmpl	$1591496930, -8(%rbp)   # imm = 0x5EDC50E2
	jne	.LBB21_6
.LBB21_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_5
.Lfunc_end21:
	.size	DecOneForthPix.11, .Lfunc_end21-DecOneForthPix.11
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.12    # -- Begin function Error_Concealment.12
	.p2align	4, 0x90
	.type	Error_Concealment.12,@function
Error_Concealment.12:                   # @Error_Concealment.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$448785935, -16(%rbp)   # imm = 0x1ABFEE0F
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB22_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB22_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -4(%rbp)
.LBB22_3:                               # %for.cond2
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB22_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB22_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB22_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB22_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB22_6:                               # %if.end
                                        #   in Loop: Header=BB22_3 Depth=2
	jmp	.LBB22_7
.LBB22_7:                               # %for.inc
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_3
.LBB22_8:                               # %for.end
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_9
.LBB22_9:                               # %for.inc7
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_1
.LBB22_10:                              # %for.end9
	cmpl	$448785935, -16(%rbp)   # imm = 0x1ABFEE0F
	jne	.LBB22_12
.LBB22_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_11
.Lfunc_end22:
	.size	Error_Concealment.12, .Lfunc_end22-Error_Concealment.12
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.13  # -- Begin function Get_Reference_Block.13
	.p2align	4, 0x90
	.type	Get_Reference_Block.13,@function
Get_Reference_Block.13:                 # @Get_Reference_Block.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1186189126, -24(%rbp)  # imm = 0x46B3CF46
	movq	%rdi, -56(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -16(%rbp)
	movq	%r9, -48(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB23_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB23_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	$0, -8(%rbp)
.LBB23_3:                               # %for.cond5
                                        #   Parent Loop BB23_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB23_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-32(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_3
.LBB23_6:                               # %for.end
                                        #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_7
.LBB23_7:                               # %for.inc14
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_1
.LBB23_8:                               # %for.end16
	cmpl	$1186189126, -24(%rbp)  # imm = 0x46B3CF46
	jne	.LBB23_10
.LBB23_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_9
.Lfunc_end23:
	.size	Get_Reference_Block.13, .Lfunc_end23-Get_Reference_Block.13
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.14  # -- Begin function Get_Reference_Pixel.14
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.14,@function
Get_Reference_Pixel.14:                 # @Get_Reference_Pixel.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1771550396, -100(%rbp) # imm = 0x6997B6BC
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB24_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB24_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB24_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB24_5
.LBB24_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB24_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB24_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB24_11
.LBB24_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB24_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB24_10
.LBB24_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB24_10:                              # %cond.end14
.LBB24_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB24_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB24_14
.LBB24_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB24_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB24_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB24_20
.LBB24_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB24_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB24_19
.LBB24_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB24_19:                              # %cond.end29
.LBB24_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_332
.LBB24_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB24_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB24_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB24_25
.LBB24_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB24_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB24_31
.LBB24_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB24_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB24_30
.LBB24_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB24_30:                              # %cond.end52
.LBB24_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB24_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB24_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB24_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB24_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB24_36
.LBB24_35:                              # %cond.false61
                                        #   in Loop: Header=BB24_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB24_36:                              # %cond.end63
                                        #   in Loop: Header=BB24_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB24_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB24_42
.LBB24_38:                              # %cond.false68
                                        #   in Loop: Header=BB24_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB24_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB24_41
.LBB24_40:                              # %cond.false73
                                        #   in Loop: Header=BB24_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB24_41:                              # %cond.end75
                                        #   in Loop: Header=BB24_32 Depth=1
.LBB24_42:                              # %cond.end77
                                        #   in Loop: Header=BB24_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB24_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_32
.LBB24_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB24_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_47
.LBB24_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB24_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB24_53
.LBB24_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB24_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_52
.LBB24_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB24_52:                              # %cond.end113
.LBB24_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB24_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB24_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB24_57
.LBB24_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB24_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB24_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB24_63
.LBB24_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB24_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB24_62
.LBB24_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB24_62:                              # %cond.end136
.LBB24_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB24_76
.LBB24_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB24_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB24_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB24_68
.LBB24_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB24_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB24_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB24_74
.LBB24_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB24_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB24_73
.LBB24_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB24_73:                              # %cond.end169
.LBB24_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB24_75:                              # %if.end
	jmp	.LBB24_76
.LBB24_76:                              # %if.end178
	jmp	.LBB24_331
.LBB24_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB24_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB24_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB24_81
.LBB24_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB24_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB24_87
.LBB24_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB24_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB24_86
.LBB24_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB24_86:                              # %cond.end197
.LBB24_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB24_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB24_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB24_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB24_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB24_92
.LBB24_91:                              # %cond.false209
                                        #   in Loop: Header=BB24_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB24_92:                              # %cond.end211
                                        #   in Loop: Header=BB24_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB24_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB24_98
.LBB24_94:                              # %cond.false216
                                        #   in Loop: Header=BB24_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB24_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB24_97
.LBB24_96:                              # %cond.false221
                                        #   in Loop: Header=BB24_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB24_97:                              # %cond.end223
                                        #   in Loop: Header=BB24_88 Depth=1
.LBB24_98:                              # %cond.end225
                                        #   in Loop: Header=BB24_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB24_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_88
.LBB24_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB24_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_103
.LBB24_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB24_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB24_109
.LBB24_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB24_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_108
.LBB24_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB24_108:                             # %cond.end266
.LBB24_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB24_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB24_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB24_113
.LBB24_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB24_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB24_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB24_119
.LBB24_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB24_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB24_118
.LBB24_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB24_118:                             # %cond.end287
.LBB24_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB24_132
.LBB24_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB24_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB24_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB24_124
.LBB24_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB24_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB24_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB24_130
.LBB24_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB24_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB24_129
.LBB24_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB24_129:                             # %cond.end320
.LBB24_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB24_131:                             # %if.end331
	jmp	.LBB24_132
.LBB24_132:                             # %if.end332
	jmp	.LBB24_330
.LBB24_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB24_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB24_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB24_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB24_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB24_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB24_139
.LBB24_138:                             # %cond.false345
                                        #   in Loop: Header=BB24_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB24_139:                             # %cond.end347
                                        #   in Loop: Header=BB24_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB24_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB24_145
.LBB24_141:                             # %cond.false352
                                        #   in Loop: Header=BB24_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB24_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB24_144
.LBB24_143:                             # %cond.false357
                                        #   in Loop: Header=BB24_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB24_144:                             # %cond.end359
                                        #   in Loop: Header=BB24_135 Depth=1
.LBB24_145:                             # %cond.end361
                                        #   in Loop: Header=BB24_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB24_146:                             # %for.cond363
                                        #   Parent Loop BB24_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB24_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB24_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB24_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB24_150
.LBB24_149:                             # %cond.false371
                                        #   in Loop: Header=BB24_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB24_150:                             # %cond.end373
                                        #   in Loop: Header=BB24_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB24_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB24_156
.LBB24_152:                             # %cond.false378
                                        #   in Loop: Header=BB24_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB24_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB24_155
.LBB24_154:                             # %cond.false383
                                        #   in Loop: Header=BB24_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB24_155:                             # %cond.end385
                                        #   in Loop: Header=BB24_146 Depth=2
.LBB24_156:                             # %cond.end387
                                        #   in Loop: Header=BB24_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB24_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_146
.LBB24_158:                             # %for.end401
                                        #   in Loop: Header=BB24_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB24_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_135
.LBB24_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB24_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB24_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB24_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB24_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_161
.LBB24_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB24_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_167
.LBB24_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB24_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB24_173
.LBB24_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB24_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_172
.LBB24_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB24_172:                             # %cond.end449
.LBB24_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB24_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB24_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_177
.LBB24_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB24_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB24_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB24_183
.LBB24_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB24_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_182
.LBB24_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB24_182:                             # %cond.end486
.LBB24_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB24_196
.LBB24_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB24_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB24_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_188
.LBB24_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB24_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB24_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB24_194
.LBB24_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB24_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_193
.LBB24_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB24_193:                             # %cond.end526
.LBB24_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB24_195:                             # %if.end532
	jmp	.LBB24_196
.LBB24_196:                             # %if.end533
	jmp	.LBB24_329
.LBB24_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB24_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB24_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB24_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB24_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB24_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB24_203
.LBB24_202:                             # %cond.false546
                                        #   in Loop: Header=BB24_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB24_203:                             # %cond.end548
                                        #   in Loop: Header=BB24_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB24_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB24_209
.LBB24_205:                             # %cond.false553
                                        #   in Loop: Header=BB24_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB24_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB24_208
.LBB24_207:                             # %cond.false558
                                        #   in Loop: Header=BB24_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB24_208:                             # %cond.end560
                                        #   in Loop: Header=BB24_199 Depth=1
.LBB24_209:                             # %cond.end562
                                        #   in Loop: Header=BB24_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB24_210:                             # %for.cond564
                                        #   Parent Loop BB24_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB24_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB24_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB24_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB24_214
.LBB24_213:                             # %cond.false572
                                        #   in Loop: Header=BB24_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB24_214:                             # %cond.end574
                                        #   in Loop: Header=BB24_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB24_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB24_220
.LBB24_216:                             # %cond.false579
                                        #   in Loop: Header=BB24_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB24_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB24_219
.LBB24_218:                             # %cond.false584
                                        #   in Loop: Header=BB24_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB24_219:                             # %cond.end586
                                        #   in Loop: Header=BB24_210 Depth=2
.LBB24_220:                             # %cond.end588
                                        #   in Loop: Header=BB24_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB24_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_210
.LBB24_222:                             # %for.end602
                                        #   in Loop: Header=BB24_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB24_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_199
.LBB24_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB24_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB24_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB24_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB24_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_225
.LBB24_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB24_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_231
.LBB24_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB24_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB24_237
.LBB24_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB24_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_236
.LBB24_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB24_236:                             # %cond.end650
.LBB24_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB24_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB24_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_241
.LBB24_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB24_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB24_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB24_247
.LBB24_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB24_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_246
.LBB24_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB24_246:                             # %cond.end687
.LBB24_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB24_258
.LBB24_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB24_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_251
.LBB24_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB24_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB24_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB24_257
.LBB24_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB24_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_256
.LBB24_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB24_256:                             # %cond.end724
.LBB24_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB24_258:                             # %if.end730
	jmp	.LBB24_328
.LBB24_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB24_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB24_262
.LBB24_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB24_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB24_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB24_265
.LBB24_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB24_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB24_271
.LBB24_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB24_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB24_270
.LBB24_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB24_270:                             # %cond.end753
.LBB24_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB24_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB24_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB24_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB24_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB24_276
.LBB24_275:                             # %cond.false765
                                        #   in Loop: Header=BB24_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB24_276:                             # %cond.end767
                                        #   in Loop: Header=BB24_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB24_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB24_282
.LBB24_278:                             # %cond.false772
                                        #   in Loop: Header=BB24_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB24_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB24_281
.LBB24_280:                             # %cond.false777
                                        #   in Loop: Header=BB24_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB24_281:                             # %cond.end779
                                        #   in Loop: Header=BB24_272 Depth=1
.LBB24_282:                             # %cond.end781
                                        #   in Loop: Header=BB24_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB24_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_272
.LBB24_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB24_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_287
.LBB24_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB24_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB24_293
.LBB24_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB24_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_292
.LBB24_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB24_292:                             # %cond.end822
.LBB24_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB24_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB24_296
.LBB24_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB24_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB24_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB24_299
.LBB24_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB24_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB24_305
.LBB24_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB24_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB24_304
.LBB24_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB24_304:                             # %cond.end847
.LBB24_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB24_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB24_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB24_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB24_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB24_310
.LBB24_309:                             # %cond.false859
                                        #   in Loop: Header=BB24_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB24_310:                             # %cond.end861
                                        #   in Loop: Header=BB24_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB24_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB24_316
.LBB24_312:                             # %cond.false866
                                        #   in Loop: Header=BB24_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB24_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB24_315
.LBB24_314:                             # %cond.false871
                                        #   in Loop: Header=BB24_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB24_315:                             # %cond.end873
                                        #   in Loop: Header=BB24_306 Depth=1
.LBB24_316:                             # %cond.end875
                                        #   in Loop: Header=BB24_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB24_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_306
.LBB24_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB24_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_321
.LBB24_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB24_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB24_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB24_327
.LBB24_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB24_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_326
.LBB24_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB24_326:                             # %cond.end916
.LBB24_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB24_328:                             # %if.end922
	jmp	.LBB24_329
.LBB24_329:                             # %if.end923
	jmp	.LBB24_330
.LBB24_330:                             # %if.end924
	jmp	.LBB24_331
.LBB24_331:                             # %if.end925
	jmp	.LBB24_332
.LBB24_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1771550396, -100(%rbp) # imm = 0x6997B6BC
	jne	.LBB24_334
.LBB24_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_333
.Lfunc_end24:
	.size	Get_Reference_Pixel.14, .Lfunc_end24-Get_Reference_Pixel.14
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.15       # -- Begin function DecOneForthPix.15
	.p2align	4, 0x90
	.type	DecOneForthPix.15,@function
DecOneForthPix.15:                      # @DecOneForthPix.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1159199292, -8(%rbp)   # imm = 0x4517FA3C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB25_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB25_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB25_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB25_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_1
.LBB25_4:                               # %for.end
	cmpl	$1159199292, -8(%rbp)   # imm = 0x4517FA3C
	jne	.LBB25_6
.LBB25_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_5
.Lfunc_end25:
	.size	DecOneForthPix.15, .Lfunc_end25-DecOneForthPix.15
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.16    # -- Begin function Error_Concealment.16
	.p2align	4, 0x90
	.type	Error_Concealment.16,@function
Error_Concealment.16:                   # @Error_Concealment.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1278707320, -16(%rbp)  # imm = 0x4C378678
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB26_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB26_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -4(%rbp)
.LBB26_3:                               # %for.cond2
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB26_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB26_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB26_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB26_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB26_6:                               # %if.end
                                        #   in Loop: Header=BB26_3 Depth=2
	jmp	.LBB26_7
.LBB26_7:                               # %for.inc
                                        #   in Loop: Header=BB26_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_3
.LBB26_8:                               # %for.end
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_9
.LBB26_9:                               # %for.inc7
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_1
.LBB26_10:                              # %for.end9
	cmpl	$1278707320, -16(%rbp)  # imm = 0x4C378678
	jne	.LBB26_12
.LBB26_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_11
.Lfunc_end26:
	.size	Error_Concealment.16, .Lfunc_end26-Error_Concealment.16
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.17   # -- Begin function decode_one_b8block.17
	.p2align	4, 0x90
	.type	decode_one_b8block.17,@function
decode_one_b8block.17:                  # @decode_one_b8block.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$2068590894, -84(%rbp)  # imm = 0x7B4C312E
	movl	%edi, -44(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB27_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB27_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB27_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB27_4:                               # %for.cond9
                                        #   Parent Loop BB27_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB27_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB27_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB27_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_4
.LBB27_7:                               # %for.end
                                        #   in Loop: Header=BB27_2 Depth=1
	jmp	.LBB27_8
.LBB27_8:                               # %for.inc26
                                        #   in Loop: Header=BB27_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_2
.LBB27_9:                               # %for.end28
	jmp	.LBB27_96
.LBB27_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB27_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB27_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB27_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB27_31
.LBB27_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB27_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB27_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB27_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB27_17:                              # %for.cond40
                                        #   Parent Loop BB27_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB27_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB27_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB27_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_17
.LBB27_20:                              # %for.end49
                                        #   in Loop: Header=BB27_15 Depth=1
	jmp	.LBB27_21
.LBB27_21:                              # %for.inc50
                                        #   in Loop: Header=BB27_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_15
.LBB27_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB27_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB27_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB27_25:                              # %for.cond56
                                        #   Parent Loop BB27_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB27_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB27_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB27_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_25
.LBB27_28:                              # %for.end71
                                        #   in Loop: Header=BB27_23 Depth=1
	jmp	.LBB27_29
.LBB27_29:                              # %for.inc72
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_23
.LBB27_30:                              # %for.end74
	jmp	.LBB27_60
.LBB27_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB27_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB27_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB27_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB27_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB27_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB27_36:                              # %for.cond83
                                        #   Parent Loop BB27_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB27_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB27_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB27_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_36
.LBB27_39:                              # %for.end120
                                        #   in Loop: Header=BB27_34 Depth=1
	jmp	.LBB27_40
.LBB27_40:                              # %for.inc121
                                        #   in Loop: Header=BB27_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_34
.LBB27_41:                              # %for.end123
	jmp	.LBB27_51
.LBB27_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB27_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB27_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB27_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB27_45:                              # %for.cond129
                                        #   Parent Loop BB27_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB27_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB27_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB27_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_45
.LBB27_48:                              # %for.end145
                                        #   in Loop: Header=BB27_43 Depth=1
	jmp	.LBB27_49
.LBB27_49:                              # %for.inc146
                                        #   in Loop: Header=BB27_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_43
.LBB27_50:                              # %for.end148
	jmp	.LBB27_51
.LBB27_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB27_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB27_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB27_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB27_54:                              # %for.cond153
                                        #   Parent Loop BB27_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB27_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB27_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB27_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_54
.LBB27_57:                              # %for.end167
                                        #   in Loop: Header=BB27_52 Depth=1
	jmp	.LBB27_58
.LBB27_58:                              # %for.inc168
                                        #   in Loop: Header=BB27_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_52
.LBB27_59:                              # %for.end170
	jmp	.LBB27_60
.LBB27_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB27_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB27_66
.LBB27_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB27_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB27_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB27_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB27_86
.LBB27_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB27_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_69 Depth 2
                                        #       Child Loop BB27_74 Depth 3
                                        #         Child Loop BB27_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB27_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB27_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB27_69:                              # %for.cond197
                                        #   Parent Loop BB27_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_74 Depth 3
                                        #         Child Loop BB27_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB27_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB27_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB27_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB27_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB27_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB27_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB27_73:                              # %if.end218
                                        #   in Loop: Header=BB27_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB27_74:                              # %for.cond233
                                        #   Parent Loop BB27_67 Depth=1
                                        #     Parent Loop BB27_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB27_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB27_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB27_74 Depth=3
	movl	$0, -8(%rbp)
.LBB27_76:                              # %for.cond237
                                        #   Parent Loop BB27_67 Depth=1
                                        #     Parent Loop BB27_69 Depth=2
                                        #       Parent Loop BB27_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB27_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB27_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB27_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_76
.LBB27_79:                              # %for.end269
                                        #   in Loop: Header=BB27_74 Depth=3
	jmp	.LBB27_80
.LBB27_80:                              # %for.inc270
                                        #   in Loop: Header=BB27_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_74
.LBB27_81:                              # %for.end272
                                        #   in Loop: Header=BB27_69 Depth=2
	jmp	.LBB27_82
.LBB27_82:                              # %for.inc273
                                        #   in Loop: Header=BB27_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_69
.LBB27_83:                              # %for.end275
                                        #   in Loop: Header=BB27_67 Depth=1
	jmp	.LBB27_84
.LBB27_84:                              # %for.inc276
                                        #   in Loop: Header=BB27_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_67
.LBB27_85:                              # %for.end278
	jmp	.LBB27_95
.LBB27_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB27_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB27_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB27_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB27_89:                              # %for.cond284
                                        #   Parent Loop BB27_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB27_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB27_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB27_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_89
.LBB27_92:                              # %for.end310
                                        #   in Loop: Header=BB27_87 Depth=1
	jmp	.LBB27_93
.LBB27_93:                              # %for.inc311
                                        #   in Loop: Header=BB27_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_87
.LBB27_94:                              # %for.end313
	jmp	.LBB27_95
.LBB27_95:                              # %if.end314
	jmp	.LBB27_96
.LBB27_96:                              # %if.end315
	cmpl	$2068590894, -84(%rbp)  # imm = 0x7B4C312E
	jne	.LBB27_98
.LBB27_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_97
.Lfunc_end27:
	.size	decode_one_b8block.17, .Lfunc_end27-decode_one_b8block.17
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.18 # -- Begin function compute_residue_b8block.18
	.p2align	4, 0x90
	.type	compute_residue_b8block.18,@function
compute_residue_b8block.18:             # @compute_residue_b8block.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1813344393, -36(%rbp)  # imm = 0x6C157089
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB28_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB28_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB28_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB28_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB28_4:                               # %for.cond4
                                        #   Parent Loop BB28_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB28_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB28_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB28_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_4
.LBB28_7:                               # %for.end
                                        #   in Loop: Header=BB28_2 Depth=1
	jmp	.LBB28_8
.LBB28_8:                               # %for.inc22
                                        #   in Loop: Header=BB28_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_2
.LBB28_9:                               # %for.end24
	jmp	.LBB28_19
.LBB28_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB28_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB28_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB28_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB28_13:                              # %for.cond29
                                        #   Parent Loop BB28_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB28_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB28_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB28_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_13
.LBB28_16:                              # %for.end56
                                        #   in Loop: Header=BB28_11 Depth=1
	jmp	.LBB28_17
.LBB28_17:                              # %for.inc57
                                        #   in Loop: Header=BB28_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_11
.LBB28_18:                              # %for.end59
	jmp	.LBB28_19
.LBB28_19:                              # %if.end
	cmpl	$1813344393, -36(%rbp)  # imm = 0x6C157089
	jne	.LBB28_21
.LBB28_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_20
.Lfunc_end28:
	.size	compute_residue_b8block.18, .Lfunc_end28-compute_residue_b8block.18
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.19  # -- Begin function Get_Reference_Block.19
	.p2align	4, 0x90
	.type	Get_Reference_Block.19,@function
Get_Reference_Block.19:                 # @Get_Reference_Block.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$859304243, -36(%rbp)   # imm = 0x3337F133
	movq	%rdi, -48(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -56(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB29_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB29_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -4(%rbp)
.LBB29_3:                               # %for.cond5
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB29_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB29_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-32(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB29_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_3
.LBB29_6:                               # %for.end
                                        #   in Loop: Header=BB29_1 Depth=1
	jmp	.LBB29_7
.LBB29_7:                               # %for.inc14
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_1
.LBB29_8:                               # %for.end16
	cmpl	$859304243, -36(%rbp)   # imm = 0x3337F133
	jne	.LBB29_10
.LBB29_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_9
.Lfunc_end29:
	.size	Get_Reference_Block.19, .Lfunc_end29-Get_Reference_Block.19
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.20 # -- Begin function compute_residue_b8block.20
	.p2align	4, 0x90
	.type	compute_residue_b8block.20,@function
compute_residue_b8block.20:             # @compute_residue_b8block.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2062990777, -36(%rbp)  # imm = 0x7AF6BDB9
	movl	%edi, -32(%rbp)
	movl	%esi, -24(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB30_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB30_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB30_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_4:                               # %for.cond4
                                        #   Parent Loop BB30_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB30_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB30_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB30_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_4
.LBB30_7:                               # %for.end
                                        #   in Loop: Header=BB30_2 Depth=1
	jmp	.LBB30_8
.LBB30_8:                               # %for.inc22
                                        #   in Loop: Header=BB30_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_2
.LBB30_9:                               # %for.end24
	jmp	.LBB30_19
.LBB30_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB30_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB30_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_13:                              # %for.cond29
                                        #   Parent Loop BB30_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB30_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB30_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB30_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_13
.LBB30_16:                              # %for.end56
                                        #   in Loop: Header=BB30_11 Depth=1
	jmp	.LBB30_17
.LBB30_17:                              # %for.inc57
                                        #   in Loop: Header=BB30_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_11
.LBB30_18:                              # %for.end59
	jmp	.LBB30_19
.LBB30_19:                              # %if.end
	cmpl	$2062990777, -36(%rbp)  # imm = 0x7AF6BDB9
	jne	.LBB30_21
.LBB30_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_20
.Lfunc_end30:
	.size	compute_residue_b8block.20, .Lfunc_end30-compute_residue_b8block.20
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.21  # -- Begin function Get_Reference_Pixel.21
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.21,@function
Get_Reference_Pixel.21:                 # @Get_Reference_Pixel.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1789986043, -100(%rbp) # imm = 0x6AB104FB
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB31_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB31_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB31_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB31_5
.LBB31_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB31_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB31_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB31_11
.LBB31_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB31_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB31_10
.LBB31_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB31_10:                              # %cond.end14
.LBB31_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB31_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB31_14
.LBB31_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB31_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB31_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB31_20
.LBB31_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB31_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB31_19
.LBB31_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB31_19:                              # %cond.end29
.LBB31_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_332
.LBB31_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB31_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB31_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB31_25
.LBB31_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB31_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB31_31
.LBB31_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB31_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB31_30
.LBB31_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB31_30:                              # %cond.end52
.LBB31_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB31_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB31_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_36
.LBB31_35:                              # %cond.false61
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_36:                              # %cond.end63
                                        #   in Loop: Header=BB31_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB31_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_42
.LBB31_38:                              # %cond.false68
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_41
.LBB31_40:                              # %cond.false73
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_41:                              # %cond.end75
                                        #   in Loop: Header=BB31_32 Depth=1
.LBB31_42:                              # %cond.end77
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_32
.LBB31_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_47
.LBB31_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB31_53
.LBB31_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_52
.LBB31_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_52:                              # %cond.end113
.LBB31_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB31_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB31_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB31_57
.LBB31_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB31_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB31_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB31_63
.LBB31_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB31_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB31_62
.LBB31_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB31_62:                              # %cond.end136
.LBB31_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB31_76
.LBB31_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB31_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB31_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB31_68
.LBB31_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB31_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB31_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB31_74
.LBB31_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB31_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB31_73
.LBB31_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB31_73:                              # %cond.end169
.LBB31_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_75:                              # %if.end
	jmp	.LBB31_76
.LBB31_76:                              # %if.end178
	jmp	.LBB31_331
.LBB31_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB31_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB31_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB31_81
.LBB31_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB31_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB31_87
.LBB31_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB31_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB31_86
.LBB31_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB31_86:                              # %cond.end197
.LBB31_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB31_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB31_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_92
.LBB31_91:                              # %cond.false209
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_92:                              # %cond.end211
                                        #   in Loop: Header=BB31_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB31_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_98
.LBB31_94:                              # %cond.false216
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_97
.LBB31_96:                              # %cond.false221
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_97:                              # %cond.end223
                                        #   in Loop: Header=BB31_88 Depth=1
.LBB31_98:                              # %cond.end225
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_88
.LBB31_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_103
.LBB31_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB31_109
.LBB31_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_108
.LBB31_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_108:                             # %cond.end266
.LBB31_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB31_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB31_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB31_113
.LBB31_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB31_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB31_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB31_119
.LBB31_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB31_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB31_118
.LBB31_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB31_118:                             # %cond.end287
.LBB31_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB31_132
.LBB31_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB31_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB31_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB31_124
.LBB31_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB31_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB31_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB31_130
.LBB31_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB31_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB31_129
.LBB31_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB31_129:                             # %cond.end320
.LBB31_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_131:                             # %if.end331
	jmp	.LBB31_132
.LBB31_132:                             # %if.end332
	jmp	.LBB31_330
.LBB31_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB31_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB31_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB31_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_139
.LBB31_138:                             # %cond.false345
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_139:                             # %cond.end347
                                        #   in Loop: Header=BB31_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB31_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_145
.LBB31_141:                             # %cond.false352
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_144
.LBB31_143:                             # %cond.false357
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_144:                             # %cond.end359
                                        #   in Loop: Header=BB31_135 Depth=1
.LBB31_145:                             # %cond.end361
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB31_146:                             # %for.cond363
                                        #   Parent Loop BB31_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB31_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB31_150
.LBB31_149:                             # %cond.false371
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_150:                             # %cond.end373
                                        #   in Loop: Header=BB31_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB31_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB31_156
.LBB31_152:                             # %cond.false378
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB31_155
.LBB31_154:                             # %cond.false383
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_155:                             # %cond.end385
                                        #   in Loop: Header=BB31_146 Depth=2
.LBB31_156:                             # %cond.end387
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_146
.LBB31_158:                             # %for.end401
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_135
.LBB31_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB31_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB31_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB31_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB31_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_161
.LBB31_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_167
.LBB31_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB31_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB31_173
.LBB31_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_172
.LBB31_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB31_172:                             # %cond.end449
.LBB31_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB31_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_177
.LBB31_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB31_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB31_183
.LBB31_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_182
.LBB31_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_182:                             # %cond.end486
.LBB31_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB31_196
.LBB31_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB31_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_188
.LBB31_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB31_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB31_194
.LBB31_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_193
.LBB31_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_193:                             # %cond.end526
.LBB31_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_195:                             # %if.end532
	jmp	.LBB31_196
.LBB31_196:                             # %if.end533
	jmp	.LBB31_329
.LBB31_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB31_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB31_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB31_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_203
.LBB31_202:                             # %cond.false546
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_203:                             # %cond.end548
                                        #   in Loop: Header=BB31_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB31_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_209
.LBB31_205:                             # %cond.false553
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_208
.LBB31_207:                             # %cond.false558
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_208:                             # %cond.end560
                                        #   in Loop: Header=BB31_199 Depth=1
.LBB31_209:                             # %cond.end562
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB31_210:                             # %for.cond564
                                        #   Parent Loop BB31_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB31_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB31_214
.LBB31_213:                             # %cond.false572
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_214:                             # %cond.end574
                                        #   in Loop: Header=BB31_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB31_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB31_220
.LBB31_216:                             # %cond.false579
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB31_219
.LBB31_218:                             # %cond.false584
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_219:                             # %cond.end586
                                        #   in Loop: Header=BB31_210 Depth=2
.LBB31_220:                             # %cond.end588
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_210
.LBB31_222:                             # %for.end602
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_199
.LBB31_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB31_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB31_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB31_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB31_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_225
.LBB31_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_231
.LBB31_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB31_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB31_237
.LBB31_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_236
.LBB31_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB31_236:                             # %cond.end650
.LBB31_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB31_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_241
.LBB31_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB31_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB31_247
.LBB31_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_246
.LBB31_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_246:                             # %cond.end687
.LBB31_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB31_258
.LBB31_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_251
.LBB31_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB31_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB31_257
.LBB31_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_256
.LBB31_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_256:                             # %cond.end724
.LBB31_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_258:                             # %if.end730
	jmp	.LBB31_328
.LBB31_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB31_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB31_262
.LBB31_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB31_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB31_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB31_265
.LBB31_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB31_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB31_271
.LBB31_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB31_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB31_270
.LBB31_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB31_270:                             # %cond.end753
.LBB31_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB31_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB31_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_276
.LBB31_275:                             # %cond.false765
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_276:                             # %cond.end767
                                        #   in Loop: Header=BB31_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB31_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_282
.LBB31_278:                             # %cond.false772
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_281
.LBB31_280:                             # %cond.false777
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_281:                             # %cond.end779
                                        #   in Loop: Header=BB31_272 Depth=1
.LBB31_282:                             # %cond.end781
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_272
.LBB31_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_287
.LBB31_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB31_293
.LBB31_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_292
.LBB31_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_292:                             # %cond.end822
.LBB31_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB31_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB31_296
.LBB31_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB31_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB31_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB31_299
.LBB31_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB31_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB31_305
.LBB31_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB31_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB31_304
.LBB31_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB31_304:                             # %cond.end847
.LBB31_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB31_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB31_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_310
.LBB31_309:                             # %cond.false859
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_310:                             # %cond.end861
                                        #   in Loop: Header=BB31_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB31_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_316
.LBB31_312:                             # %cond.false866
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_315
.LBB31_314:                             # %cond.false871
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_315:                             # %cond.end873
                                        #   in Loop: Header=BB31_306 Depth=1
.LBB31_316:                             # %cond.end875
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_306
.LBB31_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_321
.LBB31_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB31_327
.LBB31_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_326
.LBB31_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_326:                             # %cond.end916
.LBB31_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_328:                             # %if.end922
	jmp	.LBB31_329
.LBB31_329:                             # %if.end923
	jmp	.LBB31_330
.LBB31_330:                             # %if.end924
	jmp	.LBB31_331
.LBB31_331:                             # %if.end925
	jmp	.LBB31_332
.LBB31_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1789986043, -100(%rbp) # imm = 0x6AB104FB
	jne	.LBB31_334
.LBB31_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_333
.Lfunc_end31:
	.size	Get_Reference_Pixel.21, .Lfunc_end31-Get_Reference_Pixel.21
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.22
.LCPI32_0:
	.quad	4636737291354636288     # double 100
.LCPI32_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.22
	.p2align	4, 0x90
	.type	Build_Status_Map.22,@function
Build_Status_Map.22:                    # @Build_Status_Map.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$799089367, -44(%rbp)   # imm = 0x2FA122D7
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -8(%rbp)
.LBB32_3:                               # %for.cond2
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB32_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB32_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB32_13
.LBB32_6:                               # %if.then
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB32_8:                               # %if.end
                                        #   in Loop: Header=BB32_3 Depth=2
	callq	rand
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB32_10:                              # %if.end20
                                        #   in Loop: Header=BB32_3 Depth=2
	callq	rand
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	$1, -4(%rbp)
.LBB32_12:                              # %if.end29
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB32_13:                              # %if.end30
                                        #   in Loop: Header=BB32_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB32_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB32_18
.LBB32_15:                              # %if.else
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB32_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB32_17:                              # %if.end49
                                        #   in Loop: Header=BB32_3 Depth=2
	jmp	.LBB32_18
.LBB32_18:                              # %if.end50
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_3
.LBB32_20:                              # %for.end
                                        #   in Loop: Header=BB32_1 Depth=1
	jmp	.LBB32_21
.LBB32_21:                              # %for.inc53
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_1
.LBB32_22:                              # %for.end55
	cmpl	$799089367, -44(%rbp)   # imm = 0x2FA122D7
	jne	.LBB32_24
.LBB32_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_23
.Lfunc_end32:
	.size	Build_Status_Map.22, .Lfunc_end32-Build_Status_Map.22
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.23  # -- Begin function Get_Reference_Block.23
	.p2align	4, 0x90
	.type	Get_Reference_Block.23,@function
Get_Reference_Block.23:                 # @Get_Reference_Block.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1538472409, -32(%rbp)  # imm = 0x5BB339D9
	movq	%rdi, -48(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -56(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB33_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB33_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -4(%rbp)
.LBB33_3:                               # %for.cond5
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB33_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB33_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB33_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_3
.LBB33_6:                               # %for.end
                                        #   in Loop: Header=BB33_1 Depth=1
	jmp	.LBB33_7
.LBB33_7:                               # %for.inc14
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_1
.LBB33_8:                               # %for.end16
	cmpl	$1538472409, -32(%rbp)  # imm = 0x5BB339D9
	jne	.LBB33_10
.LBB33_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_9
.Lfunc_end33:
	.size	Get_Reference_Block.23, .Lfunc_end33-Get_Reference_Block.23
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.24   # -- Begin function decode_one_b8block.24
	.p2align	4, 0x90
	.type	decode_one_b8block.24,@function
decode_one_b8block.24:                  # @decode_one_b8block.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1324745835, -84(%rbp)  # imm = 0x4EF6046B
	movl	%edi, -40(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB34_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB34_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB34_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB34_4:                               # %for.cond9
                                        #   Parent Loop BB34_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB34_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB34_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_4
.LBB34_7:                               # %for.end
                                        #   in Loop: Header=BB34_2 Depth=1
	jmp	.LBB34_8
.LBB34_8:                               # %for.inc26
                                        #   in Loop: Header=BB34_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_2
.LBB34_9:                               # %for.end28
	jmp	.LBB34_96
.LBB34_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB34_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB34_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB34_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB34_31
.LBB34_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB34_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB34_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB34_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB34_17:                              # %for.cond40
                                        #   Parent Loop BB34_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB34_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB34_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_17
.LBB34_20:                              # %for.end49
                                        #   in Loop: Header=BB34_15 Depth=1
	jmp	.LBB34_21
.LBB34_21:                              # %for.inc50
                                        #   in Loop: Header=BB34_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_15
.LBB34_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB34_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_25:                              # %for.cond56
                                        #   Parent Loop BB34_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB34_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB34_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB34_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_25
.LBB34_28:                              # %for.end71
                                        #   in Loop: Header=BB34_23 Depth=1
	jmp	.LBB34_29
.LBB34_29:                              # %for.inc72
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_23
.LBB34_30:                              # %for.end74
	jmp	.LBB34_60
.LBB34_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB34_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB34_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB34_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB34_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_36:                              # %for.cond83
                                        #   Parent Loop BB34_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB34_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB34_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB34_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_36
.LBB34_39:                              # %for.end120
                                        #   in Loop: Header=BB34_34 Depth=1
	jmp	.LBB34_40
.LBB34_40:                              # %for.inc121
                                        #   in Loop: Header=BB34_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_34
.LBB34_41:                              # %for.end123
	jmp	.LBB34_51
.LBB34_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB34_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB34_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_45:                              # %for.cond129
                                        #   Parent Loop BB34_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB34_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB34_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB34_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_45
.LBB34_48:                              # %for.end145
                                        #   in Loop: Header=BB34_43 Depth=1
	jmp	.LBB34_49
.LBB34_49:                              # %for.inc146
                                        #   in Loop: Header=BB34_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_43
.LBB34_50:                              # %for.end148
	jmp	.LBB34_51
.LBB34_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB34_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB34_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB34_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB34_54:                              # %for.cond153
                                        #   Parent Loop BB34_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB34_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB34_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_54
.LBB34_57:                              # %for.end167
                                        #   in Loop: Header=BB34_52 Depth=1
	jmp	.LBB34_58
.LBB34_58:                              # %for.inc168
                                        #   in Loop: Header=BB34_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_52
.LBB34_59:                              # %for.end170
	jmp	.LBB34_60
.LBB34_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB34_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB34_66
.LBB34_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB34_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB34_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB34_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB34_86
.LBB34_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_69 Depth 2
                                        #       Child Loop BB34_74 Depth 3
                                        #         Child Loop BB34_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB34_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB34_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_69:                              # %for.cond197
                                        #   Parent Loop BB34_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_74 Depth 3
                                        #         Child Loop BB34_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB34_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB34_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB34_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB34_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB34_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB34_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB34_73:                              # %if.end218
                                        #   in Loop: Header=BB34_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB34_74:                              # %for.cond233
                                        #   Parent Loop BB34_67 Depth=1
                                        #     Parent Loop BB34_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB34_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB34_74 Depth=3
	movl	$0, -8(%rbp)
.LBB34_76:                              # %for.cond237
                                        #   Parent Loop BB34_67 Depth=1
                                        #     Parent Loop BB34_69 Depth=2
                                        #       Parent Loop BB34_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB34_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB34_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB34_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_76
.LBB34_79:                              # %for.end269
                                        #   in Loop: Header=BB34_74 Depth=3
	jmp	.LBB34_80
.LBB34_80:                              # %for.inc270
                                        #   in Loop: Header=BB34_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_74
.LBB34_81:                              # %for.end272
                                        #   in Loop: Header=BB34_69 Depth=2
	jmp	.LBB34_82
.LBB34_82:                              # %for.inc273
                                        #   in Loop: Header=BB34_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_69
.LBB34_83:                              # %for.end275
                                        #   in Loop: Header=BB34_67 Depth=1
	jmp	.LBB34_84
.LBB34_84:                              # %for.inc276
                                        #   in Loop: Header=BB34_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_67
.LBB34_85:                              # %for.end278
	jmp	.LBB34_95
.LBB34_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB34_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB34_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB34_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB34_89:                              # %for.cond284
                                        #   Parent Loop BB34_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB34_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB34_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_89
.LBB34_92:                              # %for.end310
                                        #   in Loop: Header=BB34_87 Depth=1
	jmp	.LBB34_93
.LBB34_93:                              # %for.inc311
                                        #   in Loop: Header=BB34_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_87
.LBB34_94:                              # %for.end313
	jmp	.LBB34_95
.LBB34_95:                              # %if.end314
	jmp	.LBB34_96
.LBB34_96:                              # %if.end315
	cmpl	$1324745835, -84(%rbp)  # imm = 0x4EF6046B
	jne	.LBB34_98
.LBB34_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_97
.Lfunc_end34:
	.size	decode_one_b8block.24, .Lfunc_end34-decode_one_b8block.24
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.25  # -- Begin function Get_Reference_Block.25
	.p2align	4, 0x90
	.type	Get_Reference_Block.25,@function
Get_Reference_Block.25:                 # @Get_Reference_Block.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1835092704, -20(%rbp)  # imm = 0x6D614AE0
	movq	%rdi, -48(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -56(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB35_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_3:                               # %for.cond5
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB35_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-24(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_3
.LBB35_6:                               # %for.end
                                        #   in Loop: Header=BB35_1 Depth=1
	jmp	.LBB35_7
.LBB35_7:                               # %for.inc14
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_1
.LBB35_8:                               # %for.end16
	cmpl	$1835092704, -20(%rbp)  # imm = 0x6D614AE0
	jne	.LBB35_10
.LBB35_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_9
.Lfunc_end35:
	.size	Get_Reference_Block.25, .Lfunc_end35-Get_Reference_Block.25
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.26  # -- Begin function Get_Reference_Block.26
	.p2align	4, 0x90
	.type	Get_Reference_Block.26,@function
Get_Reference_Block.26:                 # @Get_Reference_Block.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1938373331, -32(%rbp)  # imm = 0x73893AD3
	movq	%rdi, -56(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -48(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB36_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_3:                               # %for.cond5
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_3
.LBB36_6:                               # %for.end
                                        #   in Loop: Header=BB36_1 Depth=1
	jmp	.LBB36_7
.LBB36_7:                               # %for.inc14
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_1
.LBB36_8:                               # %for.end16
	cmpl	$1938373331, -32(%rbp)  # imm = 0x73893AD3
	jne	.LBB36_10
.LBB36_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_9
.Lfunc_end36:
	.size	Get_Reference_Block.26, .Lfunc_end36-Get_Reference_Block.26
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.27
.LCPI37_0:
	.quad	4636737291354636288     # double 100
.LCPI37_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.27
	.p2align	4, 0x90
	.type	Build_Status_Map.27,@function
Build_Status_Map.27:                    # @Build_Status_Map.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1813594887, -44(%rbp)  # imm = 0x6C194307
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB37_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB37_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -8(%rbp)
.LBB37_3:                               # %for.cond2
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB37_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB37_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB37_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB37_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB37_13
.LBB37_6:                               # %if.then
                                        #   in Loop: Header=BB37_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI37_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI37_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB37_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB37_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB37_8:                               # %if.end
                                        #   in Loop: Header=BB37_3 Depth=2
	callq	rand
	vmovsd	.LCPI37_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI37_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB37_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB37_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB37_10:                              # %if.end20
                                        #   in Loop: Header=BB37_3 Depth=2
	callq	rand
	vmovsd	.LCPI37_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI37_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB37_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB37_3 Depth=2
	movl	$1, -4(%rbp)
.LBB37_12:                              # %if.end29
                                        #   in Loop: Header=BB37_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB37_13:                              # %if.end30
                                        #   in Loop: Header=BB37_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB37_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB37_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB37_18
.LBB37_15:                              # %if.else
                                        #   in Loop: Header=BB37_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB37_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB37_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB37_17:                              # %if.end49
                                        #   in Loop: Header=BB37_3 Depth=2
	jmp	.LBB37_18
.LBB37_18:                              # %if.end50
                                        #   in Loop: Header=BB37_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB37_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_3
.LBB37_20:                              # %for.end
                                        #   in Loop: Header=BB37_1 Depth=1
	jmp	.LBB37_21
.LBB37_21:                              # %for.inc53
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_1
.LBB37_22:                              # %for.end55
	cmpl	$1813594887, -44(%rbp)  # imm = 0x6C194307
	jne	.LBB37_24
.LBB37_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_23
.Lfunc_end37:
	.size	Build_Status_Map.27, .Lfunc_end37-Build_Status_Map.27
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.28    # -- Begin function Error_Concealment.28
	.p2align	4, 0x90
	.type	Error_Concealment.28,@function
Error_Concealment.28:                   # @Error_Concealment.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$505756666, -20(%rbp)   # imm = 0x1E253BFA
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB38_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB38_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -4(%rbp)
.LBB38_3:                               # %for.cond2
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB38_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB38_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB38_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB38_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB38_6:                               # %if.end
                                        #   in Loop: Header=BB38_3 Depth=2
	jmp	.LBB38_7
.LBB38_7:                               # %for.inc
                                        #   in Loop: Header=BB38_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_3
.LBB38_8:                               # %for.end
                                        #   in Loop: Header=BB38_1 Depth=1
	jmp	.LBB38_9
.LBB38_9:                               # %for.inc7
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_1
.LBB38_10:                              # %for.end9
	cmpl	$505756666, -20(%rbp)   # imm = 0x1E253BFA
	jne	.LBB38_12
.LBB38_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_11
.Lfunc_end38:
	.size	Error_Concealment.28, .Lfunc_end38-Error_Concealment.28
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.29  # -- Begin function Get_Reference_Block.29
	.p2align	4, 0x90
	.type	Get_Reference_Block.29,@function
Get_Reference_Block.29:                 # @Get_Reference_Block.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1462368205, -36(%rbp)  # imm = 0x5729F7CD
	movq	%rdi, -48(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -16(%rbp)
	movq	%r9, -56(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB39_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -4(%rbp)
.LBB39_3:                               # %for.cond5
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_3
.LBB39_6:                               # %for.end
                                        #   in Loop: Header=BB39_1 Depth=1
	jmp	.LBB39_7
.LBB39_7:                               # %for.inc14
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_1
.LBB39_8:                               # %for.end16
	cmpl	$1462368205, -36(%rbp)  # imm = 0x5729F7CD
	jne	.LBB39_10
.LBB39_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_9
.Lfunc_end39:
	.size	Get_Reference_Block.29, .Lfunc_end39-Get_Reference_Block.29
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.30
.LCPI40_0:
	.quad	4636737291354636288     # double 100
.LCPI40_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.30
	.p2align	4, 0x90
	.type	Build_Status_Map.30,@function
Build_Status_Map.30:                    # @Build_Status_Map.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$107889375, -36(%rbp)   # imm = 0x66E42DF
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB40_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB40_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -12(%rbp)
.LBB40_3:                               # %for.cond2
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB40_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB40_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB40_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB40_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB40_13
.LBB40_6:                               # %if.then
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI40_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI40_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB40_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB40_8:                               # %if.end
                                        #   in Loop: Header=BB40_3 Depth=2
	callq	rand
	vmovsd	.LCPI40_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI40_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB40_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB40_10:                              # %if.end20
                                        #   in Loop: Header=BB40_3 Depth=2
	callq	rand
	vmovsd	.LCPI40_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI40_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB40_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	$1, -4(%rbp)
.LBB40_12:                              # %if.end29
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB40_13:                              # %if.end30
                                        #   in Loop: Header=BB40_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB40_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB40_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB40_18
.LBB40_15:                              # %if.else
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB40_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB40_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB40_17:                              # %if.end49
                                        #   in Loop: Header=BB40_3 Depth=2
	jmp	.LBB40_18
.LBB40_18:                              # %if.end50
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_3
.LBB40_20:                              # %for.end
                                        #   in Loop: Header=BB40_1 Depth=1
	jmp	.LBB40_21
.LBB40_21:                              # %for.inc53
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_1
.LBB40_22:                              # %for.end55
	cmpl	$107889375, -36(%rbp)   # imm = 0x66E42DF
	jne	.LBB40_24
.LBB40_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_23
.Lfunc_end40:
	.size	Build_Status_Map.30, .Lfunc_end40-Build_Status_Map.30
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.31    # -- Begin function Error_Concealment.31
	.p2align	4, 0x90
	.type	Error_Concealment.31,@function
Error_Concealment.31:                   # @Error_Concealment.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$551102298, -16(%rbp)   # imm = 0x20D9275A
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB41_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB41_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	$0, -4(%rbp)
.LBB41_3:                               # %for.cond2
                                        #   Parent Loop BB41_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB41_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB41_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB41_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB41_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB41_6:                               # %if.end
                                        #   in Loop: Header=BB41_3 Depth=2
	jmp	.LBB41_7
.LBB41_7:                               # %for.inc
                                        #   in Loop: Header=BB41_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_3
.LBB41_8:                               # %for.end
                                        #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_9
.LBB41_9:                               # %for.inc7
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_1
.LBB41_10:                              # %for.end9
	cmpl	$551102298, -16(%rbp)   # imm = 0x20D9275A
	jne	.LBB41_12
.LBB41_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_11
.Lfunc_end41:
	.size	Error_Concealment.31, .Lfunc_end41-Error_Concealment.31
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.32 # -- Begin function compute_residue_b8block.32
	.p2align	4, 0x90
	.type	compute_residue_b8block.32,@function
compute_residue_b8block.32:             # @compute_residue_b8block.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1703337882, -36(%rbp)  # imm = 0x6586DF9A
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB42_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB42_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB42_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_4:                               # %for.cond4
                                        #   Parent Loop BB42_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB42_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB42_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB42_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_4
.LBB42_7:                               # %for.end
                                        #   in Loop: Header=BB42_2 Depth=1
	jmp	.LBB42_8
.LBB42_8:                               # %for.inc22
                                        #   in Loop: Header=BB42_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_2
.LBB42_9:                               # %for.end24
	jmp	.LBB42_19
.LBB42_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB42_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB42_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_13:                              # %for.cond29
                                        #   Parent Loop BB42_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB42_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB42_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB42_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_13
.LBB42_16:                              # %for.end56
                                        #   in Loop: Header=BB42_11 Depth=1
	jmp	.LBB42_17
.LBB42_17:                              # %for.inc57
                                        #   in Loop: Header=BB42_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_11
.LBB42_18:                              # %for.end59
	jmp	.LBB42_19
.LBB42_19:                              # %if.end
	cmpl	$1703337882, -36(%rbp)  # imm = 0x6586DF9A
	jne	.LBB42_21
.LBB42_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_20
.Lfunc_end42:
	.size	compute_residue_b8block.32, .Lfunc_end42-compute_residue_b8block.32
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.33    # -- Begin function Error_Concealment.33
	.p2align	4, 0x90
	.type	Error_Concealment.33,@function
Error_Concealment.33:                   # @Error_Concealment.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$601063980, -16(%rbp)   # imm = 0x23D3822C
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB43_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB43_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -4(%rbp)
.LBB43_3:                               # %for.cond2
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB43_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB43_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB43_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB43_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB43_6:                               # %if.end
                                        #   in Loop: Header=BB43_3 Depth=2
	jmp	.LBB43_7
.LBB43_7:                               # %for.inc
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_3
.LBB43_8:                               # %for.end
                                        #   in Loop: Header=BB43_1 Depth=1
	jmp	.LBB43_9
.LBB43_9:                               # %for.inc7
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_1
.LBB43_10:                              # %for.end9
	cmpl	$601063980, -16(%rbp)   # imm = 0x23D3822C
	jne	.LBB43_12
.LBB43_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_11
.Lfunc_end43:
	.size	Error_Concealment.33, .Lfunc_end43-Error_Concealment.33
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.34 # -- Begin function compute_residue_b8block.34
	.p2align	4, 0x90
	.type	compute_residue_b8block.34,@function
compute_residue_b8block.34:             # @compute_residue_b8block.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$212809470, -36(%rbp)   # imm = 0xCAF36FE
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB44_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB44_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB44_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB44_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB44_4:                               # %for.cond4
                                        #   Parent Loop BB44_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB44_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB44_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB44_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_4
.LBB44_7:                               # %for.end
                                        #   in Loop: Header=BB44_2 Depth=1
	jmp	.LBB44_8
.LBB44_8:                               # %for.inc22
                                        #   in Loop: Header=BB44_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_2
.LBB44_9:                               # %for.end24
	jmp	.LBB44_19
.LBB44_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB44_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB44_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB44_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB44_13:                              # %for.cond29
                                        #   Parent Loop BB44_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB44_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB44_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB44_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_13
.LBB44_16:                              # %for.end56
                                        #   in Loop: Header=BB44_11 Depth=1
	jmp	.LBB44_17
.LBB44_17:                              # %for.inc57
                                        #   in Loop: Header=BB44_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_11
.LBB44_18:                              # %for.end59
	jmp	.LBB44_19
.LBB44_19:                              # %if.end
	cmpl	$212809470, -36(%rbp)   # imm = 0xCAF36FE
	jne	.LBB44_21
.LBB44_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_20
.Lfunc_end44:
	.size	compute_residue_b8block.34, .Lfunc_end44-compute_residue_b8block.34
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.35   # -- Begin function decode_one_b8block.35
	.p2align	4, 0x90
	.type	decode_one_b8block.35,@function
decode_one_b8block.35:                  # @decode_one_b8block.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1859351159, -84(%rbp)  # imm = 0x6ED37277
	movl	%edi, -44(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB45_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB45_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_4:                               # %for.cond9
                                        #   Parent Loop BB45_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB45_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB45_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB45_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_4
.LBB45_7:                               # %for.end
                                        #   in Loop: Header=BB45_2 Depth=1
	jmp	.LBB45_8
.LBB45_8:                               # %for.inc26
                                        #   in Loop: Header=BB45_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_2
.LBB45_9:                               # %for.end28
	jmp	.LBB45_96
.LBB45_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB45_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB45_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB45_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB45_31
.LBB45_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB45_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB45_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_17:                              # %for.cond40
                                        #   Parent Loop BB45_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB45_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB45_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB45_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_17
.LBB45_20:                              # %for.end49
                                        #   in Loop: Header=BB45_15 Depth=1
	jmp	.LBB45_21
.LBB45_21:                              # %for.inc50
                                        #   in Loop: Header=BB45_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_15
.LBB45_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB45_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB45_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB45_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB45_25:                              # %for.cond56
                                        #   Parent Loop BB45_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB45_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB45_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB45_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_25
.LBB45_28:                              # %for.end71
                                        #   in Loop: Header=BB45_23 Depth=1
	jmp	.LBB45_29
.LBB45_29:                              # %for.inc72
                                        #   in Loop: Header=BB45_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_23
.LBB45_30:                              # %for.end74
	jmp	.LBB45_60
.LBB45_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB45_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB45_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB45_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB45_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB45_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB45_36:                              # %for.cond83
                                        #   Parent Loop BB45_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB45_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB45_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB45_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_36
.LBB45_39:                              # %for.end120
                                        #   in Loop: Header=BB45_34 Depth=1
	jmp	.LBB45_40
.LBB45_40:                              # %for.inc121
                                        #   in Loop: Header=BB45_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_34
.LBB45_41:                              # %for.end123
	jmp	.LBB45_51
.LBB45_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB45_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB45_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB45_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB45_45:                              # %for.cond129
                                        #   Parent Loop BB45_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB45_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB45_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB45_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_45
.LBB45_48:                              # %for.end145
                                        #   in Loop: Header=BB45_43 Depth=1
	jmp	.LBB45_49
.LBB45_49:                              # %for.inc146
                                        #   in Loop: Header=BB45_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_43
.LBB45_50:                              # %for.end148
	jmp	.LBB45_51
.LBB45_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB45_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB45_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_54:                              # %for.cond153
                                        #   Parent Loop BB45_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB45_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB45_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB45_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_54
.LBB45_57:                              # %for.end167
                                        #   in Loop: Header=BB45_52 Depth=1
	jmp	.LBB45_58
.LBB45_58:                              # %for.inc168
                                        #   in Loop: Header=BB45_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_52
.LBB45_59:                              # %for.end170
	jmp	.LBB45_60
.LBB45_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB45_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB45_66
.LBB45_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB45_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB45_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB45_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB45_86
.LBB45_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB45_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_69 Depth 2
                                        #       Child Loop BB45_74 Depth 3
                                        #         Child Loop BB45_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB45_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB45_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB45_69:                              # %for.cond197
                                        #   Parent Loop BB45_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_74 Depth 3
                                        #         Child Loop BB45_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB45_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB45_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB45_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB45_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB45_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB45_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB45_73:                              # %if.end218
                                        #   in Loop: Header=BB45_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB45_74:                              # %for.cond233
                                        #   Parent Loop BB45_67 Depth=1
                                        #     Parent Loop BB45_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB45_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB45_74 Depth=3
	movl	$0, -4(%rbp)
.LBB45_76:                              # %for.cond237
                                        #   Parent Loop BB45_67 Depth=1
                                        #     Parent Loop BB45_69 Depth=2
                                        #       Parent Loop BB45_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB45_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB45_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB45_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_76
.LBB45_79:                              # %for.end269
                                        #   in Loop: Header=BB45_74 Depth=3
	jmp	.LBB45_80
.LBB45_80:                              # %for.inc270
                                        #   in Loop: Header=BB45_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_74
.LBB45_81:                              # %for.end272
                                        #   in Loop: Header=BB45_69 Depth=2
	jmp	.LBB45_82
.LBB45_82:                              # %for.inc273
                                        #   in Loop: Header=BB45_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_69
.LBB45_83:                              # %for.end275
                                        #   in Loop: Header=BB45_67 Depth=1
	jmp	.LBB45_84
.LBB45_84:                              # %for.inc276
                                        #   in Loop: Header=BB45_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_67
.LBB45_85:                              # %for.end278
	jmp	.LBB45_95
.LBB45_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB45_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB45_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_89:                              # %for.cond284
                                        #   Parent Loop BB45_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB45_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB45_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB45_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_89
.LBB45_92:                              # %for.end310
                                        #   in Loop: Header=BB45_87 Depth=1
	jmp	.LBB45_93
.LBB45_93:                              # %for.inc311
                                        #   in Loop: Header=BB45_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_87
.LBB45_94:                              # %for.end313
	jmp	.LBB45_95
.LBB45_95:                              # %if.end314
	jmp	.LBB45_96
.LBB45_96:                              # %if.end315
	cmpl	$1859351159, -84(%rbp)  # imm = 0x6ED37277
	jne	.LBB45_98
.LBB45_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_97
.Lfunc_end45:
	.size	decode_one_b8block.35, .Lfunc_end45-decode_one_b8block.35
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.36    # -- Begin function Error_Concealment.36
	.p2align	4, 0x90
	.type	Error_Concealment.36,@function
Error_Concealment.36:                   # @Error_Concealment.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1259746551, -16(%rbp)  # imm = 0x4B1634F7
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB46_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB46_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -8(%rbp)
.LBB46_3:                               # %for.cond2
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB46_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB46_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB46_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB46_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB46_6:                               # %if.end
                                        #   in Loop: Header=BB46_3 Depth=2
	jmp	.LBB46_7
.LBB46_7:                               # %for.inc
                                        #   in Loop: Header=BB46_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_3
.LBB46_8:                               # %for.end
                                        #   in Loop: Header=BB46_1 Depth=1
	jmp	.LBB46_9
.LBB46_9:                               # %for.inc7
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_1
.LBB46_10:                              # %for.end9
	cmpl	$1259746551, -16(%rbp)  # imm = 0x4B1634F7
	jne	.LBB46_12
.LBB46_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_11
.Lfunc_end46:
	.size	Error_Concealment.36, .Lfunc_end46-Error_Concealment.36
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.37       # -- Begin function DecOneForthPix.37
	.p2align	4, 0x90
	.type	DecOneForthPix.37,@function
DecOneForthPix.37:                      # @DecOneForthPix.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$264546289, -12(%rbp)   # imm = 0xFC4A7F1
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB47_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_1
.LBB47_4:                               # %for.end
	cmpl	$264546289, -12(%rbp)   # imm = 0xFC4A7F1
	jne	.LBB47_6
.LBB47_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_5
.Lfunc_end47:
	.size	DecOneForthPix.37, .Lfunc_end47-DecOneForthPix.37
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.38  # -- Begin function Get_Reference_Block.38
	.p2align	4, 0x90
	.type	Get_Reference_Block.38,@function
Get_Reference_Block.38:                 # @Get_Reference_Block.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$79469713, -20(%rbp)    # imm = 0x4BC9C91
	movq	%rdi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -56(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB48_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB48_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	$0, -4(%rbp)
.LBB48_3:                               # %for.cond5
                                        #   Parent Loop BB48_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB48_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB48_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-32(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_3
.LBB48_6:                               # %for.end
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_7
.LBB48_7:                               # %for.inc14
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_1
.LBB48_8:                               # %for.end16
	cmpl	$79469713, -20(%rbp)    # imm = 0x4BC9C91
	jne	.LBB48_10
.LBB48_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_9
.Lfunc_end48:
	.size	Get_Reference_Block.38, .Lfunc_end48-Get_Reference_Block.38
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.39   # -- Begin function decode_one_b8block.39
	.p2align	4, 0x90
	.type	decode_one_b8block.39,@function
decode_one_b8block.39:                  # @decode_one_b8block.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$2044722555, -84(%rbp)  # imm = 0x79DFFD7B
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB49_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB49_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB49_4:                               # %for.cond9
                                        #   Parent Loop BB49_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB49_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB49_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB49_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_4
.LBB49_7:                               # %for.end
                                        #   in Loop: Header=BB49_2 Depth=1
	jmp	.LBB49_8
.LBB49_8:                               # %for.inc26
                                        #   in Loop: Header=BB49_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_2
.LBB49_9:                               # %for.end28
	jmp	.LBB49_96
.LBB49_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB49_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB49_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB49_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB49_31
.LBB49_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB49_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB49_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB49_17:                              # %for.cond40
                                        #   Parent Loop BB49_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB49_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB49_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB49_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_17
.LBB49_20:                              # %for.end49
                                        #   in Loop: Header=BB49_15 Depth=1
	jmp	.LBB49_21
.LBB49_21:                              # %for.inc50
                                        #   in Loop: Header=BB49_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_15
.LBB49_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB49_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB49_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB49_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB49_25:                              # %for.cond56
                                        #   Parent Loop BB49_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB49_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB49_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB49_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_25
.LBB49_28:                              # %for.end71
                                        #   in Loop: Header=BB49_23 Depth=1
	jmp	.LBB49_29
.LBB49_29:                              # %for.inc72
                                        #   in Loop: Header=BB49_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_23
.LBB49_30:                              # %for.end74
	jmp	.LBB49_60
.LBB49_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB49_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB49_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB49_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB49_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB49_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB49_36:                              # %for.cond83
                                        #   Parent Loop BB49_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB49_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB49_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB49_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_36
.LBB49_39:                              # %for.end120
                                        #   in Loop: Header=BB49_34 Depth=1
	jmp	.LBB49_40
.LBB49_40:                              # %for.inc121
                                        #   in Loop: Header=BB49_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_34
.LBB49_41:                              # %for.end123
	jmp	.LBB49_51
.LBB49_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB49_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB49_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB49_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB49_45:                              # %for.cond129
                                        #   Parent Loop BB49_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB49_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB49_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB49_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_45
.LBB49_48:                              # %for.end145
                                        #   in Loop: Header=BB49_43 Depth=1
	jmp	.LBB49_49
.LBB49_49:                              # %for.inc146
                                        #   in Loop: Header=BB49_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_43
.LBB49_50:                              # %for.end148
	jmp	.LBB49_51
.LBB49_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB49_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB49_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB49_54:                              # %for.cond153
                                        #   Parent Loop BB49_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB49_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB49_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB49_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_54
.LBB49_57:                              # %for.end167
                                        #   in Loop: Header=BB49_52 Depth=1
	jmp	.LBB49_58
.LBB49_58:                              # %for.inc168
                                        #   in Loop: Header=BB49_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_52
.LBB49_59:                              # %for.end170
	jmp	.LBB49_60
.LBB49_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB49_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB49_66
.LBB49_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB49_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB49_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB49_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB49_86
.LBB49_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB49_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_69 Depth 2
                                        #       Child Loop BB49_74 Depth 3
                                        #         Child Loop BB49_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB49_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB49_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB49_69:                              # %for.cond197
                                        #   Parent Loop BB49_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_74 Depth 3
                                        #         Child Loop BB49_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB49_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB49_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB49_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB49_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB49_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB49_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB49_73:                              # %if.end218
                                        #   in Loop: Header=BB49_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB49_74:                              # %for.cond233
                                        #   Parent Loop BB49_67 Depth=1
                                        #     Parent Loop BB49_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB49_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB49_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB49_74 Depth=3
	movl	$0, -4(%rbp)
.LBB49_76:                              # %for.cond237
                                        #   Parent Loop BB49_67 Depth=1
                                        #     Parent Loop BB49_69 Depth=2
                                        #       Parent Loop BB49_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB49_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB49_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB49_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_76
.LBB49_79:                              # %for.end269
                                        #   in Loop: Header=BB49_74 Depth=3
	jmp	.LBB49_80
.LBB49_80:                              # %for.inc270
                                        #   in Loop: Header=BB49_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_74
.LBB49_81:                              # %for.end272
                                        #   in Loop: Header=BB49_69 Depth=2
	jmp	.LBB49_82
.LBB49_82:                              # %for.inc273
                                        #   in Loop: Header=BB49_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_69
.LBB49_83:                              # %for.end275
                                        #   in Loop: Header=BB49_67 Depth=1
	jmp	.LBB49_84
.LBB49_84:                              # %for.inc276
                                        #   in Loop: Header=BB49_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_67
.LBB49_85:                              # %for.end278
	jmp	.LBB49_95
.LBB49_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB49_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB49_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB49_89:                              # %for.cond284
                                        #   Parent Loop BB49_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB49_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB49_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB49_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_89
.LBB49_92:                              # %for.end310
                                        #   in Loop: Header=BB49_87 Depth=1
	jmp	.LBB49_93
.LBB49_93:                              # %for.inc311
                                        #   in Loop: Header=BB49_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_87
.LBB49_94:                              # %for.end313
	jmp	.LBB49_95
.LBB49_95:                              # %if.end314
	jmp	.LBB49_96
.LBB49_96:                              # %if.end315
	cmpl	$2044722555, -84(%rbp)  # imm = 0x79DFFD7B
	jne	.LBB49_98
.LBB49_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_97
.Lfunc_end49:
	.size	decode_one_b8block.39, .Lfunc_end49-decode_one_b8block.39
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.40   # -- Begin function decode_one_b8block.40
	.p2align	4, 0x90
	.type	decode_one_b8block.40,@function
decode_one_b8block.40:                  # @decode_one_b8block.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1595175543, -84(%rbp)  # imm = 0x5F147277
	movl	%edi, -56(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB50_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB50_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB50_4:                               # %for.cond9
                                        #   Parent Loop BB50_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB50_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB50_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB50_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_4
.LBB50_7:                               # %for.end
                                        #   in Loop: Header=BB50_2 Depth=1
	jmp	.LBB50_8
.LBB50_8:                               # %for.inc26
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_2
.LBB50_9:                               # %for.end28
	jmp	.LBB50_96
.LBB50_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB50_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB50_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB50_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB50_31
.LBB50_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB50_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB50_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB50_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB50_17:                              # %for.cond40
                                        #   Parent Loop BB50_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB50_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB50_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB50_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_17
.LBB50_20:                              # %for.end49
                                        #   in Loop: Header=BB50_15 Depth=1
	jmp	.LBB50_21
.LBB50_21:                              # %for.inc50
                                        #   in Loop: Header=BB50_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_15
.LBB50_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB50_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB50_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB50_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB50_25:                              # %for.cond56
                                        #   Parent Loop BB50_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB50_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB50_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB50_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_25
.LBB50_28:                              # %for.end71
                                        #   in Loop: Header=BB50_23 Depth=1
	jmp	.LBB50_29
.LBB50_29:                              # %for.inc72
                                        #   in Loop: Header=BB50_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_23
.LBB50_30:                              # %for.end74
	jmp	.LBB50_60
.LBB50_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB50_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB50_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB50_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB50_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB50_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB50_36:                              # %for.cond83
                                        #   Parent Loop BB50_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB50_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB50_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB50_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_36
.LBB50_39:                              # %for.end120
                                        #   in Loop: Header=BB50_34 Depth=1
	jmp	.LBB50_40
.LBB50_40:                              # %for.inc121
                                        #   in Loop: Header=BB50_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_34
.LBB50_41:                              # %for.end123
	jmp	.LBB50_51
.LBB50_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB50_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB50_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB50_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB50_45:                              # %for.cond129
                                        #   Parent Loop BB50_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB50_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB50_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB50_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_45
.LBB50_48:                              # %for.end145
                                        #   in Loop: Header=BB50_43 Depth=1
	jmp	.LBB50_49
.LBB50_49:                              # %for.inc146
                                        #   in Loop: Header=BB50_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_43
.LBB50_50:                              # %for.end148
	jmp	.LBB50_51
.LBB50_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB50_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB50_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB50_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB50_54:                              # %for.cond153
                                        #   Parent Loop BB50_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB50_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB50_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB50_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_54
.LBB50_57:                              # %for.end167
                                        #   in Loop: Header=BB50_52 Depth=1
	jmp	.LBB50_58
.LBB50_58:                              # %for.inc168
                                        #   in Loop: Header=BB50_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_52
.LBB50_59:                              # %for.end170
	jmp	.LBB50_60
.LBB50_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB50_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB50_66
.LBB50_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB50_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB50_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB50_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB50_86
.LBB50_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB50_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_69 Depth 2
                                        #       Child Loop BB50_74 Depth 3
                                        #         Child Loop BB50_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB50_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB50_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB50_69:                              # %for.cond197
                                        #   Parent Loop BB50_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_74 Depth 3
                                        #         Child Loop BB50_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB50_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB50_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB50_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB50_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB50_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB50_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB50_73:                              # %if.end218
                                        #   in Loop: Header=BB50_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB50_74:                              # %for.cond233
                                        #   Parent Loop BB50_67 Depth=1
                                        #     Parent Loop BB50_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB50_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB50_74 Depth=3
	movl	$0, -4(%rbp)
.LBB50_76:                              # %for.cond237
                                        #   Parent Loop BB50_67 Depth=1
                                        #     Parent Loop BB50_69 Depth=2
                                        #       Parent Loop BB50_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB50_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB50_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB50_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_76
.LBB50_79:                              # %for.end269
                                        #   in Loop: Header=BB50_74 Depth=3
	jmp	.LBB50_80
.LBB50_80:                              # %for.inc270
                                        #   in Loop: Header=BB50_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_74
.LBB50_81:                              # %for.end272
                                        #   in Loop: Header=BB50_69 Depth=2
	jmp	.LBB50_82
.LBB50_82:                              # %for.inc273
                                        #   in Loop: Header=BB50_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_69
.LBB50_83:                              # %for.end275
                                        #   in Loop: Header=BB50_67 Depth=1
	jmp	.LBB50_84
.LBB50_84:                              # %for.inc276
                                        #   in Loop: Header=BB50_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_67
.LBB50_85:                              # %for.end278
	jmp	.LBB50_95
.LBB50_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB50_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB50_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB50_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB50_89:                              # %for.cond284
                                        #   Parent Loop BB50_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB50_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB50_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB50_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_89
.LBB50_92:                              # %for.end310
                                        #   in Loop: Header=BB50_87 Depth=1
	jmp	.LBB50_93
.LBB50_93:                              # %for.inc311
                                        #   in Loop: Header=BB50_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_87
.LBB50_94:                              # %for.end313
	jmp	.LBB50_95
.LBB50_95:                              # %if.end314
	jmp	.LBB50_96
.LBB50_96:                              # %if.end315
	cmpl	$1595175543, -84(%rbp)  # imm = 0x5F147277
	jne	.LBB50_98
.LBB50_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_97
.Lfunc_end50:
	.size	decode_one_b8block.40, .Lfunc_end50-decode_one_b8block.40
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.41        # -- Begin function Conceal_Error.41
	.p2align	4, 0x90
	.type	Conceal_Error.41,@function
Conceal_Error.41:                       # @Conceal_Error.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$2108562752, -68(%rbp)  # imm = 0x7DAE1D40
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB51_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB51_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB51_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB51_4:                               # %land.end
.LBB51_5:                               # %lor.end
.LBB51_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB51_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB51_9
.LBB51_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB51_14
.LBB51_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB51_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB51_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB51_12:                              # %land.end51
.LBB51_13:                              # %lor.end53
.LBB51_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB51_180
# %bb.15:                               # %land.end54
	movq	.LJTI51_0(,%rax,8), %rax
	jmpq	*%rax
.LBB51_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB51_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB51_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB51_18 Depth=1
	movl	$0, -4(%rbp)
.LBB51_20:                              # %for.cond68
                                        #   Parent Loop BB51_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB51_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB51_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_20
.LBB51_23:                              # %for.end
                                        #   in Loop: Header=BB51_18 Depth=1
	jmp	.LBB51_24
.LBB51_24:                              # %for.inc85
                                        #   in Loop: Header=BB51_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_18
.LBB51_25:                              # %for.end87
	jmp	.LBB51_35
.LBB51_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB51_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB51_27 Depth=1
	movl	$0, -4(%rbp)
.LBB51_29:                              # %for.cond92
                                        #   Parent Loop BB51_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB51_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB51_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_29
.LBB51_32:                              # %for.end104
                                        #   in Loop: Header=BB51_27 Depth=1
	jmp	.LBB51_33
.LBB51_33:                              # %for.inc105
                                        #   in Loop: Header=BB51_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_27
.LBB51_34:                              # %for.end107
	jmp	.LBB51_35
.LBB51_35:                              # %if.end
	jmp	.LBB51_180
.LBB51_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB51_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_39 Depth 2
                                        #       Child Loop BB51_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB51_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB51_37 Depth=1
	movl	$0, -16(%rbp)
.LBB51_39:                              # %for.cond113
                                        #   Parent Loop BB51_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB51_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB51_39 Depth=2
	movl	$0, -4(%rbp)
.LBB51_41:                              # %for.cond117
                                        #   Parent Loop BB51_37 Depth=1
                                        #     Parent Loop BB51_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB51_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB51_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB51_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_41
.LBB51_44:                              # %for.end141
                                        #   in Loop: Header=BB51_39 Depth=2
	jmp	.LBB51_45
.LBB51_45:                              # %for.inc142
                                        #   in Loop: Header=BB51_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_39
.LBB51_46:                              # %for.end144
                                        #   in Loop: Header=BB51_37 Depth=1
	jmp	.LBB51_47
.LBB51_47:                              # %for.inc145
                                        #   in Loop: Header=BB51_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_37
.LBB51_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB51_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB51_49 Depth=1
	movl	$0, -8(%rbp)
.LBB51_51:                              # %for.cond152
                                        #   Parent Loop BB51_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB51_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB51_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_51
.LBB51_54:                              # %for.end162
                                        #   in Loop: Header=BB51_49 Depth=1
	jmp	.LBB51_55
.LBB51_55:                              # %for.inc163
                                        #   in Loop: Header=BB51_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_49
.LBB51_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB51_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB51_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB51_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB51_59 Depth=1
	movl	$0, -4(%rbp)
.LBB51_61:                              # %for.cond175
                                        #   Parent Loop BB51_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB51_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB51_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_61
.LBB51_64:                              # %for.end195
                                        #   in Loop: Header=BB51_59 Depth=1
	jmp	.LBB51_65
.LBB51_65:                              # %for.inc196
                                        #   in Loop: Header=BB51_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_59
.LBB51_66:                              # %for.end198
	jmp	.LBB51_95
.LBB51_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB51_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB51_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_71 Depth 2
                                        #       Child Loop BB51_73 Depth 3
                                        #         Child Loop BB51_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB51_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB51_71:                              # %for.cond210
                                        #   Parent Loop BB51_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_73 Depth 3
                                        #         Child Loop BB51_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB51_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB51_73:                              # %for.cond236
                                        #   Parent Loop BB51_69 Depth=1
                                        #     Parent Loop BB51_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB51_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB51_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB51_73 Depth=3
	movl	$0, -4(%rbp)
.LBB51_75:                              # %for.cond240
                                        #   Parent Loop BB51_69 Depth=1
                                        #     Parent Loop BB51_71 Depth=2
                                        #       Parent Loop BB51_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB51_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB51_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB51_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_75
.LBB51_78:                              # %for.end259
                                        #   in Loop: Header=BB51_73 Depth=3
	jmp	.LBB51_79
.LBB51_79:                              # %for.inc260
                                        #   in Loop: Header=BB51_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_73
.LBB51_80:                              # %for.end262
                                        #   in Loop: Header=BB51_71 Depth=2
	jmp	.LBB51_81
.LBB51_81:                              # %for.inc263
                                        #   in Loop: Header=BB51_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_71
.LBB51_82:                              # %for.end265
                                        #   in Loop: Header=BB51_69 Depth=1
	jmp	.LBB51_83
.LBB51_83:                              # %for.inc266
                                        #   in Loop: Header=BB51_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_69
.LBB51_84:                              # %for.end268
	jmp	.LBB51_94
.LBB51_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB51_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB51_86 Depth=1
	movl	$0, -4(%rbp)
.LBB51_88:                              # %for.cond274
                                        #   Parent Loop BB51_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB51_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB51_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_88
.LBB51_91:                              # %for.end294
                                        #   in Loop: Header=BB51_86 Depth=1
	jmp	.LBB51_92
.LBB51_92:                              # %for.inc295
                                        #   in Loop: Header=BB51_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_86
.LBB51_93:                              # %for.end297
	jmp	.LBB51_94
.LBB51_94:                              # %if.end298
	jmp	.LBB51_95
.LBB51_95:                              # %if.end299
	jmp	.LBB51_105
.LBB51_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB51_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB51_97 Depth=1
	movl	$0, -4(%rbp)
.LBB51_99:                              # %for.cond305
                                        #   Parent Loop BB51_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB51_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB51_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_99
.LBB51_102:                             # %for.end317
                                        #   in Loop: Header=BB51_97 Depth=1
	jmp	.LBB51_103
.LBB51_103:                             # %for.inc318
                                        #   in Loop: Header=BB51_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_97
.LBB51_104:                             # %for.end320
	jmp	.LBB51_105
.LBB51_105:                             # %if.end321
	jmp	.LBB51_180
.LBB51_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB51_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB51_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_110 Depth 2
                                        #       Child Loop BB51_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB51_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB51_108 Depth=1
	movl	$0, -16(%rbp)
.LBB51_110:                             # %for.cond331
                                        #   Parent Loop BB51_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB51_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB51_110 Depth=2
	movl	$0, -4(%rbp)
.LBB51_112:                             # %for.cond335
                                        #   Parent Loop BB51_108 Depth=1
                                        #     Parent Loop BB51_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB51_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB51_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB51_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_112
.LBB51_115:                             # %for.end359
                                        #   in Loop: Header=BB51_110 Depth=2
	jmp	.LBB51_116
.LBB51_116:                             # %for.inc360
                                        #   in Loop: Header=BB51_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_110
.LBB51_117:                             # %for.end362
                                        #   in Loop: Header=BB51_108 Depth=1
	jmp	.LBB51_118
.LBB51_118:                             # %for.inc363
                                        #   in Loop: Header=BB51_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_108
.LBB51_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB51_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB51_120 Depth=1
	movl	$0, -8(%rbp)
.LBB51_122:                             # %for.cond370
                                        #   Parent Loop BB51_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB51_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB51_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_122
.LBB51_125:                             # %for.end380
                                        #   in Loop: Header=BB51_120 Depth=1
	jmp	.LBB51_126
.LBB51_126:                             # %for.inc381
                                        #   in Loop: Header=BB51_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_120
.LBB51_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB51_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB51_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB51_129 Depth=1
	movl	$0, -4(%rbp)
.LBB51_131:                             # %for.cond390
                                        #   Parent Loop BB51_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB51_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB51_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_131
.LBB51_134:                             # %for.end410
                                        #   in Loop: Header=BB51_129 Depth=1
	jmp	.LBB51_135
.LBB51_135:                             # %for.inc411
                                        #   in Loop: Header=BB51_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_129
.LBB51_136:                             # %for.end413
	jmp	.LBB51_156
.LBB51_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB51_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB51_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_141 Depth 2
                                        #       Child Loop BB51_143 Depth 3
                                        #         Child Loop BB51_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB51_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB51_141:                             # %for.cond425
                                        #   Parent Loop BB51_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_143 Depth 3
                                        #         Child Loop BB51_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB51_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB51_143:                             # %for.cond452
                                        #   Parent Loop BB51_139 Depth=1
                                        #     Parent Loop BB51_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB51_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB51_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB51_143 Depth=3
	movl	$0, -4(%rbp)
.LBB51_145:                             # %for.cond456
                                        #   Parent Loop BB51_139 Depth=1
                                        #     Parent Loop BB51_141 Depth=2
                                        #       Parent Loop BB51_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB51_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB51_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB51_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_145
.LBB51_148:                             # %for.end475
                                        #   in Loop: Header=BB51_143 Depth=3
	jmp	.LBB51_149
.LBB51_149:                             # %for.inc476
                                        #   in Loop: Header=BB51_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_143
.LBB51_150:                             # %for.end478
                                        #   in Loop: Header=BB51_141 Depth=2
	jmp	.LBB51_151
.LBB51_151:                             # %for.inc479
                                        #   in Loop: Header=BB51_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_141
.LBB51_152:                             # %for.end481
                                        #   in Loop: Header=BB51_139 Depth=1
	jmp	.LBB51_153
.LBB51_153:                             # %for.inc482
                                        #   in Loop: Header=BB51_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_139
.LBB51_154:                             # %for.end484
	jmp	.LBB51_155
.LBB51_155:                             # %if.end485
	jmp	.LBB51_156
.LBB51_156:                             # %if.end486
	jmp	.LBB51_157
.LBB51_157:                             # %if.end487
	jmp	.LBB51_180
.LBB51_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB51_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB51_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB51_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB51_161 Depth=1
	movl	$0, -4(%rbp)
.LBB51_163:                             # %for.cond499
                                        #   Parent Loop BB51_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB51_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB51_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_163
.LBB51_166:                             # %for.end519
                                        #   in Loop: Header=BB51_161 Depth=1
	jmp	.LBB51_167
.LBB51_167:                             # %for.inc520
                                        #   in Loop: Header=BB51_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_161
.LBB51_168:                             # %for.end522
	jmp	.LBB51_169
.LBB51_169:                             # %if.end523
	jmp	.LBB51_179
.LBB51_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB51_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB51_171 Depth=1
	movl	$0, -4(%rbp)
.LBB51_173:                             # %for.cond529
                                        #   Parent Loop BB51_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB51_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB51_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_173
.LBB51_176:                             # %for.end541
                                        #   in Loop: Header=BB51_171 Depth=1
	jmp	.LBB51_177
.LBB51_177:                             # %for.inc542
                                        #   in Loop: Header=BB51_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_171
.LBB51_178:                             # %for.end544
	jmp	.LBB51_179
.LBB51_179:                             # %if.end545
	jmp	.LBB51_180
.LBB51_180:                             # %sw.epilog
	cmpl	$2108562752, -68(%rbp)  # imm = 0x7DAE1D40
	jne	.LBB51_182
.LBB51_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_181
.Lfunc_end51:
	.size	Conceal_Error.41, .Lfunc_end51-Conceal_Error.41
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI51_0:
	.quad	.LBB51_16
	.quad	.LBB51_158
	.quad	.LBB51_106
	.quad	.LBB51_180
	.quad	.LBB51_36
                                        # -- End function
	.text
	.globl	DecOneForthPix.42       # -- Begin function DecOneForthPix.42
	.p2align	4, 0x90
	.type	DecOneForthPix.42,@function
DecOneForthPix.42:                      # @DecOneForthPix.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2003265296, -12(%rbp)  # imm = 0x77676710
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB52_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB52_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB52_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_1
.LBB52_4:                               # %for.end
	cmpl	$2003265296, -12(%rbp)  # imm = 0x77676710
	jne	.LBB52_6
.LBB52_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_5
.Lfunc_end52:
	.size	DecOneForthPix.42, .Lfunc_end52-DecOneForthPix.42
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.43  # -- Begin function Get_Reference_Pixel.43
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.43,@function
Get_Reference_Pixel.43:                 # @Get_Reference_Pixel.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$573214927, -104(%rbp)  # imm = 0x222A90CF
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB53_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB53_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB53_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB53_5
.LBB53_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB53_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB53_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB53_11
.LBB53_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB53_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB53_10
.LBB53_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB53_10:                              # %cond.end14
.LBB53_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB53_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB53_14
.LBB53_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB53_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB53_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB53_20
.LBB53_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB53_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB53_19
.LBB53_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB53_19:                              # %cond.end29
.LBB53_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_332
.LBB53_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB53_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB53_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB53_25
.LBB53_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB53_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB53_31
.LBB53_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB53_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB53_30
.LBB53_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB53_30:                              # %cond.end52
.LBB53_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB53_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB53_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB53_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB53_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB53_36
.LBB53_35:                              # %cond.false61
                                        #   in Loop: Header=BB53_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB53_36:                              # %cond.end63
                                        #   in Loop: Header=BB53_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB53_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB53_42
.LBB53_38:                              # %cond.false68
                                        #   in Loop: Header=BB53_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB53_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB53_41
.LBB53_40:                              # %cond.false73
                                        #   in Loop: Header=BB53_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB53_41:                              # %cond.end75
                                        #   in Loop: Header=BB53_32 Depth=1
.LBB53_42:                              # %cond.end77
                                        #   in Loop: Header=BB53_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB53_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_32
.LBB53_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB53_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_47
.LBB53_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB53_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB53_53
.LBB53_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB53_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_52
.LBB53_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB53_52:                              # %cond.end113
.LBB53_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB53_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB53_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB53_57
.LBB53_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB53_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB53_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB53_63
.LBB53_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB53_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB53_62
.LBB53_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB53_62:                              # %cond.end136
.LBB53_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB53_76
.LBB53_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB53_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB53_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB53_68
.LBB53_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB53_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB53_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB53_74
.LBB53_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB53_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB53_73
.LBB53_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB53_73:                              # %cond.end169
.LBB53_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB53_75:                              # %if.end
	jmp	.LBB53_76
.LBB53_76:                              # %if.end178
	jmp	.LBB53_331
.LBB53_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB53_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB53_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB53_81
.LBB53_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB53_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB53_87
.LBB53_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB53_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB53_86
.LBB53_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB53_86:                              # %cond.end197
.LBB53_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB53_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB53_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB53_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB53_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB53_92
.LBB53_91:                              # %cond.false209
                                        #   in Loop: Header=BB53_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB53_92:                              # %cond.end211
                                        #   in Loop: Header=BB53_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB53_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB53_98
.LBB53_94:                              # %cond.false216
                                        #   in Loop: Header=BB53_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB53_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB53_97
.LBB53_96:                              # %cond.false221
                                        #   in Loop: Header=BB53_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB53_97:                              # %cond.end223
                                        #   in Loop: Header=BB53_88 Depth=1
.LBB53_98:                              # %cond.end225
                                        #   in Loop: Header=BB53_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB53_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_88
.LBB53_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB53_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_103
.LBB53_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB53_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB53_109
.LBB53_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB53_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_108
.LBB53_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB53_108:                             # %cond.end266
.LBB53_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB53_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB53_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB53_113
.LBB53_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB53_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB53_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB53_119
.LBB53_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB53_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB53_118
.LBB53_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB53_118:                             # %cond.end287
.LBB53_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB53_132
.LBB53_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB53_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB53_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB53_124
.LBB53_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB53_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB53_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB53_130
.LBB53_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB53_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB53_129
.LBB53_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB53_129:                             # %cond.end320
.LBB53_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB53_131:                             # %if.end331
	jmp	.LBB53_132
.LBB53_132:                             # %if.end332
	jmp	.LBB53_330
.LBB53_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB53_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB53_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB53_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB53_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB53_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB53_139
.LBB53_138:                             # %cond.false345
                                        #   in Loop: Header=BB53_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB53_139:                             # %cond.end347
                                        #   in Loop: Header=BB53_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB53_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB53_145
.LBB53_141:                             # %cond.false352
                                        #   in Loop: Header=BB53_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB53_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB53_144
.LBB53_143:                             # %cond.false357
                                        #   in Loop: Header=BB53_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB53_144:                             # %cond.end359
                                        #   in Loop: Header=BB53_135 Depth=1
.LBB53_145:                             # %cond.end361
                                        #   in Loop: Header=BB53_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB53_146:                             # %for.cond363
                                        #   Parent Loop BB53_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB53_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB53_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB53_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB53_150
.LBB53_149:                             # %cond.false371
                                        #   in Loop: Header=BB53_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB53_150:                             # %cond.end373
                                        #   in Loop: Header=BB53_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB53_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB53_156
.LBB53_152:                             # %cond.false378
                                        #   in Loop: Header=BB53_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB53_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB53_155
.LBB53_154:                             # %cond.false383
                                        #   in Loop: Header=BB53_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB53_155:                             # %cond.end385
                                        #   in Loop: Header=BB53_146 Depth=2
.LBB53_156:                             # %cond.end387
                                        #   in Loop: Header=BB53_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB53_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_146
.LBB53_158:                             # %for.end401
                                        #   in Loop: Header=BB53_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB53_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_135
.LBB53_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB53_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB53_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB53_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB53_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_161
.LBB53_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB53_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_167
.LBB53_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB53_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB53_173
.LBB53_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB53_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_172
.LBB53_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB53_172:                             # %cond.end449
.LBB53_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB53_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB53_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_177
.LBB53_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB53_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB53_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB53_183
.LBB53_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB53_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_182
.LBB53_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB53_182:                             # %cond.end486
.LBB53_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB53_196
.LBB53_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB53_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB53_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_188
.LBB53_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB53_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB53_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB53_194
.LBB53_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB53_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_193
.LBB53_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB53_193:                             # %cond.end526
.LBB53_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB53_195:                             # %if.end532
	jmp	.LBB53_196
.LBB53_196:                             # %if.end533
	jmp	.LBB53_329
.LBB53_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB53_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB53_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB53_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB53_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB53_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB53_203
.LBB53_202:                             # %cond.false546
                                        #   in Loop: Header=BB53_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB53_203:                             # %cond.end548
                                        #   in Loop: Header=BB53_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB53_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB53_209
.LBB53_205:                             # %cond.false553
                                        #   in Loop: Header=BB53_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB53_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB53_208
.LBB53_207:                             # %cond.false558
                                        #   in Loop: Header=BB53_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB53_208:                             # %cond.end560
                                        #   in Loop: Header=BB53_199 Depth=1
.LBB53_209:                             # %cond.end562
                                        #   in Loop: Header=BB53_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB53_210:                             # %for.cond564
                                        #   Parent Loop BB53_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB53_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB53_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB53_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB53_214
.LBB53_213:                             # %cond.false572
                                        #   in Loop: Header=BB53_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB53_214:                             # %cond.end574
                                        #   in Loop: Header=BB53_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB53_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB53_220
.LBB53_216:                             # %cond.false579
                                        #   in Loop: Header=BB53_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB53_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB53_219
.LBB53_218:                             # %cond.false584
                                        #   in Loop: Header=BB53_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB53_219:                             # %cond.end586
                                        #   in Loop: Header=BB53_210 Depth=2
.LBB53_220:                             # %cond.end588
                                        #   in Loop: Header=BB53_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB53_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_210
.LBB53_222:                             # %for.end602
                                        #   in Loop: Header=BB53_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB53_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_199
.LBB53_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB53_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB53_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB53_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB53_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_225
.LBB53_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB53_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_231
.LBB53_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB53_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB53_237
.LBB53_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB53_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_236
.LBB53_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB53_236:                             # %cond.end650
.LBB53_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB53_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB53_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_241
.LBB53_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB53_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB53_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB53_247
.LBB53_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB53_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_246
.LBB53_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB53_246:                             # %cond.end687
.LBB53_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB53_258
.LBB53_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB53_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_251
.LBB53_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB53_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB53_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB53_257
.LBB53_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB53_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_256
.LBB53_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB53_256:                             # %cond.end724
.LBB53_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB53_258:                             # %if.end730
	jmp	.LBB53_328
.LBB53_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB53_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB53_262
.LBB53_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB53_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB53_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB53_265
.LBB53_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB53_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB53_271
.LBB53_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB53_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB53_270
.LBB53_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB53_270:                             # %cond.end753
.LBB53_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB53_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB53_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB53_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB53_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB53_276
.LBB53_275:                             # %cond.false765
                                        #   in Loop: Header=BB53_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB53_276:                             # %cond.end767
                                        #   in Loop: Header=BB53_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB53_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB53_282
.LBB53_278:                             # %cond.false772
                                        #   in Loop: Header=BB53_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB53_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB53_281
.LBB53_280:                             # %cond.false777
                                        #   in Loop: Header=BB53_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB53_281:                             # %cond.end779
                                        #   in Loop: Header=BB53_272 Depth=1
.LBB53_282:                             # %cond.end781
                                        #   in Loop: Header=BB53_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB53_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_272
.LBB53_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB53_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_287
.LBB53_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB53_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB53_293
.LBB53_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB53_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_292
.LBB53_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB53_292:                             # %cond.end822
.LBB53_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB53_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB53_296
.LBB53_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB53_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB53_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB53_299
.LBB53_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB53_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB53_305
.LBB53_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB53_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB53_304
.LBB53_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB53_304:                             # %cond.end847
.LBB53_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB53_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB53_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB53_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB53_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB53_310
.LBB53_309:                             # %cond.false859
                                        #   in Loop: Header=BB53_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB53_310:                             # %cond.end861
                                        #   in Loop: Header=BB53_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB53_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB53_316
.LBB53_312:                             # %cond.false866
                                        #   in Loop: Header=BB53_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB53_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB53_315
.LBB53_314:                             # %cond.false871
                                        #   in Loop: Header=BB53_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB53_315:                             # %cond.end873
                                        #   in Loop: Header=BB53_306 Depth=1
.LBB53_316:                             # %cond.end875
                                        #   in Loop: Header=BB53_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB53_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_306
.LBB53_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB53_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_321
.LBB53_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB53_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB53_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB53_327
.LBB53_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB53_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_326
.LBB53_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB53_326:                             # %cond.end916
.LBB53_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB53_328:                             # %if.end922
	jmp	.LBB53_329
.LBB53_329:                             # %if.end923
	jmp	.LBB53_330
.LBB53_330:                             # %if.end924
	jmp	.LBB53_331
.LBB53_331:                             # %if.end925
	jmp	.LBB53_332
.LBB53_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$573214927, -104(%rbp)  # imm = 0x222A90CF
	jne	.LBB53_334
.LBB53_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_333
.Lfunc_end53:
	.size	Get_Reference_Pixel.43, .Lfunc_end53-Get_Reference_Pixel.43
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.44 # -- Begin function compute_residue_b8block.44
	.p2align	4, 0x90
	.type	compute_residue_b8block.44,@function
compute_residue_b8block.44:             # @compute_residue_b8block.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$693333017, -36(%rbp)   # imm = 0x29536C19
	movl	%edi, -20(%rbp)
	movl	%esi, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB54_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB54_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB54_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB54_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB54_4:                               # %for.cond4
                                        #   Parent Loop BB54_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB54_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB54_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB54_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_4
.LBB54_7:                               # %for.end
                                        #   in Loop: Header=BB54_2 Depth=1
	jmp	.LBB54_8
.LBB54_8:                               # %for.inc22
                                        #   in Loop: Header=BB54_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_2
.LBB54_9:                               # %for.end24
	jmp	.LBB54_19
.LBB54_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB54_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB54_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB54_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB54_13:                              # %for.cond29
                                        #   Parent Loop BB54_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB54_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB54_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB54_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_13
.LBB54_16:                              # %for.end56
                                        #   in Loop: Header=BB54_11 Depth=1
	jmp	.LBB54_17
.LBB54_17:                              # %for.inc57
                                        #   in Loop: Header=BB54_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_11
.LBB54_18:                              # %for.end59
	jmp	.LBB54_19
.LBB54_19:                              # %if.end
	cmpl	$693333017, -36(%rbp)   # imm = 0x29536C19
	jne	.LBB54_21
.LBB54_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_20
.Lfunc_end54:
	.size	compute_residue_b8block.44, .Lfunc_end54-compute_residue_b8block.44
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.45
.LCPI55_0:
	.quad	4636737291354636288     # double 100
.LCPI55_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.45
	.p2align	4, 0x90
	.type	Build_Status_Map.45,@function
Build_Status_Map.45:                    # @Build_Status_Map.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$925165225, -36(%rbp)   # imm = 0x3724E6A9
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB55_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -12(%rbp)
.LBB55_3:                               # %for.cond2
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB55_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB55_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB55_13
.LBB55_6:                               # %if.then
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI55_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB55_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB55_8:                               # %if.end
                                        #   in Loop: Header=BB55_3 Depth=2
	callq	rand
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI55_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB55_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB55_10:                              # %if.end20
                                        #   in Loop: Header=BB55_3 Depth=2
	callq	rand
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI55_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB55_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	$1, -4(%rbp)
.LBB55_12:                              # %if.end29
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB55_13:                              # %if.end30
                                        #   in Loop: Header=BB55_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB55_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB55_18
.LBB55_15:                              # %if.else
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB55_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB55_17:                              # %if.end49
                                        #   in Loop: Header=BB55_3 Depth=2
	jmp	.LBB55_18
.LBB55_18:                              # %if.end50
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_3
.LBB55_20:                              # %for.end
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_21
.LBB55_21:                              # %for.inc53
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_1
.LBB55_22:                              # %for.end55
	cmpl	$925165225, -36(%rbp)   # imm = 0x3724E6A9
	jne	.LBB55_24
.LBB55_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_23
.Lfunc_end55:
	.size	Build_Status_Map.45, .Lfunc_end55-Build_Status_Map.45
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.46    # -- Begin function Error_Concealment.46
	.p2align	4, 0x90
	.type	Error_Concealment.46,@function
Error_Concealment.46:                   # @Error_Concealment.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1837523231, -16(%rbp)  # imm = 0x6D86611F
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB56_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB56_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_3:                               # %for.cond2
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB56_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB56_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB56_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB56_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB56_6:                               # %if.end
                                        #   in Loop: Header=BB56_3 Depth=2
	jmp	.LBB56_7
.LBB56_7:                               # %for.inc
                                        #   in Loop: Header=BB56_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_3
.LBB56_8:                               # %for.end
                                        #   in Loop: Header=BB56_1 Depth=1
	jmp	.LBB56_9
.LBB56_9:                               # %for.inc7
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_1
.LBB56_10:                              # %for.end9
	cmpl	$1837523231, -16(%rbp)  # imm = 0x6D86611F
	jne	.LBB56_12
.LBB56_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_11
.Lfunc_end56:
	.size	Error_Concealment.46, .Lfunc_end56-Error_Concealment.46
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.47
.LCPI57_0:
	.quad	4636737291354636288     # double 100
.LCPI57_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.47
	.p2align	4, 0x90
	.type	Build_Status_Map.47,@function
Build_Status_Map.47:                    # @Build_Status_Map.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1830900729, -36(%rbp)  # imm = 0x6D2153F9
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB57_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB57_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	$0, -12(%rbp)
.LBB57_3:                               # %for.cond2
                                        #   Parent Loop BB57_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB57_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB57_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB57_13
.LBB57_6:                               # %if.then
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI57_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB57_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB57_8:                               # %if.end
                                        #   in Loop: Header=BB57_3 Depth=2
	callq	rand
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI57_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB57_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB57_10:                              # %if.end20
                                        #   in Loop: Header=BB57_3 Depth=2
	callq	rand
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI57_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB57_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	$1, -4(%rbp)
.LBB57_12:                              # %if.end29
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB57_13:                              # %if.end30
                                        #   in Loop: Header=BB57_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB57_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB57_18
.LBB57_15:                              # %if.else
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB57_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB57_17:                              # %if.end49
                                        #   in Loop: Header=BB57_3 Depth=2
	jmp	.LBB57_18
.LBB57_18:                              # %if.end50
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_3
.LBB57_20:                              # %for.end
                                        #   in Loop: Header=BB57_1 Depth=1
	jmp	.LBB57_21
.LBB57_21:                              # %for.inc53
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_1
.LBB57_22:                              # %for.end55
	cmpl	$1830900729, -36(%rbp)  # imm = 0x6D2153F9
	jne	.LBB57_24
.LBB57_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_23
.Lfunc_end57:
	.size	Build_Status_Map.47, .Lfunc_end57-Build_Status_Map.47
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.48        # -- Begin function Conceal_Error.48
	.p2align	4, 0x90
	.type	Conceal_Error.48,@function
Conceal_Error.48:                       # @Conceal_Error.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$715845400, -68(%rbp)   # imm = 0x2AAAEF18
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB58_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB58_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB58_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB58_4:                               # %land.end
.LBB58_5:                               # %lor.end
.LBB58_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB58_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB58_9
.LBB58_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB58_14
.LBB58_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB58_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB58_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB58_12:                              # %land.end51
.LBB58_13:                              # %lor.end53
.LBB58_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB58_180
# %bb.15:                               # %land.end54
	movq	.LJTI58_0(,%rax,8), %rax
	jmpq	*%rax
.LBB58_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB58_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB58_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB58_18 Depth=1
	movl	$0, -4(%rbp)
.LBB58_20:                              # %for.cond68
                                        #   Parent Loop BB58_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB58_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB58_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_20
.LBB58_23:                              # %for.end
                                        #   in Loop: Header=BB58_18 Depth=1
	jmp	.LBB58_24
.LBB58_24:                              # %for.inc85
                                        #   in Loop: Header=BB58_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_18
.LBB58_25:                              # %for.end87
	jmp	.LBB58_35
.LBB58_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB58_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB58_27 Depth=1
	movl	$0, -4(%rbp)
.LBB58_29:                              # %for.cond92
                                        #   Parent Loop BB58_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB58_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB58_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_29
.LBB58_32:                              # %for.end104
                                        #   in Loop: Header=BB58_27 Depth=1
	jmp	.LBB58_33
.LBB58_33:                              # %for.inc105
                                        #   in Loop: Header=BB58_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_27
.LBB58_34:                              # %for.end107
	jmp	.LBB58_35
.LBB58_35:                              # %if.end
	jmp	.LBB58_180
.LBB58_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB58_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_39 Depth 2
                                        #       Child Loop BB58_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB58_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB58_37 Depth=1
	movl	$0, -16(%rbp)
.LBB58_39:                              # %for.cond113
                                        #   Parent Loop BB58_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB58_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB58_39 Depth=2
	movl	$0, -4(%rbp)
.LBB58_41:                              # %for.cond117
                                        #   Parent Loop BB58_37 Depth=1
                                        #     Parent Loop BB58_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB58_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB58_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB58_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_41
.LBB58_44:                              # %for.end141
                                        #   in Loop: Header=BB58_39 Depth=2
	jmp	.LBB58_45
.LBB58_45:                              # %for.inc142
                                        #   in Loop: Header=BB58_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_39
.LBB58_46:                              # %for.end144
                                        #   in Loop: Header=BB58_37 Depth=1
	jmp	.LBB58_47
.LBB58_47:                              # %for.inc145
                                        #   in Loop: Header=BB58_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_37
.LBB58_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB58_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB58_49 Depth=1
	movl	$0, -8(%rbp)
.LBB58_51:                              # %for.cond152
                                        #   Parent Loop BB58_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB58_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB58_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_51
.LBB58_54:                              # %for.end162
                                        #   in Loop: Header=BB58_49 Depth=1
	jmp	.LBB58_55
.LBB58_55:                              # %for.inc163
                                        #   in Loop: Header=BB58_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_49
.LBB58_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB58_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB58_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB58_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB58_59 Depth=1
	movl	$0, -4(%rbp)
.LBB58_61:                              # %for.cond175
                                        #   Parent Loop BB58_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB58_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB58_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_61
.LBB58_64:                              # %for.end195
                                        #   in Loop: Header=BB58_59 Depth=1
	jmp	.LBB58_65
.LBB58_65:                              # %for.inc196
                                        #   in Loop: Header=BB58_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_59
.LBB58_66:                              # %for.end198
	jmp	.LBB58_95
.LBB58_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB58_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB58_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_71 Depth 2
                                        #       Child Loop BB58_73 Depth 3
                                        #         Child Loop BB58_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB58_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB58_71:                              # %for.cond210
                                        #   Parent Loop BB58_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_73 Depth 3
                                        #         Child Loop BB58_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB58_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB58_73:                              # %for.cond236
                                        #   Parent Loop BB58_69 Depth=1
                                        #     Parent Loop BB58_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB58_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB58_73 Depth=3
	movl	$0, -4(%rbp)
.LBB58_75:                              # %for.cond240
                                        #   Parent Loop BB58_69 Depth=1
                                        #     Parent Loop BB58_71 Depth=2
                                        #       Parent Loop BB58_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB58_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB58_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB58_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_75
.LBB58_78:                              # %for.end259
                                        #   in Loop: Header=BB58_73 Depth=3
	jmp	.LBB58_79
.LBB58_79:                              # %for.inc260
                                        #   in Loop: Header=BB58_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_73
.LBB58_80:                              # %for.end262
                                        #   in Loop: Header=BB58_71 Depth=2
	jmp	.LBB58_81
.LBB58_81:                              # %for.inc263
                                        #   in Loop: Header=BB58_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_71
.LBB58_82:                              # %for.end265
                                        #   in Loop: Header=BB58_69 Depth=1
	jmp	.LBB58_83
.LBB58_83:                              # %for.inc266
                                        #   in Loop: Header=BB58_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_69
.LBB58_84:                              # %for.end268
	jmp	.LBB58_94
.LBB58_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB58_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB58_86 Depth=1
	movl	$0, -4(%rbp)
.LBB58_88:                              # %for.cond274
                                        #   Parent Loop BB58_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB58_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB58_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_88
.LBB58_91:                              # %for.end294
                                        #   in Loop: Header=BB58_86 Depth=1
	jmp	.LBB58_92
.LBB58_92:                              # %for.inc295
                                        #   in Loop: Header=BB58_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_86
.LBB58_93:                              # %for.end297
	jmp	.LBB58_94
.LBB58_94:                              # %if.end298
	jmp	.LBB58_95
.LBB58_95:                              # %if.end299
	jmp	.LBB58_105
.LBB58_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB58_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB58_97 Depth=1
	movl	$0, -4(%rbp)
.LBB58_99:                              # %for.cond305
                                        #   Parent Loop BB58_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB58_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB58_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_99
.LBB58_102:                             # %for.end317
                                        #   in Loop: Header=BB58_97 Depth=1
	jmp	.LBB58_103
.LBB58_103:                             # %for.inc318
                                        #   in Loop: Header=BB58_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_97
.LBB58_104:                             # %for.end320
	jmp	.LBB58_105
.LBB58_105:                             # %if.end321
	jmp	.LBB58_180
.LBB58_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB58_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB58_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_110 Depth 2
                                        #       Child Loop BB58_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB58_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB58_108 Depth=1
	movl	$0, -16(%rbp)
.LBB58_110:                             # %for.cond331
                                        #   Parent Loop BB58_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB58_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB58_110 Depth=2
	movl	$0, -4(%rbp)
.LBB58_112:                             # %for.cond335
                                        #   Parent Loop BB58_108 Depth=1
                                        #     Parent Loop BB58_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB58_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB58_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB58_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_112
.LBB58_115:                             # %for.end359
                                        #   in Loop: Header=BB58_110 Depth=2
	jmp	.LBB58_116
.LBB58_116:                             # %for.inc360
                                        #   in Loop: Header=BB58_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_110
.LBB58_117:                             # %for.end362
                                        #   in Loop: Header=BB58_108 Depth=1
	jmp	.LBB58_118
.LBB58_118:                             # %for.inc363
                                        #   in Loop: Header=BB58_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_108
.LBB58_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB58_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB58_120 Depth=1
	movl	$0, -8(%rbp)
.LBB58_122:                             # %for.cond370
                                        #   Parent Loop BB58_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB58_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB58_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_122
.LBB58_125:                             # %for.end380
                                        #   in Loop: Header=BB58_120 Depth=1
	jmp	.LBB58_126
.LBB58_126:                             # %for.inc381
                                        #   in Loop: Header=BB58_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_120
.LBB58_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB58_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB58_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB58_129 Depth=1
	movl	$0, -4(%rbp)
.LBB58_131:                             # %for.cond390
                                        #   Parent Loop BB58_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB58_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB58_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_131
.LBB58_134:                             # %for.end410
                                        #   in Loop: Header=BB58_129 Depth=1
	jmp	.LBB58_135
.LBB58_135:                             # %for.inc411
                                        #   in Loop: Header=BB58_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_129
.LBB58_136:                             # %for.end413
	jmp	.LBB58_156
.LBB58_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB58_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB58_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_141 Depth 2
                                        #       Child Loop BB58_143 Depth 3
                                        #         Child Loop BB58_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB58_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB58_141:                             # %for.cond425
                                        #   Parent Loop BB58_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_143 Depth 3
                                        #         Child Loop BB58_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB58_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB58_143:                             # %for.cond452
                                        #   Parent Loop BB58_139 Depth=1
                                        #     Parent Loop BB58_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB58_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB58_143 Depth=3
	movl	$0, -4(%rbp)
.LBB58_145:                             # %for.cond456
                                        #   Parent Loop BB58_139 Depth=1
                                        #     Parent Loop BB58_141 Depth=2
                                        #       Parent Loop BB58_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB58_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB58_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB58_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_145
.LBB58_148:                             # %for.end475
                                        #   in Loop: Header=BB58_143 Depth=3
	jmp	.LBB58_149
.LBB58_149:                             # %for.inc476
                                        #   in Loop: Header=BB58_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_143
.LBB58_150:                             # %for.end478
                                        #   in Loop: Header=BB58_141 Depth=2
	jmp	.LBB58_151
.LBB58_151:                             # %for.inc479
                                        #   in Loop: Header=BB58_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_141
.LBB58_152:                             # %for.end481
                                        #   in Loop: Header=BB58_139 Depth=1
	jmp	.LBB58_153
.LBB58_153:                             # %for.inc482
                                        #   in Loop: Header=BB58_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_139
.LBB58_154:                             # %for.end484
	jmp	.LBB58_155
.LBB58_155:                             # %if.end485
	jmp	.LBB58_156
.LBB58_156:                             # %if.end486
	jmp	.LBB58_157
.LBB58_157:                             # %if.end487
	jmp	.LBB58_180
.LBB58_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB58_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB58_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB58_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB58_161 Depth=1
	movl	$0, -4(%rbp)
.LBB58_163:                             # %for.cond499
                                        #   Parent Loop BB58_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB58_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB58_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_163
.LBB58_166:                             # %for.end519
                                        #   in Loop: Header=BB58_161 Depth=1
	jmp	.LBB58_167
.LBB58_167:                             # %for.inc520
                                        #   in Loop: Header=BB58_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_161
.LBB58_168:                             # %for.end522
	jmp	.LBB58_169
.LBB58_169:                             # %if.end523
	jmp	.LBB58_179
.LBB58_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB58_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB58_171 Depth=1
	movl	$0, -4(%rbp)
.LBB58_173:                             # %for.cond529
                                        #   Parent Loop BB58_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB58_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB58_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_173
.LBB58_176:                             # %for.end541
                                        #   in Loop: Header=BB58_171 Depth=1
	jmp	.LBB58_177
.LBB58_177:                             # %for.inc542
                                        #   in Loop: Header=BB58_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_171
.LBB58_178:                             # %for.end544
	jmp	.LBB58_179
.LBB58_179:                             # %if.end545
	jmp	.LBB58_180
.LBB58_180:                             # %sw.epilog
	cmpl	$715845400, -68(%rbp)   # imm = 0x2AAAEF18
	jne	.LBB58_182
.LBB58_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_181
.Lfunc_end58:
	.size	Conceal_Error.48, .Lfunc_end58-Conceal_Error.48
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI58_0:
	.quad	.LBB58_16
	.quad	.LBB58_158
	.quad	.LBB58_106
	.quad	.LBB58_180
	.quad	.LBB58_36
                                        # -- End function
	.text
	.globl	Get_Reference_Pixel.49  # -- Begin function Get_Reference_Pixel.49
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.49,@function
Get_Reference_Pixel.49:                 # @Get_Reference_Pixel.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1657985012, -108(%rbp) # imm = 0x62D2D7F4
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB59_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB59_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB59_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB59_5
.LBB59_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB59_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB59_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB59_11
.LBB59_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB59_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB59_10
.LBB59_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB59_10:                              # %cond.end14
.LBB59_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB59_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB59_14
.LBB59_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB59_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB59_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB59_20
.LBB59_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB59_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB59_19
.LBB59_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB59_19:                              # %cond.end29
.LBB59_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_332
.LBB59_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB59_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB59_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB59_25
.LBB59_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB59_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB59_31
.LBB59_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB59_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB59_30
.LBB59_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB59_30:                              # %cond.end52
.LBB59_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB59_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB59_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB59_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB59_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB59_36
.LBB59_35:                              # %cond.false61
                                        #   in Loop: Header=BB59_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB59_36:                              # %cond.end63
                                        #   in Loop: Header=BB59_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB59_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_42
.LBB59_38:                              # %cond.false68
                                        #   in Loop: Header=BB59_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB59_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB59_41
.LBB59_40:                              # %cond.false73
                                        #   in Loop: Header=BB59_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB59_41:                              # %cond.end75
                                        #   in Loop: Header=BB59_32 Depth=1
.LBB59_42:                              # %cond.end77
                                        #   in Loop: Header=BB59_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB59_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_32
.LBB59_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB59_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_47
.LBB59_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB59_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB59_53
.LBB59_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB59_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_52
.LBB59_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB59_52:                              # %cond.end113
.LBB59_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB59_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB59_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB59_57
.LBB59_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB59_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB59_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB59_63
.LBB59_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB59_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB59_62
.LBB59_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB59_62:                              # %cond.end136
.LBB59_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB59_76
.LBB59_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB59_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB59_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB59_68
.LBB59_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB59_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB59_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB59_74
.LBB59_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB59_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB59_73
.LBB59_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB59_73:                              # %cond.end169
.LBB59_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB59_75:                              # %if.end
	jmp	.LBB59_76
.LBB59_76:                              # %if.end178
	jmp	.LBB59_331
.LBB59_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB59_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB59_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB59_81
.LBB59_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB59_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB59_87
.LBB59_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB59_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB59_86
.LBB59_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB59_86:                              # %cond.end197
.LBB59_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB59_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB59_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB59_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB59_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB59_92
.LBB59_91:                              # %cond.false209
                                        #   in Loop: Header=BB59_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB59_92:                              # %cond.end211
                                        #   in Loop: Header=BB59_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB59_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_98
.LBB59_94:                              # %cond.false216
                                        #   in Loop: Header=BB59_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB59_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB59_97
.LBB59_96:                              # %cond.false221
                                        #   in Loop: Header=BB59_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB59_97:                              # %cond.end223
                                        #   in Loop: Header=BB59_88 Depth=1
.LBB59_98:                              # %cond.end225
                                        #   in Loop: Header=BB59_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB59_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_88
.LBB59_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB59_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_103
.LBB59_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB59_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB59_109
.LBB59_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB59_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_108
.LBB59_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB59_108:                             # %cond.end266
.LBB59_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB59_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB59_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB59_113
.LBB59_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB59_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB59_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB59_119
.LBB59_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB59_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB59_118
.LBB59_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB59_118:                             # %cond.end287
.LBB59_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB59_132
.LBB59_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB59_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB59_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB59_124
.LBB59_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB59_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB59_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB59_130
.LBB59_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB59_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB59_129
.LBB59_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB59_129:                             # %cond.end320
.LBB59_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB59_131:                             # %if.end331
	jmp	.LBB59_132
.LBB59_132:                             # %if.end332
	jmp	.LBB59_330
.LBB59_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB59_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB59_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB59_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB59_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB59_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB59_139
.LBB59_138:                             # %cond.false345
                                        #   in Loop: Header=BB59_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB59_139:                             # %cond.end347
                                        #   in Loop: Header=BB59_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB59_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_145
.LBB59_141:                             # %cond.false352
                                        #   in Loop: Header=BB59_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB59_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB59_144
.LBB59_143:                             # %cond.false357
                                        #   in Loop: Header=BB59_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB59_144:                             # %cond.end359
                                        #   in Loop: Header=BB59_135 Depth=1
.LBB59_145:                             # %cond.end361
                                        #   in Loop: Header=BB59_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB59_146:                             # %for.cond363
                                        #   Parent Loop BB59_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB59_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB59_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB59_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB59_150
.LBB59_149:                             # %cond.false371
                                        #   in Loop: Header=BB59_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB59_150:                             # %cond.end373
                                        #   in Loop: Header=BB59_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB59_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB59_156
.LBB59_152:                             # %cond.false378
                                        #   in Loop: Header=BB59_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB59_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB59_155
.LBB59_154:                             # %cond.false383
                                        #   in Loop: Header=BB59_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB59_155:                             # %cond.end385
                                        #   in Loop: Header=BB59_146 Depth=2
.LBB59_156:                             # %cond.end387
                                        #   in Loop: Header=BB59_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB59_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_146
.LBB59_158:                             # %for.end401
                                        #   in Loop: Header=BB59_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB59_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_135
.LBB59_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB59_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB59_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB59_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB59_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_161
.LBB59_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB59_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_167
.LBB59_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB59_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB59_173
.LBB59_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB59_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_172
.LBB59_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB59_172:                             # %cond.end449
.LBB59_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB59_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB59_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_177
.LBB59_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB59_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB59_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB59_183
.LBB59_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB59_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_182
.LBB59_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB59_182:                             # %cond.end486
.LBB59_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB59_196
.LBB59_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB59_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB59_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_188
.LBB59_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB59_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB59_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB59_194
.LBB59_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB59_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_193
.LBB59_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB59_193:                             # %cond.end526
.LBB59_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB59_195:                             # %if.end532
	jmp	.LBB59_196
.LBB59_196:                             # %if.end533
	jmp	.LBB59_329
.LBB59_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB59_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB59_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB59_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB59_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB59_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB59_203
.LBB59_202:                             # %cond.false546
                                        #   in Loop: Header=BB59_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB59_203:                             # %cond.end548
                                        #   in Loop: Header=BB59_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB59_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_209
.LBB59_205:                             # %cond.false553
                                        #   in Loop: Header=BB59_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB59_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB59_208
.LBB59_207:                             # %cond.false558
                                        #   in Loop: Header=BB59_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB59_208:                             # %cond.end560
                                        #   in Loop: Header=BB59_199 Depth=1
.LBB59_209:                             # %cond.end562
                                        #   in Loop: Header=BB59_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB59_210:                             # %for.cond564
                                        #   Parent Loop BB59_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB59_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB59_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB59_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB59_214
.LBB59_213:                             # %cond.false572
                                        #   in Loop: Header=BB59_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB59_214:                             # %cond.end574
                                        #   in Loop: Header=BB59_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB59_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB59_220
.LBB59_216:                             # %cond.false579
                                        #   in Loop: Header=BB59_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB59_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB59_219
.LBB59_218:                             # %cond.false584
                                        #   in Loop: Header=BB59_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB59_219:                             # %cond.end586
                                        #   in Loop: Header=BB59_210 Depth=2
.LBB59_220:                             # %cond.end588
                                        #   in Loop: Header=BB59_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB59_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_210
.LBB59_222:                             # %for.end602
                                        #   in Loop: Header=BB59_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB59_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_199
.LBB59_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB59_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB59_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB59_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB59_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_225
.LBB59_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB59_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_231
.LBB59_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB59_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB59_237
.LBB59_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB59_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_236
.LBB59_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB59_236:                             # %cond.end650
.LBB59_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB59_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB59_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_241
.LBB59_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB59_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB59_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB59_247
.LBB59_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB59_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_246
.LBB59_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB59_246:                             # %cond.end687
.LBB59_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB59_258
.LBB59_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB59_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_251
.LBB59_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB59_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB59_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB59_257
.LBB59_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB59_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_256
.LBB59_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB59_256:                             # %cond.end724
.LBB59_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB59_258:                             # %if.end730
	jmp	.LBB59_328
.LBB59_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB59_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB59_262
.LBB59_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB59_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB59_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB59_265
.LBB59_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB59_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB59_271
.LBB59_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB59_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB59_270
.LBB59_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB59_270:                             # %cond.end753
.LBB59_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB59_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB59_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB59_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB59_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB59_276
.LBB59_275:                             # %cond.false765
                                        #   in Loop: Header=BB59_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB59_276:                             # %cond.end767
                                        #   in Loop: Header=BB59_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB59_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_282
.LBB59_278:                             # %cond.false772
                                        #   in Loop: Header=BB59_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB59_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB59_281
.LBB59_280:                             # %cond.false777
                                        #   in Loop: Header=BB59_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB59_281:                             # %cond.end779
                                        #   in Loop: Header=BB59_272 Depth=1
.LBB59_282:                             # %cond.end781
                                        #   in Loop: Header=BB59_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB59_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_272
.LBB59_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB59_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_287
.LBB59_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB59_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB59_293
.LBB59_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB59_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_292
.LBB59_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB59_292:                             # %cond.end822
.LBB59_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB59_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB59_296
.LBB59_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB59_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB59_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB59_299
.LBB59_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB59_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB59_305
.LBB59_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB59_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB59_304
.LBB59_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB59_304:                             # %cond.end847
.LBB59_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB59_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB59_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB59_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB59_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB59_310
.LBB59_309:                             # %cond.false859
                                        #   in Loop: Header=BB59_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB59_310:                             # %cond.end861
                                        #   in Loop: Header=BB59_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB59_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB59_316
.LBB59_312:                             # %cond.false866
                                        #   in Loop: Header=BB59_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB59_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB59_315
.LBB59_314:                             # %cond.false871
                                        #   in Loop: Header=BB59_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB59_315:                             # %cond.end873
                                        #   in Loop: Header=BB59_306 Depth=1
.LBB59_316:                             # %cond.end875
                                        #   in Loop: Header=BB59_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB59_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_306
.LBB59_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB59_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_321
.LBB59_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB59_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB59_327
.LBB59_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB59_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB59_326
.LBB59_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB59_326:                             # %cond.end916
.LBB59_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB59_328:                             # %if.end922
	jmp	.LBB59_329
.LBB59_329:                             # %if.end923
	jmp	.LBB59_330
.LBB59_330:                             # %if.end924
	jmp	.LBB59_331
.LBB59_331:                             # %if.end925
	jmp	.LBB59_332
.LBB59_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1657985012, -108(%rbp) # imm = 0x62D2D7F4
	jne	.LBB59_334
.LBB59_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_333
.Lfunc_end59:
	.size	Get_Reference_Pixel.49, .Lfunc_end59-Get_Reference_Pixel.49
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.50
.LCPI60_0:
	.quad	4636737291354636288     # double 100
.LCPI60_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.50
	.p2align	4, 0x90
	.type	Build_Status_Map.50,@function
Build_Status_Map.50:                    # @Build_Status_Map.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$58181419, -36(%rbp)    # imm = 0x377C72B
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB60_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -12(%rbp)
.LBB60_3:                               # %for.cond2
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB60_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB60_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB60_13
.LBB60_6:                               # %if.then
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI60_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB60_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB60_8:                               # %if.end
                                        #   in Loop: Header=BB60_3 Depth=2
	callq	rand
	vmovsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI60_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB60_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB60_10:                              # %if.end20
                                        #   in Loop: Header=BB60_3 Depth=2
	callq	rand
	vmovsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI60_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB60_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	$1, -4(%rbp)
.LBB60_12:                              # %if.end29
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB60_13:                              # %if.end30
                                        #   in Loop: Header=BB60_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB60_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB60_18
.LBB60_15:                              # %if.else
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB60_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB60_17:                              # %if.end49
                                        #   in Loop: Header=BB60_3 Depth=2
	jmp	.LBB60_18
.LBB60_18:                              # %if.end50
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_3
.LBB60_20:                              # %for.end
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_21
.LBB60_21:                              # %for.inc53
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_1
.LBB60_22:                              # %for.end55
	cmpl	$58181419, -36(%rbp)    # imm = 0x377C72B
	jne	.LBB60_24
.LBB60_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_23
.Lfunc_end60:
	.size	Build_Status_Map.50, .Lfunc_end60-Build_Status_Map.50
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.51
.LCPI61_0:
	.quad	4636737291354636288     # double 100
.LCPI61_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.51
	.p2align	4, 0x90
	.type	Build_Status_Map.51,@function
Build_Status_Map.51:                    # @Build_Status_Map.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1582286215, -36(%rbp)  # imm = 0x5E4FC587
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB61_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB61_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	$0, -12(%rbp)
.LBB61_3:                               # %for.cond2
                                        #   Parent Loop BB61_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB61_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB61_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB61_13
.LBB61_6:                               # %if.then
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB61_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB61_8:                               # %if.end
                                        #   in Loop: Header=BB61_3 Depth=2
	callq	rand
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB61_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB61_10:                              # %if.end20
                                        #   in Loop: Header=BB61_3 Depth=2
	callq	rand
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB61_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	$1, -4(%rbp)
.LBB61_12:                              # %if.end29
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB61_13:                              # %if.end30
                                        #   in Loop: Header=BB61_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB61_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB61_18
.LBB61_15:                              # %if.else
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB61_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB61_17:                              # %if.end49
                                        #   in Loop: Header=BB61_3 Depth=2
	jmp	.LBB61_18
.LBB61_18:                              # %if.end50
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_3
.LBB61_20:                              # %for.end
                                        #   in Loop: Header=BB61_1 Depth=1
	jmp	.LBB61_21
.LBB61_21:                              # %for.inc53
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_1
.LBB61_22:                              # %for.end55
	cmpl	$1582286215, -36(%rbp)  # imm = 0x5E4FC587
	jne	.LBB61_24
.LBB61_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_23
.Lfunc_end61:
	.size	Build_Status_Map.51, .Lfunc_end61-Build_Status_Map.51
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.52        # -- Begin function Conceal_Error.52
	.p2align	4, 0x90
	.type	Conceal_Error.52,@function
Conceal_Error.52:                       # @Conceal_Error.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1360658764, -68(%rbp)  # imm = 0x511A014C
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB62_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB62_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB62_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB62_4:                               # %land.end
.LBB62_5:                               # %lor.end
.LBB62_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB62_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB62_9
.LBB62_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB62_14
.LBB62_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB62_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB62_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB62_12:                              # %land.end51
.LBB62_13:                              # %lor.end53
.LBB62_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB62_180
# %bb.15:                               # %land.end54
	movq	.LJTI62_0(,%rax,8), %rax
	jmpq	*%rax
.LBB62_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB62_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB62_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB62_18 Depth=1
	movl	$0, -4(%rbp)
.LBB62_20:                              # %for.cond68
                                        #   Parent Loop BB62_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB62_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB62_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_20
.LBB62_23:                              # %for.end
                                        #   in Loop: Header=BB62_18 Depth=1
	jmp	.LBB62_24
.LBB62_24:                              # %for.inc85
                                        #   in Loop: Header=BB62_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_18
.LBB62_25:                              # %for.end87
	jmp	.LBB62_35
.LBB62_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB62_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB62_27 Depth=1
	movl	$0, -4(%rbp)
.LBB62_29:                              # %for.cond92
                                        #   Parent Loop BB62_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB62_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB62_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_29
.LBB62_32:                              # %for.end104
                                        #   in Loop: Header=BB62_27 Depth=1
	jmp	.LBB62_33
.LBB62_33:                              # %for.inc105
                                        #   in Loop: Header=BB62_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_27
.LBB62_34:                              # %for.end107
	jmp	.LBB62_35
.LBB62_35:                              # %if.end
	jmp	.LBB62_180
.LBB62_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB62_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_39 Depth 2
                                        #       Child Loop BB62_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB62_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB62_37 Depth=1
	movl	$0, -16(%rbp)
.LBB62_39:                              # %for.cond113
                                        #   Parent Loop BB62_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB62_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB62_39 Depth=2
	movl	$0, -4(%rbp)
.LBB62_41:                              # %for.cond117
                                        #   Parent Loop BB62_37 Depth=1
                                        #     Parent Loop BB62_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB62_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB62_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB62_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_41
.LBB62_44:                              # %for.end141
                                        #   in Loop: Header=BB62_39 Depth=2
	jmp	.LBB62_45
.LBB62_45:                              # %for.inc142
                                        #   in Loop: Header=BB62_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_39
.LBB62_46:                              # %for.end144
                                        #   in Loop: Header=BB62_37 Depth=1
	jmp	.LBB62_47
.LBB62_47:                              # %for.inc145
                                        #   in Loop: Header=BB62_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_37
.LBB62_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB62_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB62_49 Depth=1
	movl	$0, -8(%rbp)
.LBB62_51:                              # %for.cond152
                                        #   Parent Loop BB62_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB62_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB62_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_51
.LBB62_54:                              # %for.end162
                                        #   in Loop: Header=BB62_49 Depth=1
	jmp	.LBB62_55
.LBB62_55:                              # %for.inc163
                                        #   in Loop: Header=BB62_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_49
.LBB62_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB62_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB62_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB62_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB62_59 Depth=1
	movl	$0, -4(%rbp)
.LBB62_61:                              # %for.cond175
                                        #   Parent Loop BB62_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB62_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB62_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_61
.LBB62_64:                              # %for.end195
                                        #   in Loop: Header=BB62_59 Depth=1
	jmp	.LBB62_65
.LBB62_65:                              # %for.inc196
                                        #   in Loop: Header=BB62_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_59
.LBB62_66:                              # %for.end198
	jmp	.LBB62_95
.LBB62_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB62_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB62_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_71 Depth 2
                                        #       Child Loop BB62_73 Depth 3
                                        #         Child Loop BB62_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB62_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB62_71:                              # %for.cond210
                                        #   Parent Loop BB62_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_73 Depth 3
                                        #         Child Loop BB62_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB62_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB62_73:                              # %for.cond236
                                        #   Parent Loop BB62_69 Depth=1
                                        #     Parent Loop BB62_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB62_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB62_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB62_73 Depth=3
	movl	$0, -4(%rbp)
.LBB62_75:                              # %for.cond240
                                        #   Parent Loop BB62_69 Depth=1
                                        #     Parent Loop BB62_71 Depth=2
                                        #       Parent Loop BB62_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB62_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB62_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB62_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_75
.LBB62_78:                              # %for.end259
                                        #   in Loop: Header=BB62_73 Depth=3
	jmp	.LBB62_79
.LBB62_79:                              # %for.inc260
                                        #   in Loop: Header=BB62_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_73
.LBB62_80:                              # %for.end262
                                        #   in Loop: Header=BB62_71 Depth=2
	jmp	.LBB62_81
.LBB62_81:                              # %for.inc263
                                        #   in Loop: Header=BB62_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_71
.LBB62_82:                              # %for.end265
                                        #   in Loop: Header=BB62_69 Depth=1
	jmp	.LBB62_83
.LBB62_83:                              # %for.inc266
                                        #   in Loop: Header=BB62_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_69
.LBB62_84:                              # %for.end268
	jmp	.LBB62_94
.LBB62_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB62_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB62_86 Depth=1
	movl	$0, -4(%rbp)
.LBB62_88:                              # %for.cond274
                                        #   Parent Loop BB62_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB62_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB62_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_88
.LBB62_91:                              # %for.end294
                                        #   in Loop: Header=BB62_86 Depth=1
	jmp	.LBB62_92
.LBB62_92:                              # %for.inc295
                                        #   in Loop: Header=BB62_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_86
.LBB62_93:                              # %for.end297
	jmp	.LBB62_94
.LBB62_94:                              # %if.end298
	jmp	.LBB62_95
.LBB62_95:                              # %if.end299
	jmp	.LBB62_105
.LBB62_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB62_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB62_97 Depth=1
	movl	$0, -4(%rbp)
.LBB62_99:                              # %for.cond305
                                        #   Parent Loop BB62_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB62_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB62_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_99
.LBB62_102:                             # %for.end317
                                        #   in Loop: Header=BB62_97 Depth=1
	jmp	.LBB62_103
.LBB62_103:                             # %for.inc318
                                        #   in Loop: Header=BB62_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_97
.LBB62_104:                             # %for.end320
	jmp	.LBB62_105
.LBB62_105:                             # %if.end321
	jmp	.LBB62_180
.LBB62_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB62_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB62_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_110 Depth 2
                                        #       Child Loop BB62_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB62_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB62_108 Depth=1
	movl	$0, -16(%rbp)
.LBB62_110:                             # %for.cond331
                                        #   Parent Loop BB62_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB62_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB62_110 Depth=2
	movl	$0, -4(%rbp)
.LBB62_112:                             # %for.cond335
                                        #   Parent Loop BB62_108 Depth=1
                                        #     Parent Loop BB62_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB62_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB62_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB62_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_112
.LBB62_115:                             # %for.end359
                                        #   in Loop: Header=BB62_110 Depth=2
	jmp	.LBB62_116
.LBB62_116:                             # %for.inc360
                                        #   in Loop: Header=BB62_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_110
.LBB62_117:                             # %for.end362
                                        #   in Loop: Header=BB62_108 Depth=1
	jmp	.LBB62_118
.LBB62_118:                             # %for.inc363
                                        #   in Loop: Header=BB62_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_108
.LBB62_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB62_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB62_120 Depth=1
	movl	$0, -8(%rbp)
.LBB62_122:                             # %for.cond370
                                        #   Parent Loop BB62_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB62_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB62_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_122
.LBB62_125:                             # %for.end380
                                        #   in Loop: Header=BB62_120 Depth=1
	jmp	.LBB62_126
.LBB62_126:                             # %for.inc381
                                        #   in Loop: Header=BB62_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_120
.LBB62_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB62_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB62_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB62_129 Depth=1
	movl	$0, -4(%rbp)
.LBB62_131:                             # %for.cond390
                                        #   Parent Loop BB62_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB62_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB62_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_131
.LBB62_134:                             # %for.end410
                                        #   in Loop: Header=BB62_129 Depth=1
	jmp	.LBB62_135
.LBB62_135:                             # %for.inc411
                                        #   in Loop: Header=BB62_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_129
.LBB62_136:                             # %for.end413
	jmp	.LBB62_156
.LBB62_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB62_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB62_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_141 Depth 2
                                        #       Child Loop BB62_143 Depth 3
                                        #         Child Loop BB62_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB62_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB62_141:                             # %for.cond425
                                        #   Parent Loop BB62_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_143 Depth 3
                                        #         Child Loop BB62_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB62_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB62_143:                             # %for.cond452
                                        #   Parent Loop BB62_139 Depth=1
                                        #     Parent Loop BB62_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB62_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB62_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB62_143 Depth=3
	movl	$0, -4(%rbp)
.LBB62_145:                             # %for.cond456
                                        #   Parent Loop BB62_139 Depth=1
                                        #     Parent Loop BB62_141 Depth=2
                                        #       Parent Loop BB62_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB62_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB62_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB62_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_145
.LBB62_148:                             # %for.end475
                                        #   in Loop: Header=BB62_143 Depth=3
	jmp	.LBB62_149
.LBB62_149:                             # %for.inc476
                                        #   in Loop: Header=BB62_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_143
.LBB62_150:                             # %for.end478
                                        #   in Loop: Header=BB62_141 Depth=2
	jmp	.LBB62_151
.LBB62_151:                             # %for.inc479
                                        #   in Loop: Header=BB62_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_141
.LBB62_152:                             # %for.end481
                                        #   in Loop: Header=BB62_139 Depth=1
	jmp	.LBB62_153
.LBB62_153:                             # %for.inc482
                                        #   in Loop: Header=BB62_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_139
.LBB62_154:                             # %for.end484
	jmp	.LBB62_155
.LBB62_155:                             # %if.end485
	jmp	.LBB62_156
.LBB62_156:                             # %if.end486
	jmp	.LBB62_157
.LBB62_157:                             # %if.end487
	jmp	.LBB62_180
.LBB62_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB62_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB62_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB62_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB62_161 Depth=1
	movl	$0, -4(%rbp)
.LBB62_163:                             # %for.cond499
                                        #   Parent Loop BB62_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB62_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB62_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_163
.LBB62_166:                             # %for.end519
                                        #   in Loop: Header=BB62_161 Depth=1
	jmp	.LBB62_167
.LBB62_167:                             # %for.inc520
                                        #   in Loop: Header=BB62_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_161
.LBB62_168:                             # %for.end522
	jmp	.LBB62_169
.LBB62_169:                             # %if.end523
	jmp	.LBB62_179
.LBB62_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB62_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB62_171 Depth=1
	movl	$0, -4(%rbp)
.LBB62_173:                             # %for.cond529
                                        #   Parent Loop BB62_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB62_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB62_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_173
.LBB62_176:                             # %for.end541
                                        #   in Loop: Header=BB62_171 Depth=1
	jmp	.LBB62_177
.LBB62_177:                             # %for.inc542
                                        #   in Loop: Header=BB62_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_171
.LBB62_178:                             # %for.end544
	jmp	.LBB62_179
.LBB62_179:                             # %if.end545
	jmp	.LBB62_180
.LBB62_180:                             # %sw.epilog
	cmpl	$1360658764, -68(%rbp)  # imm = 0x511A014C
	jne	.LBB62_182
.LBB62_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_181
.Lfunc_end62:
	.size	Conceal_Error.52, .Lfunc_end62-Conceal_Error.52
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI62_0:
	.quad	.LBB62_16
	.quad	.LBB62_158
	.quad	.LBB62_106
	.quad	.LBB62_180
	.quad	.LBB62_36
                                        # -- End function
	.text
	.globl	Get_Reference_Pixel.53  # -- Begin function Get_Reference_Pixel.53
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.53,@function
Get_Reference_Pixel.53:                 # @Get_Reference_Pixel.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1331781267, -108(%rbp) # imm = 0x4F615E93
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB63_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB63_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB63_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB63_5
.LBB63_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB63_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB63_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB63_11
.LBB63_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB63_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB63_10
.LBB63_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB63_10:                              # %cond.end14
.LBB63_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB63_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB63_14
.LBB63_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB63_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB63_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB63_20
.LBB63_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB63_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB63_19
.LBB63_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB63_19:                              # %cond.end29
.LBB63_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_332
.LBB63_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB63_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB63_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB63_25
.LBB63_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB63_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB63_31
.LBB63_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB63_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB63_30
.LBB63_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB63_30:                              # %cond.end52
.LBB63_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB63_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB63_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_36
.LBB63_35:                              # %cond.false61
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_36:                              # %cond.end63
                                        #   in Loop: Header=BB63_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB63_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_42
.LBB63_38:                              # %cond.false68
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_41
.LBB63_40:                              # %cond.false73
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_41:                              # %cond.end75
                                        #   in Loop: Header=BB63_32 Depth=1
.LBB63_42:                              # %cond.end77
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_32
.LBB63_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_47
.LBB63_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB63_53
.LBB63_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_52
.LBB63_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_52:                              # %cond.end113
.LBB63_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB63_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB63_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB63_57
.LBB63_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB63_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB63_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB63_63
.LBB63_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB63_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB63_62
.LBB63_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB63_62:                              # %cond.end136
.LBB63_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB63_76
.LBB63_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB63_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB63_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB63_68
.LBB63_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB63_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB63_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB63_74
.LBB63_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB63_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB63_73
.LBB63_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB63_73:                              # %cond.end169
.LBB63_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB63_75:                              # %if.end
	jmp	.LBB63_76
.LBB63_76:                              # %if.end178
	jmp	.LBB63_331
.LBB63_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB63_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB63_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB63_81
.LBB63_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB63_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB63_87
.LBB63_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB63_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB63_86
.LBB63_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB63_86:                              # %cond.end197
.LBB63_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB63_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB63_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_92
.LBB63_91:                              # %cond.false209
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_92:                              # %cond.end211
                                        #   in Loop: Header=BB63_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB63_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_98
.LBB63_94:                              # %cond.false216
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_97
.LBB63_96:                              # %cond.false221
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_97:                              # %cond.end223
                                        #   in Loop: Header=BB63_88 Depth=1
.LBB63_98:                              # %cond.end225
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_88
.LBB63_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_103
.LBB63_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB63_109
.LBB63_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_108
.LBB63_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_108:                             # %cond.end266
.LBB63_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB63_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB63_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB63_113
.LBB63_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB63_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB63_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB63_119
.LBB63_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB63_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB63_118
.LBB63_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB63_118:                             # %cond.end287
.LBB63_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB63_132
.LBB63_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB63_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB63_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB63_124
.LBB63_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB63_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB63_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB63_130
.LBB63_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB63_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB63_129
.LBB63_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB63_129:                             # %cond.end320
.LBB63_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB63_131:                             # %if.end331
	jmp	.LBB63_132
.LBB63_132:                             # %if.end332
	jmp	.LBB63_330
.LBB63_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB63_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB63_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB63_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_139
.LBB63_138:                             # %cond.false345
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_139:                             # %cond.end347
                                        #   in Loop: Header=BB63_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB63_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_145
.LBB63_141:                             # %cond.false352
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_144
.LBB63_143:                             # %cond.false357
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_144:                             # %cond.end359
                                        #   in Loop: Header=BB63_135 Depth=1
.LBB63_145:                             # %cond.end361
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB63_146:                             # %for.cond363
                                        #   Parent Loop BB63_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB63_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB63_150
.LBB63_149:                             # %cond.false371
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_150:                             # %cond.end373
                                        #   in Loop: Header=BB63_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB63_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_156
.LBB63_152:                             # %cond.false378
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB63_155
.LBB63_154:                             # %cond.false383
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_155:                             # %cond.end385
                                        #   in Loop: Header=BB63_146 Depth=2
.LBB63_156:                             # %cond.end387
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_146
.LBB63_158:                             # %for.end401
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_135
.LBB63_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB63_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB63_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB63_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB63_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_161
.LBB63_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_167
.LBB63_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB63_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB63_173
.LBB63_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_172
.LBB63_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB63_172:                             # %cond.end449
.LBB63_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB63_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_177
.LBB63_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB63_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB63_183
.LBB63_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_182
.LBB63_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_182:                             # %cond.end486
.LBB63_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB63_196
.LBB63_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB63_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_188
.LBB63_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB63_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB63_194
.LBB63_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_193
.LBB63_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_193:                             # %cond.end526
.LBB63_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB63_195:                             # %if.end532
	jmp	.LBB63_196
.LBB63_196:                             # %if.end533
	jmp	.LBB63_329
.LBB63_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB63_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB63_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB63_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_203
.LBB63_202:                             # %cond.false546
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_203:                             # %cond.end548
                                        #   in Loop: Header=BB63_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB63_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_209
.LBB63_205:                             # %cond.false553
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_208
.LBB63_207:                             # %cond.false558
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_208:                             # %cond.end560
                                        #   in Loop: Header=BB63_199 Depth=1
.LBB63_209:                             # %cond.end562
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB63_210:                             # %for.cond564
                                        #   Parent Loop BB63_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB63_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB63_214
.LBB63_213:                             # %cond.false572
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_214:                             # %cond.end574
                                        #   in Loop: Header=BB63_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB63_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_220
.LBB63_216:                             # %cond.false579
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB63_219
.LBB63_218:                             # %cond.false584
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_219:                             # %cond.end586
                                        #   in Loop: Header=BB63_210 Depth=2
.LBB63_220:                             # %cond.end588
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_210
.LBB63_222:                             # %for.end602
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_199
.LBB63_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB63_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB63_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB63_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB63_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_225
.LBB63_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_231
.LBB63_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB63_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB63_237
.LBB63_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_236
.LBB63_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB63_236:                             # %cond.end650
.LBB63_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB63_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_241
.LBB63_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB63_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB63_247
.LBB63_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_246
.LBB63_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_246:                             # %cond.end687
.LBB63_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB63_258
.LBB63_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_251
.LBB63_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB63_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB63_257
.LBB63_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_256
.LBB63_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_256:                             # %cond.end724
.LBB63_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB63_258:                             # %if.end730
	jmp	.LBB63_328
.LBB63_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB63_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB63_262
.LBB63_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB63_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB63_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB63_265
.LBB63_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB63_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB63_271
.LBB63_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB63_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB63_270
.LBB63_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB63_270:                             # %cond.end753
.LBB63_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB63_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB63_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_276
.LBB63_275:                             # %cond.false765
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_276:                             # %cond.end767
                                        #   in Loop: Header=BB63_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB63_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_282
.LBB63_278:                             # %cond.false772
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_281
.LBB63_280:                             # %cond.false777
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_281:                             # %cond.end779
                                        #   in Loop: Header=BB63_272 Depth=1
.LBB63_282:                             # %cond.end781
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_272
.LBB63_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_287
.LBB63_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB63_293
.LBB63_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_292
.LBB63_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_292:                             # %cond.end822
.LBB63_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB63_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB63_296
.LBB63_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB63_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB63_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB63_299
.LBB63_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB63_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB63_305
.LBB63_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB63_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB63_304
.LBB63_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB63_304:                             # %cond.end847
.LBB63_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB63_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB63_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_310
.LBB63_309:                             # %cond.false859
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_310:                             # %cond.end861
                                        #   in Loop: Header=BB63_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB63_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_316
.LBB63_312:                             # %cond.false866
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_315
.LBB63_314:                             # %cond.false871
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_315:                             # %cond.end873
                                        #   in Loop: Header=BB63_306 Depth=1
.LBB63_316:                             # %cond.end875
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_306
.LBB63_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_321
.LBB63_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB63_327
.LBB63_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_326
.LBB63_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_326:                             # %cond.end916
.LBB63_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB63_328:                             # %if.end922
	jmp	.LBB63_329
.LBB63_329:                             # %if.end923
	jmp	.LBB63_330
.LBB63_330:                             # %if.end924
	jmp	.LBB63_331
.LBB63_331:                             # %if.end925
	jmp	.LBB63_332
.LBB63_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1331781267, -108(%rbp) # imm = 0x4F615E93
	jne	.LBB63_334
.LBB63_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_333
.Lfunc_end63:
	.size	Get_Reference_Pixel.53, .Lfunc_end63-Get_Reference_Pixel.53
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.54 # -- Begin function compute_residue_b8block.54
	.p2align	4, 0x90
	.type	compute_residue_b8block.54,@function
compute_residue_b8block.54:             # @compute_residue_b8block.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$148943646, -36(%rbp)   # imm = 0x8E0B31E
	movl	%edi, -20(%rbp)
	movl	%esi, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB64_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB64_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB64_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB64_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB64_4:                               # %for.cond4
                                        #   Parent Loop BB64_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB64_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB64_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB64_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_4
.LBB64_7:                               # %for.end
                                        #   in Loop: Header=BB64_2 Depth=1
	jmp	.LBB64_8
.LBB64_8:                               # %for.inc22
                                        #   in Loop: Header=BB64_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_2
.LBB64_9:                               # %for.end24
	jmp	.LBB64_19
.LBB64_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB64_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB64_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB64_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB64_13:                              # %for.cond29
                                        #   Parent Loop BB64_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB64_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB64_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB64_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_13
.LBB64_16:                              # %for.end56
                                        #   in Loop: Header=BB64_11 Depth=1
	jmp	.LBB64_17
.LBB64_17:                              # %for.inc57
                                        #   in Loop: Header=BB64_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_11
.LBB64_18:                              # %for.end59
	jmp	.LBB64_19
.LBB64_19:                              # %if.end
	cmpl	$148943646, -36(%rbp)   # imm = 0x8E0B31E
	jne	.LBB64_21
.LBB64_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_20
.Lfunc_end64:
	.size	compute_residue_b8block.54, .Lfunc_end64-compute_residue_b8block.54
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.55 # -- Begin function compute_residue_b8block.55
	.p2align	4, 0x90
	.type	compute_residue_b8block.55,@function
compute_residue_b8block.55:             # @compute_residue_b8block.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$769431410, -36(%rbp)   # imm = 0x2DDC9772
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB65_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB65_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB65_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_4:                               # %for.cond4
                                        #   Parent Loop BB65_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB65_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB65_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB65_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_4
.LBB65_7:                               # %for.end
                                        #   in Loop: Header=BB65_2 Depth=1
	jmp	.LBB65_8
.LBB65_8:                               # %for.inc22
                                        #   in Loop: Header=BB65_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_2
.LBB65_9:                               # %for.end24
	jmp	.LBB65_19
.LBB65_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB65_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB65_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_13:                              # %for.cond29
                                        #   Parent Loop BB65_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB65_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB65_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB65_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_13
.LBB65_16:                              # %for.end56
                                        #   in Loop: Header=BB65_11 Depth=1
	jmp	.LBB65_17
.LBB65_17:                              # %for.inc57
                                        #   in Loop: Header=BB65_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_11
.LBB65_18:                              # %for.end59
	jmp	.LBB65_19
.LBB65_19:                              # %if.end
	cmpl	$769431410, -36(%rbp)   # imm = 0x2DDC9772
	jne	.LBB65_21
.LBB65_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_20
.Lfunc_end65:
	.size	compute_residue_b8block.55, .Lfunc_end65-compute_residue_b8block.55
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.56  # -- Begin function Get_Reference_Pixel.56
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.56,@function
Get_Reference_Pixel.56:                 # @Get_Reference_Pixel.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1669475112, -100(%rbp) # imm = 0x63822B28
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB66_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB66_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB66_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB66_5
.LBB66_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB66_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB66_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB66_11
.LBB66_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB66_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB66_10
.LBB66_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB66_10:                              # %cond.end14
.LBB66_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB66_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB66_14
.LBB66_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB66_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB66_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB66_20
.LBB66_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB66_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB66_19
.LBB66_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB66_19:                              # %cond.end29
.LBB66_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_332
.LBB66_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB66_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB66_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB66_25
.LBB66_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB66_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB66_31
.LBB66_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB66_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB66_30
.LBB66_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB66_30:                              # %cond.end52
.LBB66_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB66_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB66_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_36
.LBB66_35:                              # %cond.false61
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_36:                              # %cond.end63
                                        #   in Loop: Header=BB66_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB66_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_42
.LBB66_38:                              # %cond.false68
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_41
.LBB66_40:                              # %cond.false73
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_41:                              # %cond.end75
                                        #   in Loop: Header=BB66_32 Depth=1
.LBB66_42:                              # %cond.end77
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_32
.LBB66_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_47
.LBB66_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB66_53
.LBB66_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_52
.LBB66_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_52:                              # %cond.end113
.LBB66_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB66_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB66_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB66_57
.LBB66_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB66_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB66_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB66_63
.LBB66_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB66_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB66_62
.LBB66_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB66_62:                              # %cond.end136
.LBB66_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB66_76
.LBB66_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB66_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB66_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB66_68
.LBB66_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB66_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB66_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB66_74
.LBB66_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB66_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB66_73
.LBB66_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB66_73:                              # %cond.end169
.LBB66_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_75:                              # %if.end
	jmp	.LBB66_76
.LBB66_76:                              # %if.end178
	jmp	.LBB66_331
.LBB66_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB66_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB66_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB66_81
.LBB66_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB66_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB66_87
.LBB66_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB66_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB66_86
.LBB66_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB66_86:                              # %cond.end197
.LBB66_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB66_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB66_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_92
.LBB66_91:                              # %cond.false209
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_92:                              # %cond.end211
                                        #   in Loop: Header=BB66_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB66_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_98
.LBB66_94:                              # %cond.false216
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_97
.LBB66_96:                              # %cond.false221
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_97:                              # %cond.end223
                                        #   in Loop: Header=BB66_88 Depth=1
.LBB66_98:                              # %cond.end225
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_88
.LBB66_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_103
.LBB66_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB66_109
.LBB66_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_108
.LBB66_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_108:                             # %cond.end266
.LBB66_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB66_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB66_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB66_113
.LBB66_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB66_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB66_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB66_119
.LBB66_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB66_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB66_118
.LBB66_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB66_118:                             # %cond.end287
.LBB66_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB66_132
.LBB66_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB66_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB66_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB66_124
.LBB66_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB66_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB66_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB66_130
.LBB66_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB66_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB66_129
.LBB66_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB66_129:                             # %cond.end320
.LBB66_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_131:                             # %if.end331
	jmp	.LBB66_132
.LBB66_132:                             # %if.end332
	jmp	.LBB66_330
.LBB66_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB66_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB66_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_139
.LBB66_138:                             # %cond.false345
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_139:                             # %cond.end347
                                        #   in Loop: Header=BB66_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB66_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_145
.LBB66_141:                             # %cond.false352
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_144
.LBB66_143:                             # %cond.false357
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_144:                             # %cond.end359
                                        #   in Loop: Header=BB66_135 Depth=1
.LBB66_145:                             # %cond.end361
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB66_146:                             # %for.cond363
                                        #   Parent Loop BB66_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB66_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB66_150
.LBB66_149:                             # %cond.false371
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_150:                             # %cond.end373
                                        #   in Loop: Header=BB66_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB66_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_156
.LBB66_152:                             # %cond.false378
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB66_155
.LBB66_154:                             # %cond.false383
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_155:                             # %cond.end385
                                        #   in Loop: Header=BB66_146 Depth=2
.LBB66_156:                             # %cond.end387
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_146
.LBB66_158:                             # %for.end401
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_135
.LBB66_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB66_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB66_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB66_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB66_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_161
.LBB66_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_167
.LBB66_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB66_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB66_173
.LBB66_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_172
.LBB66_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB66_172:                             # %cond.end449
.LBB66_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB66_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_177
.LBB66_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB66_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB66_183
.LBB66_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_182
.LBB66_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_182:                             # %cond.end486
.LBB66_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB66_196
.LBB66_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB66_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_188
.LBB66_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB66_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB66_194
.LBB66_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_193
.LBB66_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_193:                             # %cond.end526
.LBB66_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_195:                             # %if.end532
	jmp	.LBB66_196
.LBB66_196:                             # %if.end533
	jmp	.LBB66_329
.LBB66_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB66_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB66_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB66_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_203
.LBB66_202:                             # %cond.false546
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_203:                             # %cond.end548
                                        #   in Loop: Header=BB66_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB66_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_209
.LBB66_205:                             # %cond.false553
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_208
.LBB66_207:                             # %cond.false558
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_208:                             # %cond.end560
                                        #   in Loop: Header=BB66_199 Depth=1
.LBB66_209:                             # %cond.end562
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB66_210:                             # %for.cond564
                                        #   Parent Loop BB66_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB66_214
.LBB66_213:                             # %cond.false572
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_214:                             # %cond.end574
                                        #   in Loop: Header=BB66_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB66_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_220
.LBB66_216:                             # %cond.false579
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB66_219
.LBB66_218:                             # %cond.false584
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_219:                             # %cond.end586
                                        #   in Loop: Header=BB66_210 Depth=2
.LBB66_220:                             # %cond.end588
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_210
.LBB66_222:                             # %for.end602
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_199
.LBB66_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB66_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB66_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB66_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB66_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_225
.LBB66_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_231
.LBB66_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB66_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB66_237
.LBB66_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_236
.LBB66_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB66_236:                             # %cond.end650
.LBB66_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB66_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_241
.LBB66_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB66_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB66_247
.LBB66_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_246
.LBB66_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_246:                             # %cond.end687
.LBB66_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB66_258
.LBB66_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_251
.LBB66_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB66_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB66_257
.LBB66_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_256
.LBB66_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_256:                             # %cond.end724
.LBB66_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_258:                             # %if.end730
	jmp	.LBB66_328
.LBB66_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB66_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB66_262
.LBB66_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB66_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB66_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB66_265
.LBB66_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB66_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB66_271
.LBB66_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB66_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB66_270
.LBB66_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB66_270:                             # %cond.end753
.LBB66_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB66_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB66_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_276
.LBB66_275:                             # %cond.false765
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_276:                             # %cond.end767
                                        #   in Loop: Header=BB66_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB66_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_282
.LBB66_278:                             # %cond.false772
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_281
.LBB66_280:                             # %cond.false777
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_281:                             # %cond.end779
                                        #   in Loop: Header=BB66_272 Depth=1
.LBB66_282:                             # %cond.end781
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_272
.LBB66_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_287
.LBB66_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB66_293
.LBB66_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_292
.LBB66_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_292:                             # %cond.end822
.LBB66_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB66_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB66_296
.LBB66_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB66_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB66_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB66_299
.LBB66_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB66_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB66_305
.LBB66_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB66_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB66_304
.LBB66_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB66_304:                             # %cond.end847
.LBB66_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB66_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB66_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_310
.LBB66_309:                             # %cond.false859
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_310:                             # %cond.end861
                                        #   in Loop: Header=BB66_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB66_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_316
.LBB66_312:                             # %cond.false866
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_315
.LBB66_314:                             # %cond.false871
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_315:                             # %cond.end873
                                        #   in Loop: Header=BB66_306 Depth=1
.LBB66_316:                             # %cond.end875
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_306
.LBB66_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_321
.LBB66_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB66_327
.LBB66_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_326
.LBB66_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_326:                             # %cond.end916
.LBB66_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_328:                             # %if.end922
	jmp	.LBB66_329
.LBB66_329:                             # %if.end923
	jmp	.LBB66_330
.LBB66_330:                             # %if.end924
	jmp	.LBB66_331
.LBB66_331:                             # %if.end925
	jmp	.LBB66_332
.LBB66_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1669475112, -100(%rbp) # imm = 0x63822B28
	jne	.LBB66_334
.LBB66_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_333
.Lfunc_end66:
	.size	Get_Reference_Pixel.56, .Lfunc_end66-Get_Reference_Pixel.56
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.57        # -- Begin function Conceal_Error.57
	.p2align	4, 0x90
	.type	Conceal_Error.57,@function
Conceal_Error.57:                       # @Conceal_Error.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$339442979, -68(%rbp)   # imm = 0x143B7D23
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB67_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB67_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB67_4:                               # %land.end
.LBB67_5:                               # %lor.end
.LBB67_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB67_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB67_9
.LBB67_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB67_14
.LBB67_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB67_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB67_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB67_12:                              # %land.end51
.LBB67_13:                              # %lor.end53
.LBB67_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB67_180
# %bb.15:                               # %land.end54
	movq	.LJTI67_0(,%rax,8), %rax
	jmpq	*%rax
.LBB67_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB67_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB67_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB67_18 Depth=1
	movl	$0, -4(%rbp)
.LBB67_20:                              # %for.cond68
                                        #   Parent Loop BB67_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB67_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB67_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_20
.LBB67_23:                              # %for.end
                                        #   in Loop: Header=BB67_18 Depth=1
	jmp	.LBB67_24
.LBB67_24:                              # %for.inc85
                                        #   in Loop: Header=BB67_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_18
.LBB67_25:                              # %for.end87
	jmp	.LBB67_35
.LBB67_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB67_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB67_27 Depth=1
	movl	$0, -4(%rbp)
.LBB67_29:                              # %for.cond92
                                        #   Parent Loop BB67_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB67_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB67_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_29
.LBB67_32:                              # %for.end104
                                        #   in Loop: Header=BB67_27 Depth=1
	jmp	.LBB67_33
.LBB67_33:                              # %for.inc105
                                        #   in Loop: Header=BB67_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_27
.LBB67_34:                              # %for.end107
	jmp	.LBB67_35
.LBB67_35:                              # %if.end
	jmp	.LBB67_180
.LBB67_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB67_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_39 Depth 2
                                        #       Child Loop BB67_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB67_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB67_37 Depth=1
	movl	$0, -16(%rbp)
.LBB67_39:                              # %for.cond113
                                        #   Parent Loop BB67_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB67_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB67_39 Depth=2
	movl	$0, -4(%rbp)
.LBB67_41:                              # %for.cond117
                                        #   Parent Loop BB67_37 Depth=1
                                        #     Parent Loop BB67_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB67_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB67_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB67_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_41
.LBB67_44:                              # %for.end141
                                        #   in Loop: Header=BB67_39 Depth=2
	jmp	.LBB67_45
.LBB67_45:                              # %for.inc142
                                        #   in Loop: Header=BB67_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_39
.LBB67_46:                              # %for.end144
                                        #   in Loop: Header=BB67_37 Depth=1
	jmp	.LBB67_47
.LBB67_47:                              # %for.inc145
                                        #   in Loop: Header=BB67_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_37
.LBB67_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB67_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB67_49 Depth=1
	movl	$0, -8(%rbp)
.LBB67_51:                              # %for.cond152
                                        #   Parent Loop BB67_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB67_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB67_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_51
.LBB67_54:                              # %for.end162
                                        #   in Loop: Header=BB67_49 Depth=1
	jmp	.LBB67_55
.LBB67_55:                              # %for.inc163
                                        #   in Loop: Header=BB67_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_49
.LBB67_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB67_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB67_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB67_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB67_59 Depth=1
	movl	$0, -4(%rbp)
.LBB67_61:                              # %for.cond175
                                        #   Parent Loop BB67_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB67_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB67_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_61
.LBB67_64:                              # %for.end195
                                        #   in Loop: Header=BB67_59 Depth=1
	jmp	.LBB67_65
.LBB67_65:                              # %for.inc196
                                        #   in Loop: Header=BB67_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_59
.LBB67_66:                              # %for.end198
	jmp	.LBB67_95
.LBB67_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB67_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB67_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_71 Depth 2
                                        #       Child Loop BB67_73 Depth 3
                                        #         Child Loop BB67_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB67_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB67_71:                              # %for.cond210
                                        #   Parent Loop BB67_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_73 Depth 3
                                        #         Child Loop BB67_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB67_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB67_73:                              # %for.cond236
                                        #   Parent Loop BB67_69 Depth=1
                                        #     Parent Loop BB67_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB67_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB67_73 Depth=3
	movl	$0, -4(%rbp)
.LBB67_75:                              # %for.cond240
                                        #   Parent Loop BB67_69 Depth=1
                                        #     Parent Loop BB67_71 Depth=2
                                        #       Parent Loop BB67_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB67_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB67_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB67_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_75
.LBB67_78:                              # %for.end259
                                        #   in Loop: Header=BB67_73 Depth=3
	jmp	.LBB67_79
.LBB67_79:                              # %for.inc260
                                        #   in Loop: Header=BB67_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_73
.LBB67_80:                              # %for.end262
                                        #   in Loop: Header=BB67_71 Depth=2
	jmp	.LBB67_81
.LBB67_81:                              # %for.inc263
                                        #   in Loop: Header=BB67_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_71
.LBB67_82:                              # %for.end265
                                        #   in Loop: Header=BB67_69 Depth=1
	jmp	.LBB67_83
.LBB67_83:                              # %for.inc266
                                        #   in Loop: Header=BB67_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_69
.LBB67_84:                              # %for.end268
	jmp	.LBB67_94
.LBB67_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB67_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB67_86 Depth=1
	movl	$0, -4(%rbp)
.LBB67_88:                              # %for.cond274
                                        #   Parent Loop BB67_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB67_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB67_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_88
.LBB67_91:                              # %for.end294
                                        #   in Loop: Header=BB67_86 Depth=1
	jmp	.LBB67_92
.LBB67_92:                              # %for.inc295
                                        #   in Loop: Header=BB67_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_86
.LBB67_93:                              # %for.end297
	jmp	.LBB67_94
.LBB67_94:                              # %if.end298
	jmp	.LBB67_95
.LBB67_95:                              # %if.end299
	jmp	.LBB67_105
.LBB67_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB67_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB67_97 Depth=1
	movl	$0, -4(%rbp)
.LBB67_99:                              # %for.cond305
                                        #   Parent Loop BB67_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB67_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB67_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_99
.LBB67_102:                             # %for.end317
                                        #   in Loop: Header=BB67_97 Depth=1
	jmp	.LBB67_103
.LBB67_103:                             # %for.inc318
                                        #   in Loop: Header=BB67_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_97
.LBB67_104:                             # %for.end320
	jmp	.LBB67_105
.LBB67_105:                             # %if.end321
	jmp	.LBB67_180
.LBB67_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB67_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB67_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_110 Depth 2
                                        #       Child Loop BB67_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB67_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB67_108 Depth=1
	movl	$0, -16(%rbp)
.LBB67_110:                             # %for.cond331
                                        #   Parent Loop BB67_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB67_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB67_110 Depth=2
	movl	$0, -4(%rbp)
.LBB67_112:                             # %for.cond335
                                        #   Parent Loop BB67_108 Depth=1
                                        #     Parent Loop BB67_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB67_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB67_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB67_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_112
.LBB67_115:                             # %for.end359
                                        #   in Loop: Header=BB67_110 Depth=2
	jmp	.LBB67_116
.LBB67_116:                             # %for.inc360
                                        #   in Loop: Header=BB67_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_110
.LBB67_117:                             # %for.end362
                                        #   in Loop: Header=BB67_108 Depth=1
	jmp	.LBB67_118
.LBB67_118:                             # %for.inc363
                                        #   in Loop: Header=BB67_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_108
.LBB67_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB67_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB67_120 Depth=1
	movl	$0, -8(%rbp)
.LBB67_122:                             # %for.cond370
                                        #   Parent Loop BB67_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB67_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB67_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_122
.LBB67_125:                             # %for.end380
                                        #   in Loop: Header=BB67_120 Depth=1
	jmp	.LBB67_126
.LBB67_126:                             # %for.inc381
                                        #   in Loop: Header=BB67_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_120
.LBB67_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB67_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB67_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB67_129 Depth=1
	movl	$0, -4(%rbp)
.LBB67_131:                             # %for.cond390
                                        #   Parent Loop BB67_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB67_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB67_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_131
.LBB67_134:                             # %for.end410
                                        #   in Loop: Header=BB67_129 Depth=1
	jmp	.LBB67_135
.LBB67_135:                             # %for.inc411
                                        #   in Loop: Header=BB67_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_129
.LBB67_136:                             # %for.end413
	jmp	.LBB67_156
.LBB67_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB67_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB67_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_141 Depth 2
                                        #       Child Loop BB67_143 Depth 3
                                        #         Child Loop BB67_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB67_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB67_141:                             # %for.cond425
                                        #   Parent Loop BB67_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_143 Depth 3
                                        #         Child Loop BB67_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB67_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB67_143:                             # %for.cond452
                                        #   Parent Loop BB67_139 Depth=1
                                        #     Parent Loop BB67_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB67_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB67_143 Depth=3
	movl	$0, -4(%rbp)
.LBB67_145:                             # %for.cond456
                                        #   Parent Loop BB67_139 Depth=1
                                        #     Parent Loop BB67_141 Depth=2
                                        #       Parent Loop BB67_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB67_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB67_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB67_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_145
.LBB67_148:                             # %for.end475
                                        #   in Loop: Header=BB67_143 Depth=3
	jmp	.LBB67_149
.LBB67_149:                             # %for.inc476
                                        #   in Loop: Header=BB67_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_143
.LBB67_150:                             # %for.end478
                                        #   in Loop: Header=BB67_141 Depth=2
	jmp	.LBB67_151
.LBB67_151:                             # %for.inc479
                                        #   in Loop: Header=BB67_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_141
.LBB67_152:                             # %for.end481
                                        #   in Loop: Header=BB67_139 Depth=1
	jmp	.LBB67_153
.LBB67_153:                             # %for.inc482
                                        #   in Loop: Header=BB67_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_139
.LBB67_154:                             # %for.end484
	jmp	.LBB67_155
.LBB67_155:                             # %if.end485
	jmp	.LBB67_156
.LBB67_156:                             # %if.end486
	jmp	.LBB67_157
.LBB67_157:                             # %if.end487
	jmp	.LBB67_180
.LBB67_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB67_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB67_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB67_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB67_161 Depth=1
	movl	$0, -4(%rbp)
.LBB67_163:                             # %for.cond499
                                        #   Parent Loop BB67_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB67_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB67_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_163
.LBB67_166:                             # %for.end519
                                        #   in Loop: Header=BB67_161 Depth=1
	jmp	.LBB67_167
.LBB67_167:                             # %for.inc520
                                        #   in Loop: Header=BB67_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_161
.LBB67_168:                             # %for.end522
	jmp	.LBB67_169
.LBB67_169:                             # %if.end523
	jmp	.LBB67_179
.LBB67_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB67_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$0, -4(%rbp)
.LBB67_173:                             # %for.cond529
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB67_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB67_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_173
.LBB67_176:                             # %for.end541
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_177
.LBB67_177:                             # %for.inc542
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_171
.LBB67_178:                             # %for.end544
	jmp	.LBB67_179
.LBB67_179:                             # %if.end545
	jmp	.LBB67_180
.LBB67_180:                             # %sw.epilog
	cmpl	$339442979, -68(%rbp)   # imm = 0x143B7D23
	jne	.LBB67_182
.LBB67_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_181
.Lfunc_end67:
	.size	Conceal_Error.57, .Lfunc_end67-Conceal_Error.57
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI67_0:
	.quad	.LBB67_16
	.quad	.LBB67_158
	.quad	.LBB67_106
	.quad	.LBB67_180
	.quad	.LBB67_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.58 # -- Begin function compute_residue_b8block.58
	.p2align	4, 0x90
	.type	compute_residue_b8block.58,@function
compute_residue_b8block.58:             # @compute_residue_b8block.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$671425125, -36(%rbp)   # imm = 0x28052265
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB68_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB68_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_4:                               # %for.cond4
                                        #   Parent Loop BB68_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB68_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB68_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB68_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_4
.LBB68_7:                               # %for.end
                                        #   in Loop: Header=BB68_2 Depth=1
	jmp	.LBB68_8
.LBB68_8:                               # %for.inc22
                                        #   in Loop: Header=BB68_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_2
.LBB68_9:                               # %for.end24
	jmp	.LBB68_19
.LBB68_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB68_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_13:                              # %for.cond29
                                        #   Parent Loop BB68_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB68_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB68_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB68_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_13
.LBB68_16:                              # %for.end56
                                        #   in Loop: Header=BB68_11 Depth=1
	jmp	.LBB68_17
.LBB68_17:                              # %for.inc57
                                        #   in Loop: Header=BB68_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_11
.LBB68_18:                              # %for.end59
	jmp	.LBB68_19
.LBB68_19:                              # %if.end
	cmpl	$671425125, -36(%rbp)   # imm = 0x28052265
	jne	.LBB68_21
.LBB68_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_20
.Lfunc_end68:
	.size	compute_residue_b8block.58, .Lfunc_end68-compute_residue_b8block.58
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.59        # -- Begin function Conceal_Error.59
	.p2align	4, 0x90
	.type	Conceal_Error.59,@function
Conceal_Error.59:                       # @Conceal_Error.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1560612829, -68(%rbp)  # imm = 0x5D050FDD
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB69_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB69_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB69_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB69_4:                               # %land.end
.LBB69_5:                               # %lor.end
.LBB69_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB69_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB69_9
.LBB69_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB69_14
.LBB69_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB69_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB69_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB69_12:                              # %land.end51
.LBB69_13:                              # %lor.end53
.LBB69_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB69_180
# %bb.15:                               # %land.end54
	movq	.LJTI69_0(,%rax,8), %rax
	jmpq	*%rax
.LBB69_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB69_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB69_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB69_18 Depth=1
	movl	$0, -4(%rbp)
.LBB69_20:                              # %for.cond68
                                        #   Parent Loop BB69_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB69_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB69_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_20
.LBB69_23:                              # %for.end
                                        #   in Loop: Header=BB69_18 Depth=1
	jmp	.LBB69_24
.LBB69_24:                              # %for.inc85
                                        #   in Loop: Header=BB69_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_18
.LBB69_25:                              # %for.end87
	jmp	.LBB69_35
.LBB69_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB69_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB69_27 Depth=1
	movl	$0, -4(%rbp)
.LBB69_29:                              # %for.cond92
                                        #   Parent Loop BB69_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB69_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB69_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_29
.LBB69_32:                              # %for.end104
                                        #   in Loop: Header=BB69_27 Depth=1
	jmp	.LBB69_33
.LBB69_33:                              # %for.inc105
                                        #   in Loop: Header=BB69_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_27
.LBB69_34:                              # %for.end107
	jmp	.LBB69_35
.LBB69_35:                              # %if.end
	jmp	.LBB69_180
.LBB69_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB69_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_39 Depth 2
                                        #       Child Loop BB69_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB69_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB69_37 Depth=1
	movl	$0, -16(%rbp)
.LBB69_39:                              # %for.cond113
                                        #   Parent Loop BB69_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB69_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB69_39 Depth=2
	movl	$0, -4(%rbp)
.LBB69_41:                              # %for.cond117
                                        #   Parent Loop BB69_37 Depth=1
                                        #     Parent Loop BB69_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB69_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB69_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB69_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_41
.LBB69_44:                              # %for.end141
                                        #   in Loop: Header=BB69_39 Depth=2
	jmp	.LBB69_45
.LBB69_45:                              # %for.inc142
                                        #   in Loop: Header=BB69_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_39
.LBB69_46:                              # %for.end144
                                        #   in Loop: Header=BB69_37 Depth=1
	jmp	.LBB69_47
.LBB69_47:                              # %for.inc145
                                        #   in Loop: Header=BB69_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_37
.LBB69_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB69_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB69_49 Depth=1
	movl	$0, -8(%rbp)
.LBB69_51:                              # %for.cond152
                                        #   Parent Loop BB69_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB69_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB69_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_51
.LBB69_54:                              # %for.end162
                                        #   in Loop: Header=BB69_49 Depth=1
	jmp	.LBB69_55
.LBB69_55:                              # %for.inc163
                                        #   in Loop: Header=BB69_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_49
.LBB69_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB69_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB69_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB69_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB69_59 Depth=1
	movl	$0, -4(%rbp)
.LBB69_61:                              # %for.cond175
                                        #   Parent Loop BB69_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB69_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB69_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_61
.LBB69_64:                              # %for.end195
                                        #   in Loop: Header=BB69_59 Depth=1
	jmp	.LBB69_65
.LBB69_65:                              # %for.inc196
                                        #   in Loop: Header=BB69_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_59
.LBB69_66:                              # %for.end198
	jmp	.LBB69_95
.LBB69_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB69_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB69_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_71 Depth 2
                                        #       Child Loop BB69_73 Depth 3
                                        #         Child Loop BB69_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB69_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB69_71:                              # %for.cond210
                                        #   Parent Loop BB69_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_73 Depth 3
                                        #         Child Loop BB69_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB69_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB69_73:                              # %for.cond236
                                        #   Parent Loop BB69_69 Depth=1
                                        #     Parent Loop BB69_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB69_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB69_73 Depth=3
	movl	$0, -4(%rbp)
.LBB69_75:                              # %for.cond240
                                        #   Parent Loop BB69_69 Depth=1
                                        #     Parent Loop BB69_71 Depth=2
                                        #       Parent Loop BB69_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB69_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB69_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB69_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_75
.LBB69_78:                              # %for.end259
                                        #   in Loop: Header=BB69_73 Depth=3
	jmp	.LBB69_79
.LBB69_79:                              # %for.inc260
                                        #   in Loop: Header=BB69_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_73
.LBB69_80:                              # %for.end262
                                        #   in Loop: Header=BB69_71 Depth=2
	jmp	.LBB69_81
.LBB69_81:                              # %for.inc263
                                        #   in Loop: Header=BB69_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_71
.LBB69_82:                              # %for.end265
                                        #   in Loop: Header=BB69_69 Depth=1
	jmp	.LBB69_83
.LBB69_83:                              # %for.inc266
                                        #   in Loop: Header=BB69_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_69
.LBB69_84:                              # %for.end268
	jmp	.LBB69_94
.LBB69_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB69_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB69_86 Depth=1
	movl	$0, -4(%rbp)
.LBB69_88:                              # %for.cond274
                                        #   Parent Loop BB69_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB69_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB69_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_88
.LBB69_91:                              # %for.end294
                                        #   in Loop: Header=BB69_86 Depth=1
	jmp	.LBB69_92
.LBB69_92:                              # %for.inc295
                                        #   in Loop: Header=BB69_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_86
.LBB69_93:                              # %for.end297
	jmp	.LBB69_94
.LBB69_94:                              # %if.end298
	jmp	.LBB69_95
.LBB69_95:                              # %if.end299
	jmp	.LBB69_105
.LBB69_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB69_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB69_97 Depth=1
	movl	$0, -4(%rbp)
.LBB69_99:                              # %for.cond305
                                        #   Parent Loop BB69_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB69_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB69_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_99
.LBB69_102:                             # %for.end317
                                        #   in Loop: Header=BB69_97 Depth=1
	jmp	.LBB69_103
.LBB69_103:                             # %for.inc318
                                        #   in Loop: Header=BB69_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_97
.LBB69_104:                             # %for.end320
	jmp	.LBB69_105
.LBB69_105:                             # %if.end321
	jmp	.LBB69_180
.LBB69_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB69_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB69_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_110 Depth 2
                                        #       Child Loop BB69_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB69_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB69_108 Depth=1
	movl	$0, -16(%rbp)
.LBB69_110:                             # %for.cond331
                                        #   Parent Loop BB69_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB69_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB69_110 Depth=2
	movl	$0, -4(%rbp)
.LBB69_112:                             # %for.cond335
                                        #   Parent Loop BB69_108 Depth=1
                                        #     Parent Loop BB69_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB69_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB69_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB69_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_112
.LBB69_115:                             # %for.end359
                                        #   in Loop: Header=BB69_110 Depth=2
	jmp	.LBB69_116
.LBB69_116:                             # %for.inc360
                                        #   in Loop: Header=BB69_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_110
.LBB69_117:                             # %for.end362
                                        #   in Loop: Header=BB69_108 Depth=1
	jmp	.LBB69_118
.LBB69_118:                             # %for.inc363
                                        #   in Loop: Header=BB69_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_108
.LBB69_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB69_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB69_120 Depth=1
	movl	$0, -8(%rbp)
.LBB69_122:                             # %for.cond370
                                        #   Parent Loop BB69_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB69_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB69_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_122
.LBB69_125:                             # %for.end380
                                        #   in Loop: Header=BB69_120 Depth=1
	jmp	.LBB69_126
.LBB69_126:                             # %for.inc381
                                        #   in Loop: Header=BB69_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_120
.LBB69_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB69_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB69_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB69_129 Depth=1
	movl	$0, -4(%rbp)
.LBB69_131:                             # %for.cond390
                                        #   Parent Loop BB69_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB69_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB69_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_131
.LBB69_134:                             # %for.end410
                                        #   in Loop: Header=BB69_129 Depth=1
	jmp	.LBB69_135
.LBB69_135:                             # %for.inc411
                                        #   in Loop: Header=BB69_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_129
.LBB69_136:                             # %for.end413
	jmp	.LBB69_156
.LBB69_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB69_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB69_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_141 Depth 2
                                        #       Child Loop BB69_143 Depth 3
                                        #         Child Loop BB69_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB69_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB69_141:                             # %for.cond425
                                        #   Parent Loop BB69_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_143 Depth 3
                                        #         Child Loop BB69_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB69_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB69_143:                             # %for.cond452
                                        #   Parent Loop BB69_139 Depth=1
                                        #     Parent Loop BB69_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB69_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB69_143 Depth=3
	movl	$0, -4(%rbp)
.LBB69_145:                             # %for.cond456
                                        #   Parent Loop BB69_139 Depth=1
                                        #     Parent Loop BB69_141 Depth=2
                                        #       Parent Loop BB69_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB69_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB69_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB69_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_145
.LBB69_148:                             # %for.end475
                                        #   in Loop: Header=BB69_143 Depth=3
	jmp	.LBB69_149
.LBB69_149:                             # %for.inc476
                                        #   in Loop: Header=BB69_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_143
.LBB69_150:                             # %for.end478
                                        #   in Loop: Header=BB69_141 Depth=2
	jmp	.LBB69_151
.LBB69_151:                             # %for.inc479
                                        #   in Loop: Header=BB69_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_141
.LBB69_152:                             # %for.end481
                                        #   in Loop: Header=BB69_139 Depth=1
	jmp	.LBB69_153
.LBB69_153:                             # %for.inc482
                                        #   in Loop: Header=BB69_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_139
.LBB69_154:                             # %for.end484
	jmp	.LBB69_155
.LBB69_155:                             # %if.end485
	jmp	.LBB69_156
.LBB69_156:                             # %if.end486
	jmp	.LBB69_157
.LBB69_157:                             # %if.end487
	jmp	.LBB69_180
.LBB69_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB69_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB69_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB69_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB69_161 Depth=1
	movl	$0, -4(%rbp)
.LBB69_163:                             # %for.cond499
                                        #   Parent Loop BB69_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB69_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB69_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_163
.LBB69_166:                             # %for.end519
                                        #   in Loop: Header=BB69_161 Depth=1
	jmp	.LBB69_167
.LBB69_167:                             # %for.inc520
                                        #   in Loop: Header=BB69_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_161
.LBB69_168:                             # %for.end522
	jmp	.LBB69_169
.LBB69_169:                             # %if.end523
	jmp	.LBB69_179
.LBB69_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB69_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB69_171 Depth=1
	movl	$0, -4(%rbp)
.LBB69_173:                             # %for.cond529
                                        #   Parent Loop BB69_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB69_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB69_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_173
.LBB69_176:                             # %for.end541
                                        #   in Loop: Header=BB69_171 Depth=1
	jmp	.LBB69_177
.LBB69_177:                             # %for.inc542
                                        #   in Loop: Header=BB69_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_171
.LBB69_178:                             # %for.end544
	jmp	.LBB69_179
.LBB69_179:                             # %if.end545
	jmp	.LBB69_180
.LBB69_180:                             # %sw.epilog
	cmpl	$1560612829, -68(%rbp)  # imm = 0x5D050FDD
	jne	.LBB69_182
.LBB69_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_181
.Lfunc_end69:
	.size	Conceal_Error.59, .Lfunc_end69-Conceal_Error.59
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI69_0:
	.quad	.LBB69_16
	.quad	.LBB69_158
	.quad	.LBB69_106
	.quad	.LBB69_180
	.quad	.LBB69_36
                                        # -- End function
	.text
	.globl	Conceal_Error.60        # -- Begin function Conceal_Error.60
	.p2align	4, 0x90
	.type	Conceal_Error.60,@function
Conceal_Error.60:                       # @Conceal_Error.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$629200880, -68(%rbp)   # imm = 0x2580D7F0
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB70_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB70_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB70_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB70_4:                               # %land.end
.LBB70_5:                               # %lor.end
.LBB70_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB70_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB70_9
.LBB70_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB70_14
.LBB70_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB70_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB70_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB70_12:                              # %land.end51
.LBB70_13:                              # %lor.end53
.LBB70_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB70_180
# %bb.15:                               # %land.end54
	movq	.LJTI70_0(,%rax,8), %rax
	jmpq	*%rax
.LBB70_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB70_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB70_18 Depth=1
	movl	$0, -4(%rbp)
.LBB70_20:                              # %for.cond68
                                        #   Parent Loop BB70_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB70_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB70_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_20
.LBB70_23:                              # %for.end
                                        #   in Loop: Header=BB70_18 Depth=1
	jmp	.LBB70_24
.LBB70_24:                              # %for.inc85
                                        #   in Loop: Header=BB70_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_18
.LBB70_25:                              # %for.end87
	jmp	.LBB70_35
.LBB70_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB70_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB70_27 Depth=1
	movl	$0, -4(%rbp)
.LBB70_29:                              # %for.cond92
                                        #   Parent Loop BB70_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB70_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB70_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_29
.LBB70_32:                              # %for.end104
                                        #   in Loop: Header=BB70_27 Depth=1
	jmp	.LBB70_33
.LBB70_33:                              # %for.inc105
                                        #   in Loop: Header=BB70_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_27
.LBB70_34:                              # %for.end107
	jmp	.LBB70_35
.LBB70_35:                              # %if.end
	jmp	.LBB70_180
.LBB70_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB70_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_39 Depth 2
                                        #       Child Loop BB70_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB70_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB70_37 Depth=1
	movl	$0, -16(%rbp)
.LBB70_39:                              # %for.cond113
                                        #   Parent Loop BB70_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB70_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB70_39 Depth=2
	movl	$0, -4(%rbp)
.LBB70_41:                              # %for.cond117
                                        #   Parent Loop BB70_37 Depth=1
                                        #     Parent Loop BB70_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB70_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB70_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB70_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_41
.LBB70_44:                              # %for.end141
                                        #   in Loop: Header=BB70_39 Depth=2
	jmp	.LBB70_45
.LBB70_45:                              # %for.inc142
                                        #   in Loop: Header=BB70_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_39
.LBB70_46:                              # %for.end144
                                        #   in Loop: Header=BB70_37 Depth=1
	jmp	.LBB70_47
.LBB70_47:                              # %for.inc145
                                        #   in Loop: Header=BB70_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_37
.LBB70_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB70_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB70_49 Depth=1
	movl	$0, -8(%rbp)
.LBB70_51:                              # %for.cond152
                                        #   Parent Loop BB70_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB70_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB70_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_51
.LBB70_54:                              # %for.end162
                                        #   in Loop: Header=BB70_49 Depth=1
	jmp	.LBB70_55
.LBB70_55:                              # %for.inc163
                                        #   in Loop: Header=BB70_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_49
.LBB70_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB70_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB70_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB70_59 Depth=1
	movl	$0, -4(%rbp)
.LBB70_61:                              # %for.cond175
                                        #   Parent Loop BB70_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB70_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB70_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_61
.LBB70_64:                              # %for.end195
                                        #   in Loop: Header=BB70_59 Depth=1
	jmp	.LBB70_65
.LBB70_65:                              # %for.inc196
                                        #   in Loop: Header=BB70_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_59
.LBB70_66:                              # %for.end198
	jmp	.LBB70_95
.LBB70_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB70_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB70_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_71 Depth 2
                                        #       Child Loop BB70_73 Depth 3
                                        #         Child Loop BB70_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB70_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB70_71:                              # %for.cond210
                                        #   Parent Loop BB70_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_73 Depth 3
                                        #         Child Loop BB70_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB70_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB70_73:                              # %for.cond236
                                        #   Parent Loop BB70_69 Depth=1
                                        #     Parent Loop BB70_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB70_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB70_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB70_73 Depth=3
	movl	$0, -4(%rbp)
.LBB70_75:                              # %for.cond240
                                        #   Parent Loop BB70_69 Depth=1
                                        #     Parent Loop BB70_71 Depth=2
                                        #       Parent Loop BB70_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB70_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB70_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB70_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_75
.LBB70_78:                              # %for.end259
                                        #   in Loop: Header=BB70_73 Depth=3
	jmp	.LBB70_79
.LBB70_79:                              # %for.inc260
                                        #   in Loop: Header=BB70_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_73
.LBB70_80:                              # %for.end262
                                        #   in Loop: Header=BB70_71 Depth=2
	jmp	.LBB70_81
.LBB70_81:                              # %for.inc263
                                        #   in Loop: Header=BB70_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_71
.LBB70_82:                              # %for.end265
                                        #   in Loop: Header=BB70_69 Depth=1
	jmp	.LBB70_83
.LBB70_83:                              # %for.inc266
                                        #   in Loop: Header=BB70_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_69
.LBB70_84:                              # %for.end268
	jmp	.LBB70_94
.LBB70_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB70_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB70_86 Depth=1
	movl	$0, -4(%rbp)
.LBB70_88:                              # %for.cond274
                                        #   Parent Loop BB70_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB70_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB70_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_88
.LBB70_91:                              # %for.end294
                                        #   in Loop: Header=BB70_86 Depth=1
	jmp	.LBB70_92
.LBB70_92:                              # %for.inc295
                                        #   in Loop: Header=BB70_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_86
.LBB70_93:                              # %for.end297
	jmp	.LBB70_94
.LBB70_94:                              # %if.end298
	jmp	.LBB70_95
.LBB70_95:                              # %if.end299
	jmp	.LBB70_105
.LBB70_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB70_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB70_97 Depth=1
	movl	$0, -4(%rbp)
.LBB70_99:                              # %for.cond305
                                        #   Parent Loop BB70_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB70_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB70_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_99
.LBB70_102:                             # %for.end317
                                        #   in Loop: Header=BB70_97 Depth=1
	jmp	.LBB70_103
.LBB70_103:                             # %for.inc318
                                        #   in Loop: Header=BB70_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_97
.LBB70_104:                             # %for.end320
	jmp	.LBB70_105
.LBB70_105:                             # %if.end321
	jmp	.LBB70_180
.LBB70_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB70_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_110 Depth 2
                                        #       Child Loop BB70_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB70_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB70_108 Depth=1
	movl	$0, -16(%rbp)
.LBB70_110:                             # %for.cond331
                                        #   Parent Loop BB70_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB70_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB70_110 Depth=2
	movl	$0, -4(%rbp)
.LBB70_112:                             # %for.cond335
                                        #   Parent Loop BB70_108 Depth=1
                                        #     Parent Loop BB70_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB70_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB70_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB70_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_112
.LBB70_115:                             # %for.end359
                                        #   in Loop: Header=BB70_110 Depth=2
	jmp	.LBB70_116
.LBB70_116:                             # %for.inc360
                                        #   in Loop: Header=BB70_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_110
.LBB70_117:                             # %for.end362
                                        #   in Loop: Header=BB70_108 Depth=1
	jmp	.LBB70_118
.LBB70_118:                             # %for.inc363
                                        #   in Loop: Header=BB70_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_108
.LBB70_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB70_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB70_120 Depth=1
	movl	$0, -8(%rbp)
.LBB70_122:                             # %for.cond370
                                        #   Parent Loop BB70_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB70_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB70_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_122
.LBB70_125:                             # %for.end380
                                        #   in Loop: Header=BB70_120 Depth=1
	jmp	.LBB70_126
.LBB70_126:                             # %for.inc381
                                        #   in Loop: Header=BB70_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_120
.LBB70_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB70_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB70_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB70_129 Depth=1
	movl	$0, -4(%rbp)
.LBB70_131:                             # %for.cond390
                                        #   Parent Loop BB70_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB70_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB70_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_131
.LBB70_134:                             # %for.end410
                                        #   in Loop: Header=BB70_129 Depth=1
	jmp	.LBB70_135
.LBB70_135:                             # %for.inc411
                                        #   in Loop: Header=BB70_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_129
.LBB70_136:                             # %for.end413
	jmp	.LBB70_156
.LBB70_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB70_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB70_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_141 Depth 2
                                        #       Child Loop BB70_143 Depth 3
                                        #         Child Loop BB70_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB70_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB70_141:                             # %for.cond425
                                        #   Parent Loop BB70_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_143 Depth 3
                                        #         Child Loop BB70_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB70_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB70_143:                             # %for.cond452
                                        #   Parent Loop BB70_139 Depth=1
                                        #     Parent Loop BB70_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB70_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB70_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB70_143 Depth=3
	movl	$0, -4(%rbp)
.LBB70_145:                             # %for.cond456
                                        #   Parent Loop BB70_139 Depth=1
                                        #     Parent Loop BB70_141 Depth=2
                                        #       Parent Loop BB70_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB70_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB70_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB70_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_145
.LBB70_148:                             # %for.end475
                                        #   in Loop: Header=BB70_143 Depth=3
	jmp	.LBB70_149
.LBB70_149:                             # %for.inc476
                                        #   in Loop: Header=BB70_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_143
.LBB70_150:                             # %for.end478
                                        #   in Loop: Header=BB70_141 Depth=2
	jmp	.LBB70_151
.LBB70_151:                             # %for.inc479
                                        #   in Loop: Header=BB70_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_141
.LBB70_152:                             # %for.end481
                                        #   in Loop: Header=BB70_139 Depth=1
	jmp	.LBB70_153
.LBB70_153:                             # %for.inc482
                                        #   in Loop: Header=BB70_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_139
.LBB70_154:                             # %for.end484
	jmp	.LBB70_155
.LBB70_155:                             # %if.end485
	jmp	.LBB70_156
.LBB70_156:                             # %if.end486
	jmp	.LBB70_157
.LBB70_157:                             # %if.end487
	jmp	.LBB70_180
.LBB70_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB70_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB70_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB70_161 Depth=1
	movl	$0, -4(%rbp)
.LBB70_163:                             # %for.cond499
                                        #   Parent Loop BB70_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB70_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB70_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_163
.LBB70_166:                             # %for.end519
                                        #   in Loop: Header=BB70_161 Depth=1
	jmp	.LBB70_167
.LBB70_167:                             # %for.inc520
                                        #   in Loop: Header=BB70_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_161
.LBB70_168:                             # %for.end522
	jmp	.LBB70_169
.LBB70_169:                             # %if.end523
	jmp	.LBB70_179
.LBB70_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB70_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB70_171 Depth=1
	movl	$0, -4(%rbp)
.LBB70_173:                             # %for.cond529
                                        #   Parent Loop BB70_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB70_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB70_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_173
.LBB70_176:                             # %for.end541
                                        #   in Loop: Header=BB70_171 Depth=1
	jmp	.LBB70_177
.LBB70_177:                             # %for.inc542
                                        #   in Loop: Header=BB70_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_171
.LBB70_178:                             # %for.end544
	jmp	.LBB70_179
.LBB70_179:                             # %if.end545
	jmp	.LBB70_180
.LBB70_180:                             # %sw.epilog
	cmpl	$629200880, -68(%rbp)   # imm = 0x2580D7F0
	jne	.LBB70_182
.LBB70_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_181
.Lfunc_end70:
	.size	Conceal_Error.60, .Lfunc_end70-Conceal_Error.60
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI70_0:
	.quad	.LBB70_16
	.quad	.LBB70_158
	.quad	.LBB70_106
	.quad	.LBB70_180
	.quad	.LBB70_36
                                        # -- End function
	.text
	.globl	DecOneForthPix.61       # -- Begin function DecOneForthPix.61
	.p2align	4, 0x90
	.type	DecOneForthPix.61,@function
DecOneForthPix.61:                      # @DecOneForthPix.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$705524338, -8(%rbp)    # imm = 0x2A0D7272
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB71_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB71_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB71_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_1
.LBB71_4:                               # %for.end
	cmpl	$705524338, -8(%rbp)    # imm = 0x2A0D7272
	jne	.LBB71_6
.LBB71_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_5
.Lfunc_end71:
	.size	DecOneForthPix.61, .Lfunc_end71-DecOneForthPix.61
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.62       # -- Begin function DecOneForthPix.62
	.p2align	4, 0x90
	.type	DecOneForthPix.62,@function
DecOneForthPix.62:                      # @DecOneForthPix.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1936895098, -8(%rbp)   # imm = 0x7372AC7A
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB72_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB72_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB72_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_1
.LBB72_4:                               # %for.end
	cmpl	$1936895098, -8(%rbp)   # imm = 0x7372AC7A
	jne	.LBB72_6
.LBB72_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_5
.Lfunc_end72:
	.size	DecOneForthPix.62, .Lfunc_end72-DecOneForthPix.62
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.63       # -- Begin function DecOneForthPix.63
	.p2align	4, 0x90
	.type	DecOneForthPix.63,@function
DecOneForthPix.63:                      # @DecOneForthPix.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1146731597, -12(%rbp)  # imm = 0x4459BC4D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB73_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_1
.LBB73_4:                               # %for.end
	cmpl	$1146731597, -12(%rbp)  # imm = 0x4459BC4D
	jne	.LBB73_6
.LBB73_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_5
.Lfunc_end73:
	.size	DecOneForthPix.63, .Lfunc_end73-DecOneForthPix.63
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.64       # -- Begin function DecOneForthPix.64
	.p2align	4, 0x90
	.type	DecOneForthPix.64,@function
DecOneForthPix.64:                      # @DecOneForthPix.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1866930141, -12(%rbp)  # imm = 0x6F4717DD
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB74_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB74_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB74_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_1
.LBB74_4:                               # %for.end
	cmpl	$1866930141, -12(%rbp)  # imm = 0x6F4717DD
	jne	.LBB74_6
.LBB74_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_5
.Lfunc_end74:
	.size	DecOneForthPix.64, .Lfunc_end74-DecOneForthPix.64
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.65        # -- Begin function Conceal_Error.65
	.p2align	4, 0x90
	.type	Conceal_Error.65,@function
Conceal_Error.65:                       # @Conceal_Error.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$901232937, -68(%rbp)   # imm = 0x35B7B929
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB75_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB75_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB75_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB75_4:                               # %land.end
.LBB75_5:                               # %lor.end
.LBB75_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB75_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB75_9
.LBB75_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB75_14
.LBB75_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB75_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB75_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB75_12:                              # %land.end51
.LBB75_13:                              # %lor.end53
.LBB75_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB75_180
# %bb.15:                               # %land.end54
	movq	.LJTI75_0(,%rax,8), %rax
	jmpq	*%rax
.LBB75_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB75_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB75_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB75_18 Depth=1
	movl	$0, -4(%rbp)
.LBB75_20:                              # %for.cond68
                                        #   Parent Loop BB75_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB75_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB75_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_20
.LBB75_23:                              # %for.end
                                        #   in Loop: Header=BB75_18 Depth=1
	jmp	.LBB75_24
.LBB75_24:                              # %for.inc85
                                        #   in Loop: Header=BB75_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_18
.LBB75_25:                              # %for.end87
	jmp	.LBB75_35
.LBB75_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB75_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB75_27 Depth=1
	movl	$0, -4(%rbp)
.LBB75_29:                              # %for.cond92
                                        #   Parent Loop BB75_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB75_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB75_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_29
.LBB75_32:                              # %for.end104
                                        #   in Loop: Header=BB75_27 Depth=1
	jmp	.LBB75_33
.LBB75_33:                              # %for.inc105
                                        #   in Loop: Header=BB75_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_27
.LBB75_34:                              # %for.end107
	jmp	.LBB75_35
.LBB75_35:                              # %if.end
	jmp	.LBB75_180
.LBB75_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB75_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_39 Depth 2
                                        #       Child Loop BB75_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB75_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB75_37 Depth=1
	movl	$0, -16(%rbp)
.LBB75_39:                              # %for.cond113
                                        #   Parent Loop BB75_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB75_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB75_39 Depth=2
	movl	$0, -4(%rbp)
.LBB75_41:                              # %for.cond117
                                        #   Parent Loop BB75_37 Depth=1
                                        #     Parent Loop BB75_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB75_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB75_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB75_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_41
.LBB75_44:                              # %for.end141
                                        #   in Loop: Header=BB75_39 Depth=2
	jmp	.LBB75_45
.LBB75_45:                              # %for.inc142
                                        #   in Loop: Header=BB75_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_39
.LBB75_46:                              # %for.end144
                                        #   in Loop: Header=BB75_37 Depth=1
	jmp	.LBB75_47
.LBB75_47:                              # %for.inc145
                                        #   in Loop: Header=BB75_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_37
.LBB75_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB75_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB75_49 Depth=1
	movl	$0, -8(%rbp)
.LBB75_51:                              # %for.cond152
                                        #   Parent Loop BB75_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB75_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB75_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_51
.LBB75_54:                              # %for.end162
                                        #   in Loop: Header=BB75_49 Depth=1
	jmp	.LBB75_55
.LBB75_55:                              # %for.inc163
                                        #   in Loop: Header=BB75_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_49
.LBB75_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB75_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB75_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB75_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB75_59 Depth=1
	movl	$0, -4(%rbp)
.LBB75_61:                              # %for.cond175
                                        #   Parent Loop BB75_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB75_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB75_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_61
.LBB75_64:                              # %for.end195
                                        #   in Loop: Header=BB75_59 Depth=1
	jmp	.LBB75_65
.LBB75_65:                              # %for.inc196
                                        #   in Loop: Header=BB75_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_59
.LBB75_66:                              # %for.end198
	jmp	.LBB75_95
.LBB75_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB75_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB75_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_71 Depth 2
                                        #       Child Loop BB75_73 Depth 3
                                        #         Child Loop BB75_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB75_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB75_71:                              # %for.cond210
                                        #   Parent Loop BB75_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_73 Depth 3
                                        #         Child Loop BB75_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB75_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB75_73:                              # %for.cond236
                                        #   Parent Loop BB75_69 Depth=1
                                        #     Parent Loop BB75_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB75_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB75_73 Depth=3
	movl	$0, -4(%rbp)
.LBB75_75:                              # %for.cond240
                                        #   Parent Loop BB75_69 Depth=1
                                        #     Parent Loop BB75_71 Depth=2
                                        #       Parent Loop BB75_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB75_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB75_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB75_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_75
.LBB75_78:                              # %for.end259
                                        #   in Loop: Header=BB75_73 Depth=3
	jmp	.LBB75_79
.LBB75_79:                              # %for.inc260
                                        #   in Loop: Header=BB75_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_73
.LBB75_80:                              # %for.end262
                                        #   in Loop: Header=BB75_71 Depth=2
	jmp	.LBB75_81
.LBB75_81:                              # %for.inc263
                                        #   in Loop: Header=BB75_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_71
.LBB75_82:                              # %for.end265
                                        #   in Loop: Header=BB75_69 Depth=1
	jmp	.LBB75_83
.LBB75_83:                              # %for.inc266
                                        #   in Loop: Header=BB75_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_69
.LBB75_84:                              # %for.end268
	jmp	.LBB75_94
.LBB75_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB75_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB75_86 Depth=1
	movl	$0, -4(%rbp)
.LBB75_88:                              # %for.cond274
                                        #   Parent Loop BB75_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB75_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB75_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_88
.LBB75_91:                              # %for.end294
                                        #   in Loop: Header=BB75_86 Depth=1
	jmp	.LBB75_92
.LBB75_92:                              # %for.inc295
                                        #   in Loop: Header=BB75_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_86
.LBB75_93:                              # %for.end297
	jmp	.LBB75_94
.LBB75_94:                              # %if.end298
	jmp	.LBB75_95
.LBB75_95:                              # %if.end299
	jmp	.LBB75_105
.LBB75_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB75_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB75_97 Depth=1
	movl	$0, -4(%rbp)
.LBB75_99:                              # %for.cond305
                                        #   Parent Loop BB75_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB75_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB75_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_99
.LBB75_102:                             # %for.end317
                                        #   in Loop: Header=BB75_97 Depth=1
	jmp	.LBB75_103
.LBB75_103:                             # %for.inc318
                                        #   in Loop: Header=BB75_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_97
.LBB75_104:                             # %for.end320
	jmp	.LBB75_105
.LBB75_105:                             # %if.end321
	jmp	.LBB75_180
.LBB75_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB75_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB75_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_110 Depth 2
                                        #       Child Loop BB75_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB75_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB75_108 Depth=1
	movl	$0, -16(%rbp)
.LBB75_110:                             # %for.cond331
                                        #   Parent Loop BB75_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB75_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB75_110 Depth=2
	movl	$0, -4(%rbp)
.LBB75_112:                             # %for.cond335
                                        #   Parent Loop BB75_108 Depth=1
                                        #     Parent Loop BB75_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB75_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB75_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB75_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_112
.LBB75_115:                             # %for.end359
                                        #   in Loop: Header=BB75_110 Depth=2
	jmp	.LBB75_116
.LBB75_116:                             # %for.inc360
                                        #   in Loop: Header=BB75_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_110
.LBB75_117:                             # %for.end362
                                        #   in Loop: Header=BB75_108 Depth=1
	jmp	.LBB75_118
.LBB75_118:                             # %for.inc363
                                        #   in Loop: Header=BB75_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_108
.LBB75_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB75_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB75_120 Depth=1
	movl	$0, -8(%rbp)
.LBB75_122:                             # %for.cond370
                                        #   Parent Loop BB75_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB75_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB75_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_122
.LBB75_125:                             # %for.end380
                                        #   in Loop: Header=BB75_120 Depth=1
	jmp	.LBB75_126
.LBB75_126:                             # %for.inc381
                                        #   in Loop: Header=BB75_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_120
.LBB75_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB75_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB75_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB75_129 Depth=1
	movl	$0, -4(%rbp)
.LBB75_131:                             # %for.cond390
                                        #   Parent Loop BB75_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB75_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB75_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_131
.LBB75_134:                             # %for.end410
                                        #   in Loop: Header=BB75_129 Depth=1
	jmp	.LBB75_135
.LBB75_135:                             # %for.inc411
                                        #   in Loop: Header=BB75_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_129
.LBB75_136:                             # %for.end413
	jmp	.LBB75_156
.LBB75_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB75_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB75_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_141 Depth 2
                                        #       Child Loop BB75_143 Depth 3
                                        #         Child Loop BB75_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB75_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB75_141:                             # %for.cond425
                                        #   Parent Loop BB75_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_143 Depth 3
                                        #         Child Loop BB75_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB75_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB75_143:                             # %for.cond452
                                        #   Parent Loop BB75_139 Depth=1
                                        #     Parent Loop BB75_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB75_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB75_143 Depth=3
	movl	$0, -4(%rbp)
.LBB75_145:                             # %for.cond456
                                        #   Parent Loop BB75_139 Depth=1
                                        #     Parent Loop BB75_141 Depth=2
                                        #       Parent Loop BB75_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB75_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB75_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB75_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_145
.LBB75_148:                             # %for.end475
                                        #   in Loop: Header=BB75_143 Depth=3
	jmp	.LBB75_149
.LBB75_149:                             # %for.inc476
                                        #   in Loop: Header=BB75_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_143
.LBB75_150:                             # %for.end478
                                        #   in Loop: Header=BB75_141 Depth=2
	jmp	.LBB75_151
.LBB75_151:                             # %for.inc479
                                        #   in Loop: Header=BB75_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_141
.LBB75_152:                             # %for.end481
                                        #   in Loop: Header=BB75_139 Depth=1
	jmp	.LBB75_153
.LBB75_153:                             # %for.inc482
                                        #   in Loop: Header=BB75_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_139
.LBB75_154:                             # %for.end484
	jmp	.LBB75_155
.LBB75_155:                             # %if.end485
	jmp	.LBB75_156
.LBB75_156:                             # %if.end486
	jmp	.LBB75_157
.LBB75_157:                             # %if.end487
	jmp	.LBB75_180
.LBB75_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB75_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB75_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB75_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB75_161 Depth=1
	movl	$0, -4(%rbp)
.LBB75_163:                             # %for.cond499
                                        #   Parent Loop BB75_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB75_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB75_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_163
.LBB75_166:                             # %for.end519
                                        #   in Loop: Header=BB75_161 Depth=1
	jmp	.LBB75_167
.LBB75_167:                             # %for.inc520
                                        #   in Loop: Header=BB75_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_161
.LBB75_168:                             # %for.end522
	jmp	.LBB75_169
.LBB75_169:                             # %if.end523
	jmp	.LBB75_179
.LBB75_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB75_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB75_171 Depth=1
	movl	$0, -4(%rbp)
.LBB75_173:                             # %for.cond529
                                        #   Parent Loop BB75_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB75_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB75_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_173
.LBB75_176:                             # %for.end541
                                        #   in Loop: Header=BB75_171 Depth=1
	jmp	.LBB75_177
.LBB75_177:                             # %for.inc542
                                        #   in Loop: Header=BB75_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_171
.LBB75_178:                             # %for.end544
	jmp	.LBB75_179
.LBB75_179:                             # %if.end545
	jmp	.LBB75_180
.LBB75_180:                             # %sw.epilog
	cmpl	$901232937, -68(%rbp)   # imm = 0x35B7B929
	jne	.LBB75_182
.LBB75_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_181
.Lfunc_end75:
	.size	Conceal_Error.65, .Lfunc_end75-Conceal_Error.65
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI75_0:
	.quad	.LBB75_16
	.quad	.LBB75_158
	.quad	.LBB75_106
	.quad	.LBB75_180
	.quad	.LBB75_36
                                        # -- End function
	.text
	.globl	Conceal_Error.66        # -- Begin function Conceal_Error.66
	.p2align	4, 0x90
	.type	Conceal_Error.66,@function
Conceal_Error.66:                       # @Conceal_Error.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1576948585, -68(%rbp)  # imm = 0x5DFE5369
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB76_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB76_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB76_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB76_4:                               # %land.end
.LBB76_5:                               # %lor.end
.LBB76_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB76_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB76_9
.LBB76_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB76_14
.LBB76_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB76_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB76_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB76_12:                              # %land.end51
.LBB76_13:                              # %lor.end53
.LBB76_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB76_180
# %bb.15:                               # %land.end54
	movq	.LJTI76_0(,%rax,8), %rax
	jmpq	*%rax
.LBB76_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB76_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB76_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB76_18 Depth=1
	movl	$0, -4(%rbp)
.LBB76_20:                              # %for.cond68
                                        #   Parent Loop BB76_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB76_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB76_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_20
.LBB76_23:                              # %for.end
                                        #   in Loop: Header=BB76_18 Depth=1
	jmp	.LBB76_24
.LBB76_24:                              # %for.inc85
                                        #   in Loop: Header=BB76_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_18
.LBB76_25:                              # %for.end87
	jmp	.LBB76_35
.LBB76_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB76_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB76_27 Depth=1
	movl	$0, -4(%rbp)
.LBB76_29:                              # %for.cond92
                                        #   Parent Loop BB76_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB76_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB76_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_29
.LBB76_32:                              # %for.end104
                                        #   in Loop: Header=BB76_27 Depth=1
	jmp	.LBB76_33
.LBB76_33:                              # %for.inc105
                                        #   in Loop: Header=BB76_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_27
.LBB76_34:                              # %for.end107
	jmp	.LBB76_35
.LBB76_35:                              # %if.end
	jmp	.LBB76_180
.LBB76_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB76_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_39 Depth 2
                                        #       Child Loop BB76_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB76_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB76_37 Depth=1
	movl	$0, -16(%rbp)
.LBB76_39:                              # %for.cond113
                                        #   Parent Loop BB76_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB76_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB76_39 Depth=2
	movl	$0, -4(%rbp)
.LBB76_41:                              # %for.cond117
                                        #   Parent Loop BB76_37 Depth=1
                                        #     Parent Loop BB76_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB76_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB76_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB76_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_41
.LBB76_44:                              # %for.end141
                                        #   in Loop: Header=BB76_39 Depth=2
	jmp	.LBB76_45
.LBB76_45:                              # %for.inc142
                                        #   in Loop: Header=BB76_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_39
.LBB76_46:                              # %for.end144
                                        #   in Loop: Header=BB76_37 Depth=1
	jmp	.LBB76_47
.LBB76_47:                              # %for.inc145
                                        #   in Loop: Header=BB76_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_37
.LBB76_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB76_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB76_49 Depth=1
	movl	$0, -8(%rbp)
.LBB76_51:                              # %for.cond152
                                        #   Parent Loop BB76_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB76_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB76_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_51
.LBB76_54:                              # %for.end162
                                        #   in Loop: Header=BB76_49 Depth=1
	jmp	.LBB76_55
.LBB76_55:                              # %for.inc163
                                        #   in Loop: Header=BB76_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_49
.LBB76_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB76_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB76_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB76_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB76_59 Depth=1
	movl	$0, -4(%rbp)
.LBB76_61:                              # %for.cond175
                                        #   Parent Loop BB76_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB76_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB76_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_61
.LBB76_64:                              # %for.end195
                                        #   in Loop: Header=BB76_59 Depth=1
	jmp	.LBB76_65
.LBB76_65:                              # %for.inc196
                                        #   in Loop: Header=BB76_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_59
.LBB76_66:                              # %for.end198
	jmp	.LBB76_95
.LBB76_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB76_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB76_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_71 Depth 2
                                        #       Child Loop BB76_73 Depth 3
                                        #         Child Loop BB76_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB76_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB76_71:                              # %for.cond210
                                        #   Parent Loop BB76_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_73 Depth 3
                                        #         Child Loop BB76_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB76_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB76_73:                              # %for.cond236
                                        #   Parent Loop BB76_69 Depth=1
                                        #     Parent Loop BB76_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB76_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB76_73 Depth=3
	movl	$0, -4(%rbp)
.LBB76_75:                              # %for.cond240
                                        #   Parent Loop BB76_69 Depth=1
                                        #     Parent Loop BB76_71 Depth=2
                                        #       Parent Loop BB76_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB76_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB76_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB76_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_75
.LBB76_78:                              # %for.end259
                                        #   in Loop: Header=BB76_73 Depth=3
	jmp	.LBB76_79
.LBB76_79:                              # %for.inc260
                                        #   in Loop: Header=BB76_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_73
.LBB76_80:                              # %for.end262
                                        #   in Loop: Header=BB76_71 Depth=2
	jmp	.LBB76_81
.LBB76_81:                              # %for.inc263
                                        #   in Loop: Header=BB76_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_71
.LBB76_82:                              # %for.end265
                                        #   in Loop: Header=BB76_69 Depth=1
	jmp	.LBB76_83
.LBB76_83:                              # %for.inc266
                                        #   in Loop: Header=BB76_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_69
.LBB76_84:                              # %for.end268
	jmp	.LBB76_94
.LBB76_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB76_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB76_86 Depth=1
	movl	$0, -4(%rbp)
.LBB76_88:                              # %for.cond274
                                        #   Parent Loop BB76_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB76_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB76_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_88
.LBB76_91:                              # %for.end294
                                        #   in Loop: Header=BB76_86 Depth=1
	jmp	.LBB76_92
.LBB76_92:                              # %for.inc295
                                        #   in Loop: Header=BB76_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_86
.LBB76_93:                              # %for.end297
	jmp	.LBB76_94
.LBB76_94:                              # %if.end298
	jmp	.LBB76_95
.LBB76_95:                              # %if.end299
	jmp	.LBB76_105
.LBB76_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB76_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB76_97 Depth=1
	movl	$0, -4(%rbp)
.LBB76_99:                              # %for.cond305
                                        #   Parent Loop BB76_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB76_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB76_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_99
.LBB76_102:                             # %for.end317
                                        #   in Loop: Header=BB76_97 Depth=1
	jmp	.LBB76_103
.LBB76_103:                             # %for.inc318
                                        #   in Loop: Header=BB76_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_97
.LBB76_104:                             # %for.end320
	jmp	.LBB76_105
.LBB76_105:                             # %if.end321
	jmp	.LBB76_180
.LBB76_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB76_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB76_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_110 Depth 2
                                        #       Child Loop BB76_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB76_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB76_108 Depth=1
	movl	$0, -16(%rbp)
.LBB76_110:                             # %for.cond331
                                        #   Parent Loop BB76_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB76_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB76_110 Depth=2
	movl	$0, -4(%rbp)
.LBB76_112:                             # %for.cond335
                                        #   Parent Loop BB76_108 Depth=1
                                        #     Parent Loop BB76_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB76_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB76_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB76_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_112
.LBB76_115:                             # %for.end359
                                        #   in Loop: Header=BB76_110 Depth=2
	jmp	.LBB76_116
.LBB76_116:                             # %for.inc360
                                        #   in Loop: Header=BB76_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_110
.LBB76_117:                             # %for.end362
                                        #   in Loop: Header=BB76_108 Depth=1
	jmp	.LBB76_118
.LBB76_118:                             # %for.inc363
                                        #   in Loop: Header=BB76_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_108
.LBB76_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB76_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB76_120 Depth=1
	movl	$0, -8(%rbp)
.LBB76_122:                             # %for.cond370
                                        #   Parent Loop BB76_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB76_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB76_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_122
.LBB76_125:                             # %for.end380
                                        #   in Loop: Header=BB76_120 Depth=1
	jmp	.LBB76_126
.LBB76_126:                             # %for.inc381
                                        #   in Loop: Header=BB76_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_120
.LBB76_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB76_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB76_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB76_129 Depth=1
	movl	$0, -4(%rbp)
.LBB76_131:                             # %for.cond390
                                        #   Parent Loop BB76_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB76_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB76_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_131
.LBB76_134:                             # %for.end410
                                        #   in Loop: Header=BB76_129 Depth=1
	jmp	.LBB76_135
.LBB76_135:                             # %for.inc411
                                        #   in Loop: Header=BB76_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_129
.LBB76_136:                             # %for.end413
	jmp	.LBB76_156
.LBB76_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB76_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB76_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_141 Depth 2
                                        #       Child Loop BB76_143 Depth 3
                                        #         Child Loop BB76_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB76_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB76_141:                             # %for.cond425
                                        #   Parent Loop BB76_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_143 Depth 3
                                        #         Child Loop BB76_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB76_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB76_143:                             # %for.cond452
                                        #   Parent Loop BB76_139 Depth=1
                                        #     Parent Loop BB76_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB76_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB76_143 Depth=3
	movl	$0, -4(%rbp)
.LBB76_145:                             # %for.cond456
                                        #   Parent Loop BB76_139 Depth=1
                                        #     Parent Loop BB76_141 Depth=2
                                        #       Parent Loop BB76_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB76_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB76_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB76_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_145
.LBB76_148:                             # %for.end475
                                        #   in Loop: Header=BB76_143 Depth=3
	jmp	.LBB76_149
.LBB76_149:                             # %for.inc476
                                        #   in Loop: Header=BB76_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_143
.LBB76_150:                             # %for.end478
                                        #   in Loop: Header=BB76_141 Depth=2
	jmp	.LBB76_151
.LBB76_151:                             # %for.inc479
                                        #   in Loop: Header=BB76_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_141
.LBB76_152:                             # %for.end481
                                        #   in Loop: Header=BB76_139 Depth=1
	jmp	.LBB76_153
.LBB76_153:                             # %for.inc482
                                        #   in Loop: Header=BB76_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_139
.LBB76_154:                             # %for.end484
	jmp	.LBB76_155
.LBB76_155:                             # %if.end485
	jmp	.LBB76_156
.LBB76_156:                             # %if.end486
	jmp	.LBB76_157
.LBB76_157:                             # %if.end487
	jmp	.LBB76_180
.LBB76_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB76_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB76_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB76_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB76_161 Depth=1
	movl	$0, -4(%rbp)
.LBB76_163:                             # %for.cond499
                                        #   Parent Loop BB76_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB76_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB76_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_163
.LBB76_166:                             # %for.end519
                                        #   in Loop: Header=BB76_161 Depth=1
	jmp	.LBB76_167
.LBB76_167:                             # %for.inc520
                                        #   in Loop: Header=BB76_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_161
.LBB76_168:                             # %for.end522
	jmp	.LBB76_169
.LBB76_169:                             # %if.end523
	jmp	.LBB76_179
.LBB76_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB76_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB76_171 Depth=1
	movl	$0, -4(%rbp)
.LBB76_173:                             # %for.cond529
                                        #   Parent Loop BB76_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB76_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB76_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_173
.LBB76_176:                             # %for.end541
                                        #   in Loop: Header=BB76_171 Depth=1
	jmp	.LBB76_177
.LBB76_177:                             # %for.inc542
                                        #   in Loop: Header=BB76_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_171
.LBB76_178:                             # %for.end544
	jmp	.LBB76_179
.LBB76_179:                             # %if.end545
	jmp	.LBB76_180
.LBB76_180:                             # %sw.epilog
	cmpl	$1576948585, -68(%rbp)  # imm = 0x5DFE5369
	jne	.LBB76_182
.LBB76_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_181
.Lfunc_end76:
	.size	Conceal_Error.66, .Lfunc_end76-Conceal_Error.66
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI76_0:
	.quad	.LBB76_16
	.quad	.LBB76_158
	.quad	.LBB76_106
	.quad	.LBB76_180
	.quad	.LBB76_36
                                        # -- End function
	.type	Get_Reference_Pixel.COEF,@object # @Get_Reference_Pixel.COEF
	.p2align	4
Get_Reference_Pixel.COEF:
	.long	1                       # 0x1
	.long	4294967291              # 0xfffffffb
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	4294967291              # 0xfffffffb
	.long	1                       # 0x1
	.size	Get_Reference_Pixel.COEF, 24

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
