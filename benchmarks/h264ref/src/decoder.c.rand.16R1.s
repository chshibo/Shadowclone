	.text
	.file	"decoder.c"
	.globl	decode_one_b8block      # -- Begin function decode_one_b8block
	.p2align	4, 0x90
	.type	decode_one_b8block,@function
decode_one_b8block:                     # @decode_one_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_decode_one_b8block.26
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.26
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_decode_one_b8block.51
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.51
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_decode_one_b8block.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.54
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_decode_one_b8block.57
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.57
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_decode_one_b8block.64
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.64
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_decode_one_b8block.81
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.81
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_decode_one_b8block.82
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.82
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_decode_one_b8block.83
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.83
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_decode_one_b8block.85
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.85
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_decode_one_b8block.90
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.90
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_decode_one_b8block.93
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.93
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_decode_one_b8block.100
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.100
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_decode_one_b8block.105
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.105
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_decode_one_b8block.109
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.109
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_decode_one_b8block.114
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.114
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_decode_one_b8block.115
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.115
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	decode_one_b8block, .Lfunc_end0-decode_one_b8block
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block     # -- Begin function Get_Reference_Block
	.p2align	4, 0x90
	.type	Get_Reference_Block,@function
Get_Reference_Block:                    # @Get_Reference_Block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_17
# %bb.1:                                # %func_Get_Reference_Block.3
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	Get_Reference_Block.3
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_Get_Reference_Block.16
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.16
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_Get_Reference_Block.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.25
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_Get_Reference_Block.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.44
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_Get_Reference_Block.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.58
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_Get_Reference_Block.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.70
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_Get_Reference_Block.102
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.102
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_Get_Reference_Block.107
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.107
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %func_Get_Reference_Block.108
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.108
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_10:                               # %func_Get_Reference_Block.118
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.118
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_11:                               # %func_Get_Reference_Block.121
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.121
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_12:                               # %func_Get_Reference_Block.122
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.122
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_13:                               # %func_Get_Reference_Block.123
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.123
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_14:                               # %func_Get_Reference_Block.124
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.124
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_15:                               # %func_Get_Reference_Block.125
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.125
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_16:                               # %func_Get_Reference_Block.126
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.126
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %r11d
	movq	-48(%rbp), %r10         # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	movq	%r10, %r9
	movl	%r11d, %r8d
	movl	%r13d, %r15d
	movl	%edx, %r12d
	movl	%esi, %r14d
	movq	%rdi, %rbx
	je	.LBB1_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB1_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB1_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB1_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB1_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB1_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB1_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB1_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB1_15
	jmp	.LBB1_16
.Lfunc_end1:
	.size	Get_Reference_Block, .Lfunc_end1-Get_Reference_Block
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb           # -- Begin function decode_one_mb
	.p2align	4, 0x90
	.type	decode_one_mb,@function
decode_one_mb:                          # @decode_one_mb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_decode_one_mb.10
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.10
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_decode_one_mb.23
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.23
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	decode_one_mb, .Lfunc_end2-decode_one_mb
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel     # -- Begin function Get_Reference_Pixel
	.p2align	4, 0x90
	.type	Get_Reference_Pixel,@function
Get_Reference_Pixel:                    # @Get_Reference_Pixel
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_Get_Reference_Pixel.8
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.8
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_Get_Reference_Pixel.11
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.11
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_Get_Reference_Pixel.20
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.20
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_Get_Reference_Pixel.21
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.21
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_Get_Reference_Pixel.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.33
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_Get_Reference_Pixel.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.42
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_Get_Reference_Pixel.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.46
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_Get_Reference_Pixel.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.55
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_Get_Reference_Pixel.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.59
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_Get_Reference_Pixel.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.71
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_Get_Reference_Pixel.79
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.79
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_Get_Reference_Pixel.84
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.84
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_Get_Reference_Pixel.103
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.103
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_Get_Reference_Pixel.110
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.110
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_Get_Reference_Pixel.113
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.113
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_Get_Reference_Pixel.119
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.119
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	Get_Reference_Pixel, .Lfunc_end3-Get_Reference_Pixel
	.cfi_endproc
                                        # -- End function
	.globl	UpdateDecoders          # -- Begin function UpdateDecoders
	.p2align	4, 0x90
	.type	UpdateDecoders,@function
UpdateDecoders:                         # @UpdateDecoders
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB4_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB4_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	decs, %rax
	movq	40(%rax), %rdi
	callq	Build_Status_Map
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	40(%rax), %rsi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	callq	Error_Concealment
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	DecOneForthPix
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_1
.LBB4_4:                                # %for.end
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end4:
	.size	UpdateDecoders, .Lfunc_end4-UpdateDecoders
	.cfi_endproc
                                        # -- End function
	.globl	Build_Status_Map        # -- Begin function Build_Status_Map
	.p2align	4, 0x90
	.type	Build_Status_Map,@function
Build_Status_Map:                       # @Build_Status_Map
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_17
# %bb.1:                                # %func_Build_Status_Map.12
	movq	%rbx, %rdi
	callq	Build_Status_Map.12
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_Build_Status_Map.22
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.22
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_Build_Status_Map.34
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.34
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_Build_Status_Map.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.35
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_Build_Status_Map.41
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.41
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_Build_Status_Map.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.47
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_Build_Status_Map.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.52
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_Build_Status_Map.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.62
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %func_Build_Status_Map.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.66
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_10:                               # %func_Build_Status_Map.74
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.74
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_11:                               # %func_Build_Status_Map.78
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.78
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_12:                               # %func_Build_Status_Map.89
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.89
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_13:                               # %func_Build_Status_Map.91
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.91
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_14:                               # %func_Build_Status_Map.92
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.92
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_15:                               # %func_Build_Status_Map.98
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.98
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_16:                               # %func_Build_Status_Map.101
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.101
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB5_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB5_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB5_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB5_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB5_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB5_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB5_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB5_15
	jmp	.LBB5_16
.Lfunc_end5:
	.size	Build_Status_Map, .Lfunc_end5-Build_Status_Map
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment       # -- Begin function Error_Concealment
	.p2align	4, 0x90
	.type	Error_Concealment,@function
Error_Concealment:                      # @Error_Concealment
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_17
# %bb.1:                                # %func_Error_Concealment.4
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.4
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Error_Concealment.6
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.6
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Error_Concealment.7
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Error_Concealment.15
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.15
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_Error_Concealment.18
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.18
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_Error_Concealment.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_Error_Concealment.43
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.43
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_Error_Concealment.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.45
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %func_Error_Concealment.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.56
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_10:                               # %func_Error_Concealment.73
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.73
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_11:                               # %func_Error_Concealment.75
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.75
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_12:                               # %func_Error_Concealment.99
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.99
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_13:                               # %func_Error_Concealment.112
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.112
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_14:                               # %func_Error_Concealment.116
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.116
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_15:                               # %func_Error_Concealment.117
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.117
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_16:                               # %func_Error_Concealment.120
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.120
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB6_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB6_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB6_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB6_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB6_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB6_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB6_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB6_15
	jmp	.LBB6_16
.Lfunc_end6:
	.size	Error_Concealment, .Lfunc_end6-Error_Concealment
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix          # -- Begin function DecOneForthPix
	.p2align	4, 0x90
	.type	DecOneForthPix,@function
DecOneForthPix:                         # @DecOneForthPix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_17
# %bb.1:                                # %func_DecOneForthPix.2
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.2
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_DecOneForthPix.5
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.5
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_DecOneForthPix.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.14
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_DecOneForthPix.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.31
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_DecOneForthPix.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.36
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_DecOneForthPix.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.39
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_DecOneForthPix.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.40
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_DecOneForthPix.53
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.53
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %func_DecOneForthPix.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.60
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_10:                               # %func_DecOneForthPix.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.67
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_11:                               # %func_DecOneForthPix.96
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.96
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_12:                               # %func_DecOneForthPix.97
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.97
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_13:                               # %func_DecOneForthPix.127
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.127
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_14:                               # %func_DecOneForthPix.128
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.128
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_15:                               # %func_DecOneForthPix.129
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.129
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_16:                               # %func_DecOneForthPix.130
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.130
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB7_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB7_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB7_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB7_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB7_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB7_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB7_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB7_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB7_15
	jmp	.LBB7_16
.Lfunc_end7:
	.size	DecOneForthPix, .Lfunc_end7-DecOneForthPix
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block # -- Begin function compute_residue_b8block
	.p2align	4, 0x90
	.type	compute_residue_b8block,@function
compute_residue_b8block:                # @compute_residue_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_17
# %bb.1:                                # %func_compute_residue_b8block.1
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.1
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_compute_residue_b8block.13
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.13
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_compute_residue_b8block.17
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_compute_residue_b8block.29
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.29
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %func_compute_residue_b8block.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.30
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_6:                                # %func_compute_residue_b8block.49
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.49
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_7:                                # %func_compute_residue_b8block.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.50
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_8:                                # %func_compute_residue_b8block.61
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.61
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_9:                                # %func_compute_residue_b8block.77
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.77
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_10:                               # %func_compute_residue_b8block.87
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.87
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_11:                               # %func_compute_residue_b8block.88
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.88
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_12:                               # %func_compute_residue_b8block.94
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.94
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_13:                               # %func_compute_residue_b8block.95
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.95
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_14:                               # %func_compute_residue_b8block.104
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.104
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_15:                               # %func_compute_residue_b8block.106
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.106
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_16:                               # %func_compute_residue_b8block.111
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.111
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB8_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB8_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB8_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB8_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB8_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB8_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB8_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB8_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB8_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB8_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB8_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB8_15
	jmp	.LBB8_16
.Lfunc_end8:
	.size	compute_residue_b8block, .Lfunc_end8-compute_residue_b8block
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_mb      # -- Begin function compute_residue_mb
	.p2align	4, 0x90
	.type	compute_residue_mb,@function
compute_residue_mb:                     # @compute_residue_mb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %esi
	xorl	%edi, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$1, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$2, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$3, %edi
	callq	compute_residue_b8block
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end9:
	.size	compute_residue_mb, .Lfunc_end9-compute_residue_mb
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error           # -- Begin function Conceal_Error
	.p2align	4, 0x90
	.type	Conceal_Error,@function
Conceal_Error:                          # @Conceal_Error
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movl	%edx, %r12d
	movl	%esi, %r13d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_17
# %bb.1:                                # %func_Conceal_Error.9
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.9
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_Conceal_Error.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_Conceal_Error.24
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.24
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_Conceal_Error.27
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.27
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_Conceal_Error.28
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.28
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_Conceal_Error.32
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.32
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_Conceal_Error.38
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.38
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_Conceal_Error.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.48
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %func_Conceal_Error.63
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_10:                              # %func_Conceal_Error.65
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.65
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_11:                              # %func_Conceal_Error.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.68
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_12:                              # %func_Conceal_Error.69
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.69
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_13:                              # %func_Conceal_Error.72
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.72
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_14:                              # %func_Conceal_Error.76
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.76
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_15:                              # %func_Conceal_Error.80
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.80
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_16:                              # %func_Conceal_Error.86
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.86
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB10_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB10_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB10_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB10_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB10_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB10_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB10_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB10_15
	jmp	.LBB10_16
.Lfunc_end10:
	.size	Conceal_Error, .Lfunc_end10-Conceal_Error
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.1 # -- Begin function compute_residue_b8block.1
	.p2align	4, 0x90
	.type	compute_residue_b8block.1,@function
compute_residue_b8block.1:              # @compute_residue_b8block.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$489356240, -36(%rbp)   # imm = 0x1D2AFBD0
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB11_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB11_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB11_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB11_4:                               # %for.cond4
                                        #   Parent Loop BB11_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB11_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB11_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB11_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_4
.LBB11_7:                               # %for.end
                                        #   in Loop: Header=BB11_2 Depth=1
	jmp	.LBB11_8
.LBB11_8:                               # %for.inc22
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_2
.LBB11_9:                               # %for.end24
	jmp	.LBB11_19
.LBB11_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB11_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB11_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB11_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB11_13:                              # %for.cond29
                                        #   Parent Loop BB11_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB11_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB11_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB11_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_13
.LBB11_16:                              # %for.end56
                                        #   in Loop: Header=BB11_11 Depth=1
	jmp	.LBB11_17
.LBB11_17:                              # %for.inc57
                                        #   in Loop: Header=BB11_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_11
.LBB11_18:                              # %for.end59
	jmp	.LBB11_19
.LBB11_19:                              # %if.end
	cmpl	$489356240, -36(%rbp)   # imm = 0x1D2AFBD0
	jne	.LBB11_21
.LBB11_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_20
.Lfunc_end11:
	.size	compute_residue_b8block.1, .Lfunc_end11-compute_residue_b8block.1
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.2        # -- Begin function DecOneForthPix.2
	.p2align	4, 0x90
	.type	DecOneForthPix.2,@function
DecOneForthPix.2:                       # @DecOneForthPix.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1796070121, -12(%rbp)  # imm = 0x6B0DDAE9
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB12_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB12_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_1
.LBB12_4:                               # %for.end
	cmpl	$1796070121, -12(%rbp)  # imm = 0x6B0DDAE9
	jne	.LBB12_6
.LBB12_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_5
.Lfunc_end12:
	.size	DecOneForthPix.2, .Lfunc_end12-DecOneForthPix.2
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.3   # -- Begin function Get_Reference_Block.3
	.p2align	4, 0x90
	.type	Get_Reference_Block.3,@function
Get_Reference_Block.3:                  # @Get_Reference_Block.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1809308661, -28(%rbp)  # imm = 0x6BD7DBF5
	movq	%rdi, -56(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -20(%rbp)
	movq	%r9, -48(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB13_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB13_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -8(%rbp)
.LBB13_3:                               # %for.cond5
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB13_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB13_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB13_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_3
.LBB13_6:                               # %for.end
                                        #   in Loop: Header=BB13_1 Depth=1
	jmp	.LBB13_7
.LBB13_7:                               # %for.inc14
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_1
.LBB13_8:                               # %for.end16
	cmpl	$1809308661, -28(%rbp)  # imm = 0x6BD7DBF5
	jne	.LBB13_10
.LBB13_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_9
.Lfunc_end13:
	.size	Get_Reference_Block.3, .Lfunc_end13-Get_Reference_Block.3
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.4     # -- Begin function Error_Concealment.4
	.p2align	4, 0x90
	.type	Error_Concealment.4,@function
Error_Concealment.4:                    # @Error_Concealment.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1425177901, -12(%rbp)  # imm = 0x54F27D2D
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB14_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB14_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	$0, -4(%rbp)
.LBB14_3:                               # %for.cond2
                                        #   Parent Loop BB14_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB14_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB14_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB14_6:                               # %if.end
                                        #   in Loop: Header=BB14_3 Depth=2
	jmp	.LBB14_7
.LBB14_7:                               # %for.inc
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_3
.LBB14_8:                               # %for.end
                                        #   in Loop: Header=BB14_1 Depth=1
	jmp	.LBB14_9
.LBB14_9:                               # %for.inc7
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_1
.LBB14_10:                              # %for.end9
	cmpl	$1425177901, -12(%rbp)  # imm = 0x54F27D2D
	jne	.LBB14_12
.LBB14_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_11
.Lfunc_end14:
	.size	Error_Concealment.4, .Lfunc_end14-Error_Concealment.4
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.5        # -- Begin function DecOneForthPix.5
	.p2align	4, 0x90
	.type	DecOneForthPix.5,@function
DecOneForthPix.5:                       # @DecOneForthPix.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$45337464, -12(%rbp)    # imm = 0x2B3CB78
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB15_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB15_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB15_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_1
.LBB15_4:                               # %for.end
	cmpl	$45337464, -12(%rbp)    # imm = 0x2B3CB78
	jne	.LBB15_6
.LBB15_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_5
.Lfunc_end15:
	.size	DecOneForthPix.5, .Lfunc_end15-DecOneForthPix.5
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.6     # -- Begin function Error_Concealment.6
	.p2align	4, 0x90
	.type	Error_Concealment.6,@function
Error_Concealment.6:                    # @Error_Concealment.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1228369408, -12(%rbp)  # imm = 0x49376E00
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB16_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB16_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_3:                               # %for.cond2
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB16_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB16_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB16_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB16_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB16_6:                               # %if.end
                                        #   in Loop: Header=BB16_3 Depth=2
	jmp	.LBB16_7
.LBB16_7:                               # %for.inc
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_3
.LBB16_8:                               # %for.end
                                        #   in Loop: Header=BB16_1 Depth=1
	jmp	.LBB16_9
.LBB16_9:                               # %for.inc7
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_1
.LBB16_10:                              # %for.end9
	cmpl	$1228369408, -12(%rbp)  # imm = 0x49376E00
	jne	.LBB16_12
.LBB16_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_11
.Lfunc_end16:
	.size	Error_Concealment.6, .Lfunc_end16-Error_Concealment.6
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.7     # -- Begin function Error_Concealment.7
	.p2align	4, 0x90
	.type	Error_Concealment.7,@function
Error_Concealment.7:                    # @Error_Concealment.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2072184123, -12(%rbp)  # imm = 0x7B83053B
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB17_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB17_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	$0, -8(%rbp)
.LBB17_3:                               # %for.cond2
                                        #   Parent Loop BB17_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB17_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB17_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB17_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB17_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB17_6:                               # %if.end
                                        #   in Loop: Header=BB17_3 Depth=2
	jmp	.LBB17_7
.LBB17_7:                               # %for.inc
                                        #   in Loop: Header=BB17_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_3
.LBB17_8:                               # %for.end
                                        #   in Loop: Header=BB17_1 Depth=1
	jmp	.LBB17_9
.LBB17_9:                               # %for.inc7
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_1
.LBB17_10:                              # %for.end9
	cmpl	$2072184123, -12(%rbp)  # imm = 0x7B83053B
	jne	.LBB17_12
.LBB17_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_11
.Lfunc_end17:
	.size	Error_Concealment.7, .Lfunc_end17-Error_Concealment.7
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.8   # -- Begin function Get_Reference_Pixel.8
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.8,@function
Get_Reference_Pixel.8:                  # @Get_Reference_Pixel.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$378809555, -100(%rbp)  # imm = 0x16942CD3
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB18_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB18_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB18_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB18_5
.LBB18_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB18_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB18_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB18_11
.LBB18_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB18_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB18_10
.LBB18_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB18_10:                              # %cond.end14
.LBB18_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB18_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB18_14
.LBB18_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB18_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB18_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB18_20
.LBB18_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB18_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB18_19
.LBB18_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB18_19:                              # %cond.end29
.LBB18_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_332
.LBB18_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB18_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB18_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB18_25
.LBB18_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB18_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB18_31
.LBB18_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB18_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB18_30
.LBB18_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB18_30:                              # %cond.end52
.LBB18_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB18_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB18_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB18_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB18_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB18_36
.LBB18_35:                              # %cond.false61
                                        #   in Loop: Header=BB18_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB18_36:                              # %cond.end63
                                        #   in Loop: Header=BB18_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB18_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB18_42
.LBB18_38:                              # %cond.false68
                                        #   in Loop: Header=BB18_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB18_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB18_41
.LBB18_40:                              # %cond.false73
                                        #   in Loop: Header=BB18_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB18_41:                              # %cond.end75
                                        #   in Loop: Header=BB18_32 Depth=1
.LBB18_42:                              # %cond.end77
                                        #   in Loop: Header=BB18_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB18_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_32
.LBB18_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB18_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_47
.LBB18_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB18_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB18_53
.LBB18_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB18_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_52
.LBB18_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB18_52:                              # %cond.end113
.LBB18_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB18_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB18_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB18_57
.LBB18_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB18_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB18_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB18_63
.LBB18_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB18_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB18_62
.LBB18_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB18_62:                              # %cond.end136
.LBB18_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB18_76
.LBB18_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB18_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB18_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB18_68
.LBB18_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB18_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB18_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB18_74
.LBB18_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB18_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB18_73
.LBB18_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB18_73:                              # %cond.end169
.LBB18_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB18_75:                              # %if.end
	jmp	.LBB18_76
.LBB18_76:                              # %if.end178
	jmp	.LBB18_331
.LBB18_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB18_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB18_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB18_81
.LBB18_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB18_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB18_87
.LBB18_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB18_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB18_86
.LBB18_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB18_86:                              # %cond.end197
.LBB18_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB18_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB18_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB18_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB18_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB18_92
.LBB18_91:                              # %cond.false209
                                        #   in Loop: Header=BB18_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB18_92:                              # %cond.end211
                                        #   in Loop: Header=BB18_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB18_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB18_98
.LBB18_94:                              # %cond.false216
                                        #   in Loop: Header=BB18_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB18_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB18_97
.LBB18_96:                              # %cond.false221
                                        #   in Loop: Header=BB18_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB18_97:                              # %cond.end223
                                        #   in Loop: Header=BB18_88 Depth=1
.LBB18_98:                              # %cond.end225
                                        #   in Loop: Header=BB18_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB18_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_88
.LBB18_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB18_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_103
.LBB18_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB18_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB18_109
.LBB18_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB18_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_108
.LBB18_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB18_108:                             # %cond.end266
.LBB18_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB18_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB18_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB18_113
.LBB18_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB18_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB18_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB18_119
.LBB18_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB18_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB18_118
.LBB18_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB18_118:                             # %cond.end287
.LBB18_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB18_132
.LBB18_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB18_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB18_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB18_124
.LBB18_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB18_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB18_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB18_130
.LBB18_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB18_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB18_129
.LBB18_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB18_129:                             # %cond.end320
.LBB18_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB18_131:                             # %if.end331
	jmp	.LBB18_132
.LBB18_132:                             # %if.end332
	jmp	.LBB18_330
.LBB18_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB18_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB18_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB18_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB18_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB18_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB18_139
.LBB18_138:                             # %cond.false345
                                        #   in Loop: Header=BB18_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB18_139:                             # %cond.end347
                                        #   in Loop: Header=BB18_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB18_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB18_145
.LBB18_141:                             # %cond.false352
                                        #   in Loop: Header=BB18_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB18_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB18_144
.LBB18_143:                             # %cond.false357
                                        #   in Loop: Header=BB18_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB18_144:                             # %cond.end359
                                        #   in Loop: Header=BB18_135 Depth=1
.LBB18_145:                             # %cond.end361
                                        #   in Loop: Header=BB18_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB18_146:                             # %for.cond363
                                        #   Parent Loop BB18_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB18_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB18_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB18_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB18_150
.LBB18_149:                             # %cond.false371
                                        #   in Loop: Header=BB18_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB18_150:                             # %cond.end373
                                        #   in Loop: Header=BB18_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB18_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB18_156
.LBB18_152:                             # %cond.false378
                                        #   in Loop: Header=BB18_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB18_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB18_155
.LBB18_154:                             # %cond.false383
                                        #   in Loop: Header=BB18_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB18_155:                             # %cond.end385
                                        #   in Loop: Header=BB18_146 Depth=2
.LBB18_156:                             # %cond.end387
                                        #   in Loop: Header=BB18_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB18_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_146
.LBB18_158:                             # %for.end401
                                        #   in Loop: Header=BB18_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB18_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_135
.LBB18_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB18_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB18_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB18_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB18_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_161
.LBB18_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB18_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_167
.LBB18_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB18_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB18_173
.LBB18_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB18_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_172
.LBB18_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB18_172:                             # %cond.end449
.LBB18_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB18_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB18_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_177
.LBB18_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB18_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB18_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB18_183
.LBB18_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB18_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_182
.LBB18_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB18_182:                             # %cond.end486
.LBB18_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB18_196
.LBB18_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB18_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB18_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_188
.LBB18_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB18_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB18_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB18_194
.LBB18_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB18_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_193
.LBB18_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB18_193:                             # %cond.end526
.LBB18_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB18_195:                             # %if.end532
	jmp	.LBB18_196
.LBB18_196:                             # %if.end533
	jmp	.LBB18_329
.LBB18_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB18_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB18_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB18_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB18_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB18_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB18_203
.LBB18_202:                             # %cond.false546
                                        #   in Loop: Header=BB18_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB18_203:                             # %cond.end548
                                        #   in Loop: Header=BB18_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB18_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB18_209
.LBB18_205:                             # %cond.false553
                                        #   in Loop: Header=BB18_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB18_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB18_208
.LBB18_207:                             # %cond.false558
                                        #   in Loop: Header=BB18_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB18_208:                             # %cond.end560
                                        #   in Loop: Header=BB18_199 Depth=1
.LBB18_209:                             # %cond.end562
                                        #   in Loop: Header=BB18_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB18_210:                             # %for.cond564
                                        #   Parent Loop BB18_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB18_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB18_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB18_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB18_214
.LBB18_213:                             # %cond.false572
                                        #   in Loop: Header=BB18_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB18_214:                             # %cond.end574
                                        #   in Loop: Header=BB18_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB18_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB18_220
.LBB18_216:                             # %cond.false579
                                        #   in Loop: Header=BB18_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB18_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB18_219
.LBB18_218:                             # %cond.false584
                                        #   in Loop: Header=BB18_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB18_219:                             # %cond.end586
                                        #   in Loop: Header=BB18_210 Depth=2
.LBB18_220:                             # %cond.end588
                                        #   in Loop: Header=BB18_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB18_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_210
.LBB18_222:                             # %for.end602
                                        #   in Loop: Header=BB18_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB18_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_199
.LBB18_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB18_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB18_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB18_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB18_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_225
.LBB18_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB18_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_231
.LBB18_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB18_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB18_237
.LBB18_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB18_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_236
.LBB18_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB18_236:                             # %cond.end650
.LBB18_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB18_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB18_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_241
.LBB18_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB18_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB18_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB18_247
.LBB18_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB18_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_246
.LBB18_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB18_246:                             # %cond.end687
.LBB18_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB18_258
.LBB18_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB18_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_251
.LBB18_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB18_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB18_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB18_257
.LBB18_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB18_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_256
.LBB18_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB18_256:                             # %cond.end724
.LBB18_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB18_258:                             # %if.end730
	jmp	.LBB18_328
.LBB18_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB18_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB18_262
.LBB18_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB18_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB18_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB18_265
.LBB18_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB18_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB18_271
.LBB18_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB18_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB18_270
.LBB18_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB18_270:                             # %cond.end753
.LBB18_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB18_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB18_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB18_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB18_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB18_276
.LBB18_275:                             # %cond.false765
                                        #   in Loop: Header=BB18_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB18_276:                             # %cond.end767
                                        #   in Loop: Header=BB18_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB18_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB18_282
.LBB18_278:                             # %cond.false772
                                        #   in Loop: Header=BB18_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB18_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB18_281
.LBB18_280:                             # %cond.false777
                                        #   in Loop: Header=BB18_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB18_281:                             # %cond.end779
                                        #   in Loop: Header=BB18_272 Depth=1
.LBB18_282:                             # %cond.end781
                                        #   in Loop: Header=BB18_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB18_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_272
.LBB18_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB18_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_287
.LBB18_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB18_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB18_293
.LBB18_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB18_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_292
.LBB18_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB18_292:                             # %cond.end822
.LBB18_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB18_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB18_296
.LBB18_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB18_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB18_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB18_299
.LBB18_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB18_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB18_305
.LBB18_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB18_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB18_304
.LBB18_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB18_304:                             # %cond.end847
.LBB18_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB18_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB18_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB18_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB18_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB18_310
.LBB18_309:                             # %cond.false859
                                        #   in Loop: Header=BB18_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB18_310:                             # %cond.end861
                                        #   in Loop: Header=BB18_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB18_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB18_316
.LBB18_312:                             # %cond.false866
                                        #   in Loop: Header=BB18_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB18_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB18_315
.LBB18_314:                             # %cond.false871
                                        #   in Loop: Header=BB18_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB18_315:                             # %cond.end873
                                        #   in Loop: Header=BB18_306 Depth=1
.LBB18_316:                             # %cond.end875
                                        #   in Loop: Header=BB18_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB18_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_306
.LBB18_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB18_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_321
.LBB18_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB18_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB18_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB18_327
.LBB18_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB18_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_326
.LBB18_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB18_326:                             # %cond.end916
.LBB18_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB18_328:                             # %if.end922
	jmp	.LBB18_329
.LBB18_329:                             # %if.end923
	jmp	.LBB18_330
.LBB18_330:                             # %if.end924
	jmp	.LBB18_331
.LBB18_331:                             # %if.end925
	jmp	.LBB18_332
.LBB18_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$378809555, -100(%rbp)  # imm = 0x16942CD3
	jne	.LBB18_334
.LBB18_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_333
.Lfunc_end18:
	.size	Get_Reference_Pixel.8, .Lfunc_end18-Get_Reference_Pixel.8
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.9         # -- Begin function Conceal_Error.9
	.p2align	4, 0x90
	.type	Conceal_Error.9,@function
Conceal_Error.9:                        # @Conceal_Error.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$444746398, -68(%rbp)   # imm = 0x1A824A9E
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB19_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB19_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB19_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB19_4:                               # %land.end
.LBB19_5:                               # %lor.end
.LBB19_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB19_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB19_9
.LBB19_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB19_14
.LBB19_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB19_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB19_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB19_12:                              # %land.end51
.LBB19_13:                              # %lor.end53
.LBB19_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB19_180
# %bb.15:                               # %land.end54
	movq	.LJTI19_0(,%rax,8), %rax
	jmpq	*%rax
.LBB19_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB19_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB19_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB19_18 Depth=1
	movl	$0, -4(%rbp)
.LBB19_20:                              # %for.cond68
                                        #   Parent Loop BB19_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB19_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB19_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_20
.LBB19_23:                              # %for.end
                                        #   in Loop: Header=BB19_18 Depth=1
	jmp	.LBB19_24
.LBB19_24:                              # %for.inc85
                                        #   in Loop: Header=BB19_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_18
.LBB19_25:                              # %for.end87
	jmp	.LBB19_35
.LBB19_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB19_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB19_27 Depth=1
	movl	$0, -4(%rbp)
.LBB19_29:                              # %for.cond92
                                        #   Parent Loop BB19_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB19_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB19_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_29
.LBB19_32:                              # %for.end104
                                        #   in Loop: Header=BB19_27 Depth=1
	jmp	.LBB19_33
.LBB19_33:                              # %for.inc105
                                        #   in Loop: Header=BB19_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_27
.LBB19_34:                              # %for.end107
	jmp	.LBB19_35
.LBB19_35:                              # %if.end
	jmp	.LBB19_180
.LBB19_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB19_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_39 Depth 2
                                        #       Child Loop BB19_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB19_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB19_37 Depth=1
	movl	$0, -16(%rbp)
.LBB19_39:                              # %for.cond113
                                        #   Parent Loop BB19_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB19_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB19_39 Depth=2
	movl	$0, -4(%rbp)
.LBB19_41:                              # %for.cond117
                                        #   Parent Loop BB19_37 Depth=1
                                        #     Parent Loop BB19_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB19_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB19_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB19_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_41
.LBB19_44:                              # %for.end141
                                        #   in Loop: Header=BB19_39 Depth=2
	jmp	.LBB19_45
.LBB19_45:                              # %for.inc142
                                        #   in Loop: Header=BB19_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_39
.LBB19_46:                              # %for.end144
                                        #   in Loop: Header=BB19_37 Depth=1
	jmp	.LBB19_47
.LBB19_47:                              # %for.inc145
                                        #   in Loop: Header=BB19_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_37
.LBB19_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB19_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB19_49 Depth=1
	movl	$0, -8(%rbp)
.LBB19_51:                              # %for.cond152
                                        #   Parent Loop BB19_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB19_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB19_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_51
.LBB19_54:                              # %for.end162
                                        #   in Loop: Header=BB19_49 Depth=1
	jmp	.LBB19_55
.LBB19_55:                              # %for.inc163
                                        #   in Loop: Header=BB19_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_49
.LBB19_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB19_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB19_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB19_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB19_59 Depth=1
	movl	$0, -4(%rbp)
.LBB19_61:                              # %for.cond175
                                        #   Parent Loop BB19_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB19_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB19_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_61
.LBB19_64:                              # %for.end195
                                        #   in Loop: Header=BB19_59 Depth=1
	jmp	.LBB19_65
.LBB19_65:                              # %for.inc196
                                        #   in Loop: Header=BB19_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_59
.LBB19_66:                              # %for.end198
	jmp	.LBB19_95
.LBB19_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB19_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB19_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_71 Depth 2
                                        #       Child Loop BB19_73 Depth 3
                                        #         Child Loop BB19_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB19_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB19_71:                              # %for.cond210
                                        #   Parent Loop BB19_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_73 Depth 3
                                        #         Child Loop BB19_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB19_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB19_73:                              # %for.cond236
                                        #   Parent Loop BB19_69 Depth=1
                                        #     Parent Loop BB19_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB19_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB19_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB19_73 Depth=3
	movl	$0, -4(%rbp)
.LBB19_75:                              # %for.cond240
                                        #   Parent Loop BB19_69 Depth=1
                                        #     Parent Loop BB19_71 Depth=2
                                        #       Parent Loop BB19_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB19_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB19_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB19_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_75
.LBB19_78:                              # %for.end259
                                        #   in Loop: Header=BB19_73 Depth=3
	jmp	.LBB19_79
.LBB19_79:                              # %for.inc260
                                        #   in Loop: Header=BB19_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_73
.LBB19_80:                              # %for.end262
                                        #   in Loop: Header=BB19_71 Depth=2
	jmp	.LBB19_81
.LBB19_81:                              # %for.inc263
                                        #   in Loop: Header=BB19_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_71
.LBB19_82:                              # %for.end265
                                        #   in Loop: Header=BB19_69 Depth=1
	jmp	.LBB19_83
.LBB19_83:                              # %for.inc266
                                        #   in Loop: Header=BB19_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_69
.LBB19_84:                              # %for.end268
	jmp	.LBB19_94
.LBB19_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB19_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB19_86 Depth=1
	movl	$0, -4(%rbp)
.LBB19_88:                              # %for.cond274
                                        #   Parent Loop BB19_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB19_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB19_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_88
.LBB19_91:                              # %for.end294
                                        #   in Loop: Header=BB19_86 Depth=1
	jmp	.LBB19_92
.LBB19_92:                              # %for.inc295
                                        #   in Loop: Header=BB19_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_86
.LBB19_93:                              # %for.end297
	jmp	.LBB19_94
.LBB19_94:                              # %if.end298
	jmp	.LBB19_95
.LBB19_95:                              # %if.end299
	jmp	.LBB19_105
.LBB19_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB19_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB19_97 Depth=1
	movl	$0, -4(%rbp)
.LBB19_99:                              # %for.cond305
                                        #   Parent Loop BB19_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB19_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB19_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_99
.LBB19_102:                             # %for.end317
                                        #   in Loop: Header=BB19_97 Depth=1
	jmp	.LBB19_103
.LBB19_103:                             # %for.inc318
                                        #   in Loop: Header=BB19_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_97
.LBB19_104:                             # %for.end320
	jmp	.LBB19_105
.LBB19_105:                             # %if.end321
	jmp	.LBB19_180
.LBB19_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB19_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB19_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_110 Depth 2
                                        #       Child Loop BB19_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB19_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB19_108 Depth=1
	movl	$0, -16(%rbp)
.LBB19_110:                             # %for.cond331
                                        #   Parent Loop BB19_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB19_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB19_110 Depth=2
	movl	$0, -4(%rbp)
.LBB19_112:                             # %for.cond335
                                        #   Parent Loop BB19_108 Depth=1
                                        #     Parent Loop BB19_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB19_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB19_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB19_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_112
.LBB19_115:                             # %for.end359
                                        #   in Loop: Header=BB19_110 Depth=2
	jmp	.LBB19_116
.LBB19_116:                             # %for.inc360
                                        #   in Loop: Header=BB19_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_110
.LBB19_117:                             # %for.end362
                                        #   in Loop: Header=BB19_108 Depth=1
	jmp	.LBB19_118
.LBB19_118:                             # %for.inc363
                                        #   in Loop: Header=BB19_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_108
.LBB19_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB19_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB19_120 Depth=1
	movl	$0, -8(%rbp)
.LBB19_122:                             # %for.cond370
                                        #   Parent Loop BB19_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB19_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB19_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_122
.LBB19_125:                             # %for.end380
                                        #   in Loop: Header=BB19_120 Depth=1
	jmp	.LBB19_126
.LBB19_126:                             # %for.inc381
                                        #   in Loop: Header=BB19_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_120
.LBB19_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB19_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB19_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB19_129 Depth=1
	movl	$0, -4(%rbp)
.LBB19_131:                             # %for.cond390
                                        #   Parent Loop BB19_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB19_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB19_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_131
.LBB19_134:                             # %for.end410
                                        #   in Loop: Header=BB19_129 Depth=1
	jmp	.LBB19_135
.LBB19_135:                             # %for.inc411
                                        #   in Loop: Header=BB19_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_129
.LBB19_136:                             # %for.end413
	jmp	.LBB19_156
.LBB19_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB19_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB19_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_141 Depth 2
                                        #       Child Loop BB19_143 Depth 3
                                        #         Child Loop BB19_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB19_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB19_141:                             # %for.cond425
                                        #   Parent Loop BB19_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_143 Depth 3
                                        #         Child Loop BB19_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB19_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB19_143:                             # %for.cond452
                                        #   Parent Loop BB19_139 Depth=1
                                        #     Parent Loop BB19_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB19_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB19_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB19_143 Depth=3
	movl	$0, -4(%rbp)
.LBB19_145:                             # %for.cond456
                                        #   Parent Loop BB19_139 Depth=1
                                        #     Parent Loop BB19_141 Depth=2
                                        #       Parent Loop BB19_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB19_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB19_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB19_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_145
.LBB19_148:                             # %for.end475
                                        #   in Loop: Header=BB19_143 Depth=3
	jmp	.LBB19_149
.LBB19_149:                             # %for.inc476
                                        #   in Loop: Header=BB19_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_143
.LBB19_150:                             # %for.end478
                                        #   in Loop: Header=BB19_141 Depth=2
	jmp	.LBB19_151
.LBB19_151:                             # %for.inc479
                                        #   in Loop: Header=BB19_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_141
.LBB19_152:                             # %for.end481
                                        #   in Loop: Header=BB19_139 Depth=1
	jmp	.LBB19_153
.LBB19_153:                             # %for.inc482
                                        #   in Loop: Header=BB19_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_139
.LBB19_154:                             # %for.end484
	jmp	.LBB19_155
.LBB19_155:                             # %if.end485
	jmp	.LBB19_156
.LBB19_156:                             # %if.end486
	jmp	.LBB19_157
.LBB19_157:                             # %if.end487
	jmp	.LBB19_180
.LBB19_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB19_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB19_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB19_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB19_161 Depth=1
	movl	$0, -4(%rbp)
.LBB19_163:                             # %for.cond499
                                        #   Parent Loop BB19_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB19_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB19_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_163
.LBB19_166:                             # %for.end519
                                        #   in Loop: Header=BB19_161 Depth=1
	jmp	.LBB19_167
.LBB19_167:                             # %for.inc520
                                        #   in Loop: Header=BB19_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_161
.LBB19_168:                             # %for.end522
	jmp	.LBB19_169
.LBB19_169:                             # %if.end523
	jmp	.LBB19_179
.LBB19_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB19_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB19_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB19_171 Depth=1
	movl	$0, -4(%rbp)
.LBB19_173:                             # %for.cond529
                                        #   Parent Loop BB19_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB19_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB19_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB19_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_173
.LBB19_176:                             # %for.end541
                                        #   in Loop: Header=BB19_171 Depth=1
	jmp	.LBB19_177
.LBB19_177:                             # %for.inc542
                                        #   in Loop: Header=BB19_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_171
.LBB19_178:                             # %for.end544
	jmp	.LBB19_179
.LBB19_179:                             # %if.end545
	jmp	.LBB19_180
.LBB19_180:                             # %sw.epilog
	cmpl	$444746398, -68(%rbp)   # imm = 0x1A824A9E
	jne	.LBB19_182
.LBB19_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_181
.Lfunc_end19:
	.size	Conceal_Error.9, .Lfunc_end19-Conceal_Error.9
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI19_0:
	.quad	.LBB19_16
	.quad	.LBB19_158
	.quad	.LBB19_106
	.quad	.LBB19_180
	.quad	.LBB19_36
                                        # -- End function
	.text
	.globl	decode_one_mb.10        # -- Begin function decode_one_mb.10
	.p2align	4, 0x90
	.type	decode_one_mb.10,@function
decode_one_mb.10:                       # @decode_one_mb.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$355560458, -4(%rbp)    # imm = 0x15316C0A
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$355560458, -4(%rbp)    # imm = 0x15316C0A
	jne	.LBB20_2
.LBB20_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_1
.Lfunc_end20:
	.size	decode_one_mb.10, .Lfunc_end20-decode_one_mb.10
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.11  # -- Begin function Get_Reference_Pixel.11
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.11,@function
Get_Reference_Pixel.11:                 # @Get_Reference_Pixel.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$117416050, -108(%rbp)  # imm = 0x6FFA072
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB21_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB21_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB21_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB21_5
.LBB21_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB21_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB21_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB21_11
.LBB21_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB21_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB21_10
.LBB21_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB21_10:                              # %cond.end14
.LBB21_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB21_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB21_14
.LBB21_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB21_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB21_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB21_20
.LBB21_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB21_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB21_19
.LBB21_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB21_19:                              # %cond.end29
.LBB21_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_332
.LBB21_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB21_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB21_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB21_25
.LBB21_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB21_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB21_31
.LBB21_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB21_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB21_30
.LBB21_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB21_30:                              # %cond.end52
.LBB21_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB21_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB21_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_36
.LBB21_35:                              # %cond.false61
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_36:                              # %cond.end63
                                        #   in Loop: Header=BB21_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB21_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_42
.LBB21_38:                              # %cond.false68
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_41
.LBB21_40:                              # %cond.false73
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_41:                              # %cond.end75
                                        #   in Loop: Header=BB21_32 Depth=1
.LBB21_42:                              # %cond.end77
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_32
.LBB21_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_47
.LBB21_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB21_53
.LBB21_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_52
.LBB21_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_52:                              # %cond.end113
.LBB21_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB21_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB21_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB21_57
.LBB21_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB21_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB21_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB21_63
.LBB21_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB21_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB21_62
.LBB21_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB21_62:                              # %cond.end136
.LBB21_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB21_76
.LBB21_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB21_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB21_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB21_68
.LBB21_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB21_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB21_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB21_74
.LBB21_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB21_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB21_73
.LBB21_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB21_73:                              # %cond.end169
.LBB21_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_75:                              # %if.end
	jmp	.LBB21_76
.LBB21_76:                              # %if.end178
	jmp	.LBB21_331
.LBB21_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB21_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB21_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB21_81
.LBB21_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB21_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB21_87
.LBB21_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB21_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB21_86
.LBB21_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB21_86:                              # %cond.end197
.LBB21_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB21_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB21_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_92
.LBB21_91:                              # %cond.false209
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_92:                              # %cond.end211
                                        #   in Loop: Header=BB21_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB21_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_98
.LBB21_94:                              # %cond.false216
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_97
.LBB21_96:                              # %cond.false221
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_97:                              # %cond.end223
                                        #   in Loop: Header=BB21_88 Depth=1
.LBB21_98:                              # %cond.end225
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_88
.LBB21_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_103
.LBB21_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB21_109
.LBB21_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_108
.LBB21_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_108:                             # %cond.end266
.LBB21_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB21_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB21_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB21_113
.LBB21_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB21_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB21_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB21_119
.LBB21_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB21_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB21_118
.LBB21_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB21_118:                             # %cond.end287
.LBB21_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB21_132
.LBB21_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB21_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB21_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB21_124
.LBB21_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB21_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB21_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB21_130
.LBB21_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB21_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB21_129
.LBB21_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB21_129:                             # %cond.end320
.LBB21_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_131:                             # %if.end331
	jmp	.LBB21_132
.LBB21_132:                             # %if.end332
	jmp	.LBB21_330
.LBB21_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB21_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB21_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_139
.LBB21_138:                             # %cond.false345
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_139:                             # %cond.end347
                                        #   in Loop: Header=BB21_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB21_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_145
.LBB21_141:                             # %cond.false352
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_144
.LBB21_143:                             # %cond.false357
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_144:                             # %cond.end359
                                        #   in Loop: Header=BB21_135 Depth=1
.LBB21_145:                             # %cond.end361
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB21_146:                             # %for.cond363
                                        #   Parent Loop BB21_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB21_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB21_150
.LBB21_149:                             # %cond.false371
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_150:                             # %cond.end373
                                        #   in Loop: Header=BB21_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB21_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB21_156
.LBB21_152:                             # %cond.false378
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB21_155
.LBB21_154:                             # %cond.false383
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_155:                             # %cond.end385
                                        #   in Loop: Header=BB21_146 Depth=2
.LBB21_156:                             # %cond.end387
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_146
.LBB21_158:                             # %for.end401
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_135
.LBB21_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB21_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB21_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB21_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB21_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_161
.LBB21_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_167
.LBB21_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB21_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB21_173
.LBB21_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_172
.LBB21_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB21_172:                             # %cond.end449
.LBB21_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB21_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_177
.LBB21_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB21_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB21_183
.LBB21_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_182
.LBB21_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_182:                             # %cond.end486
.LBB21_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB21_196
.LBB21_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB21_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_188
.LBB21_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB21_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB21_194
.LBB21_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_193
.LBB21_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_193:                             # %cond.end526
.LBB21_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_195:                             # %if.end532
	jmp	.LBB21_196
.LBB21_196:                             # %if.end533
	jmp	.LBB21_329
.LBB21_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB21_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB21_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB21_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_203
.LBB21_202:                             # %cond.false546
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_203:                             # %cond.end548
                                        #   in Loop: Header=BB21_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB21_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_209
.LBB21_205:                             # %cond.false553
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_208
.LBB21_207:                             # %cond.false558
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_208:                             # %cond.end560
                                        #   in Loop: Header=BB21_199 Depth=1
.LBB21_209:                             # %cond.end562
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB21_210:                             # %for.cond564
                                        #   Parent Loop BB21_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB21_214
.LBB21_213:                             # %cond.false572
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_214:                             # %cond.end574
                                        #   in Loop: Header=BB21_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB21_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB21_220
.LBB21_216:                             # %cond.false579
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB21_219
.LBB21_218:                             # %cond.false584
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_219:                             # %cond.end586
                                        #   in Loop: Header=BB21_210 Depth=2
.LBB21_220:                             # %cond.end588
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_210
.LBB21_222:                             # %for.end602
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_199
.LBB21_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB21_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB21_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB21_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB21_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_225
.LBB21_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_231
.LBB21_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB21_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB21_237
.LBB21_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_236
.LBB21_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB21_236:                             # %cond.end650
.LBB21_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB21_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_241
.LBB21_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB21_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB21_247
.LBB21_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_246
.LBB21_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_246:                             # %cond.end687
.LBB21_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB21_258
.LBB21_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_251
.LBB21_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB21_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB21_257
.LBB21_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_256
.LBB21_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_256:                             # %cond.end724
.LBB21_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_258:                             # %if.end730
	jmp	.LBB21_328
.LBB21_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB21_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB21_262
.LBB21_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB21_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB21_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB21_265
.LBB21_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB21_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB21_271
.LBB21_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB21_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB21_270
.LBB21_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB21_270:                             # %cond.end753
.LBB21_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB21_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB21_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_276
.LBB21_275:                             # %cond.false765
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_276:                             # %cond.end767
                                        #   in Loop: Header=BB21_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB21_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_282
.LBB21_278:                             # %cond.false772
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_281
.LBB21_280:                             # %cond.false777
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_281:                             # %cond.end779
                                        #   in Loop: Header=BB21_272 Depth=1
.LBB21_282:                             # %cond.end781
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_272
.LBB21_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_287
.LBB21_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB21_293
.LBB21_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_292
.LBB21_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_292:                             # %cond.end822
.LBB21_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB21_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB21_296
.LBB21_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB21_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB21_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB21_299
.LBB21_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB21_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB21_305
.LBB21_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB21_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB21_304
.LBB21_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB21_304:                             # %cond.end847
.LBB21_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB21_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB21_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_310
.LBB21_309:                             # %cond.false859
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_310:                             # %cond.end861
                                        #   in Loop: Header=BB21_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB21_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_316
.LBB21_312:                             # %cond.false866
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_315
.LBB21_314:                             # %cond.false871
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_315:                             # %cond.end873
                                        #   in Loop: Header=BB21_306 Depth=1
.LBB21_316:                             # %cond.end875
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_306
.LBB21_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_321
.LBB21_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB21_327
.LBB21_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_326
.LBB21_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_326:                             # %cond.end916
.LBB21_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_328:                             # %if.end922
	jmp	.LBB21_329
.LBB21_329:                             # %if.end923
	jmp	.LBB21_330
.LBB21_330:                             # %if.end924
	jmp	.LBB21_331
.LBB21_331:                             # %if.end925
	jmp	.LBB21_332
.LBB21_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$117416050, -108(%rbp)  # imm = 0x6FFA072
	jne	.LBB21_334
.LBB21_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_333
.Lfunc_end21:
	.size	Get_Reference_Pixel.11, .Lfunc_end21-Get_Reference_Pixel.11
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.12
.LCPI22_0:
	.quad	4636737291354636288     # double 100
.LCPI22_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.12
	.p2align	4, 0x90
	.type	Build_Status_Map.12,@function
Build_Status_Map.12:                    # @Build_Status_Map.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$528078169, -44(%rbp)   # imm = 0x1F79D559
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB22_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB22_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -12(%rbp)
.LBB22_3:                               # %for.cond2
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB22_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB22_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB22_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB22_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB22_13
.LBB22_6:                               # %if.then
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI22_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB22_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB22_8:                               # %if.end
                                        #   in Loop: Header=BB22_3 Depth=2
	callq	rand
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI22_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB22_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB22_10:                              # %if.end20
                                        #   in Loop: Header=BB22_3 Depth=2
	callq	rand
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI22_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB22_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	$1, -4(%rbp)
.LBB22_12:                              # %if.end29
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB22_13:                              # %if.end30
                                        #   in Loop: Header=BB22_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB22_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB22_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB22_18
.LBB22_15:                              # %if.else
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB22_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB22_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB22_17:                              # %if.end49
                                        #   in Loop: Header=BB22_3 Depth=2
	jmp	.LBB22_18
.LBB22_18:                              # %if.end50
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_3
.LBB22_20:                              # %for.end
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_21
.LBB22_21:                              # %for.inc53
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_1
.LBB22_22:                              # %for.end55
	cmpl	$528078169, -44(%rbp)   # imm = 0x1F79D559
	jne	.LBB22_24
.LBB22_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_23
.Lfunc_end22:
	.size	Build_Status_Map.12, .Lfunc_end22-Build_Status_Map.12
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.13 # -- Begin function compute_residue_b8block.13
	.p2align	4, 0x90
	.type	compute_residue_b8block.13,@function
compute_residue_b8block.13:             # @compute_residue_b8block.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$772970286, -36(%rbp)   # imm = 0x2E12972E
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB23_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB23_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB23_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB23_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB23_4:                               # %for.cond4
                                        #   Parent Loop BB23_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB23_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB23_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB23_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_4
.LBB23_7:                               # %for.end
                                        #   in Loop: Header=BB23_2 Depth=1
	jmp	.LBB23_8
.LBB23_8:                               # %for.inc22
                                        #   in Loop: Header=BB23_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_2
.LBB23_9:                               # %for.end24
	jmp	.LBB23_19
.LBB23_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB23_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB23_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB23_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB23_13:                              # %for.cond29
                                        #   Parent Loop BB23_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB23_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB23_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB23_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_13
.LBB23_16:                              # %for.end56
                                        #   in Loop: Header=BB23_11 Depth=1
	jmp	.LBB23_17
.LBB23_17:                              # %for.inc57
                                        #   in Loop: Header=BB23_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_11
.LBB23_18:                              # %for.end59
	jmp	.LBB23_19
.LBB23_19:                              # %if.end
	cmpl	$772970286, -36(%rbp)   # imm = 0x2E12972E
	jne	.LBB23_21
.LBB23_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_20
.Lfunc_end23:
	.size	compute_residue_b8block.13, .Lfunc_end23-compute_residue_b8block.13
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.14       # -- Begin function DecOneForthPix.14
	.p2align	4, 0x90
	.type	DecOneForthPix.14,@function
DecOneForthPix.14:                      # @DecOneForthPix.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$290982920, -12(%rbp)   # imm = 0x11580C08
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB24_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB24_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_1
.LBB24_4:                               # %for.end
	cmpl	$290982920, -12(%rbp)   # imm = 0x11580C08
	jne	.LBB24_6
.LBB24_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_5
.Lfunc_end24:
	.size	DecOneForthPix.14, .Lfunc_end24-DecOneForthPix.14
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.15    # -- Begin function Error_Concealment.15
	.p2align	4, 0x90
	.type	Error_Concealment.15,@function
Error_Concealment.15:                   # @Error_Concealment.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1921949368, -20(%rbp)  # imm = 0x728E9EB8
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB25_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB25_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB25_1 Depth=1
	movl	$0, -4(%rbp)
.LBB25_3:                               # %for.cond2
                                        #   Parent Loop BB25_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB25_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB25_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB25_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB25_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB25_6:                               # %if.end
                                        #   in Loop: Header=BB25_3 Depth=2
	jmp	.LBB25_7
.LBB25_7:                               # %for.inc
                                        #   in Loop: Header=BB25_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_3
.LBB25_8:                               # %for.end
                                        #   in Loop: Header=BB25_1 Depth=1
	jmp	.LBB25_9
.LBB25_9:                               # %for.inc7
                                        #   in Loop: Header=BB25_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_1
.LBB25_10:                              # %for.end9
	cmpl	$1921949368, -20(%rbp)  # imm = 0x728E9EB8
	jne	.LBB25_12
.LBB25_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_11
.Lfunc_end25:
	.size	Error_Concealment.15, .Lfunc_end25-Error_Concealment.15
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.16  # -- Begin function Get_Reference_Block.16
	.p2align	4, 0x90
	.type	Get_Reference_Block.16,@function
Get_Reference_Block.16:                 # @Get_Reference_Block.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$47148995, -16(%rbp)    # imm = 0x2CF6FC3
	movq	%rdi, -56(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -48(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB26_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB26_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -8(%rbp)
.LBB26_3:                               # %for.cond5
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB26_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB26_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-24(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB26_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_3
.LBB26_6:                               # %for.end
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_7
.LBB26_7:                               # %for.inc14
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_1
.LBB26_8:                               # %for.end16
	cmpl	$47148995, -16(%rbp)    # imm = 0x2CF6FC3
	jne	.LBB26_10
.LBB26_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_9
.Lfunc_end26:
	.size	Get_Reference_Block.16, .Lfunc_end26-Get_Reference_Block.16
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.17 # -- Begin function compute_residue_b8block.17
	.p2align	4, 0x90
	.type	compute_residue_b8block.17,@function
compute_residue_b8block.17:             # @compute_residue_b8block.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$384100248, -36(%rbp)   # imm = 0x16E4E798
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB27_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB27_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB27_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB27_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB27_4:                               # %for.cond4
                                        #   Parent Loop BB27_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB27_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB27_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB27_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_4
.LBB27_7:                               # %for.end
                                        #   in Loop: Header=BB27_2 Depth=1
	jmp	.LBB27_8
.LBB27_8:                               # %for.inc22
                                        #   in Loop: Header=BB27_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_2
.LBB27_9:                               # %for.end24
	jmp	.LBB27_19
.LBB27_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB27_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB27_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB27_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB27_13:                              # %for.cond29
                                        #   Parent Loop BB27_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB27_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB27_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB27_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_13
.LBB27_16:                              # %for.end56
                                        #   in Loop: Header=BB27_11 Depth=1
	jmp	.LBB27_17
.LBB27_17:                              # %for.inc57
                                        #   in Loop: Header=BB27_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_11
.LBB27_18:                              # %for.end59
	jmp	.LBB27_19
.LBB27_19:                              # %if.end
	cmpl	$384100248, -36(%rbp)   # imm = 0x16E4E798
	jne	.LBB27_21
.LBB27_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_20
.Lfunc_end27:
	.size	compute_residue_b8block.17, .Lfunc_end27-compute_residue_b8block.17
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.18    # -- Begin function Error_Concealment.18
	.p2align	4, 0x90
	.type	Error_Concealment.18,@function
Error_Concealment.18:                   # @Error_Concealment.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$306514424, -12(%rbp)   # imm = 0x124509F8
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB28_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB28_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB28_1 Depth=1
	movl	$0, -8(%rbp)
.LBB28_3:                               # %for.cond2
                                        #   Parent Loop BB28_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB28_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB28_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB28_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB28_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB28_6:                               # %if.end
                                        #   in Loop: Header=BB28_3 Depth=2
	jmp	.LBB28_7
.LBB28_7:                               # %for.inc
                                        #   in Loop: Header=BB28_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_3
.LBB28_8:                               # %for.end
                                        #   in Loop: Header=BB28_1 Depth=1
	jmp	.LBB28_9
.LBB28_9:                               # %for.inc7
                                        #   in Loop: Header=BB28_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_1
.LBB28_10:                              # %for.end9
	cmpl	$306514424, -12(%rbp)   # imm = 0x124509F8
	jne	.LBB28_12
.LBB28_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_11
.Lfunc_end28:
	.size	Error_Concealment.18, .Lfunc_end28-Error_Concealment.18
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.19        # -- Begin function Conceal_Error.19
	.p2align	4, 0x90
	.type	Conceal_Error.19,@function
Conceal_Error.19:                       # @Conceal_Error.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$2058762173, -68(%rbp)  # imm = 0x7AB637BD
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB29_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB29_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB29_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB29_4:                               # %land.end
.LBB29_5:                               # %lor.end
.LBB29_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB29_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB29_9
.LBB29_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB29_14
.LBB29_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB29_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB29_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB29_12:                              # %land.end51
.LBB29_13:                              # %lor.end53
.LBB29_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB29_180
# %bb.15:                               # %land.end54
	movq	.LJTI29_0(,%rax,8), %rax
	jmpq	*%rax
.LBB29_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB29_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB29_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB29_18 Depth=1
	movl	$0, -4(%rbp)
.LBB29_20:                              # %for.cond68
                                        #   Parent Loop BB29_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB29_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB29_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_20
.LBB29_23:                              # %for.end
                                        #   in Loop: Header=BB29_18 Depth=1
	jmp	.LBB29_24
.LBB29_24:                              # %for.inc85
                                        #   in Loop: Header=BB29_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_18
.LBB29_25:                              # %for.end87
	jmp	.LBB29_35
.LBB29_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB29_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB29_27 Depth=1
	movl	$0, -4(%rbp)
.LBB29_29:                              # %for.cond92
                                        #   Parent Loop BB29_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB29_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB29_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_29
.LBB29_32:                              # %for.end104
                                        #   in Loop: Header=BB29_27 Depth=1
	jmp	.LBB29_33
.LBB29_33:                              # %for.inc105
                                        #   in Loop: Header=BB29_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_27
.LBB29_34:                              # %for.end107
	jmp	.LBB29_35
.LBB29_35:                              # %if.end
	jmp	.LBB29_180
.LBB29_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB29_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_39 Depth 2
                                        #       Child Loop BB29_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB29_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB29_37 Depth=1
	movl	$0, -16(%rbp)
.LBB29_39:                              # %for.cond113
                                        #   Parent Loop BB29_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB29_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB29_39 Depth=2
	movl	$0, -4(%rbp)
.LBB29_41:                              # %for.cond117
                                        #   Parent Loop BB29_37 Depth=1
                                        #     Parent Loop BB29_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB29_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB29_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB29_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_41
.LBB29_44:                              # %for.end141
                                        #   in Loop: Header=BB29_39 Depth=2
	jmp	.LBB29_45
.LBB29_45:                              # %for.inc142
                                        #   in Loop: Header=BB29_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_39
.LBB29_46:                              # %for.end144
                                        #   in Loop: Header=BB29_37 Depth=1
	jmp	.LBB29_47
.LBB29_47:                              # %for.inc145
                                        #   in Loop: Header=BB29_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_37
.LBB29_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB29_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB29_49 Depth=1
	movl	$0, -8(%rbp)
.LBB29_51:                              # %for.cond152
                                        #   Parent Loop BB29_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB29_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB29_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_51
.LBB29_54:                              # %for.end162
                                        #   in Loop: Header=BB29_49 Depth=1
	jmp	.LBB29_55
.LBB29_55:                              # %for.inc163
                                        #   in Loop: Header=BB29_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_49
.LBB29_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB29_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB29_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB29_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB29_59 Depth=1
	movl	$0, -4(%rbp)
.LBB29_61:                              # %for.cond175
                                        #   Parent Loop BB29_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB29_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB29_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_61
.LBB29_64:                              # %for.end195
                                        #   in Loop: Header=BB29_59 Depth=1
	jmp	.LBB29_65
.LBB29_65:                              # %for.inc196
                                        #   in Loop: Header=BB29_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_59
.LBB29_66:                              # %for.end198
	jmp	.LBB29_95
.LBB29_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB29_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB29_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_71 Depth 2
                                        #       Child Loop BB29_73 Depth 3
                                        #         Child Loop BB29_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB29_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB29_71:                              # %for.cond210
                                        #   Parent Loop BB29_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_73 Depth 3
                                        #         Child Loop BB29_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB29_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB29_73:                              # %for.cond236
                                        #   Parent Loop BB29_69 Depth=1
                                        #     Parent Loop BB29_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB29_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB29_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB29_73 Depth=3
	movl	$0, -4(%rbp)
.LBB29_75:                              # %for.cond240
                                        #   Parent Loop BB29_69 Depth=1
                                        #     Parent Loop BB29_71 Depth=2
                                        #       Parent Loop BB29_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB29_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB29_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB29_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_75
.LBB29_78:                              # %for.end259
                                        #   in Loop: Header=BB29_73 Depth=3
	jmp	.LBB29_79
.LBB29_79:                              # %for.inc260
                                        #   in Loop: Header=BB29_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_73
.LBB29_80:                              # %for.end262
                                        #   in Loop: Header=BB29_71 Depth=2
	jmp	.LBB29_81
.LBB29_81:                              # %for.inc263
                                        #   in Loop: Header=BB29_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_71
.LBB29_82:                              # %for.end265
                                        #   in Loop: Header=BB29_69 Depth=1
	jmp	.LBB29_83
.LBB29_83:                              # %for.inc266
                                        #   in Loop: Header=BB29_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_69
.LBB29_84:                              # %for.end268
	jmp	.LBB29_94
.LBB29_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB29_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB29_86 Depth=1
	movl	$0, -4(%rbp)
.LBB29_88:                              # %for.cond274
                                        #   Parent Loop BB29_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB29_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB29_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_88
.LBB29_91:                              # %for.end294
                                        #   in Loop: Header=BB29_86 Depth=1
	jmp	.LBB29_92
.LBB29_92:                              # %for.inc295
                                        #   in Loop: Header=BB29_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_86
.LBB29_93:                              # %for.end297
	jmp	.LBB29_94
.LBB29_94:                              # %if.end298
	jmp	.LBB29_95
.LBB29_95:                              # %if.end299
	jmp	.LBB29_105
.LBB29_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB29_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB29_97 Depth=1
	movl	$0, -4(%rbp)
.LBB29_99:                              # %for.cond305
                                        #   Parent Loop BB29_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB29_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB29_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_99
.LBB29_102:                             # %for.end317
                                        #   in Loop: Header=BB29_97 Depth=1
	jmp	.LBB29_103
.LBB29_103:                             # %for.inc318
                                        #   in Loop: Header=BB29_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_97
.LBB29_104:                             # %for.end320
	jmp	.LBB29_105
.LBB29_105:                             # %if.end321
	jmp	.LBB29_180
.LBB29_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB29_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB29_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_110 Depth 2
                                        #       Child Loop BB29_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB29_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB29_108 Depth=1
	movl	$0, -16(%rbp)
.LBB29_110:                             # %for.cond331
                                        #   Parent Loop BB29_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB29_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB29_110 Depth=2
	movl	$0, -4(%rbp)
.LBB29_112:                             # %for.cond335
                                        #   Parent Loop BB29_108 Depth=1
                                        #     Parent Loop BB29_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB29_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB29_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB29_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_112
.LBB29_115:                             # %for.end359
                                        #   in Loop: Header=BB29_110 Depth=2
	jmp	.LBB29_116
.LBB29_116:                             # %for.inc360
                                        #   in Loop: Header=BB29_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_110
.LBB29_117:                             # %for.end362
                                        #   in Loop: Header=BB29_108 Depth=1
	jmp	.LBB29_118
.LBB29_118:                             # %for.inc363
                                        #   in Loop: Header=BB29_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_108
.LBB29_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB29_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB29_120 Depth=1
	movl	$0, -8(%rbp)
.LBB29_122:                             # %for.cond370
                                        #   Parent Loop BB29_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB29_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB29_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_122
.LBB29_125:                             # %for.end380
                                        #   in Loop: Header=BB29_120 Depth=1
	jmp	.LBB29_126
.LBB29_126:                             # %for.inc381
                                        #   in Loop: Header=BB29_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_120
.LBB29_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB29_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB29_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB29_129 Depth=1
	movl	$0, -4(%rbp)
.LBB29_131:                             # %for.cond390
                                        #   Parent Loop BB29_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB29_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB29_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_131
.LBB29_134:                             # %for.end410
                                        #   in Loop: Header=BB29_129 Depth=1
	jmp	.LBB29_135
.LBB29_135:                             # %for.inc411
                                        #   in Loop: Header=BB29_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_129
.LBB29_136:                             # %for.end413
	jmp	.LBB29_156
.LBB29_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB29_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB29_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_141 Depth 2
                                        #       Child Loop BB29_143 Depth 3
                                        #         Child Loop BB29_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB29_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB29_141:                             # %for.cond425
                                        #   Parent Loop BB29_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_143 Depth 3
                                        #         Child Loop BB29_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB29_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB29_143:                             # %for.cond452
                                        #   Parent Loop BB29_139 Depth=1
                                        #     Parent Loop BB29_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB29_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB29_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB29_143 Depth=3
	movl	$0, -4(%rbp)
.LBB29_145:                             # %for.cond456
                                        #   Parent Loop BB29_139 Depth=1
                                        #     Parent Loop BB29_141 Depth=2
                                        #       Parent Loop BB29_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB29_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB29_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB29_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_145
.LBB29_148:                             # %for.end475
                                        #   in Loop: Header=BB29_143 Depth=3
	jmp	.LBB29_149
.LBB29_149:                             # %for.inc476
                                        #   in Loop: Header=BB29_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_143
.LBB29_150:                             # %for.end478
                                        #   in Loop: Header=BB29_141 Depth=2
	jmp	.LBB29_151
.LBB29_151:                             # %for.inc479
                                        #   in Loop: Header=BB29_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_141
.LBB29_152:                             # %for.end481
                                        #   in Loop: Header=BB29_139 Depth=1
	jmp	.LBB29_153
.LBB29_153:                             # %for.inc482
                                        #   in Loop: Header=BB29_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_139
.LBB29_154:                             # %for.end484
	jmp	.LBB29_155
.LBB29_155:                             # %if.end485
	jmp	.LBB29_156
.LBB29_156:                             # %if.end486
	jmp	.LBB29_157
.LBB29_157:                             # %if.end487
	jmp	.LBB29_180
.LBB29_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB29_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB29_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB29_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB29_161 Depth=1
	movl	$0, -4(%rbp)
.LBB29_163:                             # %for.cond499
                                        #   Parent Loop BB29_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB29_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB29_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_163
.LBB29_166:                             # %for.end519
                                        #   in Loop: Header=BB29_161 Depth=1
	jmp	.LBB29_167
.LBB29_167:                             # %for.inc520
                                        #   in Loop: Header=BB29_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_161
.LBB29_168:                             # %for.end522
	jmp	.LBB29_169
.LBB29_169:                             # %if.end523
	jmp	.LBB29_179
.LBB29_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB29_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB29_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB29_171 Depth=1
	movl	$0, -4(%rbp)
.LBB29_173:                             # %for.cond529
                                        #   Parent Loop BB29_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB29_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB29_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB29_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_173
.LBB29_176:                             # %for.end541
                                        #   in Loop: Header=BB29_171 Depth=1
	jmp	.LBB29_177
.LBB29_177:                             # %for.inc542
                                        #   in Loop: Header=BB29_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_171
.LBB29_178:                             # %for.end544
	jmp	.LBB29_179
.LBB29_179:                             # %if.end545
	jmp	.LBB29_180
.LBB29_180:                             # %sw.epilog
	cmpl	$2058762173, -68(%rbp)  # imm = 0x7AB637BD
	jne	.LBB29_182
.LBB29_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_181
.Lfunc_end29:
	.size	Conceal_Error.19, .Lfunc_end29-Conceal_Error.19
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI29_0:
	.quad	.LBB29_16
	.quad	.LBB29_158
	.quad	.LBB29_106
	.quad	.LBB29_180
	.quad	.LBB29_36
                                        # -- End function
	.text
	.globl	Get_Reference_Pixel.20  # -- Begin function Get_Reference_Pixel.20
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.20,@function
Get_Reference_Pixel.20:                 # @Get_Reference_Pixel.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$866397036, -104(%rbp)  # imm = 0x33A42B6C
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB30_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB30_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB30_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB30_5
.LBB30_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB30_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB30_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB30_11
.LBB30_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB30_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB30_10
.LBB30_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB30_10:                              # %cond.end14
.LBB30_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB30_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB30_14
.LBB30_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB30_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB30_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB30_20
.LBB30_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB30_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB30_19
.LBB30_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB30_19:                              # %cond.end29
.LBB30_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_332
.LBB30_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB30_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB30_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB30_25
.LBB30_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB30_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB30_31
.LBB30_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB30_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB30_30
.LBB30_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB30_30:                              # %cond.end52
.LBB30_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB30_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB30_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB30_36
.LBB30_35:                              # %cond.false61
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB30_36:                              # %cond.end63
                                        #   in Loop: Header=BB30_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB30_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB30_42
.LBB30_38:                              # %cond.false68
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB30_41
.LBB30_40:                              # %cond.false73
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB30_41:                              # %cond.end75
                                        #   in Loop: Header=BB30_32 Depth=1
.LBB30_42:                              # %cond.end77
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_32
.LBB30_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_47
.LBB30_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB30_53
.LBB30_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_52
.LBB30_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_52:                              # %cond.end113
.LBB30_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB30_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB30_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB30_57
.LBB30_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB30_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB30_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB30_63
.LBB30_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB30_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB30_62
.LBB30_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB30_62:                              # %cond.end136
.LBB30_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB30_76
.LBB30_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB30_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB30_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB30_68
.LBB30_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB30_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB30_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB30_74
.LBB30_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB30_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB30_73
.LBB30_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB30_73:                              # %cond.end169
.LBB30_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB30_75:                              # %if.end
	jmp	.LBB30_76
.LBB30_76:                              # %if.end178
	jmp	.LBB30_331
.LBB30_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB30_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB30_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB30_81
.LBB30_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB30_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB30_87
.LBB30_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB30_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB30_86
.LBB30_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB30_86:                              # %cond.end197
.LBB30_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB30_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB30_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB30_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB30_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB30_92
.LBB30_91:                              # %cond.false209
                                        #   in Loop: Header=BB30_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB30_92:                              # %cond.end211
                                        #   in Loop: Header=BB30_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB30_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB30_98
.LBB30_94:                              # %cond.false216
                                        #   in Loop: Header=BB30_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB30_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB30_97
.LBB30_96:                              # %cond.false221
                                        #   in Loop: Header=BB30_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB30_97:                              # %cond.end223
                                        #   in Loop: Header=BB30_88 Depth=1
.LBB30_98:                              # %cond.end225
                                        #   in Loop: Header=BB30_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB30_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_88
.LBB30_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_103
.LBB30_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB30_109
.LBB30_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_108
.LBB30_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_108:                             # %cond.end266
.LBB30_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB30_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB30_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB30_113
.LBB30_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB30_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB30_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB30_119
.LBB30_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB30_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB30_118
.LBB30_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB30_118:                             # %cond.end287
.LBB30_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB30_132
.LBB30_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB30_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB30_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB30_124
.LBB30_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB30_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB30_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB30_130
.LBB30_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB30_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB30_129
.LBB30_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB30_129:                             # %cond.end320
.LBB30_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB30_131:                             # %if.end331
	jmp	.LBB30_132
.LBB30_132:                             # %if.end332
	jmp	.LBB30_330
.LBB30_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB30_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB30_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB30_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB30_139
.LBB30_138:                             # %cond.false345
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB30_139:                             # %cond.end347
                                        #   in Loop: Header=BB30_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB30_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB30_145
.LBB30_141:                             # %cond.false352
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB30_144
.LBB30_143:                             # %cond.false357
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB30_144:                             # %cond.end359
                                        #   in Loop: Header=BB30_135 Depth=1
.LBB30_145:                             # %cond.end361
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB30_146:                             # %for.cond363
                                        #   Parent Loop BB30_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB30_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB30_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB30_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB30_150
.LBB30_149:                             # %cond.false371
                                        #   in Loop: Header=BB30_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB30_150:                             # %cond.end373
                                        #   in Loop: Header=BB30_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB30_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB30_156
.LBB30_152:                             # %cond.false378
                                        #   in Loop: Header=BB30_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB30_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB30_155
.LBB30_154:                             # %cond.false383
                                        #   in Loop: Header=BB30_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB30_155:                             # %cond.end385
                                        #   in Loop: Header=BB30_146 Depth=2
.LBB30_156:                             # %cond.end387
                                        #   in Loop: Header=BB30_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB30_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_146
.LBB30_158:                             # %for.end401
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_135
.LBB30_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB30_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB30_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB30_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB30_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_161
.LBB30_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_167
.LBB30_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB30_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB30_173
.LBB30_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_172
.LBB30_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB30_172:                             # %cond.end449
.LBB30_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB30_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB30_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_177
.LBB30_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB30_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB30_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB30_183
.LBB30_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB30_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_182
.LBB30_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB30_182:                             # %cond.end486
.LBB30_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB30_196
.LBB30_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB30_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB30_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_188
.LBB30_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB30_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB30_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB30_194
.LBB30_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB30_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_193
.LBB30_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB30_193:                             # %cond.end526
.LBB30_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB30_195:                             # %if.end532
	jmp	.LBB30_196
.LBB30_196:                             # %if.end533
	jmp	.LBB30_329
.LBB30_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB30_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB30_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB30_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB30_203
.LBB30_202:                             # %cond.false546
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB30_203:                             # %cond.end548
                                        #   in Loop: Header=BB30_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB30_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB30_209
.LBB30_205:                             # %cond.false553
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB30_208
.LBB30_207:                             # %cond.false558
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB30_208:                             # %cond.end560
                                        #   in Loop: Header=BB30_199 Depth=1
.LBB30_209:                             # %cond.end562
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB30_210:                             # %for.cond564
                                        #   Parent Loop BB30_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB30_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB30_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB30_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB30_214
.LBB30_213:                             # %cond.false572
                                        #   in Loop: Header=BB30_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB30_214:                             # %cond.end574
                                        #   in Loop: Header=BB30_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB30_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB30_220
.LBB30_216:                             # %cond.false579
                                        #   in Loop: Header=BB30_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB30_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB30_219
.LBB30_218:                             # %cond.false584
                                        #   in Loop: Header=BB30_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB30_219:                             # %cond.end586
                                        #   in Loop: Header=BB30_210 Depth=2
.LBB30_220:                             # %cond.end588
                                        #   in Loop: Header=BB30_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB30_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_210
.LBB30_222:                             # %for.end602
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_199
.LBB30_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB30_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB30_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB30_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB30_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_225
.LBB30_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_231
.LBB30_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB30_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB30_237
.LBB30_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_236
.LBB30_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB30_236:                             # %cond.end650
.LBB30_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB30_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB30_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_241
.LBB30_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB30_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB30_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB30_247
.LBB30_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB30_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_246
.LBB30_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB30_246:                             # %cond.end687
.LBB30_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB30_258
.LBB30_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB30_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_251
.LBB30_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB30_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB30_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB30_257
.LBB30_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB30_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_256
.LBB30_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB30_256:                             # %cond.end724
.LBB30_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB30_258:                             # %if.end730
	jmp	.LBB30_328
.LBB30_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB30_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB30_262
.LBB30_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB30_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB30_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB30_265
.LBB30_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB30_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB30_271
.LBB30_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB30_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB30_270
.LBB30_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB30_270:                             # %cond.end753
.LBB30_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB30_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB30_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB30_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB30_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB30_276
.LBB30_275:                             # %cond.false765
                                        #   in Loop: Header=BB30_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB30_276:                             # %cond.end767
                                        #   in Loop: Header=BB30_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB30_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB30_282
.LBB30_278:                             # %cond.false772
                                        #   in Loop: Header=BB30_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB30_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB30_281
.LBB30_280:                             # %cond.false777
                                        #   in Loop: Header=BB30_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB30_281:                             # %cond.end779
                                        #   in Loop: Header=BB30_272 Depth=1
.LBB30_282:                             # %cond.end781
                                        #   in Loop: Header=BB30_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB30_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_272
.LBB30_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_287
.LBB30_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB30_293
.LBB30_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_292
.LBB30_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_292:                             # %cond.end822
.LBB30_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB30_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB30_296
.LBB30_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB30_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB30_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB30_299
.LBB30_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB30_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB30_305
.LBB30_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB30_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB30_304
.LBB30_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB30_304:                             # %cond.end847
.LBB30_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB30_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB30_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB30_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB30_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB30_310
.LBB30_309:                             # %cond.false859
                                        #   in Loop: Header=BB30_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB30_310:                             # %cond.end861
                                        #   in Loop: Header=BB30_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB30_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB30_316
.LBB30_312:                             # %cond.false866
                                        #   in Loop: Header=BB30_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB30_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB30_315
.LBB30_314:                             # %cond.false871
                                        #   in Loop: Header=BB30_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB30_315:                             # %cond.end873
                                        #   in Loop: Header=BB30_306 Depth=1
.LBB30_316:                             # %cond.end875
                                        #   in Loop: Header=BB30_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB30_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_306
.LBB30_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_321
.LBB30_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB30_327
.LBB30_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_326
.LBB30_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_326:                             # %cond.end916
.LBB30_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB30_328:                             # %if.end922
	jmp	.LBB30_329
.LBB30_329:                             # %if.end923
	jmp	.LBB30_330
.LBB30_330:                             # %if.end924
	jmp	.LBB30_331
.LBB30_331:                             # %if.end925
	jmp	.LBB30_332
.LBB30_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$866397036, -104(%rbp)  # imm = 0x33A42B6C
	jne	.LBB30_334
.LBB30_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_333
.Lfunc_end30:
	.size	Get_Reference_Pixel.20, .Lfunc_end30-Get_Reference_Pixel.20
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.21  # -- Begin function Get_Reference_Pixel.21
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.21,@function
Get_Reference_Pixel.21:                 # @Get_Reference_Pixel.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$478227289, -108(%rbp)  # imm = 0x1C812B59
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB31_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB31_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB31_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB31_5
.LBB31_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB31_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB31_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB31_11
.LBB31_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB31_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB31_10
.LBB31_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB31_10:                              # %cond.end14
.LBB31_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB31_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB31_14
.LBB31_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB31_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB31_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB31_20
.LBB31_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB31_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB31_19
.LBB31_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB31_19:                              # %cond.end29
.LBB31_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_332
.LBB31_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB31_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB31_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB31_25
.LBB31_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB31_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB31_31
.LBB31_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB31_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB31_30
.LBB31_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB31_30:                              # %cond.end52
.LBB31_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB31_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB31_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_36
.LBB31_35:                              # %cond.false61
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_36:                              # %cond.end63
                                        #   in Loop: Header=BB31_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB31_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_42
.LBB31_38:                              # %cond.false68
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_41
.LBB31_40:                              # %cond.false73
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_41:                              # %cond.end75
                                        #   in Loop: Header=BB31_32 Depth=1
.LBB31_42:                              # %cond.end77
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_32
.LBB31_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_47
.LBB31_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB31_53
.LBB31_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_52
.LBB31_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_52:                              # %cond.end113
.LBB31_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB31_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB31_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB31_57
.LBB31_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB31_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB31_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB31_63
.LBB31_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB31_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB31_62
.LBB31_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB31_62:                              # %cond.end136
.LBB31_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB31_76
.LBB31_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB31_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB31_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB31_68
.LBB31_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB31_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB31_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB31_74
.LBB31_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB31_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB31_73
.LBB31_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB31_73:                              # %cond.end169
.LBB31_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_75:                              # %if.end
	jmp	.LBB31_76
.LBB31_76:                              # %if.end178
	jmp	.LBB31_331
.LBB31_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB31_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB31_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB31_81
.LBB31_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB31_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB31_87
.LBB31_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB31_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB31_86
.LBB31_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB31_86:                              # %cond.end197
.LBB31_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB31_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB31_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_92
.LBB31_91:                              # %cond.false209
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_92:                              # %cond.end211
                                        #   in Loop: Header=BB31_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB31_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_98
.LBB31_94:                              # %cond.false216
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_97
.LBB31_96:                              # %cond.false221
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_97:                              # %cond.end223
                                        #   in Loop: Header=BB31_88 Depth=1
.LBB31_98:                              # %cond.end225
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_88
.LBB31_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_103
.LBB31_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB31_109
.LBB31_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_108
.LBB31_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_108:                             # %cond.end266
.LBB31_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB31_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB31_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB31_113
.LBB31_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB31_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB31_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB31_119
.LBB31_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB31_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB31_118
.LBB31_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB31_118:                             # %cond.end287
.LBB31_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB31_132
.LBB31_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB31_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB31_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB31_124
.LBB31_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB31_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB31_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB31_130
.LBB31_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB31_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB31_129
.LBB31_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB31_129:                             # %cond.end320
.LBB31_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_131:                             # %if.end331
	jmp	.LBB31_132
.LBB31_132:                             # %if.end332
	jmp	.LBB31_330
.LBB31_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB31_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB31_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB31_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_139
.LBB31_138:                             # %cond.false345
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_139:                             # %cond.end347
                                        #   in Loop: Header=BB31_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB31_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_145
.LBB31_141:                             # %cond.false352
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_144
.LBB31_143:                             # %cond.false357
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_144:                             # %cond.end359
                                        #   in Loop: Header=BB31_135 Depth=1
.LBB31_145:                             # %cond.end361
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB31_146:                             # %for.cond363
                                        #   Parent Loop BB31_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB31_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB31_150
.LBB31_149:                             # %cond.false371
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_150:                             # %cond.end373
                                        #   in Loop: Header=BB31_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB31_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB31_156
.LBB31_152:                             # %cond.false378
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB31_155
.LBB31_154:                             # %cond.false383
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_155:                             # %cond.end385
                                        #   in Loop: Header=BB31_146 Depth=2
.LBB31_156:                             # %cond.end387
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_146
.LBB31_158:                             # %for.end401
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_135
.LBB31_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB31_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB31_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB31_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB31_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_161
.LBB31_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_167
.LBB31_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB31_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB31_173
.LBB31_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_172
.LBB31_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB31_172:                             # %cond.end449
.LBB31_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB31_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_177
.LBB31_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB31_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB31_183
.LBB31_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_182
.LBB31_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_182:                             # %cond.end486
.LBB31_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB31_196
.LBB31_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB31_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_188
.LBB31_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB31_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB31_194
.LBB31_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_193
.LBB31_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_193:                             # %cond.end526
.LBB31_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_195:                             # %if.end532
	jmp	.LBB31_196
.LBB31_196:                             # %if.end533
	jmp	.LBB31_329
.LBB31_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB31_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB31_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB31_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_203
.LBB31_202:                             # %cond.false546
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_203:                             # %cond.end548
                                        #   in Loop: Header=BB31_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB31_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_209
.LBB31_205:                             # %cond.false553
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_208
.LBB31_207:                             # %cond.false558
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_208:                             # %cond.end560
                                        #   in Loop: Header=BB31_199 Depth=1
.LBB31_209:                             # %cond.end562
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB31_210:                             # %for.cond564
                                        #   Parent Loop BB31_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB31_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB31_214
.LBB31_213:                             # %cond.false572
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_214:                             # %cond.end574
                                        #   in Loop: Header=BB31_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB31_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB31_220
.LBB31_216:                             # %cond.false579
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB31_219
.LBB31_218:                             # %cond.false584
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_219:                             # %cond.end586
                                        #   in Loop: Header=BB31_210 Depth=2
.LBB31_220:                             # %cond.end588
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_210
.LBB31_222:                             # %for.end602
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_199
.LBB31_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB31_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB31_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB31_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB31_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_225
.LBB31_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_231
.LBB31_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB31_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB31_237
.LBB31_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_236
.LBB31_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB31_236:                             # %cond.end650
.LBB31_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB31_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_241
.LBB31_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB31_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB31_247
.LBB31_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_246
.LBB31_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_246:                             # %cond.end687
.LBB31_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB31_258
.LBB31_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_251
.LBB31_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB31_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB31_257
.LBB31_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_256
.LBB31_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_256:                             # %cond.end724
.LBB31_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_258:                             # %if.end730
	jmp	.LBB31_328
.LBB31_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB31_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB31_262
.LBB31_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB31_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB31_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB31_265
.LBB31_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB31_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB31_271
.LBB31_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB31_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB31_270
.LBB31_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB31_270:                             # %cond.end753
.LBB31_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB31_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB31_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_276
.LBB31_275:                             # %cond.false765
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_276:                             # %cond.end767
                                        #   in Loop: Header=BB31_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB31_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_282
.LBB31_278:                             # %cond.false772
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_281
.LBB31_280:                             # %cond.false777
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_281:                             # %cond.end779
                                        #   in Loop: Header=BB31_272 Depth=1
.LBB31_282:                             # %cond.end781
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_272
.LBB31_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_287
.LBB31_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB31_293
.LBB31_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_292
.LBB31_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_292:                             # %cond.end822
.LBB31_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB31_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB31_296
.LBB31_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB31_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB31_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB31_299
.LBB31_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB31_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB31_305
.LBB31_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB31_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB31_304
.LBB31_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB31_304:                             # %cond.end847
.LBB31_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB31_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB31_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_310
.LBB31_309:                             # %cond.false859
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_310:                             # %cond.end861
                                        #   in Loop: Header=BB31_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB31_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_316
.LBB31_312:                             # %cond.false866
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_315
.LBB31_314:                             # %cond.false871
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_315:                             # %cond.end873
                                        #   in Loop: Header=BB31_306 Depth=1
.LBB31_316:                             # %cond.end875
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_306
.LBB31_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_321
.LBB31_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB31_327
.LBB31_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_326
.LBB31_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_326:                             # %cond.end916
.LBB31_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_328:                             # %if.end922
	jmp	.LBB31_329
.LBB31_329:                             # %if.end923
	jmp	.LBB31_330
.LBB31_330:                             # %if.end924
	jmp	.LBB31_331
.LBB31_331:                             # %if.end925
	jmp	.LBB31_332
.LBB31_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$478227289, -108(%rbp)  # imm = 0x1C812B59
	jne	.LBB31_334
.LBB31_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_333
.Lfunc_end31:
	.size	Get_Reference_Pixel.21, .Lfunc_end31-Get_Reference_Pixel.21
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.22
.LCPI32_0:
	.quad	4636737291354636288     # double 100
.LCPI32_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.22
	.p2align	4, 0x90
	.type	Build_Status_Map.22,@function
Build_Status_Map.22:                    # @Build_Status_Map.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1283932633, -40(%rbp)  # imm = 0x4C8741D9
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -8(%rbp)
.LBB32_3:                               # %for.cond2
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB32_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB32_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB32_13
.LBB32_6:                               # %if.then
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB32_8:                               # %if.end
                                        #   in Loop: Header=BB32_3 Depth=2
	callq	rand
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB32_10:                              # %if.end20
                                        #   in Loop: Header=BB32_3 Depth=2
	callq	rand
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	$1, -4(%rbp)
.LBB32_12:                              # %if.end29
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB32_13:                              # %if.end30
                                        #   in Loop: Header=BB32_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB32_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB32_18
.LBB32_15:                              # %if.else
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB32_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB32_17:                              # %if.end49
                                        #   in Loop: Header=BB32_3 Depth=2
	jmp	.LBB32_18
.LBB32_18:                              # %if.end50
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_3
.LBB32_20:                              # %for.end
                                        #   in Loop: Header=BB32_1 Depth=1
	jmp	.LBB32_21
.LBB32_21:                              # %for.inc53
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_1
.LBB32_22:                              # %for.end55
	cmpl	$1283932633, -40(%rbp)  # imm = 0x4C8741D9
	jne	.LBB32_24
.LBB32_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_23
.Lfunc_end32:
	.size	Build_Status_Map.22, .Lfunc_end32-Build_Status_Map.22
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb.23        # -- Begin function decode_one_mb.23
	.p2align	4, 0x90
	.type	decode_one_mb.23,@function
decode_one_mb.23:                       # @decode_one_mb.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$876491341, -4(%rbp)    # imm = 0x343E324D
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$876491341, -4(%rbp)    # imm = 0x343E324D
	jne	.LBB33_2
.LBB33_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_1
.Lfunc_end33:
	.size	decode_one_mb.23, .Lfunc_end33-decode_one_mb.23
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.24        # -- Begin function Conceal_Error.24
	.p2align	4, 0x90
	.type	Conceal_Error.24,@function
Conceal_Error.24:                       # @Conceal_Error.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$2103101803, -68(%rbp)  # imm = 0x7D5AC96B
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB34_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB34_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB34_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB34_4:                               # %land.end
.LBB34_5:                               # %lor.end
.LBB34_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB34_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB34_9
.LBB34_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB34_14
.LBB34_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB34_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB34_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB34_12:                              # %land.end51
.LBB34_13:                              # %lor.end53
.LBB34_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB34_180
# %bb.15:                               # %land.end54
	movq	.LJTI34_0(,%rax,8), %rax
	jmpq	*%rax
.LBB34_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB34_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB34_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB34_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB34_18 Depth=1
	movl	$0, -4(%rbp)
.LBB34_20:                              # %for.cond68
                                        #   Parent Loop BB34_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB34_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB34_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB34_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_20
.LBB34_23:                              # %for.end
                                        #   in Loop: Header=BB34_18 Depth=1
	jmp	.LBB34_24
.LBB34_24:                              # %for.inc85
                                        #   in Loop: Header=BB34_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_18
.LBB34_25:                              # %for.end87
	jmp	.LBB34_35
.LBB34_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB34_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB34_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB34_27 Depth=1
	movl	$0, -4(%rbp)
.LBB34_29:                              # %for.cond92
                                        #   Parent Loop BB34_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB34_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB34_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB34_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_29
.LBB34_32:                              # %for.end104
                                        #   in Loop: Header=BB34_27 Depth=1
	jmp	.LBB34_33
.LBB34_33:                              # %for.inc105
                                        #   in Loop: Header=BB34_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_27
.LBB34_34:                              # %for.end107
	jmp	.LBB34_35
.LBB34_35:                              # %if.end
	jmp	.LBB34_180
.LBB34_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB34_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_39 Depth 2
                                        #       Child Loop BB34_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB34_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB34_37 Depth=1
	movl	$0, -16(%rbp)
.LBB34_39:                              # %for.cond113
                                        #   Parent Loop BB34_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB34_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB34_39 Depth=2
	movl	$0, -4(%rbp)
.LBB34_41:                              # %for.cond117
                                        #   Parent Loop BB34_37 Depth=1
                                        #     Parent Loop BB34_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB34_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB34_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB34_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_41
.LBB34_44:                              # %for.end141
                                        #   in Loop: Header=BB34_39 Depth=2
	jmp	.LBB34_45
.LBB34_45:                              # %for.inc142
                                        #   in Loop: Header=BB34_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_39
.LBB34_46:                              # %for.end144
                                        #   in Loop: Header=BB34_37 Depth=1
	jmp	.LBB34_47
.LBB34_47:                              # %for.inc145
                                        #   in Loop: Header=BB34_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_37
.LBB34_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB34_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB34_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB34_49 Depth=1
	movl	$0, -8(%rbp)
.LBB34_51:                              # %for.cond152
                                        #   Parent Loop BB34_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB34_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB34_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB34_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_51
.LBB34_54:                              # %for.end162
                                        #   in Loop: Header=BB34_49 Depth=1
	jmp	.LBB34_55
.LBB34_55:                              # %for.inc163
                                        #   in Loop: Header=BB34_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_49
.LBB34_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB34_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB34_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB34_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB34_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB34_59 Depth=1
	movl	$0, -4(%rbp)
.LBB34_61:                              # %for.cond175
                                        #   Parent Loop BB34_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB34_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB34_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB34_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_61
.LBB34_64:                              # %for.end195
                                        #   in Loop: Header=BB34_59 Depth=1
	jmp	.LBB34_65
.LBB34_65:                              # %for.inc196
                                        #   in Loop: Header=BB34_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_59
.LBB34_66:                              # %for.end198
	jmp	.LBB34_95
.LBB34_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB34_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB34_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_71 Depth 2
                                        #       Child Loop BB34_73 Depth 3
                                        #         Child Loop BB34_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB34_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB34_71:                              # %for.cond210
                                        #   Parent Loop BB34_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_73 Depth 3
                                        #         Child Loop BB34_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB34_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB34_73:                              # %for.cond236
                                        #   Parent Loop BB34_69 Depth=1
                                        #     Parent Loop BB34_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB34_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB34_73 Depth=3
	movl	$0, -4(%rbp)
.LBB34_75:                              # %for.cond240
                                        #   Parent Loop BB34_69 Depth=1
                                        #     Parent Loop BB34_71 Depth=2
                                        #       Parent Loop BB34_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB34_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB34_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB34_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_75
.LBB34_78:                              # %for.end259
                                        #   in Loop: Header=BB34_73 Depth=3
	jmp	.LBB34_79
.LBB34_79:                              # %for.inc260
                                        #   in Loop: Header=BB34_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_73
.LBB34_80:                              # %for.end262
                                        #   in Loop: Header=BB34_71 Depth=2
	jmp	.LBB34_81
.LBB34_81:                              # %for.inc263
                                        #   in Loop: Header=BB34_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_71
.LBB34_82:                              # %for.end265
                                        #   in Loop: Header=BB34_69 Depth=1
	jmp	.LBB34_83
.LBB34_83:                              # %for.inc266
                                        #   in Loop: Header=BB34_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_69
.LBB34_84:                              # %for.end268
	jmp	.LBB34_94
.LBB34_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB34_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB34_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB34_86 Depth=1
	movl	$0, -4(%rbp)
.LBB34_88:                              # %for.cond274
                                        #   Parent Loop BB34_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB34_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB34_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB34_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_88
.LBB34_91:                              # %for.end294
                                        #   in Loop: Header=BB34_86 Depth=1
	jmp	.LBB34_92
.LBB34_92:                              # %for.inc295
                                        #   in Loop: Header=BB34_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_86
.LBB34_93:                              # %for.end297
	jmp	.LBB34_94
.LBB34_94:                              # %if.end298
	jmp	.LBB34_95
.LBB34_95:                              # %if.end299
	jmp	.LBB34_105
.LBB34_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB34_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB34_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB34_97 Depth=1
	movl	$0, -4(%rbp)
.LBB34_99:                              # %for.cond305
                                        #   Parent Loop BB34_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB34_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB34_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB34_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_99
.LBB34_102:                             # %for.end317
                                        #   in Loop: Header=BB34_97 Depth=1
	jmp	.LBB34_103
.LBB34_103:                             # %for.inc318
                                        #   in Loop: Header=BB34_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_97
.LBB34_104:                             # %for.end320
	jmp	.LBB34_105
.LBB34_105:                             # %if.end321
	jmp	.LBB34_180
.LBB34_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB34_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB34_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_110 Depth 2
                                        #       Child Loop BB34_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB34_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB34_108 Depth=1
	movl	$0, -16(%rbp)
.LBB34_110:                             # %for.cond331
                                        #   Parent Loop BB34_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB34_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB34_110 Depth=2
	movl	$0, -4(%rbp)
.LBB34_112:                             # %for.cond335
                                        #   Parent Loop BB34_108 Depth=1
                                        #     Parent Loop BB34_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB34_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB34_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB34_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_112
.LBB34_115:                             # %for.end359
                                        #   in Loop: Header=BB34_110 Depth=2
	jmp	.LBB34_116
.LBB34_116:                             # %for.inc360
                                        #   in Loop: Header=BB34_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_110
.LBB34_117:                             # %for.end362
                                        #   in Loop: Header=BB34_108 Depth=1
	jmp	.LBB34_118
.LBB34_118:                             # %for.inc363
                                        #   in Loop: Header=BB34_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_108
.LBB34_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB34_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB34_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB34_120 Depth=1
	movl	$0, -8(%rbp)
.LBB34_122:                             # %for.cond370
                                        #   Parent Loop BB34_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB34_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB34_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB34_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_122
.LBB34_125:                             # %for.end380
                                        #   in Loop: Header=BB34_120 Depth=1
	jmp	.LBB34_126
.LBB34_126:                             # %for.inc381
                                        #   in Loop: Header=BB34_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_120
.LBB34_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB34_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB34_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB34_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB34_129 Depth=1
	movl	$0, -4(%rbp)
.LBB34_131:                             # %for.cond390
                                        #   Parent Loop BB34_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB34_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB34_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB34_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_131
.LBB34_134:                             # %for.end410
                                        #   in Loop: Header=BB34_129 Depth=1
	jmp	.LBB34_135
.LBB34_135:                             # %for.inc411
                                        #   in Loop: Header=BB34_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_129
.LBB34_136:                             # %for.end413
	jmp	.LBB34_156
.LBB34_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB34_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB34_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_141 Depth 2
                                        #       Child Loop BB34_143 Depth 3
                                        #         Child Loop BB34_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB34_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB34_141:                             # %for.cond425
                                        #   Parent Loop BB34_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_143 Depth 3
                                        #         Child Loop BB34_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB34_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB34_143:                             # %for.cond452
                                        #   Parent Loop BB34_139 Depth=1
                                        #     Parent Loop BB34_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB34_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB34_143 Depth=3
	movl	$0, -4(%rbp)
.LBB34_145:                             # %for.cond456
                                        #   Parent Loop BB34_139 Depth=1
                                        #     Parent Loop BB34_141 Depth=2
                                        #       Parent Loop BB34_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB34_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB34_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB34_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_145
.LBB34_148:                             # %for.end475
                                        #   in Loop: Header=BB34_143 Depth=3
	jmp	.LBB34_149
.LBB34_149:                             # %for.inc476
                                        #   in Loop: Header=BB34_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_143
.LBB34_150:                             # %for.end478
                                        #   in Loop: Header=BB34_141 Depth=2
	jmp	.LBB34_151
.LBB34_151:                             # %for.inc479
                                        #   in Loop: Header=BB34_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_141
.LBB34_152:                             # %for.end481
                                        #   in Loop: Header=BB34_139 Depth=1
	jmp	.LBB34_153
.LBB34_153:                             # %for.inc482
                                        #   in Loop: Header=BB34_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_139
.LBB34_154:                             # %for.end484
	jmp	.LBB34_155
.LBB34_155:                             # %if.end485
	jmp	.LBB34_156
.LBB34_156:                             # %if.end486
	jmp	.LBB34_157
.LBB34_157:                             # %if.end487
	jmp	.LBB34_180
.LBB34_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB34_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB34_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB34_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB34_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB34_161 Depth=1
	movl	$0, -4(%rbp)
.LBB34_163:                             # %for.cond499
                                        #   Parent Loop BB34_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB34_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB34_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB34_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_163
.LBB34_166:                             # %for.end519
                                        #   in Loop: Header=BB34_161 Depth=1
	jmp	.LBB34_167
.LBB34_167:                             # %for.inc520
                                        #   in Loop: Header=BB34_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_161
.LBB34_168:                             # %for.end522
	jmp	.LBB34_169
.LBB34_169:                             # %if.end523
	jmp	.LBB34_179
.LBB34_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB34_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB34_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB34_171 Depth=1
	movl	$0, -4(%rbp)
.LBB34_173:                             # %for.cond529
                                        #   Parent Loop BB34_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB34_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB34_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB34_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_173
.LBB34_176:                             # %for.end541
                                        #   in Loop: Header=BB34_171 Depth=1
	jmp	.LBB34_177
.LBB34_177:                             # %for.inc542
                                        #   in Loop: Header=BB34_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_171
.LBB34_178:                             # %for.end544
	jmp	.LBB34_179
.LBB34_179:                             # %if.end545
	jmp	.LBB34_180
.LBB34_180:                             # %sw.epilog
	cmpl	$2103101803, -68(%rbp)  # imm = 0x7D5AC96B
	jne	.LBB34_182
.LBB34_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_181
.Lfunc_end34:
	.size	Conceal_Error.24, .Lfunc_end34-Conceal_Error.24
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI34_0:
	.quad	.LBB34_16
	.quad	.LBB34_158
	.quad	.LBB34_106
	.quad	.LBB34_180
	.quad	.LBB34_36
                                        # -- End function
	.text
	.globl	Get_Reference_Block.25  # -- Begin function Get_Reference_Block.25
	.p2align	4, 0x90
	.type	Get_Reference_Block.25,@function
Get_Reference_Block.25:                 # @Get_Reference_Block.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$602602067, -12(%rbp)   # imm = 0x23EAFA53
	movq	%rdi, -56(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -48(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB35_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -4(%rbp)
.LBB35_3:                               # %for.cond5
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB35_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_3
.LBB35_6:                               # %for.end
                                        #   in Loop: Header=BB35_1 Depth=1
	jmp	.LBB35_7
.LBB35_7:                               # %for.inc14
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_1
.LBB35_8:                               # %for.end16
	cmpl	$602602067, -12(%rbp)   # imm = 0x23EAFA53
	jne	.LBB35_10
.LBB35_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_9
.Lfunc_end35:
	.size	Get_Reference_Block.25, .Lfunc_end35-Get_Reference_Block.25
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.26   # -- Begin function decode_one_b8block.26
	.p2align	4, 0x90
	.type	decode_one_b8block.26,@function
decode_one_b8block.26:                  # @decode_one_b8block.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$960332307, -84(%rbp)   # imm = 0x393D8213
	movl	%edi, -40(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB36_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB36_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB36_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB36_4:                               # %for.cond9
                                        #   Parent Loop BB36_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB36_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB36_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB36_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_4
.LBB36_7:                               # %for.end
                                        #   in Loop: Header=BB36_2 Depth=1
	jmp	.LBB36_8
.LBB36_8:                               # %for.inc26
                                        #   in Loop: Header=BB36_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_2
.LBB36_9:                               # %for.end28
	jmp	.LBB36_96
.LBB36_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB36_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB36_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB36_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB36_31
.LBB36_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB36_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB36_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB36_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB36_17:                              # %for.cond40
                                        #   Parent Loop BB36_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB36_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB36_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB36_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_17
.LBB36_20:                              # %for.end49
                                        #   in Loop: Header=BB36_15 Depth=1
	jmp	.LBB36_21
.LBB36_21:                              # %for.inc50
                                        #   in Loop: Header=BB36_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_15
.LBB36_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB36_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB36_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB36_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB36_25:                              # %for.cond56
                                        #   Parent Loop BB36_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB36_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB36_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB36_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_25
.LBB36_28:                              # %for.end71
                                        #   in Loop: Header=BB36_23 Depth=1
	jmp	.LBB36_29
.LBB36_29:                              # %for.inc72
                                        #   in Loop: Header=BB36_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_23
.LBB36_30:                              # %for.end74
	jmp	.LBB36_60
.LBB36_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB36_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB36_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB36_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB36_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB36_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB36_36:                              # %for.cond83
                                        #   Parent Loop BB36_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB36_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB36_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB36_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_36
.LBB36_39:                              # %for.end120
                                        #   in Loop: Header=BB36_34 Depth=1
	jmp	.LBB36_40
.LBB36_40:                              # %for.inc121
                                        #   in Loop: Header=BB36_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_34
.LBB36_41:                              # %for.end123
	jmp	.LBB36_51
.LBB36_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB36_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB36_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB36_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB36_45:                              # %for.cond129
                                        #   Parent Loop BB36_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB36_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB36_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB36_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_45
.LBB36_48:                              # %for.end145
                                        #   in Loop: Header=BB36_43 Depth=1
	jmp	.LBB36_49
.LBB36_49:                              # %for.inc146
                                        #   in Loop: Header=BB36_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_43
.LBB36_50:                              # %for.end148
	jmp	.LBB36_51
.LBB36_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB36_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB36_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB36_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB36_54:                              # %for.cond153
                                        #   Parent Loop BB36_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB36_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB36_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB36_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_54
.LBB36_57:                              # %for.end167
                                        #   in Loop: Header=BB36_52 Depth=1
	jmp	.LBB36_58
.LBB36_58:                              # %for.inc168
                                        #   in Loop: Header=BB36_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_52
.LBB36_59:                              # %for.end170
	jmp	.LBB36_60
.LBB36_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB36_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB36_66
.LBB36_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB36_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB36_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB36_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB36_86
.LBB36_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB36_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_69 Depth 2
                                        #       Child Loop BB36_74 Depth 3
                                        #         Child Loop BB36_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB36_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB36_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB36_69:                              # %for.cond197
                                        #   Parent Loop BB36_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_74 Depth 3
                                        #         Child Loop BB36_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB36_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB36_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB36_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB36_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB36_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB36_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB36_73:                              # %if.end218
                                        #   in Loop: Header=BB36_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB36_74:                              # %for.cond233
                                        #   Parent Loop BB36_67 Depth=1
                                        #     Parent Loop BB36_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB36_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB36_74 Depth=3
	movl	$0, -8(%rbp)
.LBB36_76:                              # %for.cond237
                                        #   Parent Loop BB36_67 Depth=1
                                        #     Parent Loop BB36_69 Depth=2
                                        #       Parent Loop BB36_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB36_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB36_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB36_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_76
.LBB36_79:                              # %for.end269
                                        #   in Loop: Header=BB36_74 Depth=3
	jmp	.LBB36_80
.LBB36_80:                              # %for.inc270
                                        #   in Loop: Header=BB36_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_74
.LBB36_81:                              # %for.end272
                                        #   in Loop: Header=BB36_69 Depth=2
	jmp	.LBB36_82
.LBB36_82:                              # %for.inc273
                                        #   in Loop: Header=BB36_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_69
.LBB36_83:                              # %for.end275
                                        #   in Loop: Header=BB36_67 Depth=1
	jmp	.LBB36_84
.LBB36_84:                              # %for.inc276
                                        #   in Loop: Header=BB36_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_67
.LBB36_85:                              # %for.end278
	jmp	.LBB36_95
.LBB36_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB36_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB36_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB36_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB36_89:                              # %for.cond284
                                        #   Parent Loop BB36_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB36_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB36_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB36_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_89
.LBB36_92:                              # %for.end310
                                        #   in Loop: Header=BB36_87 Depth=1
	jmp	.LBB36_93
.LBB36_93:                              # %for.inc311
                                        #   in Loop: Header=BB36_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_87
.LBB36_94:                              # %for.end313
	jmp	.LBB36_95
.LBB36_95:                              # %if.end314
	jmp	.LBB36_96
.LBB36_96:                              # %if.end315
	cmpl	$960332307, -84(%rbp)   # imm = 0x393D8213
	jne	.LBB36_98
.LBB36_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_97
.Lfunc_end36:
	.size	decode_one_b8block.26, .Lfunc_end36-decode_one_b8block.26
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.27        # -- Begin function Conceal_Error.27
	.p2align	4, 0x90
	.type	Conceal_Error.27,@function
Conceal_Error.27:                       # @Conceal_Error.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$10785319, -68(%rbp)    # imm = 0xA49227
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB37_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB37_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB37_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB37_4:                               # %land.end
.LBB37_5:                               # %lor.end
.LBB37_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB37_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB37_9
.LBB37_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB37_14
.LBB37_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB37_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB37_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB37_12:                              # %land.end51
.LBB37_13:                              # %lor.end53
.LBB37_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB37_180
# %bb.15:                               # %land.end54
	movq	.LJTI37_0(,%rax,8), %rax
	jmpq	*%rax
.LBB37_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB37_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB37_18 Depth=1
	movl	$0, -4(%rbp)
.LBB37_20:                              # %for.cond68
                                        #   Parent Loop BB37_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB37_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB37_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_20
.LBB37_23:                              # %for.end
                                        #   in Loop: Header=BB37_18 Depth=1
	jmp	.LBB37_24
.LBB37_24:                              # %for.inc85
                                        #   in Loop: Header=BB37_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_18
.LBB37_25:                              # %for.end87
	jmp	.LBB37_35
.LBB37_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB37_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB37_27 Depth=1
	movl	$0, -4(%rbp)
.LBB37_29:                              # %for.cond92
                                        #   Parent Loop BB37_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB37_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB37_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_29
.LBB37_32:                              # %for.end104
                                        #   in Loop: Header=BB37_27 Depth=1
	jmp	.LBB37_33
.LBB37_33:                              # %for.inc105
                                        #   in Loop: Header=BB37_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_27
.LBB37_34:                              # %for.end107
	jmp	.LBB37_35
.LBB37_35:                              # %if.end
	jmp	.LBB37_180
.LBB37_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB37_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_39 Depth 2
                                        #       Child Loop BB37_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB37_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB37_37 Depth=1
	movl	$0, -12(%rbp)
.LBB37_39:                              # %for.cond113
                                        #   Parent Loop BB37_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB37_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB37_39 Depth=2
	movl	$0, -4(%rbp)
.LBB37_41:                              # %for.cond117
                                        #   Parent Loop BB37_37 Depth=1
                                        #     Parent Loop BB37_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB37_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB37_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB37_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_41
.LBB37_44:                              # %for.end141
                                        #   in Loop: Header=BB37_39 Depth=2
	jmp	.LBB37_45
.LBB37_45:                              # %for.inc142
                                        #   in Loop: Header=BB37_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_39
.LBB37_46:                              # %for.end144
                                        #   in Loop: Header=BB37_37 Depth=1
	jmp	.LBB37_47
.LBB37_47:                              # %for.inc145
                                        #   in Loop: Header=BB37_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_37
.LBB37_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB37_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB37_49 Depth=1
	movl	$0, -8(%rbp)
.LBB37_51:                              # %for.cond152
                                        #   Parent Loop BB37_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB37_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB37_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_51
.LBB37_54:                              # %for.end162
                                        #   in Loop: Header=BB37_49 Depth=1
	jmp	.LBB37_55
.LBB37_55:                              # %for.inc163
                                        #   in Loop: Header=BB37_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_49
.LBB37_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB37_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB37_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB37_59 Depth=1
	movl	$0, -4(%rbp)
.LBB37_61:                              # %for.cond175
                                        #   Parent Loop BB37_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB37_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB37_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_61
.LBB37_64:                              # %for.end195
                                        #   in Loop: Header=BB37_59 Depth=1
	jmp	.LBB37_65
.LBB37_65:                              # %for.inc196
                                        #   in Loop: Header=BB37_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_59
.LBB37_66:                              # %for.end198
	jmp	.LBB37_95
.LBB37_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB37_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB37_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_71 Depth 2
                                        #       Child Loop BB37_73 Depth 3
                                        #         Child Loop BB37_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB37_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB37_71:                              # %for.cond210
                                        #   Parent Loop BB37_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_73 Depth 3
                                        #         Child Loop BB37_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB37_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB37_73:                              # %for.cond236
                                        #   Parent Loop BB37_69 Depth=1
                                        #     Parent Loop BB37_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB37_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB37_73 Depth=3
	movl	$0, -4(%rbp)
.LBB37_75:                              # %for.cond240
                                        #   Parent Loop BB37_69 Depth=1
                                        #     Parent Loop BB37_71 Depth=2
                                        #       Parent Loop BB37_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB37_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB37_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB37_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_75
.LBB37_78:                              # %for.end259
                                        #   in Loop: Header=BB37_73 Depth=3
	jmp	.LBB37_79
.LBB37_79:                              # %for.inc260
                                        #   in Loop: Header=BB37_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_73
.LBB37_80:                              # %for.end262
                                        #   in Loop: Header=BB37_71 Depth=2
	jmp	.LBB37_81
.LBB37_81:                              # %for.inc263
                                        #   in Loop: Header=BB37_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_71
.LBB37_82:                              # %for.end265
                                        #   in Loop: Header=BB37_69 Depth=1
	jmp	.LBB37_83
.LBB37_83:                              # %for.inc266
                                        #   in Loop: Header=BB37_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_69
.LBB37_84:                              # %for.end268
	jmp	.LBB37_94
.LBB37_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB37_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB37_86 Depth=1
	movl	$0, -4(%rbp)
.LBB37_88:                              # %for.cond274
                                        #   Parent Loop BB37_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB37_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB37_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_88
.LBB37_91:                              # %for.end294
                                        #   in Loop: Header=BB37_86 Depth=1
	jmp	.LBB37_92
.LBB37_92:                              # %for.inc295
                                        #   in Loop: Header=BB37_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_86
.LBB37_93:                              # %for.end297
	jmp	.LBB37_94
.LBB37_94:                              # %if.end298
	jmp	.LBB37_95
.LBB37_95:                              # %if.end299
	jmp	.LBB37_105
.LBB37_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB37_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB37_97 Depth=1
	movl	$0, -4(%rbp)
.LBB37_99:                              # %for.cond305
                                        #   Parent Loop BB37_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB37_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB37_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_99
.LBB37_102:                             # %for.end317
                                        #   in Loop: Header=BB37_97 Depth=1
	jmp	.LBB37_103
.LBB37_103:                             # %for.inc318
                                        #   in Loop: Header=BB37_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_97
.LBB37_104:                             # %for.end320
	jmp	.LBB37_105
.LBB37_105:                             # %if.end321
	jmp	.LBB37_180
.LBB37_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB37_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_110 Depth 2
                                        #       Child Loop BB37_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB37_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB37_108 Depth=1
	movl	$0, -12(%rbp)
.LBB37_110:                             # %for.cond331
                                        #   Parent Loop BB37_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB37_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB37_110 Depth=2
	movl	$0, -4(%rbp)
.LBB37_112:                             # %for.cond335
                                        #   Parent Loop BB37_108 Depth=1
                                        #     Parent Loop BB37_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB37_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB37_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB37_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_112
.LBB37_115:                             # %for.end359
                                        #   in Loop: Header=BB37_110 Depth=2
	jmp	.LBB37_116
.LBB37_116:                             # %for.inc360
                                        #   in Loop: Header=BB37_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_110
.LBB37_117:                             # %for.end362
                                        #   in Loop: Header=BB37_108 Depth=1
	jmp	.LBB37_118
.LBB37_118:                             # %for.inc363
                                        #   in Loop: Header=BB37_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_108
.LBB37_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB37_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB37_120 Depth=1
	movl	$0, -8(%rbp)
.LBB37_122:                             # %for.cond370
                                        #   Parent Loop BB37_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB37_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB37_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_122
.LBB37_125:                             # %for.end380
                                        #   in Loop: Header=BB37_120 Depth=1
	jmp	.LBB37_126
.LBB37_126:                             # %for.inc381
                                        #   in Loop: Header=BB37_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_120
.LBB37_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB37_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB37_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB37_129 Depth=1
	movl	$0, -4(%rbp)
.LBB37_131:                             # %for.cond390
                                        #   Parent Loop BB37_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB37_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB37_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_131
.LBB37_134:                             # %for.end410
                                        #   in Loop: Header=BB37_129 Depth=1
	jmp	.LBB37_135
.LBB37_135:                             # %for.inc411
                                        #   in Loop: Header=BB37_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_129
.LBB37_136:                             # %for.end413
	jmp	.LBB37_156
.LBB37_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB37_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB37_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_141 Depth 2
                                        #       Child Loop BB37_143 Depth 3
                                        #         Child Loop BB37_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB37_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB37_141:                             # %for.cond425
                                        #   Parent Loop BB37_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_143 Depth 3
                                        #         Child Loop BB37_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB37_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB37_143:                             # %for.cond452
                                        #   Parent Loop BB37_139 Depth=1
                                        #     Parent Loop BB37_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB37_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB37_143 Depth=3
	movl	$0, -4(%rbp)
.LBB37_145:                             # %for.cond456
                                        #   Parent Loop BB37_139 Depth=1
                                        #     Parent Loop BB37_141 Depth=2
                                        #       Parent Loop BB37_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB37_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB37_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB37_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_145
.LBB37_148:                             # %for.end475
                                        #   in Loop: Header=BB37_143 Depth=3
	jmp	.LBB37_149
.LBB37_149:                             # %for.inc476
                                        #   in Loop: Header=BB37_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_143
.LBB37_150:                             # %for.end478
                                        #   in Loop: Header=BB37_141 Depth=2
	jmp	.LBB37_151
.LBB37_151:                             # %for.inc479
                                        #   in Loop: Header=BB37_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_141
.LBB37_152:                             # %for.end481
                                        #   in Loop: Header=BB37_139 Depth=1
	jmp	.LBB37_153
.LBB37_153:                             # %for.inc482
                                        #   in Loop: Header=BB37_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_139
.LBB37_154:                             # %for.end484
	jmp	.LBB37_155
.LBB37_155:                             # %if.end485
	jmp	.LBB37_156
.LBB37_156:                             # %if.end486
	jmp	.LBB37_157
.LBB37_157:                             # %if.end487
	jmp	.LBB37_180
.LBB37_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB37_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB37_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB37_161 Depth=1
	movl	$0, -4(%rbp)
.LBB37_163:                             # %for.cond499
                                        #   Parent Loop BB37_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB37_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB37_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_163
.LBB37_166:                             # %for.end519
                                        #   in Loop: Header=BB37_161 Depth=1
	jmp	.LBB37_167
.LBB37_167:                             # %for.inc520
                                        #   in Loop: Header=BB37_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_161
.LBB37_168:                             # %for.end522
	jmp	.LBB37_169
.LBB37_169:                             # %if.end523
	jmp	.LBB37_179
.LBB37_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB37_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB37_171 Depth=1
	movl	$0, -4(%rbp)
.LBB37_173:                             # %for.cond529
                                        #   Parent Loop BB37_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB37_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB37_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_173
.LBB37_176:                             # %for.end541
                                        #   in Loop: Header=BB37_171 Depth=1
	jmp	.LBB37_177
.LBB37_177:                             # %for.inc542
                                        #   in Loop: Header=BB37_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_171
.LBB37_178:                             # %for.end544
	jmp	.LBB37_179
.LBB37_179:                             # %if.end545
	jmp	.LBB37_180
.LBB37_180:                             # %sw.epilog
	cmpl	$10785319, -68(%rbp)    # imm = 0xA49227
	jne	.LBB37_182
.LBB37_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_181
.Lfunc_end37:
	.size	Conceal_Error.27, .Lfunc_end37-Conceal_Error.27
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI37_0:
	.quad	.LBB37_16
	.quad	.LBB37_158
	.quad	.LBB37_106
	.quad	.LBB37_180
	.quad	.LBB37_36
                                        # -- End function
	.text
	.globl	Conceal_Error.28        # -- Begin function Conceal_Error.28
	.p2align	4, 0x90
	.type	Conceal_Error.28,@function
Conceal_Error.28:                       # @Conceal_Error.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1159638723, -68(%rbp)  # imm = 0x451EAEC3
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB38_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB38_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB38_4:                               # %land.end
.LBB38_5:                               # %lor.end
.LBB38_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB38_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB38_9
.LBB38_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB38_14
.LBB38_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB38_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB38_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB38_12:                              # %land.end51
.LBB38_13:                              # %lor.end53
.LBB38_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB38_180
# %bb.15:                               # %land.end54
	movq	.LJTI38_0(,%rax,8), %rax
	jmpq	*%rax
.LBB38_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB38_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB38_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB38_18 Depth=1
	movl	$0, -4(%rbp)
.LBB38_20:                              # %for.cond68
                                        #   Parent Loop BB38_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB38_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB38_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_20
.LBB38_23:                              # %for.end
                                        #   in Loop: Header=BB38_18 Depth=1
	jmp	.LBB38_24
.LBB38_24:                              # %for.inc85
                                        #   in Loop: Header=BB38_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_18
.LBB38_25:                              # %for.end87
	jmp	.LBB38_35
.LBB38_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB38_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB38_27 Depth=1
	movl	$0, -4(%rbp)
.LBB38_29:                              # %for.cond92
                                        #   Parent Loop BB38_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB38_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB38_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_29
.LBB38_32:                              # %for.end104
                                        #   in Loop: Header=BB38_27 Depth=1
	jmp	.LBB38_33
.LBB38_33:                              # %for.inc105
                                        #   in Loop: Header=BB38_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_27
.LBB38_34:                              # %for.end107
	jmp	.LBB38_35
.LBB38_35:                              # %if.end
	jmp	.LBB38_180
.LBB38_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB38_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_39 Depth 2
                                        #       Child Loop BB38_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB38_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB38_37 Depth=1
	movl	$0, -12(%rbp)
.LBB38_39:                              # %for.cond113
                                        #   Parent Loop BB38_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB38_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB38_39 Depth=2
	movl	$0, -4(%rbp)
.LBB38_41:                              # %for.cond117
                                        #   Parent Loop BB38_37 Depth=1
                                        #     Parent Loop BB38_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB38_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB38_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB38_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_41
.LBB38_44:                              # %for.end141
                                        #   in Loop: Header=BB38_39 Depth=2
	jmp	.LBB38_45
.LBB38_45:                              # %for.inc142
                                        #   in Loop: Header=BB38_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_39
.LBB38_46:                              # %for.end144
                                        #   in Loop: Header=BB38_37 Depth=1
	jmp	.LBB38_47
.LBB38_47:                              # %for.inc145
                                        #   in Loop: Header=BB38_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_37
.LBB38_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB38_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB38_49 Depth=1
	movl	$0, -8(%rbp)
.LBB38_51:                              # %for.cond152
                                        #   Parent Loop BB38_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB38_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB38_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_51
.LBB38_54:                              # %for.end162
                                        #   in Loop: Header=BB38_49 Depth=1
	jmp	.LBB38_55
.LBB38_55:                              # %for.inc163
                                        #   in Loop: Header=BB38_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_49
.LBB38_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB38_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB38_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB38_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB38_59 Depth=1
	movl	$0, -4(%rbp)
.LBB38_61:                              # %for.cond175
                                        #   Parent Loop BB38_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB38_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB38_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_61
.LBB38_64:                              # %for.end195
                                        #   in Loop: Header=BB38_59 Depth=1
	jmp	.LBB38_65
.LBB38_65:                              # %for.inc196
                                        #   in Loop: Header=BB38_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_59
.LBB38_66:                              # %for.end198
	jmp	.LBB38_95
.LBB38_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB38_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB38_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_71 Depth 2
                                        #       Child Loop BB38_73 Depth 3
                                        #         Child Loop BB38_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB38_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB38_71:                              # %for.cond210
                                        #   Parent Loop BB38_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_73 Depth 3
                                        #         Child Loop BB38_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB38_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB38_73:                              # %for.cond236
                                        #   Parent Loop BB38_69 Depth=1
                                        #     Parent Loop BB38_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB38_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB38_73 Depth=3
	movl	$0, -4(%rbp)
.LBB38_75:                              # %for.cond240
                                        #   Parent Loop BB38_69 Depth=1
                                        #     Parent Loop BB38_71 Depth=2
                                        #       Parent Loop BB38_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB38_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB38_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB38_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_75
.LBB38_78:                              # %for.end259
                                        #   in Loop: Header=BB38_73 Depth=3
	jmp	.LBB38_79
.LBB38_79:                              # %for.inc260
                                        #   in Loop: Header=BB38_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_73
.LBB38_80:                              # %for.end262
                                        #   in Loop: Header=BB38_71 Depth=2
	jmp	.LBB38_81
.LBB38_81:                              # %for.inc263
                                        #   in Loop: Header=BB38_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_71
.LBB38_82:                              # %for.end265
                                        #   in Loop: Header=BB38_69 Depth=1
	jmp	.LBB38_83
.LBB38_83:                              # %for.inc266
                                        #   in Loop: Header=BB38_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_69
.LBB38_84:                              # %for.end268
	jmp	.LBB38_94
.LBB38_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB38_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB38_86 Depth=1
	movl	$0, -4(%rbp)
.LBB38_88:                              # %for.cond274
                                        #   Parent Loop BB38_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB38_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB38_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_88
.LBB38_91:                              # %for.end294
                                        #   in Loop: Header=BB38_86 Depth=1
	jmp	.LBB38_92
.LBB38_92:                              # %for.inc295
                                        #   in Loop: Header=BB38_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_86
.LBB38_93:                              # %for.end297
	jmp	.LBB38_94
.LBB38_94:                              # %if.end298
	jmp	.LBB38_95
.LBB38_95:                              # %if.end299
	jmp	.LBB38_105
.LBB38_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB38_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB38_97 Depth=1
	movl	$0, -4(%rbp)
.LBB38_99:                              # %for.cond305
                                        #   Parent Loop BB38_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB38_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB38_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_99
.LBB38_102:                             # %for.end317
                                        #   in Loop: Header=BB38_97 Depth=1
	jmp	.LBB38_103
.LBB38_103:                             # %for.inc318
                                        #   in Loop: Header=BB38_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_97
.LBB38_104:                             # %for.end320
	jmp	.LBB38_105
.LBB38_105:                             # %if.end321
	jmp	.LBB38_180
.LBB38_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB38_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB38_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_110 Depth 2
                                        #       Child Loop BB38_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB38_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB38_108 Depth=1
	movl	$0, -12(%rbp)
.LBB38_110:                             # %for.cond331
                                        #   Parent Loop BB38_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB38_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB38_110 Depth=2
	movl	$0, -4(%rbp)
.LBB38_112:                             # %for.cond335
                                        #   Parent Loop BB38_108 Depth=1
                                        #     Parent Loop BB38_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB38_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB38_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB38_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_112
.LBB38_115:                             # %for.end359
                                        #   in Loop: Header=BB38_110 Depth=2
	jmp	.LBB38_116
.LBB38_116:                             # %for.inc360
                                        #   in Loop: Header=BB38_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_110
.LBB38_117:                             # %for.end362
                                        #   in Loop: Header=BB38_108 Depth=1
	jmp	.LBB38_118
.LBB38_118:                             # %for.inc363
                                        #   in Loop: Header=BB38_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_108
.LBB38_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB38_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB38_120 Depth=1
	movl	$0, -8(%rbp)
.LBB38_122:                             # %for.cond370
                                        #   Parent Loop BB38_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB38_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB38_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_122
.LBB38_125:                             # %for.end380
                                        #   in Loop: Header=BB38_120 Depth=1
	jmp	.LBB38_126
.LBB38_126:                             # %for.inc381
                                        #   in Loop: Header=BB38_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_120
.LBB38_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB38_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB38_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB38_129 Depth=1
	movl	$0, -4(%rbp)
.LBB38_131:                             # %for.cond390
                                        #   Parent Loop BB38_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB38_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB38_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_131
.LBB38_134:                             # %for.end410
                                        #   in Loop: Header=BB38_129 Depth=1
	jmp	.LBB38_135
.LBB38_135:                             # %for.inc411
                                        #   in Loop: Header=BB38_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_129
.LBB38_136:                             # %for.end413
	jmp	.LBB38_156
.LBB38_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB38_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB38_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_141 Depth 2
                                        #       Child Loop BB38_143 Depth 3
                                        #         Child Loop BB38_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB38_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB38_141:                             # %for.cond425
                                        #   Parent Loop BB38_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_143 Depth 3
                                        #         Child Loop BB38_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB38_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB38_143:                             # %for.cond452
                                        #   Parent Loop BB38_139 Depth=1
                                        #     Parent Loop BB38_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB38_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB38_143 Depth=3
	movl	$0, -4(%rbp)
.LBB38_145:                             # %for.cond456
                                        #   Parent Loop BB38_139 Depth=1
                                        #     Parent Loop BB38_141 Depth=2
                                        #       Parent Loop BB38_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB38_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB38_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB38_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_145
.LBB38_148:                             # %for.end475
                                        #   in Loop: Header=BB38_143 Depth=3
	jmp	.LBB38_149
.LBB38_149:                             # %for.inc476
                                        #   in Loop: Header=BB38_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_143
.LBB38_150:                             # %for.end478
                                        #   in Loop: Header=BB38_141 Depth=2
	jmp	.LBB38_151
.LBB38_151:                             # %for.inc479
                                        #   in Loop: Header=BB38_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_141
.LBB38_152:                             # %for.end481
                                        #   in Loop: Header=BB38_139 Depth=1
	jmp	.LBB38_153
.LBB38_153:                             # %for.inc482
                                        #   in Loop: Header=BB38_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_139
.LBB38_154:                             # %for.end484
	jmp	.LBB38_155
.LBB38_155:                             # %if.end485
	jmp	.LBB38_156
.LBB38_156:                             # %if.end486
	jmp	.LBB38_157
.LBB38_157:                             # %if.end487
	jmp	.LBB38_180
.LBB38_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB38_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB38_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB38_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB38_161 Depth=1
	movl	$0, -4(%rbp)
.LBB38_163:                             # %for.cond499
                                        #   Parent Loop BB38_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB38_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB38_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_163
.LBB38_166:                             # %for.end519
                                        #   in Loop: Header=BB38_161 Depth=1
	jmp	.LBB38_167
.LBB38_167:                             # %for.inc520
                                        #   in Loop: Header=BB38_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_161
.LBB38_168:                             # %for.end522
	jmp	.LBB38_169
.LBB38_169:                             # %if.end523
	jmp	.LBB38_179
.LBB38_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB38_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB38_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB38_171 Depth=1
	movl	$0, -4(%rbp)
.LBB38_173:                             # %for.cond529
                                        #   Parent Loop BB38_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB38_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB38_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB38_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_173
.LBB38_176:                             # %for.end541
                                        #   in Loop: Header=BB38_171 Depth=1
	jmp	.LBB38_177
.LBB38_177:                             # %for.inc542
                                        #   in Loop: Header=BB38_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_171
.LBB38_178:                             # %for.end544
	jmp	.LBB38_179
.LBB38_179:                             # %if.end545
	jmp	.LBB38_180
.LBB38_180:                             # %sw.epilog
	cmpl	$1159638723, -68(%rbp)  # imm = 0x451EAEC3
	jne	.LBB38_182
.LBB38_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_181
.Lfunc_end38:
	.size	Conceal_Error.28, .Lfunc_end38-Conceal_Error.28
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI38_0:
	.quad	.LBB38_16
	.quad	.LBB38_158
	.quad	.LBB38_106
	.quad	.LBB38_180
	.quad	.LBB38_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.29 # -- Begin function compute_residue_b8block.29
	.p2align	4, 0x90
	.type	compute_residue_b8block.29,@function
compute_residue_b8block.29:             # @compute_residue_b8block.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1800582342, -36(%rbp)  # imm = 0x6B52B4C6
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB39_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB39_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB39_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB39_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB39_4:                               # %for.cond4
                                        #   Parent Loop BB39_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB39_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB39_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB39_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_4
.LBB39_7:                               # %for.end
                                        #   in Loop: Header=BB39_2 Depth=1
	jmp	.LBB39_8
.LBB39_8:                               # %for.inc22
                                        #   in Loop: Header=BB39_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_2
.LBB39_9:                               # %for.end24
	jmp	.LBB39_19
.LBB39_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB39_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB39_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB39_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB39_13:                              # %for.cond29
                                        #   Parent Loop BB39_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB39_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB39_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB39_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_13
.LBB39_16:                              # %for.end56
                                        #   in Loop: Header=BB39_11 Depth=1
	jmp	.LBB39_17
.LBB39_17:                              # %for.inc57
                                        #   in Loop: Header=BB39_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_11
.LBB39_18:                              # %for.end59
	jmp	.LBB39_19
.LBB39_19:                              # %if.end
	cmpl	$1800582342, -36(%rbp)  # imm = 0x6B52B4C6
	jne	.LBB39_21
.LBB39_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_20
.Lfunc_end39:
	.size	compute_residue_b8block.29, .Lfunc_end39-compute_residue_b8block.29
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.30 # -- Begin function compute_residue_b8block.30
	.p2align	4, 0x90
	.type	compute_residue_b8block.30,@function
compute_residue_b8block.30:             # @compute_residue_b8block.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$82727278, -36(%rbp)    # imm = 0x4EE516E
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB40_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB40_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB40_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_4:                               # %for.cond4
                                        #   Parent Loop BB40_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB40_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB40_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB40_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_4
.LBB40_7:                               # %for.end
                                        #   in Loop: Header=BB40_2 Depth=1
	jmp	.LBB40_8
.LBB40_8:                               # %for.inc22
                                        #   in Loop: Header=BB40_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_2
.LBB40_9:                               # %for.end24
	jmp	.LBB40_19
.LBB40_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB40_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB40_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_13:                              # %for.cond29
                                        #   Parent Loop BB40_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB40_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB40_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB40_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_13
.LBB40_16:                              # %for.end56
                                        #   in Loop: Header=BB40_11 Depth=1
	jmp	.LBB40_17
.LBB40_17:                              # %for.inc57
                                        #   in Loop: Header=BB40_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_11
.LBB40_18:                              # %for.end59
	jmp	.LBB40_19
.LBB40_19:                              # %if.end
	cmpl	$82727278, -36(%rbp)    # imm = 0x4EE516E
	jne	.LBB40_21
.LBB40_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_20
.Lfunc_end40:
	.size	compute_residue_b8block.30, .Lfunc_end40-compute_residue_b8block.30
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.31       # -- Begin function DecOneForthPix.31
	.p2align	4, 0x90
	.type	DecOneForthPix.31,@function
DecOneForthPix.31:                      # @DecOneForthPix.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1269984588, -12(%rbp)  # imm = 0x4BB26D4C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB41_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB41_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_1
.LBB41_4:                               # %for.end
	cmpl	$1269984588, -12(%rbp)  # imm = 0x4BB26D4C
	jne	.LBB41_6
.LBB41_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_5
.Lfunc_end41:
	.size	DecOneForthPix.31, .Lfunc_end41-DecOneForthPix.31
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.32        # -- Begin function Conceal_Error.32
	.p2align	4, 0x90
	.type	Conceal_Error.32,@function
Conceal_Error.32:                       # @Conceal_Error.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1272075046, -68(%rbp)  # imm = 0x4BD25326
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB42_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB42_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB42_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB42_4:                               # %land.end
.LBB42_5:                               # %lor.end
.LBB42_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB42_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB42_9
.LBB42_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB42_14
.LBB42_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB42_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB42_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB42_12:                              # %land.end51
.LBB42_13:                              # %lor.end53
.LBB42_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB42_180
# %bb.15:                               # %land.end54
	movq	.LJTI42_0(,%rax,8), %rax
	jmpq	*%rax
.LBB42_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB42_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB42_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB42_18 Depth=1
	movl	$0, -4(%rbp)
.LBB42_20:                              # %for.cond68
                                        #   Parent Loop BB42_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB42_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB42_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_20
.LBB42_23:                              # %for.end
                                        #   in Loop: Header=BB42_18 Depth=1
	jmp	.LBB42_24
.LBB42_24:                              # %for.inc85
                                        #   in Loop: Header=BB42_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_18
.LBB42_25:                              # %for.end87
	jmp	.LBB42_35
.LBB42_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB42_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB42_27 Depth=1
	movl	$0, -4(%rbp)
.LBB42_29:                              # %for.cond92
                                        #   Parent Loop BB42_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB42_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB42_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_29
.LBB42_32:                              # %for.end104
                                        #   in Loop: Header=BB42_27 Depth=1
	jmp	.LBB42_33
.LBB42_33:                              # %for.inc105
                                        #   in Loop: Header=BB42_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_27
.LBB42_34:                              # %for.end107
	jmp	.LBB42_35
.LBB42_35:                              # %if.end
	jmp	.LBB42_180
.LBB42_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB42_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_39 Depth 2
                                        #       Child Loop BB42_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB42_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB42_37 Depth=1
	movl	$0, -16(%rbp)
.LBB42_39:                              # %for.cond113
                                        #   Parent Loop BB42_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB42_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB42_39 Depth=2
	movl	$0, -4(%rbp)
.LBB42_41:                              # %for.cond117
                                        #   Parent Loop BB42_37 Depth=1
                                        #     Parent Loop BB42_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB42_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB42_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB42_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_41
.LBB42_44:                              # %for.end141
                                        #   in Loop: Header=BB42_39 Depth=2
	jmp	.LBB42_45
.LBB42_45:                              # %for.inc142
                                        #   in Loop: Header=BB42_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_39
.LBB42_46:                              # %for.end144
                                        #   in Loop: Header=BB42_37 Depth=1
	jmp	.LBB42_47
.LBB42_47:                              # %for.inc145
                                        #   in Loop: Header=BB42_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_37
.LBB42_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB42_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB42_49 Depth=1
	movl	$0, -8(%rbp)
.LBB42_51:                              # %for.cond152
                                        #   Parent Loop BB42_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB42_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB42_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_51
.LBB42_54:                              # %for.end162
                                        #   in Loop: Header=BB42_49 Depth=1
	jmp	.LBB42_55
.LBB42_55:                              # %for.inc163
                                        #   in Loop: Header=BB42_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_49
.LBB42_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB42_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB42_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB42_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB42_59 Depth=1
	movl	$0, -4(%rbp)
.LBB42_61:                              # %for.cond175
                                        #   Parent Loop BB42_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB42_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB42_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_61
.LBB42_64:                              # %for.end195
                                        #   in Loop: Header=BB42_59 Depth=1
	jmp	.LBB42_65
.LBB42_65:                              # %for.inc196
                                        #   in Loop: Header=BB42_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_59
.LBB42_66:                              # %for.end198
	jmp	.LBB42_95
.LBB42_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB42_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB42_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_71 Depth 2
                                        #       Child Loop BB42_73 Depth 3
                                        #         Child Loop BB42_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB42_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB42_71:                              # %for.cond210
                                        #   Parent Loop BB42_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_73 Depth 3
                                        #         Child Loop BB42_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB42_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB42_73:                              # %for.cond236
                                        #   Parent Loop BB42_69 Depth=1
                                        #     Parent Loop BB42_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB42_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB42_73 Depth=3
	movl	$0, -4(%rbp)
.LBB42_75:                              # %for.cond240
                                        #   Parent Loop BB42_69 Depth=1
                                        #     Parent Loop BB42_71 Depth=2
                                        #       Parent Loop BB42_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB42_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB42_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB42_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_75
.LBB42_78:                              # %for.end259
                                        #   in Loop: Header=BB42_73 Depth=3
	jmp	.LBB42_79
.LBB42_79:                              # %for.inc260
                                        #   in Loop: Header=BB42_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_73
.LBB42_80:                              # %for.end262
                                        #   in Loop: Header=BB42_71 Depth=2
	jmp	.LBB42_81
.LBB42_81:                              # %for.inc263
                                        #   in Loop: Header=BB42_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_71
.LBB42_82:                              # %for.end265
                                        #   in Loop: Header=BB42_69 Depth=1
	jmp	.LBB42_83
.LBB42_83:                              # %for.inc266
                                        #   in Loop: Header=BB42_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_69
.LBB42_84:                              # %for.end268
	jmp	.LBB42_94
.LBB42_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB42_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB42_86 Depth=1
	movl	$0, -4(%rbp)
.LBB42_88:                              # %for.cond274
                                        #   Parent Loop BB42_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB42_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB42_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_88
.LBB42_91:                              # %for.end294
                                        #   in Loop: Header=BB42_86 Depth=1
	jmp	.LBB42_92
.LBB42_92:                              # %for.inc295
                                        #   in Loop: Header=BB42_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_86
.LBB42_93:                              # %for.end297
	jmp	.LBB42_94
.LBB42_94:                              # %if.end298
	jmp	.LBB42_95
.LBB42_95:                              # %if.end299
	jmp	.LBB42_105
.LBB42_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB42_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB42_97 Depth=1
	movl	$0, -4(%rbp)
.LBB42_99:                              # %for.cond305
                                        #   Parent Loop BB42_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB42_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB42_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_99
.LBB42_102:                             # %for.end317
                                        #   in Loop: Header=BB42_97 Depth=1
	jmp	.LBB42_103
.LBB42_103:                             # %for.inc318
                                        #   in Loop: Header=BB42_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_97
.LBB42_104:                             # %for.end320
	jmp	.LBB42_105
.LBB42_105:                             # %if.end321
	jmp	.LBB42_180
.LBB42_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB42_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB42_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_110 Depth 2
                                        #       Child Loop BB42_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB42_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB42_108 Depth=1
	movl	$0, -16(%rbp)
.LBB42_110:                             # %for.cond331
                                        #   Parent Loop BB42_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB42_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB42_110 Depth=2
	movl	$0, -4(%rbp)
.LBB42_112:                             # %for.cond335
                                        #   Parent Loop BB42_108 Depth=1
                                        #     Parent Loop BB42_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB42_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB42_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB42_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_112
.LBB42_115:                             # %for.end359
                                        #   in Loop: Header=BB42_110 Depth=2
	jmp	.LBB42_116
.LBB42_116:                             # %for.inc360
                                        #   in Loop: Header=BB42_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_110
.LBB42_117:                             # %for.end362
                                        #   in Loop: Header=BB42_108 Depth=1
	jmp	.LBB42_118
.LBB42_118:                             # %for.inc363
                                        #   in Loop: Header=BB42_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_108
.LBB42_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB42_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB42_120 Depth=1
	movl	$0, -8(%rbp)
.LBB42_122:                             # %for.cond370
                                        #   Parent Loop BB42_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB42_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB42_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_122
.LBB42_125:                             # %for.end380
                                        #   in Loop: Header=BB42_120 Depth=1
	jmp	.LBB42_126
.LBB42_126:                             # %for.inc381
                                        #   in Loop: Header=BB42_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_120
.LBB42_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB42_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB42_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB42_129 Depth=1
	movl	$0, -4(%rbp)
.LBB42_131:                             # %for.cond390
                                        #   Parent Loop BB42_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB42_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB42_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_131
.LBB42_134:                             # %for.end410
                                        #   in Loop: Header=BB42_129 Depth=1
	jmp	.LBB42_135
.LBB42_135:                             # %for.inc411
                                        #   in Loop: Header=BB42_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_129
.LBB42_136:                             # %for.end413
	jmp	.LBB42_156
.LBB42_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB42_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB42_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_141 Depth 2
                                        #       Child Loop BB42_143 Depth 3
                                        #         Child Loop BB42_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB42_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB42_141:                             # %for.cond425
                                        #   Parent Loop BB42_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_143 Depth 3
                                        #         Child Loop BB42_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB42_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB42_143:                             # %for.cond452
                                        #   Parent Loop BB42_139 Depth=1
                                        #     Parent Loop BB42_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB42_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB42_143 Depth=3
	movl	$0, -4(%rbp)
.LBB42_145:                             # %for.cond456
                                        #   Parent Loop BB42_139 Depth=1
                                        #     Parent Loop BB42_141 Depth=2
                                        #       Parent Loop BB42_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB42_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB42_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB42_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_145
.LBB42_148:                             # %for.end475
                                        #   in Loop: Header=BB42_143 Depth=3
	jmp	.LBB42_149
.LBB42_149:                             # %for.inc476
                                        #   in Loop: Header=BB42_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_143
.LBB42_150:                             # %for.end478
                                        #   in Loop: Header=BB42_141 Depth=2
	jmp	.LBB42_151
.LBB42_151:                             # %for.inc479
                                        #   in Loop: Header=BB42_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_141
.LBB42_152:                             # %for.end481
                                        #   in Loop: Header=BB42_139 Depth=1
	jmp	.LBB42_153
.LBB42_153:                             # %for.inc482
                                        #   in Loop: Header=BB42_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_139
.LBB42_154:                             # %for.end484
	jmp	.LBB42_155
.LBB42_155:                             # %if.end485
	jmp	.LBB42_156
.LBB42_156:                             # %if.end486
	jmp	.LBB42_157
.LBB42_157:                             # %if.end487
	jmp	.LBB42_180
.LBB42_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB42_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB42_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB42_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB42_161 Depth=1
	movl	$0, -4(%rbp)
.LBB42_163:                             # %for.cond499
                                        #   Parent Loop BB42_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB42_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB42_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_163
.LBB42_166:                             # %for.end519
                                        #   in Loop: Header=BB42_161 Depth=1
	jmp	.LBB42_167
.LBB42_167:                             # %for.inc520
                                        #   in Loop: Header=BB42_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_161
.LBB42_168:                             # %for.end522
	jmp	.LBB42_169
.LBB42_169:                             # %if.end523
	jmp	.LBB42_179
.LBB42_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB42_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB42_171 Depth=1
	movl	$0, -4(%rbp)
.LBB42_173:                             # %for.cond529
                                        #   Parent Loop BB42_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB42_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB42_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_173
.LBB42_176:                             # %for.end541
                                        #   in Loop: Header=BB42_171 Depth=1
	jmp	.LBB42_177
.LBB42_177:                             # %for.inc542
                                        #   in Loop: Header=BB42_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_171
.LBB42_178:                             # %for.end544
	jmp	.LBB42_179
.LBB42_179:                             # %if.end545
	jmp	.LBB42_180
.LBB42_180:                             # %sw.epilog
	cmpl	$1272075046, -68(%rbp)  # imm = 0x4BD25326
	jne	.LBB42_182
.LBB42_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_181
.Lfunc_end42:
	.size	Conceal_Error.32, .Lfunc_end42-Conceal_Error.32
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI42_0:
	.quad	.LBB42_16
	.quad	.LBB42_158
	.quad	.LBB42_106
	.quad	.LBB42_180
	.quad	.LBB42_36
                                        # -- End function
	.text
	.globl	Get_Reference_Pixel.33  # -- Begin function Get_Reference_Pixel.33
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.33,@function
Get_Reference_Pixel.33:                 # @Get_Reference_Pixel.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2073023734, -100(%rbp) # imm = 0x7B8FD4F6
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB43_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB43_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB43_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB43_5
.LBB43_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB43_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB43_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB43_11
.LBB43_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB43_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB43_10
.LBB43_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB43_10:                              # %cond.end14
.LBB43_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB43_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB43_14
.LBB43_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB43_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB43_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB43_20
.LBB43_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB43_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB43_19
.LBB43_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB43_19:                              # %cond.end29
.LBB43_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_332
.LBB43_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB43_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB43_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB43_25
.LBB43_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB43_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB43_31
.LBB43_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB43_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB43_30
.LBB43_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB43_30:                              # %cond.end52
.LBB43_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB43_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB43_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_36
.LBB43_35:                              # %cond.false61
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_36:                              # %cond.end63
                                        #   in Loop: Header=BB43_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB43_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_42
.LBB43_38:                              # %cond.false68
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_41
.LBB43_40:                              # %cond.false73
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_41:                              # %cond.end75
                                        #   in Loop: Header=BB43_32 Depth=1
.LBB43_42:                              # %cond.end77
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_32
.LBB43_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_47
.LBB43_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB43_53
.LBB43_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_52
.LBB43_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_52:                              # %cond.end113
.LBB43_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB43_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB43_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB43_57
.LBB43_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB43_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB43_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB43_63
.LBB43_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB43_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB43_62
.LBB43_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB43_62:                              # %cond.end136
.LBB43_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB43_76
.LBB43_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB43_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB43_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB43_68
.LBB43_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB43_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB43_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB43_74
.LBB43_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB43_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB43_73
.LBB43_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB43_73:                              # %cond.end169
.LBB43_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB43_75:                              # %if.end
	jmp	.LBB43_76
.LBB43_76:                              # %if.end178
	jmp	.LBB43_331
.LBB43_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB43_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB43_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB43_81
.LBB43_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB43_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB43_87
.LBB43_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB43_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB43_86
.LBB43_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB43_86:                              # %cond.end197
.LBB43_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB43_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB43_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_92
.LBB43_91:                              # %cond.false209
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_92:                              # %cond.end211
                                        #   in Loop: Header=BB43_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB43_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_98
.LBB43_94:                              # %cond.false216
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_97
.LBB43_96:                              # %cond.false221
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_97:                              # %cond.end223
                                        #   in Loop: Header=BB43_88 Depth=1
.LBB43_98:                              # %cond.end225
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_88
.LBB43_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_103
.LBB43_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB43_109
.LBB43_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_108
.LBB43_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_108:                             # %cond.end266
.LBB43_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB43_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB43_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB43_113
.LBB43_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB43_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB43_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB43_119
.LBB43_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB43_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB43_118
.LBB43_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB43_118:                             # %cond.end287
.LBB43_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB43_132
.LBB43_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB43_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB43_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB43_124
.LBB43_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB43_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB43_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB43_130
.LBB43_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB43_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB43_129
.LBB43_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB43_129:                             # %cond.end320
.LBB43_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB43_131:                             # %if.end331
	jmp	.LBB43_132
.LBB43_132:                             # %if.end332
	jmp	.LBB43_330
.LBB43_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB43_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB43_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB43_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_139
.LBB43_138:                             # %cond.false345
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_139:                             # %cond.end347
                                        #   in Loop: Header=BB43_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB43_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_145
.LBB43_141:                             # %cond.false352
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_144
.LBB43_143:                             # %cond.false357
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_144:                             # %cond.end359
                                        #   in Loop: Header=BB43_135 Depth=1
.LBB43_145:                             # %cond.end361
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB43_146:                             # %for.cond363
                                        #   Parent Loop BB43_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB43_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB43_150
.LBB43_149:                             # %cond.false371
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_150:                             # %cond.end373
                                        #   in Loop: Header=BB43_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB43_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB43_156
.LBB43_152:                             # %cond.false378
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB43_155
.LBB43_154:                             # %cond.false383
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_155:                             # %cond.end385
                                        #   in Loop: Header=BB43_146 Depth=2
.LBB43_156:                             # %cond.end387
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_146
.LBB43_158:                             # %for.end401
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_135
.LBB43_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB43_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB43_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB43_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB43_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_161
.LBB43_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_167
.LBB43_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB43_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB43_173
.LBB43_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_172
.LBB43_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB43_172:                             # %cond.end449
.LBB43_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB43_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_177
.LBB43_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB43_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB43_183
.LBB43_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_182
.LBB43_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_182:                             # %cond.end486
.LBB43_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB43_196
.LBB43_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB43_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_188
.LBB43_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB43_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB43_194
.LBB43_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_193
.LBB43_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_193:                             # %cond.end526
.LBB43_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB43_195:                             # %if.end532
	jmp	.LBB43_196
.LBB43_196:                             # %if.end533
	jmp	.LBB43_329
.LBB43_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB43_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB43_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB43_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_203
.LBB43_202:                             # %cond.false546
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_203:                             # %cond.end548
                                        #   in Loop: Header=BB43_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB43_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_209
.LBB43_205:                             # %cond.false553
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_208
.LBB43_207:                             # %cond.false558
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_208:                             # %cond.end560
                                        #   in Loop: Header=BB43_199 Depth=1
.LBB43_209:                             # %cond.end562
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB43_210:                             # %for.cond564
                                        #   Parent Loop BB43_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB43_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB43_214
.LBB43_213:                             # %cond.false572
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_214:                             # %cond.end574
                                        #   in Loop: Header=BB43_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB43_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB43_220
.LBB43_216:                             # %cond.false579
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB43_219
.LBB43_218:                             # %cond.false584
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_219:                             # %cond.end586
                                        #   in Loop: Header=BB43_210 Depth=2
.LBB43_220:                             # %cond.end588
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_210
.LBB43_222:                             # %for.end602
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_199
.LBB43_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB43_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB43_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB43_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB43_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_225
.LBB43_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_231
.LBB43_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB43_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB43_237
.LBB43_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_236
.LBB43_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB43_236:                             # %cond.end650
.LBB43_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB43_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_241
.LBB43_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB43_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB43_247
.LBB43_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_246
.LBB43_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_246:                             # %cond.end687
.LBB43_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB43_258
.LBB43_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_251
.LBB43_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB43_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB43_257
.LBB43_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_256
.LBB43_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_256:                             # %cond.end724
.LBB43_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB43_258:                             # %if.end730
	jmp	.LBB43_328
.LBB43_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB43_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB43_262
.LBB43_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB43_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB43_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB43_265
.LBB43_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB43_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB43_271
.LBB43_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB43_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB43_270
.LBB43_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB43_270:                             # %cond.end753
.LBB43_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB43_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB43_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_276
.LBB43_275:                             # %cond.false765
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_276:                             # %cond.end767
                                        #   in Loop: Header=BB43_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB43_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_282
.LBB43_278:                             # %cond.false772
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_281
.LBB43_280:                             # %cond.false777
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_281:                             # %cond.end779
                                        #   in Loop: Header=BB43_272 Depth=1
.LBB43_282:                             # %cond.end781
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_272
.LBB43_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_287
.LBB43_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB43_293
.LBB43_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_292
.LBB43_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_292:                             # %cond.end822
.LBB43_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB43_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB43_296
.LBB43_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB43_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB43_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB43_299
.LBB43_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB43_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB43_305
.LBB43_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB43_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB43_304
.LBB43_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB43_304:                             # %cond.end847
.LBB43_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB43_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB43_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_310
.LBB43_309:                             # %cond.false859
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_310:                             # %cond.end861
                                        #   in Loop: Header=BB43_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB43_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_316
.LBB43_312:                             # %cond.false866
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_315
.LBB43_314:                             # %cond.false871
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_315:                             # %cond.end873
                                        #   in Loop: Header=BB43_306 Depth=1
.LBB43_316:                             # %cond.end875
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_306
.LBB43_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_321
.LBB43_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB43_327
.LBB43_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_326
.LBB43_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_326:                             # %cond.end916
.LBB43_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB43_328:                             # %if.end922
	jmp	.LBB43_329
.LBB43_329:                             # %if.end923
	jmp	.LBB43_330
.LBB43_330:                             # %if.end924
	jmp	.LBB43_331
.LBB43_331:                             # %if.end925
	jmp	.LBB43_332
.LBB43_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$2073023734, -100(%rbp) # imm = 0x7B8FD4F6
	jne	.LBB43_334
.LBB43_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_333
.Lfunc_end43:
	.size	Get_Reference_Pixel.33, .Lfunc_end43-Get_Reference_Pixel.33
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.34
.LCPI44_0:
	.quad	4636737291354636288     # double 100
.LCPI44_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.34
	.p2align	4, 0x90
	.type	Build_Status_Map.34,@function
Build_Status_Map.34:                    # @Build_Status_Map.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1900190004, -36(%rbp)  # imm = 0x71429934
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB44_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -12(%rbp)
.LBB44_3:                               # %for.cond2
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB44_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB44_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB44_13
.LBB44_6:                               # %if.then
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI44_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI44_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB44_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB44_8:                               # %if.end
                                        #   in Loop: Header=BB44_3 Depth=2
	callq	rand
	vmovsd	.LCPI44_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI44_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB44_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB44_10:                              # %if.end20
                                        #   in Loop: Header=BB44_3 Depth=2
	callq	rand
	vmovsd	.LCPI44_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI44_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB44_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	$1, -4(%rbp)
.LBB44_12:                              # %if.end29
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB44_13:                              # %if.end30
                                        #   in Loop: Header=BB44_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB44_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB44_18
.LBB44_15:                              # %if.else
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB44_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB44_17:                              # %if.end49
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_18
.LBB44_18:                              # %if.end50
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_3
.LBB44_20:                              # %for.end
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_21
.LBB44_21:                              # %for.inc53
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_1
.LBB44_22:                              # %for.end55
	cmpl	$1900190004, -36(%rbp)  # imm = 0x71429934
	jne	.LBB44_24
.LBB44_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_23
.Lfunc_end44:
	.size	Build_Status_Map.34, .Lfunc_end44-Build_Status_Map.34
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.35
.LCPI45_0:
	.quad	4636737291354636288     # double 100
.LCPI45_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.35
	.p2align	4, 0x90
	.type	Build_Status_Map.35,@function
Build_Status_Map.35:                    # @Build_Status_Map.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1476738814, -40(%rbp)  # imm = 0x58053EFE
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB45_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB45_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -12(%rbp)
.LBB45_3:                               # %for.cond2
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB45_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB45_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB45_13
.LBB45_6:                               # %if.then
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI45_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI45_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB45_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB45_8:                               # %if.end
                                        #   in Loop: Header=BB45_3 Depth=2
	callq	rand
	vmovsd	.LCPI45_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI45_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB45_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB45_10:                              # %if.end20
                                        #   in Loop: Header=BB45_3 Depth=2
	callq	rand
	vmovsd	.LCPI45_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI45_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB45_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	$1, -4(%rbp)
.LBB45_12:                              # %if.end29
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB45_13:                              # %if.end30
                                        #   in Loop: Header=BB45_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB45_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB45_18
.LBB45_15:                              # %if.else
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB45_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB45_17:                              # %if.end49
                                        #   in Loop: Header=BB45_3 Depth=2
	jmp	.LBB45_18
.LBB45_18:                              # %if.end50
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_3
.LBB45_20:                              # %for.end
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_21
.LBB45_21:                              # %for.inc53
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_1
.LBB45_22:                              # %for.end55
	cmpl	$1476738814, -40(%rbp)  # imm = 0x58053EFE
	jne	.LBB45_24
.LBB45_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_23
.Lfunc_end45:
	.size	Build_Status_Map.35, .Lfunc_end45-Build_Status_Map.35
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.36       # -- Begin function DecOneForthPix.36
	.p2align	4, 0x90
	.type	DecOneForthPix.36,@function
DecOneForthPix.36:                      # @DecOneForthPix.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$348602068, -8(%rbp)    # imm = 0x14C73ED4
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB46_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB46_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_1
.LBB46_4:                               # %for.end
	cmpl	$348602068, -8(%rbp)    # imm = 0x14C73ED4
	jne	.LBB46_6
.LBB46_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_5
.Lfunc_end46:
	.size	DecOneForthPix.36, .Lfunc_end46-DecOneForthPix.36
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.37    # -- Begin function Error_Concealment.37
	.p2align	4, 0x90
	.type	Error_Concealment.37,@function
Error_Concealment.37:                   # @Error_Concealment.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1813584587, -16(%rbp)  # imm = 0x6C191ACB
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB47_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_3:                               # %for.cond2
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB47_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB47_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB47_6:                               # %if.end
                                        #   in Loop: Header=BB47_3 Depth=2
	jmp	.LBB47_7
.LBB47_7:                               # %for.inc
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_3
.LBB47_8:                               # %for.end
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_9
.LBB47_9:                               # %for.inc7
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_1
.LBB47_10:                              # %for.end9
	cmpl	$1813584587, -16(%rbp)  # imm = 0x6C191ACB
	jne	.LBB47_12
.LBB47_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_11
.Lfunc_end47:
	.size	Error_Concealment.37, .Lfunc_end47-Error_Concealment.37
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.38        # -- Begin function Conceal_Error.38
	.p2align	4, 0x90
	.type	Conceal_Error.38,@function
Conceal_Error.38:                       # @Conceal_Error.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$2102463951, -68(%rbp)  # imm = 0x7D510DCF
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB48_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB48_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB48_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB48_4:                               # %land.end
.LBB48_5:                               # %lor.end
.LBB48_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB48_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB48_9
.LBB48_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB48_14
.LBB48_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB48_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB48_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB48_12:                              # %land.end51
.LBB48_13:                              # %lor.end53
.LBB48_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB48_180
# %bb.15:                               # %land.end54
	movq	.LJTI48_0(,%rax,8), %rax
	jmpq	*%rax
.LBB48_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB48_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB48_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB48_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB48_18 Depth=1
	movl	$0, -4(%rbp)
.LBB48_20:                              # %for.cond68
                                        #   Parent Loop BB48_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB48_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB48_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB48_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_20
.LBB48_23:                              # %for.end
                                        #   in Loop: Header=BB48_18 Depth=1
	jmp	.LBB48_24
.LBB48_24:                              # %for.inc85
                                        #   in Loop: Header=BB48_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_18
.LBB48_25:                              # %for.end87
	jmp	.LBB48_35
.LBB48_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB48_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB48_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB48_27 Depth=1
	movl	$0, -4(%rbp)
.LBB48_29:                              # %for.cond92
                                        #   Parent Loop BB48_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB48_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB48_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB48_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_29
.LBB48_32:                              # %for.end104
                                        #   in Loop: Header=BB48_27 Depth=1
	jmp	.LBB48_33
.LBB48_33:                              # %for.inc105
                                        #   in Loop: Header=BB48_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_27
.LBB48_34:                              # %for.end107
	jmp	.LBB48_35
.LBB48_35:                              # %if.end
	jmp	.LBB48_180
.LBB48_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB48_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_39 Depth 2
                                        #       Child Loop BB48_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB48_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB48_37 Depth=1
	movl	$0, -12(%rbp)
.LBB48_39:                              # %for.cond113
                                        #   Parent Loop BB48_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB48_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB48_39 Depth=2
	movl	$0, -4(%rbp)
.LBB48_41:                              # %for.cond117
                                        #   Parent Loop BB48_37 Depth=1
                                        #     Parent Loop BB48_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB48_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB48_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB48_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_41
.LBB48_44:                              # %for.end141
                                        #   in Loop: Header=BB48_39 Depth=2
	jmp	.LBB48_45
.LBB48_45:                              # %for.inc142
                                        #   in Loop: Header=BB48_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_39
.LBB48_46:                              # %for.end144
                                        #   in Loop: Header=BB48_37 Depth=1
	jmp	.LBB48_47
.LBB48_47:                              # %for.inc145
                                        #   in Loop: Header=BB48_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_37
.LBB48_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB48_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB48_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB48_49 Depth=1
	movl	$0, -8(%rbp)
.LBB48_51:                              # %for.cond152
                                        #   Parent Loop BB48_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB48_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB48_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB48_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_51
.LBB48_54:                              # %for.end162
                                        #   in Loop: Header=BB48_49 Depth=1
	jmp	.LBB48_55
.LBB48_55:                              # %for.inc163
                                        #   in Loop: Header=BB48_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_49
.LBB48_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB48_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB48_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB48_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB48_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB48_59 Depth=1
	movl	$0, -4(%rbp)
.LBB48_61:                              # %for.cond175
                                        #   Parent Loop BB48_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB48_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB48_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB48_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_61
.LBB48_64:                              # %for.end195
                                        #   in Loop: Header=BB48_59 Depth=1
	jmp	.LBB48_65
.LBB48_65:                              # %for.inc196
                                        #   in Loop: Header=BB48_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_59
.LBB48_66:                              # %for.end198
	jmp	.LBB48_95
.LBB48_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB48_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB48_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_71 Depth 2
                                        #       Child Loop BB48_73 Depth 3
                                        #         Child Loop BB48_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB48_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB48_71:                              # %for.cond210
                                        #   Parent Loop BB48_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_73 Depth 3
                                        #         Child Loop BB48_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB48_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB48_73:                              # %for.cond236
                                        #   Parent Loop BB48_69 Depth=1
                                        #     Parent Loop BB48_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB48_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB48_73 Depth=3
	movl	$0, -4(%rbp)
.LBB48_75:                              # %for.cond240
                                        #   Parent Loop BB48_69 Depth=1
                                        #     Parent Loop BB48_71 Depth=2
                                        #       Parent Loop BB48_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB48_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB48_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB48_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_75
.LBB48_78:                              # %for.end259
                                        #   in Loop: Header=BB48_73 Depth=3
	jmp	.LBB48_79
.LBB48_79:                              # %for.inc260
                                        #   in Loop: Header=BB48_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_73
.LBB48_80:                              # %for.end262
                                        #   in Loop: Header=BB48_71 Depth=2
	jmp	.LBB48_81
.LBB48_81:                              # %for.inc263
                                        #   in Loop: Header=BB48_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_71
.LBB48_82:                              # %for.end265
                                        #   in Loop: Header=BB48_69 Depth=1
	jmp	.LBB48_83
.LBB48_83:                              # %for.inc266
                                        #   in Loop: Header=BB48_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_69
.LBB48_84:                              # %for.end268
	jmp	.LBB48_94
.LBB48_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB48_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB48_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB48_86 Depth=1
	movl	$0, -4(%rbp)
.LBB48_88:                              # %for.cond274
                                        #   Parent Loop BB48_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB48_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB48_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB48_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_88
.LBB48_91:                              # %for.end294
                                        #   in Loop: Header=BB48_86 Depth=1
	jmp	.LBB48_92
.LBB48_92:                              # %for.inc295
                                        #   in Loop: Header=BB48_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_86
.LBB48_93:                              # %for.end297
	jmp	.LBB48_94
.LBB48_94:                              # %if.end298
	jmp	.LBB48_95
.LBB48_95:                              # %if.end299
	jmp	.LBB48_105
.LBB48_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB48_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB48_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB48_97 Depth=1
	movl	$0, -4(%rbp)
.LBB48_99:                              # %for.cond305
                                        #   Parent Loop BB48_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB48_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB48_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB48_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_99
.LBB48_102:                             # %for.end317
                                        #   in Loop: Header=BB48_97 Depth=1
	jmp	.LBB48_103
.LBB48_103:                             # %for.inc318
                                        #   in Loop: Header=BB48_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_97
.LBB48_104:                             # %for.end320
	jmp	.LBB48_105
.LBB48_105:                             # %if.end321
	jmp	.LBB48_180
.LBB48_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB48_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB48_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_110 Depth 2
                                        #       Child Loop BB48_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB48_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB48_108 Depth=1
	movl	$0, -12(%rbp)
.LBB48_110:                             # %for.cond331
                                        #   Parent Loop BB48_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB48_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB48_110 Depth=2
	movl	$0, -4(%rbp)
.LBB48_112:                             # %for.cond335
                                        #   Parent Loop BB48_108 Depth=1
                                        #     Parent Loop BB48_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB48_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB48_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB48_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_112
.LBB48_115:                             # %for.end359
                                        #   in Loop: Header=BB48_110 Depth=2
	jmp	.LBB48_116
.LBB48_116:                             # %for.inc360
                                        #   in Loop: Header=BB48_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_110
.LBB48_117:                             # %for.end362
                                        #   in Loop: Header=BB48_108 Depth=1
	jmp	.LBB48_118
.LBB48_118:                             # %for.inc363
                                        #   in Loop: Header=BB48_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_108
.LBB48_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB48_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB48_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB48_120 Depth=1
	movl	$0, -8(%rbp)
.LBB48_122:                             # %for.cond370
                                        #   Parent Loop BB48_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB48_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB48_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB48_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_122
.LBB48_125:                             # %for.end380
                                        #   in Loop: Header=BB48_120 Depth=1
	jmp	.LBB48_126
.LBB48_126:                             # %for.inc381
                                        #   in Loop: Header=BB48_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_120
.LBB48_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB48_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB48_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB48_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB48_129 Depth=1
	movl	$0, -4(%rbp)
.LBB48_131:                             # %for.cond390
                                        #   Parent Loop BB48_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB48_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB48_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB48_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_131
.LBB48_134:                             # %for.end410
                                        #   in Loop: Header=BB48_129 Depth=1
	jmp	.LBB48_135
.LBB48_135:                             # %for.inc411
                                        #   in Loop: Header=BB48_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_129
.LBB48_136:                             # %for.end413
	jmp	.LBB48_156
.LBB48_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB48_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB48_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_141 Depth 2
                                        #       Child Loop BB48_143 Depth 3
                                        #         Child Loop BB48_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB48_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB48_141:                             # %for.cond425
                                        #   Parent Loop BB48_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_143 Depth 3
                                        #         Child Loop BB48_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB48_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB48_143:                             # %for.cond452
                                        #   Parent Loop BB48_139 Depth=1
                                        #     Parent Loop BB48_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB48_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB48_143 Depth=3
	movl	$0, -4(%rbp)
.LBB48_145:                             # %for.cond456
                                        #   Parent Loop BB48_139 Depth=1
                                        #     Parent Loop BB48_141 Depth=2
                                        #       Parent Loop BB48_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB48_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB48_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB48_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_145
.LBB48_148:                             # %for.end475
                                        #   in Loop: Header=BB48_143 Depth=3
	jmp	.LBB48_149
.LBB48_149:                             # %for.inc476
                                        #   in Loop: Header=BB48_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_143
.LBB48_150:                             # %for.end478
                                        #   in Loop: Header=BB48_141 Depth=2
	jmp	.LBB48_151
.LBB48_151:                             # %for.inc479
                                        #   in Loop: Header=BB48_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_141
.LBB48_152:                             # %for.end481
                                        #   in Loop: Header=BB48_139 Depth=1
	jmp	.LBB48_153
.LBB48_153:                             # %for.inc482
                                        #   in Loop: Header=BB48_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_139
.LBB48_154:                             # %for.end484
	jmp	.LBB48_155
.LBB48_155:                             # %if.end485
	jmp	.LBB48_156
.LBB48_156:                             # %if.end486
	jmp	.LBB48_157
.LBB48_157:                             # %if.end487
	jmp	.LBB48_180
.LBB48_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB48_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB48_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB48_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB48_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB48_161 Depth=1
	movl	$0, -4(%rbp)
.LBB48_163:                             # %for.cond499
                                        #   Parent Loop BB48_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB48_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB48_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB48_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_163
.LBB48_166:                             # %for.end519
                                        #   in Loop: Header=BB48_161 Depth=1
	jmp	.LBB48_167
.LBB48_167:                             # %for.inc520
                                        #   in Loop: Header=BB48_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_161
.LBB48_168:                             # %for.end522
	jmp	.LBB48_169
.LBB48_169:                             # %if.end523
	jmp	.LBB48_179
.LBB48_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB48_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB48_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB48_171 Depth=1
	movl	$0, -4(%rbp)
.LBB48_173:                             # %for.cond529
                                        #   Parent Loop BB48_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB48_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB48_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB48_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_173
.LBB48_176:                             # %for.end541
                                        #   in Loop: Header=BB48_171 Depth=1
	jmp	.LBB48_177
.LBB48_177:                             # %for.inc542
                                        #   in Loop: Header=BB48_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_171
.LBB48_178:                             # %for.end544
	jmp	.LBB48_179
.LBB48_179:                             # %if.end545
	jmp	.LBB48_180
.LBB48_180:                             # %sw.epilog
	cmpl	$2102463951, -68(%rbp)  # imm = 0x7D510DCF
	jne	.LBB48_182
.LBB48_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_181
.Lfunc_end48:
	.size	Conceal_Error.38, .Lfunc_end48-Conceal_Error.38
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI48_0:
	.quad	.LBB48_16
	.quad	.LBB48_158
	.quad	.LBB48_106
	.quad	.LBB48_180
	.quad	.LBB48_36
                                        # -- End function
	.text
	.globl	DecOneForthPix.39       # -- Begin function DecOneForthPix.39
	.p2align	4, 0x90
	.type	DecOneForthPix.39,@function
DecOneForthPix.39:                      # @DecOneForthPix.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$140950651, -12(%rbp)   # imm = 0x866BC7B
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB49_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_1
.LBB49_4:                               # %for.end
	cmpl	$140950651, -12(%rbp)   # imm = 0x866BC7B
	jne	.LBB49_6
.LBB49_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_5
.Lfunc_end49:
	.size	DecOneForthPix.39, .Lfunc_end49-DecOneForthPix.39
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.40       # -- Begin function DecOneForthPix.40
	.p2align	4, 0x90
	.type	DecOneForthPix.40,@function
DecOneForthPix.40:                      # @DecOneForthPix.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1937015217, -8(%rbp)   # imm = 0x737481B1
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB50_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB50_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_1
.LBB50_4:                               # %for.end
	cmpl	$1937015217, -8(%rbp)   # imm = 0x737481B1
	jne	.LBB50_6
.LBB50_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_5
.Lfunc_end50:
	.size	DecOneForthPix.40, .Lfunc_end50-DecOneForthPix.40
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.41
.LCPI51_0:
	.quad	4636737291354636288     # double 100
.LCPI51_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.41
	.p2align	4, 0x90
	.type	Build_Status_Map.41,@function
Build_Status_Map.41:                    # @Build_Status_Map.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$7270078, -36(%rbp)     # imm = 0x6EEEBE
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB51_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -12(%rbp)
.LBB51_3:                               # %for.cond2
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB51_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB51_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB51_13
.LBB51_6:                               # %if.then
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI51_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB51_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB51_8:                               # %if.end
                                        #   in Loop: Header=BB51_3 Depth=2
	callq	rand
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI51_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB51_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB51_10:                              # %if.end20
                                        #   in Loop: Header=BB51_3 Depth=2
	callq	rand
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI51_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB51_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	$1, -4(%rbp)
.LBB51_12:                              # %if.end29
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB51_13:                              # %if.end30
                                        #   in Loop: Header=BB51_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB51_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB51_18
.LBB51_15:                              # %if.else
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB51_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB51_17:                              # %if.end49
                                        #   in Loop: Header=BB51_3 Depth=2
	jmp	.LBB51_18
.LBB51_18:                              # %if.end50
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_3
.LBB51_20:                              # %for.end
                                        #   in Loop: Header=BB51_1 Depth=1
	jmp	.LBB51_21
.LBB51_21:                              # %for.inc53
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_1
.LBB51_22:                              # %for.end55
	cmpl	$7270078, -36(%rbp)     # imm = 0x6EEEBE
	jne	.LBB51_24
.LBB51_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_23
.Lfunc_end51:
	.size	Build_Status_Map.41, .Lfunc_end51-Build_Status_Map.41
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.42  # -- Begin function Get_Reference_Pixel.42
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.42,@function
Get_Reference_Pixel.42:                 # @Get_Reference_Pixel.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$130416422, -108(%rbp)  # imm = 0x7C5FF26
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB52_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB52_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB52_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB52_5
.LBB52_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB52_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB52_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB52_11
.LBB52_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB52_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB52_10
.LBB52_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB52_10:                              # %cond.end14
.LBB52_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB52_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB52_14
.LBB52_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB52_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB52_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB52_20
.LBB52_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB52_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB52_19
.LBB52_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB52_19:                              # %cond.end29
.LBB52_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_332
.LBB52_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB52_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB52_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB52_25
.LBB52_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB52_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB52_31
.LBB52_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB52_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB52_30
.LBB52_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB52_30:                              # %cond.end52
.LBB52_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB52_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB52_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB52_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB52_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB52_36
.LBB52_35:                              # %cond.false61
                                        #   in Loop: Header=BB52_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB52_36:                              # %cond.end63
                                        #   in Loop: Header=BB52_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB52_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_42
.LBB52_38:                              # %cond.false68
                                        #   in Loop: Header=BB52_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB52_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB52_41
.LBB52_40:                              # %cond.false73
                                        #   in Loop: Header=BB52_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB52_41:                              # %cond.end75
                                        #   in Loop: Header=BB52_32 Depth=1
.LBB52_42:                              # %cond.end77
                                        #   in Loop: Header=BB52_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB52_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_32
.LBB52_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_47
.LBB52_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB52_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB52_53
.LBB52_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_52
.LBB52_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB52_52:                              # %cond.end113
.LBB52_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB52_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB52_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB52_57
.LBB52_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB52_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB52_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB52_63
.LBB52_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB52_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB52_62
.LBB52_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB52_62:                              # %cond.end136
.LBB52_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB52_76
.LBB52_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB52_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB52_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB52_68
.LBB52_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB52_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB52_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB52_74
.LBB52_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB52_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB52_73
.LBB52_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB52_73:                              # %cond.end169
.LBB52_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB52_75:                              # %if.end
	jmp	.LBB52_76
.LBB52_76:                              # %if.end178
	jmp	.LBB52_331
.LBB52_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB52_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB52_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB52_81
.LBB52_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB52_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB52_87
.LBB52_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB52_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB52_86
.LBB52_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB52_86:                              # %cond.end197
.LBB52_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB52_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB52_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB52_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB52_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB52_92
.LBB52_91:                              # %cond.false209
                                        #   in Loop: Header=BB52_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB52_92:                              # %cond.end211
                                        #   in Loop: Header=BB52_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB52_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_98
.LBB52_94:                              # %cond.false216
                                        #   in Loop: Header=BB52_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB52_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB52_97
.LBB52_96:                              # %cond.false221
                                        #   in Loop: Header=BB52_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB52_97:                              # %cond.end223
                                        #   in Loop: Header=BB52_88 Depth=1
.LBB52_98:                              # %cond.end225
                                        #   in Loop: Header=BB52_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB52_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_88
.LBB52_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_103
.LBB52_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB52_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB52_109
.LBB52_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_108
.LBB52_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB52_108:                             # %cond.end266
.LBB52_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB52_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB52_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB52_113
.LBB52_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB52_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB52_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB52_119
.LBB52_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB52_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB52_118
.LBB52_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB52_118:                             # %cond.end287
.LBB52_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB52_132
.LBB52_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB52_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB52_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB52_124
.LBB52_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB52_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB52_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB52_130
.LBB52_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB52_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB52_129
.LBB52_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB52_129:                             # %cond.end320
.LBB52_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB52_131:                             # %if.end331
	jmp	.LBB52_132
.LBB52_132:                             # %if.end332
	jmp	.LBB52_330
.LBB52_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB52_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB52_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB52_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB52_139
.LBB52_138:                             # %cond.false345
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB52_139:                             # %cond.end347
                                        #   in Loop: Header=BB52_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB52_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_145
.LBB52_141:                             # %cond.false352
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB52_144
.LBB52_143:                             # %cond.false357
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB52_144:                             # %cond.end359
                                        #   in Loop: Header=BB52_135 Depth=1
.LBB52_145:                             # %cond.end361
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB52_146:                             # %for.cond363
                                        #   Parent Loop BB52_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB52_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB52_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB52_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB52_150
.LBB52_149:                             # %cond.false371
                                        #   in Loop: Header=BB52_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB52_150:                             # %cond.end373
                                        #   in Loop: Header=BB52_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB52_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB52_156
.LBB52_152:                             # %cond.false378
                                        #   in Loop: Header=BB52_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB52_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB52_155
.LBB52_154:                             # %cond.false383
                                        #   in Loop: Header=BB52_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB52_155:                             # %cond.end385
                                        #   in Loop: Header=BB52_146 Depth=2
.LBB52_156:                             # %cond.end387
                                        #   in Loop: Header=BB52_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB52_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_146
.LBB52_158:                             # %for.end401
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_135
.LBB52_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB52_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB52_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB52_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB52_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_161
.LBB52_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_167
.LBB52_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB52_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB52_173
.LBB52_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_172
.LBB52_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB52_172:                             # %cond.end449
.LBB52_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB52_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB52_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_177
.LBB52_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB52_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB52_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB52_183
.LBB52_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB52_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_182
.LBB52_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB52_182:                             # %cond.end486
.LBB52_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB52_196
.LBB52_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB52_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB52_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_188
.LBB52_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB52_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB52_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB52_194
.LBB52_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB52_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_193
.LBB52_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB52_193:                             # %cond.end526
.LBB52_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB52_195:                             # %if.end532
	jmp	.LBB52_196
.LBB52_196:                             # %if.end533
	jmp	.LBB52_329
.LBB52_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB52_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB52_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB52_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB52_203
.LBB52_202:                             # %cond.false546
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB52_203:                             # %cond.end548
                                        #   in Loop: Header=BB52_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB52_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_209
.LBB52_205:                             # %cond.false553
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB52_208
.LBB52_207:                             # %cond.false558
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB52_208:                             # %cond.end560
                                        #   in Loop: Header=BB52_199 Depth=1
.LBB52_209:                             # %cond.end562
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB52_210:                             # %for.cond564
                                        #   Parent Loop BB52_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB52_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB52_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB52_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB52_214
.LBB52_213:                             # %cond.false572
                                        #   in Loop: Header=BB52_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB52_214:                             # %cond.end574
                                        #   in Loop: Header=BB52_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB52_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB52_220
.LBB52_216:                             # %cond.false579
                                        #   in Loop: Header=BB52_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB52_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB52_219
.LBB52_218:                             # %cond.false584
                                        #   in Loop: Header=BB52_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB52_219:                             # %cond.end586
                                        #   in Loop: Header=BB52_210 Depth=2
.LBB52_220:                             # %cond.end588
                                        #   in Loop: Header=BB52_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB52_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_210
.LBB52_222:                             # %for.end602
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_199
.LBB52_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB52_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB52_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB52_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB52_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_225
.LBB52_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_231
.LBB52_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB52_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB52_237
.LBB52_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_236
.LBB52_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB52_236:                             # %cond.end650
.LBB52_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB52_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB52_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_241
.LBB52_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB52_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB52_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB52_247
.LBB52_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB52_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_246
.LBB52_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB52_246:                             # %cond.end687
.LBB52_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB52_258
.LBB52_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB52_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_251
.LBB52_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB52_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB52_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB52_257
.LBB52_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB52_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_256
.LBB52_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB52_256:                             # %cond.end724
.LBB52_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB52_258:                             # %if.end730
	jmp	.LBB52_328
.LBB52_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB52_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB52_262
.LBB52_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB52_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB52_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB52_265
.LBB52_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB52_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB52_271
.LBB52_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB52_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB52_270
.LBB52_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB52_270:                             # %cond.end753
.LBB52_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB52_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB52_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB52_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB52_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB52_276
.LBB52_275:                             # %cond.false765
                                        #   in Loop: Header=BB52_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB52_276:                             # %cond.end767
                                        #   in Loop: Header=BB52_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB52_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_282
.LBB52_278:                             # %cond.false772
                                        #   in Loop: Header=BB52_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB52_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB52_281
.LBB52_280:                             # %cond.false777
                                        #   in Loop: Header=BB52_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB52_281:                             # %cond.end779
                                        #   in Loop: Header=BB52_272 Depth=1
.LBB52_282:                             # %cond.end781
                                        #   in Loop: Header=BB52_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB52_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_272
.LBB52_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_287
.LBB52_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB52_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB52_293
.LBB52_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_292
.LBB52_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB52_292:                             # %cond.end822
.LBB52_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB52_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB52_296
.LBB52_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB52_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB52_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB52_299
.LBB52_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB52_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB52_305
.LBB52_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB52_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB52_304
.LBB52_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB52_304:                             # %cond.end847
.LBB52_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB52_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB52_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB52_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB52_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB52_310
.LBB52_309:                             # %cond.false859
                                        #   in Loop: Header=BB52_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB52_310:                             # %cond.end861
                                        #   in Loop: Header=BB52_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB52_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_316
.LBB52_312:                             # %cond.false866
                                        #   in Loop: Header=BB52_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB52_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB52_315
.LBB52_314:                             # %cond.false871
                                        #   in Loop: Header=BB52_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB52_315:                             # %cond.end873
                                        #   in Loop: Header=BB52_306 Depth=1
.LBB52_316:                             # %cond.end875
                                        #   in Loop: Header=BB52_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB52_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_306
.LBB52_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_321
.LBB52_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB52_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB52_327
.LBB52_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_326
.LBB52_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB52_326:                             # %cond.end916
.LBB52_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB52_328:                             # %if.end922
	jmp	.LBB52_329
.LBB52_329:                             # %if.end923
	jmp	.LBB52_330
.LBB52_330:                             # %if.end924
	jmp	.LBB52_331
.LBB52_331:                             # %if.end925
	jmp	.LBB52_332
.LBB52_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$130416422, -108(%rbp)  # imm = 0x7C5FF26
	jne	.LBB52_334
.LBB52_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_333
.Lfunc_end52:
	.size	Get_Reference_Pixel.42, .Lfunc_end52-Get_Reference_Pixel.42
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.43    # -- Begin function Error_Concealment.43
	.p2align	4, 0x90
	.type	Error_Concealment.43,@function
Error_Concealment.43:                   # @Error_Concealment.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1269053950, -16(%rbp)  # imm = 0x4BA439FE
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB53_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB53_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_3:                               # %for.cond2
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB53_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB53_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB53_6:                               # %if.end
                                        #   in Loop: Header=BB53_3 Depth=2
	jmp	.LBB53_7
.LBB53_7:                               # %for.inc
                                        #   in Loop: Header=BB53_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_3
.LBB53_8:                               # %for.end
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_9
.LBB53_9:                               # %for.inc7
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_1
.LBB53_10:                              # %for.end9
	cmpl	$1269053950, -16(%rbp)  # imm = 0x4BA439FE
	jne	.LBB53_12
.LBB53_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_11
.Lfunc_end53:
	.size	Error_Concealment.43, .Lfunc_end53-Error_Concealment.43
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.44  # -- Begin function Get_Reference_Block.44
	.p2align	4, 0x90
	.type	Get_Reference_Block.44,@function
Get_Reference_Block.44:                 # @Get_Reference_Block.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1852348267, -28(%rbp)  # imm = 0x6E68976B
	movq	%rdi, -48(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -56(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB54_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB54_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -8(%rbp)
.LBB54_3:                               # %for.cond5
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB54_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-24(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_3
.LBB54_6:                               # %for.end
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_7
.LBB54_7:                               # %for.inc14
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_1
.LBB54_8:                               # %for.end16
	cmpl	$1852348267, -28(%rbp)  # imm = 0x6E68976B
	jne	.LBB54_10
.LBB54_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_9
.Lfunc_end54:
	.size	Get_Reference_Block.44, .Lfunc_end54-Get_Reference_Block.44
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.45    # -- Begin function Error_Concealment.45
	.p2align	4, 0x90
	.type	Error_Concealment.45,@function
Error_Concealment.45:                   # @Error_Concealment.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1151028960, -12(%rbp)  # imm = 0x449B4EE0
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB55_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -4(%rbp)
.LBB55_3:                               # %for.cond2
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB55_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB55_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB55_6:                               # %if.end
                                        #   in Loop: Header=BB55_3 Depth=2
	jmp	.LBB55_7
.LBB55_7:                               # %for.inc
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_3
.LBB55_8:                               # %for.end
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_9
.LBB55_9:                               # %for.inc7
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_1
.LBB55_10:                              # %for.end9
	cmpl	$1151028960, -12(%rbp)  # imm = 0x449B4EE0
	jne	.LBB55_12
.LBB55_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_11
.Lfunc_end55:
	.size	Error_Concealment.45, .Lfunc_end55-Error_Concealment.45
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.46  # -- Begin function Get_Reference_Pixel.46
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.46,@function
Get_Reference_Pixel.46:                 # @Get_Reference_Pixel.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$417805835, -104(%rbp)  # imm = 0x18E7360B
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB56_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB56_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB56_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB56_5
.LBB56_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB56_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB56_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB56_11
.LBB56_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB56_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB56_10
.LBB56_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB56_10:                              # %cond.end14
.LBB56_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB56_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB56_14
.LBB56_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB56_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB56_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB56_20
.LBB56_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB56_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB56_19
.LBB56_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB56_19:                              # %cond.end29
.LBB56_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_332
.LBB56_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB56_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB56_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB56_25
.LBB56_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB56_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB56_31
.LBB56_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB56_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB56_30
.LBB56_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB56_30:                              # %cond.end52
.LBB56_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB56_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB56_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_36
.LBB56_35:                              # %cond.false61
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_36:                              # %cond.end63
                                        #   in Loop: Header=BB56_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB56_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_42
.LBB56_38:                              # %cond.false68
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_41
.LBB56_40:                              # %cond.false73
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_41:                              # %cond.end75
                                        #   in Loop: Header=BB56_32 Depth=1
.LBB56_42:                              # %cond.end77
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_32
.LBB56_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_47
.LBB56_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB56_53
.LBB56_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_52
.LBB56_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_52:                              # %cond.end113
.LBB56_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB56_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB56_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB56_57
.LBB56_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB56_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB56_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB56_63
.LBB56_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB56_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB56_62
.LBB56_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB56_62:                              # %cond.end136
.LBB56_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB56_76
.LBB56_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB56_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB56_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB56_68
.LBB56_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB56_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB56_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB56_74
.LBB56_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB56_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB56_73
.LBB56_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB56_73:                              # %cond.end169
.LBB56_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB56_75:                              # %if.end
	jmp	.LBB56_76
.LBB56_76:                              # %if.end178
	jmp	.LBB56_331
.LBB56_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB56_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB56_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB56_81
.LBB56_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB56_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB56_87
.LBB56_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB56_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB56_86
.LBB56_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB56_86:                              # %cond.end197
.LBB56_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB56_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB56_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_92
.LBB56_91:                              # %cond.false209
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_92:                              # %cond.end211
                                        #   in Loop: Header=BB56_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB56_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_98
.LBB56_94:                              # %cond.false216
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_97
.LBB56_96:                              # %cond.false221
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_97:                              # %cond.end223
                                        #   in Loop: Header=BB56_88 Depth=1
.LBB56_98:                              # %cond.end225
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_88
.LBB56_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_103
.LBB56_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB56_109
.LBB56_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_108
.LBB56_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_108:                             # %cond.end266
.LBB56_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB56_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB56_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB56_113
.LBB56_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB56_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB56_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB56_119
.LBB56_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB56_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB56_118
.LBB56_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB56_118:                             # %cond.end287
.LBB56_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB56_132
.LBB56_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB56_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB56_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB56_124
.LBB56_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB56_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB56_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB56_130
.LBB56_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB56_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB56_129
.LBB56_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB56_129:                             # %cond.end320
.LBB56_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB56_131:                             # %if.end331
	jmp	.LBB56_132
.LBB56_132:                             # %if.end332
	jmp	.LBB56_330
.LBB56_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB56_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB56_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB56_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_139
.LBB56_138:                             # %cond.false345
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_139:                             # %cond.end347
                                        #   in Loop: Header=BB56_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB56_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_145
.LBB56_141:                             # %cond.false352
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_144
.LBB56_143:                             # %cond.false357
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_144:                             # %cond.end359
                                        #   in Loop: Header=BB56_135 Depth=1
.LBB56_145:                             # %cond.end361
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB56_146:                             # %for.cond363
                                        #   Parent Loop BB56_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB56_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB56_150
.LBB56_149:                             # %cond.false371
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_150:                             # %cond.end373
                                        #   in Loop: Header=BB56_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB56_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB56_156
.LBB56_152:                             # %cond.false378
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB56_155
.LBB56_154:                             # %cond.false383
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_155:                             # %cond.end385
                                        #   in Loop: Header=BB56_146 Depth=2
.LBB56_156:                             # %cond.end387
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_146
.LBB56_158:                             # %for.end401
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_135
.LBB56_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB56_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB56_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB56_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB56_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_161
.LBB56_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_167
.LBB56_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB56_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB56_173
.LBB56_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_172
.LBB56_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB56_172:                             # %cond.end449
.LBB56_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB56_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_177
.LBB56_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB56_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB56_183
.LBB56_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_182
.LBB56_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_182:                             # %cond.end486
.LBB56_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB56_196
.LBB56_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB56_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_188
.LBB56_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB56_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB56_194
.LBB56_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_193
.LBB56_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_193:                             # %cond.end526
.LBB56_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB56_195:                             # %if.end532
	jmp	.LBB56_196
.LBB56_196:                             # %if.end533
	jmp	.LBB56_329
.LBB56_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB56_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB56_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB56_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_203
.LBB56_202:                             # %cond.false546
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_203:                             # %cond.end548
                                        #   in Loop: Header=BB56_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB56_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_209
.LBB56_205:                             # %cond.false553
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_208
.LBB56_207:                             # %cond.false558
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_208:                             # %cond.end560
                                        #   in Loop: Header=BB56_199 Depth=1
.LBB56_209:                             # %cond.end562
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB56_210:                             # %for.cond564
                                        #   Parent Loop BB56_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB56_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB56_214
.LBB56_213:                             # %cond.false572
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_214:                             # %cond.end574
                                        #   in Loop: Header=BB56_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB56_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB56_220
.LBB56_216:                             # %cond.false579
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB56_219
.LBB56_218:                             # %cond.false584
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_219:                             # %cond.end586
                                        #   in Loop: Header=BB56_210 Depth=2
.LBB56_220:                             # %cond.end588
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_210
.LBB56_222:                             # %for.end602
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_199
.LBB56_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB56_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB56_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB56_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB56_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_225
.LBB56_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_231
.LBB56_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB56_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB56_237
.LBB56_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_236
.LBB56_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB56_236:                             # %cond.end650
.LBB56_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB56_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_241
.LBB56_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB56_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB56_247
.LBB56_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_246
.LBB56_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_246:                             # %cond.end687
.LBB56_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB56_258
.LBB56_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_251
.LBB56_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB56_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB56_257
.LBB56_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_256
.LBB56_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_256:                             # %cond.end724
.LBB56_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB56_258:                             # %if.end730
	jmp	.LBB56_328
.LBB56_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB56_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB56_262
.LBB56_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB56_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB56_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB56_265
.LBB56_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB56_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB56_271
.LBB56_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB56_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB56_270
.LBB56_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB56_270:                             # %cond.end753
.LBB56_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB56_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB56_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_276
.LBB56_275:                             # %cond.false765
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_276:                             # %cond.end767
                                        #   in Loop: Header=BB56_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB56_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_282
.LBB56_278:                             # %cond.false772
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_281
.LBB56_280:                             # %cond.false777
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_281:                             # %cond.end779
                                        #   in Loop: Header=BB56_272 Depth=1
.LBB56_282:                             # %cond.end781
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_272
.LBB56_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_287
.LBB56_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB56_293
.LBB56_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_292
.LBB56_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_292:                             # %cond.end822
.LBB56_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB56_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB56_296
.LBB56_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB56_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB56_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB56_299
.LBB56_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB56_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB56_305
.LBB56_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB56_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB56_304
.LBB56_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB56_304:                             # %cond.end847
.LBB56_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB56_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB56_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_310
.LBB56_309:                             # %cond.false859
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_310:                             # %cond.end861
                                        #   in Loop: Header=BB56_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB56_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_316
.LBB56_312:                             # %cond.false866
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_315
.LBB56_314:                             # %cond.false871
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_315:                             # %cond.end873
                                        #   in Loop: Header=BB56_306 Depth=1
.LBB56_316:                             # %cond.end875
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_306
.LBB56_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_321
.LBB56_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB56_327
.LBB56_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_326
.LBB56_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_326:                             # %cond.end916
.LBB56_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB56_328:                             # %if.end922
	jmp	.LBB56_329
.LBB56_329:                             # %if.end923
	jmp	.LBB56_330
.LBB56_330:                             # %if.end924
	jmp	.LBB56_331
.LBB56_331:                             # %if.end925
	jmp	.LBB56_332
.LBB56_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$417805835, -104(%rbp)  # imm = 0x18E7360B
	jne	.LBB56_334
.LBB56_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_333
.Lfunc_end56:
	.size	Get_Reference_Pixel.46, .Lfunc_end56-Get_Reference_Pixel.46
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.47
.LCPI57_0:
	.quad	4636737291354636288     # double 100
.LCPI57_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.47
	.p2align	4, 0x90
	.type	Build_Status_Map.47,@function
Build_Status_Map.47:                    # @Build_Status_Map.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1288623221, -44(%rbp)  # imm = 0x4CCED475
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB57_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB57_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	$0, -8(%rbp)
.LBB57_3:                               # %for.cond2
                                        #   Parent Loop BB57_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB57_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB57_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB57_13
.LBB57_6:                               # %if.then
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI57_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB57_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB57_8:                               # %if.end
                                        #   in Loop: Header=BB57_3 Depth=2
	callq	rand
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI57_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB57_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB57_10:                              # %if.end20
                                        #   in Loop: Header=BB57_3 Depth=2
	callq	rand
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI57_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB57_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	$1, -4(%rbp)
.LBB57_12:                              # %if.end29
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB57_13:                              # %if.end30
                                        #   in Loop: Header=BB57_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB57_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB57_18
.LBB57_15:                              # %if.else
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB57_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB57_17:                              # %if.end49
                                        #   in Loop: Header=BB57_3 Depth=2
	jmp	.LBB57_18
.LBB57_18:                              # %if.end50
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_3
.LBB57_20:                              # %for.end
                                        #   in Loop: Header=BB57_1 Depth=1
	jmp	.LBB57_21
.LBB57_21:                              # %for.inc53
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_1
.LBB57_22:                              # %for.end55
	cmpl	$1288623221, -44(%rbp)  # imm = 0x4CCED475
	jne	.LBB57_24
.LBB57_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_23
.Lfunc_end57:
	.size	Build_Status_Map.47, .Lfunc_end57-Build_Status_Map.47
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.48        # -- Begin function Conceal_Error.48
	.p2align	4, 0x90
	.type	Conceal_Error.48,@function
Conceal_Error.48:                       # @Conceal_Error.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1142229629, -68(%rbp)  # imm = 0x44150A7D
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB58_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB58_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB58_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB58_4:                               # %land.end
.LBB58_5:                               # %lor.end
.LBB58_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB58_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB58_9
.LBB58_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB58_14
.LBB58_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB58_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB58_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB58_12:                              # %land.end51
.LBB58_13:                              # %lor.end53
.LBB58_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB58_180
# %bb.15:                               # %land.end54
	movq	.LJTI58_0(,%rax,8), %rax
	jmpq	*%rax
.LBB58_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB58_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB58_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB58_18 Depth=1
	movl	$0, -4(%rbp)
.LBB58_20:                              # %for.cond68
                                        #   Parent Loop BB58_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB58_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB58_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_20
.LBB58_23:                              # %for.end
                                        #   in Loop: Header=BB58_18 Depth=1
	jmp	.LBB58_24
.LBB58_24:                              # %for.inc85
                                        #   in Loop: Header=BB58_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_18
.LBB58_25:                              # %for.end87
	jmp	.LBB58_35
.LBB58_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB58_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB58_27 Depth=1
	movl	$0, -4(%rbp)
.LBB58_29:                              # %for.cond92
                                        #   Parent Loop BB58_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB58_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB58_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_29
.LBB58_32:                              # %for.end104
                                        #   in Loop: Header=BB58_27 Depth=1
	jmp	.LBB58_33
.LBB58_33:                              # %for.inc105
                                        #   in Loop: Header=BB58_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_27
.LBB58_34:                              # %for.end107
	jmp	.LBB58_35
.LBB58_35:                              # %if.end
	jmp	.LBB58_180
.LBB58_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB58_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_39 Depth 2
                                        #       Child Loop BB58_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB58_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB58_37 Depth=1
	movl	$0, -16(%rbp)
.LBB58_39:                              # %for.cond113
                                        #   Parent Loop BB58_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB58_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB58_39 Depth=2
	movl	$0, -4(%rbp)
.LBB58_41:                              # %for.cond117
                                        #   Parent Loop BB58_37 Depth=1
                                        #     Parent Loop BB58_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB58_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB58_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB58_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_41
.LBB58_44:                              # %for.end141
                                        #   in Loop: Header=BB58_39 Depth=2
	jmp	.LBB58_45
.LBB58_45:                              # %for.inc142
                                        #   in Loop: Header=BB58_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_39
.LBB58_46:                              # %for.end144
                                        #   in Loop: Header=BB58_37 Depth=1
	jmp	.LBB58_47
.LBB58_47:                              # %for.inc145
                                        #   in Loop: Header=BB58_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_37
.LBB58_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB58_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB58_49 Depth=1
	movl	$0, -8(%rbp)
.LBB58_51:                              # %for.cond152
                                        #   Parent Loop BB58_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB58_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB58_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_51
.LBB58_54:                              # %for.end162
                                        #   in Loop: Header=BB58_49 Depth=1
	jmp	.LBB58_55
.LBB58_55:                              # %for.inc163
                                        #   in Loop: Header=BB58_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_49
.LBB58_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB58_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB58_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB58_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB58_59 Depth=1
	movl	$0, -4(%rbp)
.LBB58_61:                              # %for.cond175
                                        #   Parent Loop BB58_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB58_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB58_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_61
.LBB58_64:                              # %for.end195
                                        #   in Loop: Header=BB58_59 Depth=1
	jmp	.LBB58_65
.LBB58_65:                              # %for.inc196
                                        #   in Loop: Header=BB58_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_59
.LBB58_66:                              # %for.end198
	jmp	.LBB58_95
.LBB58_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB58_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB58_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_71 Depth 2
                                        #       Child Loop BB58_73 Depth 3
                                        #         Child Loop BB58_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB58_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB58_71:                              # %for.cond210
                                        #   Parent Loop BB58_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_73 Depth 3
                                        #         Child Loop BB58_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB58_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB58_73:                              # %for.cond236
                                        #   Parent Loop BB58_69 Depth=1
                                        #     Parent Loop BB58_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB58_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB58_73 Depth=3
	movl	$0, -4(%rbp)
.LBB58_75:                              # %for.cond240
                                        #   Parent Loop BB58_69 Depth=1
                                        #     Parent Loop BB58_71 Depth=2
                                        #       Parent Loop BB58_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB58_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB58_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB58_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_75
.LBB58_78:                              # %for.end259
                                        #   in Loop: Header=BB58_73 Depth=3
	jmp	.LBB58_79
.LBB58_79:                              # %for.inc260
                                        #   in Loop: Header=BB58_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_73
.LBB58_80:                              # %for.end262
                                        #   in Loop: Header=BB58_71 Depth=2
	jmp	.LBB58_81
.LBB58_81:                              # %for.inc263
                                        #   in Loop: Header=BB58_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_71
.LBB58_82:                              # %for.end265
                                        #   in Loop: Header=BB58_69 Depth=1
	jmp	.LBB58_83
.LBB58_83:                              # %for.inc266
                                        #   in Loop: Header=BB58_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_69
.LBB58_84:                              # %for.end268
	jmp	.LBB58_94
.LBB58_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB58_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB58_86 Depth=1
	movl	$0, -4(%rbp)
.LBB58_88:                              # %for.cond274
                                        #   Parent Loop BB58_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB58_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB58_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_88
.LBB58_91:                              # %for.end294
                                        #   in Loop: Header=BB58_86 Depth=1
	jmp	.LBB58_92
.LBB58_92:                              # %for.inc295
                                        #   in Loop: Header=BB58_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_86
.LBB58_93:                              # %for.end297
	jmp	.LBB58_94
.LBB58_94:                              # %if.end298
	jmp	.LBB58_95
.LBB58_95:                              # %if.end299
	jmp	.LBB58_105
.LBB58_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB58_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB58_97 Depth=1
	movl	$0, -4(%rbp)
.LBB58_99:                              # %for.cond305
                                        #   Parent Loop BB58_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB58_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB58_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_99
.LBB58_102:                             # %for.end317
                                        #   in Loop: Header=BB58_97 Depth=1
	jmp	.LBB58_103
.LBB58_103:                             # %for.inc318
                                        #   in Loop: Header=BB58_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_97
.LBB58_104:                             # %for.end320
	jmp	.LBB58_105
.LBB58_105:                             # %if.end321
	jmp	.LBB58_180
.LBB58_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB58_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB58_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_110 Depth 2
                                        #       Child Loop BB58_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB58_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB58_108 Depth=1
	movl	$0, -16(%rbp)
.LBB58_110:                             # %for.cond331
                                        #   Parent Loop BB58_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB58_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB58_110 Depth=2
	movl	$0, -4(%rbp)
.LBB58_112:                             # %for.cond335
                                        #   Parent Loop BB58_108 Depth=1
                                        #     Parent Loop BB58_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB58_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB58_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB58_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_112
.LBB58_115:                             # %for.end359
                                        #   in Loop: Header=BB58_110 Depth=2
	jmp	.LBB58_116
.LBB58_116:                             # %for.inc360
                                        #   in Loop: Header=BB58_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_110
.LBB58_117:                             # %for.end362
                                        #   in Loop: Header=BB58_108 Depth=1
	jmp	.LBB58_118
.LBB58_118:                             # %for.inc363
                                        #   in Loop: Header=BB58_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_108
.LBB58_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB58_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB58_120 Depth=1
	movl	$0, -8(%rbp)
.LBB58_122:                             # %for.cond370
                                        #   Parent Loop BB58_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB58_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB58_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_122
.LBB58_125:                             # %for.end380
                                        #   in Loop: Header=BB58_120 Depth=1
	jmp	.LBB58_126
.LBB58_126:                             # %for.inc381
                                        #   in Loop: Header=BB58_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_120
.LBB58_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB58_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB58_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB58_129 Depth=1
	movl	$0, -4(%rbp)
.LBB58_131:                             # %for.cond390
                                        #   Parent Loop BB58_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB58_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB58_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_131
.LBB58_134:                             # %for.end410
                                        #   in Loop: Header=BB58_129 Depth=1
	jmp	.LBB58_135
.LBB58_135:                             # %for.inc411
                                        #   in Loop: Header=BB58_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_129
.LBB58_136:                             # %for.end413
	jmp	.LBB58_156
.LBB58_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB58_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB58_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_141 Depth 2
                                        #       Child Loop BB58_143 Depth 3
                                        #         Child Loop BB58_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB58_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB58_141:                             # %for.cond425
                                        #   Parent Loop BB58_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_143 Depth 3
                                        #         Child Loop BB58_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB58_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB58_143:                             # %for.cond452
                                        #   Parent Loop BB58_139 Depth=1
                                        #     Parent Loop BB58_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB58_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB58_143 Depth=3
	movl	$0, -4(%rbp)
.LBB58_145:                             # %for.cond456
                                        #   Parent Loop BB58_139 Depth=1
                                        #     Parent Loop BB58_141 Depth=2
                                        #       Parent Loop BB58_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB58_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB58_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB58_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_145
.LBB58_148:                             # %for.end475
                                        #   in Loop: Header=BB58_143 Depth=3
	jmp	.LBB58_149
.LBB58_149:                             # %for.inc476
                                        #   in Loop: Header=BB58_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_143
.LBB58_150:                             # %for.end478
                                        #   in Loop: Header=BB58_141 Depth=2
	jmp	.LBB58_151
.LBB58_151:                             # %for.inc479
                                        #   in Loop: Header=BB58_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_141
.LBB58_152:                             # %for.end481
                                        #   in Loop: Header=BB58_139 Depth=1
	jmp	.LBB58_153
.LBB58_153:                             # %for.inc482
                                        #   in Loop: Header=BB58_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_139
.LBB58_154:                             # %for.end484
	jmp	.LBB58_155
.LBB58_155:                             # %if.end485
	jmp	.LBB58_156
.LBB58_156:                             # %if.end486
	jmp	.LBB58_157
.LBB58_157:                             # %if.end487
	jmp	.LBB58_180
.LBB58_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB58_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB58_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB58_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB58_161 Depth=1
	movl	$0, -4(%rbp)
.LBB58_163:                             # %for.cond499
                                        #   Parent Loop BB58_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB58_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB58_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_163
.LBB58_166:                             # %for.end519
                                        #   in Loop: Header=BB58_161 Depth=1
	jmp	.LBB58_167
.LBB58_167:                             # %for.inc520
                                        #   in Loop: Header=BB58_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_161
.LBB58_168:                             # %for.end522
	jmp	.LBB58_169
.LBB58_169:                             # %if.end523
	jmp	.LBB58_179
.LBB58_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB58_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB58_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB58_171 Depth=1
	movl	$0, -4(%rbp)
.LBB58_173:                             # %for.cond529
                                        #   Parent Loop BB58_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB58_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB58_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB58_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_173
.LBB58_176:                             # %for.end541
                                        #   in Loop: Header=BB58_171 Depth=1
	jmp	.LBB58_177
.LBB58_177:                             # %for.inc542
                                        #   in Loop: Header=BB58_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_171
.LBB58_178:                             # %for.end544
	jmp	.LBB58_179
.LBB58_179:                             # %if.end545
	jmp	.LBB58_180
.LBB58_180:                             # %sw.epilog
	cmpl	$1142229629, -68(%rbp)  # imm = 0x44150A7D
	jne	.LBB58_182
.LBB58_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_181
.Lfunc_end58:
	.size	Conceal_Error.48, .Lfunc_end58-Conceal_Error.48
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI58_0:
	.quad	.LBB58_16
	.quad	.LBB58_158
	.quad	.LBB58_106
	.quad	.LBB58_180
	.quad	.LBB58_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.49 # -- Begin function compute_residue_b8block.49
	.p2align	4, 0x90
	.type	compute_residue_b8block.49,@function
compute_residue_b8block.49:             # @compute_residue_b8block.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1672636381, -36(%rbp)  # imm = 0x63B267DD
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB59_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB59_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB59_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_4:                               # %for.cond4
                                        #   Parent Loop BB59_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB59_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB59_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB59_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_4
.LBB59_7:                               # %for.end
                                        #   in Loop: Header=BB59_2 Depth=1
	jmp	.LBB59_8
.LBB59_8:                               # %for.inc22
                                        #   in Loop: Header=BB59_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_2
.LBB59_9:                               # %for.end24
	jmp	.LBB59_19
.LBB59_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB59_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB59_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_13:                              # %for.cond29
                                        #   Parent Loop BB59_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB59_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB59_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB59_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_13
.LBB59_16:                              # %for.end56
                                        #   in Loop: Header=BB59_11 Depth=1
	jmp	.LBB59_17
.LBB59_17:                              # %for.inc57
                                        #   in Loop: Header=BB59_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_11
.LBB59_18:                              # %for.end59
	jmp	.LBB59_19
.LBB59_19:                              # %if.end
	cmpl	$1672636381, -36(%rbp)  # imm = 0x63B267DD
	jne	.LBB59_21
.LBB59_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_20
.Lfunc_end59:
	.size	compute_residue_b8block.49, .Lfunc_end59-compute_residue_b8block.49
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.50 # -- Begin function compute_residue_b8block.50
	.p2align	4, 0x90
	.type	compute_residue_b8block.50,@function
compute_residue_b8block.50:             # @compute_residue_b8block.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$771020585, -36(%rbp)   # imm = 0x2DF4D729
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB60_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB60_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB60_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_4:                               # %for.cond4
                                        #   Parent Loop BB60_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB60_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB60_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB60_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_4
.LBB60_7:                               # %for.end
                                        #   in Loop: Header=BB60_2 Depth=1
	jmp	.LBB60_8
.LBB60_8:                               # %for.inc22
                                        #   in Loop: Header=BB60_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_2
.LBB60_9:                               # %for.end24
	jmp	.LBB60_19
.LBB60_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB60_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB60_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_13:                              # %for.cond29
                                        #   Parent Loop BB60_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB60_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB60_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB60_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_13
.LBB60_16:                              # %for.end56
                                        #   in Loop: Header=BB60_11 Depth=1
	jmp	.LBB60_17
.LBB60_17:                              # %for.inc57
                                        #   in Loop: Header=BB60_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_11
.LBB60_18:                              # %for.end59
	jmp	.LBB60_19
.LBB60_19:                              # %if.end
	cmpl	$771020585, -36(%rbp)   # imm = 0x2DF4D729
	jne	.LBB60_21
.LBB60_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_20
.Lfunc_end60:
	.size	compute_residue_b8block.50, .Lfunc_end60-compute_residue_b8block.50
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.51   # -- Begin function decode_one_b8block.51
	.p2align	4, 0x90
	.type	decode_one_b8block.51,@function
decode_one_b8block.51:                  # @decode_one_b8block.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1740996397, -84(%rbp)  # imm = 0x67C57F2D
	movl	%edi, -44(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB61_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB61_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB61_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB61_4:                               # %for.cond9
                                        #   Parent Loop BB61_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB61_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB61_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB61_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_4
.LBB61_7:                               # %for.end
                                        #   in Loop: Header=BB61_2 Depth=1
	jmp	.LBB61_8
.LBB61_8:                               # %for.inc26
                                        #   in Loop: Header=BB61_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_2
.LBB61_9:                               # %for.end28
	jmp	.LBB61_96
.LBB61_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB61_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB61_31
.LBB61_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB61_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB61_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB61_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB61_17:                              # %for.cond40
                                        #   Parent Loop BB61_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB61_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB61_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB61_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_17
.LBB61_20:                              # %for.end49
                                        #   in Loop: Header=BB61_15 Depth=1
	jmp	.LBB61_21
.LBB61_21:                              # %for.inc50
                                        #   in Loop: Header=BB61_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_15
.LBB61_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB61_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB61_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB61_25:                              # %for.cond56
                                        #   Parent Loop BB61_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB61_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB61_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB61_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_25
.LBB61_28:                              # %for.end71
                                        #   in Loop: Header=BB61_23 Depth=1
	jmp	.LBB61_29
.LBB61_29:                              # %for.inc72
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_23
.LBB61_30:                              # %for.end74
	jmp	.LBB61_60
.LBB61_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB61_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB61_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB61_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB61_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB61_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB61_36:                              # %for.cond83
                                        #   Parent Loop BB61_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB61_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB61_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB61_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_36
.LBB61_39:                              # %for.end120
                                        #   in Loop: Header=BB61_34 Depth=1
	jmp	.LBB61_40
.LBB61_40:                              # %for.inc121
                                        #   in Loop: Header=BB61_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_34
.LBB61_41:                              # %for.end123
	jmp	.LBB61_51
.LBB61_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB61_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB61_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB61_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB61_45:                              # %for.cond129
                                        #   Parent Loop BB61_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB61_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB61_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB61_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_45
.LBB61_48:                              # %for.end145
                                        #   in Loop: Header=BB61_43 Depth=1
	jmp	.LBB61_49
.LBB61_49:                              # %for.inc146
                                        #   in Loop: Header=BB61_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_43
.LBB61_50:                              # %for.end148
	jmp	.LBB61_51
.LBB61_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB61_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB61_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB61_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB61_54:                              # %for.cond153
                                        #   Parent Loop BB61_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB61_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB61_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB61_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_54
.LBB61_57:                              # %for.end167
                                        #   in Loop: Header=BB61_52 Depth=1
	jmp	.LBB61_58
.LBB61_58:                              # %for.inc168
                                        #   in Loop: Header=BB61_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_52
.LBB61_59:                              # %for.end170
	jmp	.LBB61_60
.LBB61_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB61_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB61_66
.LBB61_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB61_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB61_86
.LBB61_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB61_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_69 Depth 2
                                        #       Child Loop BB61_74 Depth 3
                                        #         Child Loop BB61_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB61_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB61_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB61_69:                              # %for.cond197
                                        #   Parent Loop BB61_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_74 Depth 3
                                        #         Child Loop BB61_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB61_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB61_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB61_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB61_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB61_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB61_73:                              # %if.end218
                                        #   in Loop: Header=BB61_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB61_74:                              # %for.cond233
                                        #   Parent Loop BB61_67 Depth=1
                                        #     Parent Loop BB61_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB61_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB61_74 Depth=3
	movl	$0, -4(%rbp)
.LBB61_76:                              # %for.cond237
                                        #   Parent Loop BB61_67 Depth=1
                                        #     Parent Loop BB61_69 Depth=2
                                        #       Parent Loop BB61_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB61_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB61_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB61_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_76
.LBB61_79:                              # %for.end269
                                        #   in Loop: Header=BB61_74 Depth=3
	jmp	.LBB61_80
.LBB61_80:                              # %for.inc270
                                        #   in Loop: Header=BB61_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_74
.LBB61_81:                              # %for.end272
                                        #   in Loop: Header=BB61_69 Depth=2
	jmp	.LBB61_82
.LBB61_82:                              # %for.inc273
                                        #   in Loop: Header=BB61_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_69
.LBB61_83:                              # %for.end275
                                        #   in Loop: Header=BB61_67 Depth=1
	jmp	.LBB61_84
.LBB61_84:                              # %for.inc276
                                        #   in Loop: Header=BB61_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_67
.LBB61_85:                              # %for.end278
	jmp	.LBB61_95
.LBB61_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB61_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB61_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB61_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB61_89:                              # %for.cond284
                                        #   Parent Loop BB61_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB61_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB61_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB61_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_89
.LBB61_92:                              # %for.end310
                                        #   in Loop: Header=BB61_87 Depth=1
	jmp	.LBB61_93
.LBB61_93:                              # %for.inc311
                                        #   in Loop: Header=BB61_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_87
.LBB61_94:                              # %for.end313
	jmp	.LBB61_95
.LBB61_95:                              # %if.end314
	jmp	.LBB61_96
.LBB61_96:                              # %if.end315
	cmpl	$1740996397, -84(%rbp)  # imm = 0x67C57F2D
	jne	.LBB61_98
.LBB61_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_97
.Lfunc_end61:
	.size	decode_one_b8block.51, .Lfunc_end61-decode_one_b8block.51
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.52
.LCPI62_0:
	.quad	4636737291354636288     # double 100
.LCPI62_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.52
	.p2align	4, 0x90
	.type	Build_Status_Map.52,@function
Build_Status_Map.52:                    # @Build_Status_Map.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1959641141, -40(%rbp)  # imm = 0x74CDC035
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB62_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -8(%rbp)
.LBB62_3:                               # %for.cond2
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB62_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB62_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB62_13
.LBB62_6:                               # %if.then
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI62_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB62_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB62_8:                               # %if.end
                                        #   in Loop: Header=BB62_3 Depth=2
	callq	rand
	vmovsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI62_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB62_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB62_10:                              # %if.end20
                                        #   in Loop: Header=BB62_3 Depth=2
	callq	rand
	vmovsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI62_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB62_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	$1, -4(%rbp)
.LBB62_12:                              # %if.end29
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB62_13:                              # %if.end30
                                        #   in Loop: Header=BB62_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB62_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB62_18
.LBB62_15:                              # %if.else
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB62_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB62_17:                              # %if.end49
                                        #   in Loop: Header=BB62_3 Depth=2
	jmp	.LBB62_18
.LBB62_18:                              # %if.end50
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_3
.LBB62_20:                              # %for.end
                                        #   in Loop: Header=BB62_1 Depth=1
	jmp	.LBB62_21
.LBB62_21:                              # %for.inc53
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_1
.LBB62_22:                              # %for.end55
	cmpl	$1959641141, -40(%rbp)  # imm = 0x74CDC035
	jne	.LBB62_24
.LBB62_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_23
.Lfunc_end62:
	.size	Build_Status_Map.52, .Lfunc_end62-Build_Status_Map.52
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.53       # -- Begin function DecOneForthPix.53
	.p2align	4, 0x90
	.type	DecOneForthPix.53,@function
DecOneForthPix.53:                      # @DecOneForthPix.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1536052941, -8(%rbp)   # imm = 0x5B8E4ECD
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB63_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_1
.LBB63_4:                               # %for.end
	cmpl	$1536052941, -8(%rbp)   # imm = 0x5B8E4ECD
	jne	.LBB63_6
.LBB63_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_5
.Lfunc_end63:
	.size	DecOneForthPix.53, .Lfunc_end63-DecOneForthPix.53
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.54   # -- Begin function decode_one_b8block.54
	.p2align	4, 0x90
	.type	decode_one_b8block.54,@function
decode_one_b8block.54:                  # @decode_one_b8block.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1134091878, -84(%rbp)  # imm = 0x4398DE66
	movl	%edi, -56(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB64_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB64_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB64_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB64_4:                               # %for.cond9
                                        #   Parent Loop BB64_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB64_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB64_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB64_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_4
.LBB64_7:                               # %for.end
                                        #   in Loop: Header=BB64_2 Depth=1
	jmp	.LBB64_8
.LBB64_8:                               # %for.inc26
                                        #   in Loop: Header=BB64_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_2
.LBB64_9:                               # %for.end28
	jmp	.LBB64_96
.LBB64_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB64_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB64_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB64_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB64_31
.LBB64_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB64_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB64_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB64_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB64_17:                              # %for.cond40
                                        #   Parent Loop BB64_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB64_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB64_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB64_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_17
.LBB64_20:                              # %for.end49
                                        #   in Loop: Header=BB64_15 Depth=1
	jmp	.LBB64_21
.LBB64_21:                              # %for.inc50
                                        #   in Loop: Header=BB64_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_15
.LBB64_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB64_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB64_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB64_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB64_25:                              # %for.cond56
                                        #   Parent Loop BB64_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB64_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB64_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB64_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_25
.LBB64_28:                              # %for.end71
                                        #   in Loop: Header=BB64_23 Depth=1
	jmp	.LBB64_29
.LBB64_29:                              # %for.inc72
                                        #   in Loop: Header=BB64_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_23
.LBB64_30:                              # %for.end74
	jmp	.LBB64_60
.LBB64_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB64_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB64_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB64_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB64_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB64_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB64_36:                              # %for.cond83
                                        #   Parent Loop BB64_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB64_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB64_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB64_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_36
.LBB64_39:                              # %for.end120
                                        #   in Loop: Header=BB64_34 Depth=1
	jmp	.LBB64_40
.LBB64_40:                              # %for.inc121
                                        #   in Loop: Header=BB64_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_34
.LBB64_41:                              # %for.end123
	jmp	.LBB64_51
.LBB64_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB64_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB64_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB64_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB64_45:                              # %for.cond129
                                        #   Parent Loop BB64_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB64_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB64_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB64_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_45
.LBB64_48:                              # %for.end145
                                        #   in Loop: Header=BB64_43 Depth=1
	jmp	.LBB64_49
.LBB64_49:                              # %for.inc146
                                        #   in Loop: Header=BB64_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_43
.LBB64_50:                              # %for.end148
	jmp	.LBB64_51
.LBB64_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB64_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB64_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB64_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB64_54:                              # %for.cond153
                                        #   Parent Loop BB64_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB64_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB64_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB64_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_54
.LBB64_57:                              # %for.end167
                                        #   in Loop: Header=BB64_52 Depth=1
	jmp	.LBB64_58
.LBB64_58:                              # %for.inc168
                                        #   in Loop: Header=BB64_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_52
.LBB64_59:                              # %for.end170
	jmp	.LBB64_60
.LBB64_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB64_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB64_66
.LBB64_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB64_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB64_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB64_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB64_86
.LBB64_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB64_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_69 Depth 2
                                        #       Child Loop BB64_74 Depth 3
                                        #         Child Loop BB64_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB64_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB64_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB64_69:                              # %for.cond197
                                        #   Parent Loop BB64_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_74 Depth 3
                                        #         Child Loop BB64_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB64_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB64_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB64_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB64_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB64_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB64_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB64_73:                              # %if.end218
                                        #   in Loop: Header=BB64_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB64_74:                              # %for.cond233
                                        #   Parent Loop BB64_67 Depth=1
                                        #     Parent Loop BB64_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB64_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB64_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB64_74 Depth=3
	movl	$0, -4(%rbp)
.LBB64_76:                              # %for.cond237
                                        #   Parent Loop BB64_67 Depth=1
                                        #     Parent Loop BB64_69 Depth=2
                                        #       Parent Loop BB64_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB64_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB64_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB64_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_76
.LBB64_79:                              # %for.end269
                                        #   in Loop: Header=BB64_74 Depth=3
	jmp	.LBB64_80
.LBB64_80:                              # %for.inc270
                                        #   in Loop: Header=BB64_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_74
.LBB64_81:                              # %for.end272
                                        #   in Loop: Header=BB64_69 Depth=2
	jmp	.LBB64_82
.LBB64_82:                              # %for.inc273
                                        #   in Loop: Header=BB64_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_69
.LBB64_83:                              # %for.end275
                                        #   in Loop: Header=BB64_67 Depth=1
	jmp	.LBB64_84
.LBB64_84:                              # %for.inc276
                                        #   in Loop: Header=BB64_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_67
.LBB64_85:                              # %for.end278
	jmp	.LBB64_95
.LBB64_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB64_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB64_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB64_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB64_89:                              # %for.cond284
                                        #   Parent Loop BB64_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB64_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB64_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB64_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_89
.LBB64_92:                              # %for.end310
                                        #   in Loop: Header=BB64_87 Depth=1
	jmp	.LBB64_93
.LBB64_93:                              # %for.inc311
                                        #   in Loop: Header=BB64_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_87
.LBB64_94:                              # %for.end313
	jmp	.LBB64_95
.LBB64_95:                              # %if.end314
	jmp	.LBB64_96
.LBB64_96:                              # %if.end315
	cmpl	$1134091878, -84(%rbp)  # imm = 0x4398DE66
	jne	.LBB64_98
.LBB64_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_97
.Lfunc_end64:
	.size	decode_one_b8block.54, .Lfunc_end64-decode_one_b8block.54
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.55  # -- Begin function Get_Reference_Pixel.55
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.55,@function
Get_Reference_Pixel.55:                 # @Get_Reference_Pixel.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1947335465, -100(%rbp) # imm = 0x7411FB29
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB65_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB65_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB65_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB65_5
.LBB65_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB65_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB65_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB65_11
.LBB65_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB65_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB65_10
.LBB65_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB65_10:                              # %cond.end14
.LBB65_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB65_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB65_14
.LBB65_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB65_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB65_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB65_20
.LBB65_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB65_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB65_19
.LBB65_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB65_19:                              # %cond.end29
.LBB65_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_332
.LBB65_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB65_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB65_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB65_25
.LBB65_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB65_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB65_31
.LBB65_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB65_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB65_30
.LBB65_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB65_30:                              # %cond.end52
.LBB65_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB65_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB65_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB65_36
.LBB65_35:                              # %cond.false61
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB65_36:                              # %cond.end63
                                        #   in Loop: Header=BB65_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB65_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_42
.LBB65_38:                              # %cond.false68
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB65_41
.LBB65_40:                              # %cond.false73
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB65_41:                              # %cond.end75
                                        #   in Loop: Header=BB65_32 Depth=1
.LBB65_42:                              # %cond.end77
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_32
.LBB65_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_47
.LBB65_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB65_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB65_53
.LBB65_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_52
.LBB65_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB65_52:                              # %cond.end113
.LBB65_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB65_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB65_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB65_57
.LBB65_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB65_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB65_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB65_63
.LBB65_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB65_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB65_62
.LBB65_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB65_62:                              # %cond.end136
.LBB65_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB65_76
.LBB65_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB65_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB65_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB65_68
.LBB65_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB65_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB65_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB65_74
.LBB65_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB65_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB65_73
.LBB65_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB65_73:                              # %cond.end169
.LBB65_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB65_75:                              # %if.end
	jmp	.LBB65_76
.LBB65_76:                              # %if.end178
	jmp	.LBB65_331
.LBB65_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB65_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB65_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB65_81
.LBB65_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB65_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB65_87
.LBB65_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB65_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB65_86
.LBB65_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB65_86:                              # %cond.end197
.LBB65_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB65_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB65_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB65_92
.LBB65_91:                              # %cond.false209
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB65_92:                              # %cond.end211
                                        #   in Loop: Header=BB65_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB65_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_98
.LBB65_94:                              # %cond.false216
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB65_97
.LBB65_96:                              # %cond.false221
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB65_97:                              # %cond.end223
                                        #   in Loop: Header=BB65_88 Depth=1
.LBB65_98:                              # %cond.end225
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_88
.LBB65_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_103
.LBB65_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB65_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB65_109
.LBB65_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_108
.LBB65_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB65_108:                             # %cond.end266
.LBB65_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB65_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB65_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB65_113
.LBB65_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB65_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB65_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB65_119
.LBB65_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB65_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB65_118
.LBB65_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB65_118:                             # %cond.end287
.LBB65_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB65_132
.LBB65_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB65_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB65_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB65_124
.LBB65_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB65_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB65_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB65_130
.LBB65_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB65_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB65_129
.LBB65_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB65_129:                             # %cond.end320
.LBB65_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB65_131:                             # %if.end331
	jmp	.LBB65_132
.LBB65_132:                             # %if.end332
	jmp	.LBB65_330
.LBB65_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB65_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB65_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB65_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB65_139
.LBB65_138:                             # %cond.false345
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB65_139:                             # %cond.end347
                                        #   in Loop: Header=BB65_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB65_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_145
.LBB65_141:                             # %cond.false352
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB65_144
.LBB65_143:                             # %cond.false357
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB65_144:                             # %cond.end359
                                        #   in Loop: Header=BB65_135 Depth=1
.LBB65_145:                             # %cond.end361
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB65_146:                             # %for.cond363
                                        #   Parent Loop BB65_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB65_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB65_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB65_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB65_150
.LBB65_149:                             # %cond.false371
                                        #   in Loop: Header=BB65_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB65_150:                             # %cond.end373
                                        #   in Loop: Header=BB65_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB65_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_156
.LBB65_152:                             # %cond.false378
                                        #   in Loop: Header=BB65_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB65_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB65_155
.LBB65_154:                             # %cond.false383
                                        #   in Loop: Header=BB65_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB65_155:                             # %cond.end385
                                        #   in Loop: Header=BB65_146 Depth=2
.LBB65_156:                             # %cond.end387
                                        #   in Loop: Header=BB65_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB65_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_146
.LBB65_158:                             # %for.end401
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_135
.LBB65_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB65_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB65_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB65_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB65_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_161
.LBB65_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_167
.LBB65_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB65_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB65_173
.LBB65_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_172
.LBB65_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB65_172:                             # %cond.end449
.LBB65_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB65_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB65_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_177
.LBB65_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB65_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB65_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB65_183
.LBB65_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB65_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_182
.LBB65_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB65_182:                             # %cond.end486
.LBB65_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB65_196
.LBB65_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB65_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB65_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_188
.LBB65_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB65_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB65_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB65_194
.LBB65_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB65_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_193
.LBB65_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB65_193:                             # %cond.end526
.LBB65_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB65_195:                             # %if.end532
	jmp	.LBB65_196
.LBB65_196:                             # %if.end533
	jmp	.LBB65_329
.LBB65_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB65_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB65_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB65_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB65_203
.LBB65_202:                             # %cond.false546
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB65_203:                             # %cond.end548
                                        #   in Loop: Header=BB65_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB65_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_209
.LBB65_205:                             # %cond.false553
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB65_208
.LBB65_207:                             # %cond.false558
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB65_208:                             # %cond.end560
                                        #   in Loop: Header=BB65_199 Depth=1
.LBB65_209:                             # %cond.end562
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB65_210:                             # %for.cond564
                                        #   Parent Loop BB65_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB65_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB65_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB65_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB65_214
.LBB65_213:                             # %cond.false572
                                        #   in Loop: Header=BB65_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB65_214:                             # %cond.end574
                                        #   in Loop: Header=BB65_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB65_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_220
.LBB65_216:                             # %cond.false579
                                        #   in Loop: Header=BB65_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB65_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB65_219
.LBB65_218:                             # %cond.false584
                                        #   in Loop: Header=BB65_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB65_219:                             # %cond.end586
                                        #   in Loop: Header=BB65_210 Depth=2
.LBB65_220:                             # %cond.end588
                                        #   in Loop: Header=BB65_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB65_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_210
.LBB65_222:                             # %for.end602
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_199
.LBB65_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB65_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB65_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB65_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB65_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_225
.LBB65_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_231
.LBB65_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB65_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB65_237
.LBB65_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_236
.LBB65_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB65_236:                             # %cond.end650
.LBB65_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB65_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB65_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_241
.LBB65_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB65_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB65_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB65_247
.LBB65_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB65_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_246
.LBB65_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB65_246:                             # %cond.end687
.LBB65_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB65_258
.LBB65_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB65_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_251
.LBB65_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB65_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB65_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB65_257
.LBB65_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB65_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_256
.LBB65_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB65_256:                             # %cond.end724
.LBB65_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB65_258:                             # %if.end730
	jmp	.LBB65_328
.LBB65_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB65_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB65_262
.LBB65_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB65_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB65_265
.LBB65_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB65_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB65_271
.LBB65_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB65_270
.LBB65_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB65_270:                             # %cond.end753
.LBB65_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB65_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB65_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB65_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB65_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB65_276
.LBB65_275:                             # %cond.false765
                                        #   in Loop: Header=BB65_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB65_276:                             # %cond.end767
                                        #   in Loop: Header=BB65_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB65_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_282
.LBB65_278:                             # %cond.false772
                                        #   in Loop: Header=BB65_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB65_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB65_281
.LBB65_280:                             # %cond.false777
                                        #   in Loop: Header=BB65_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB65_281:                             # %cond.end779
                                        #   in Loop: Header=BB65_272 Depth=1
.LBB65_282:                             # %cond.end781
                                        #   in Loop: Header=BB65_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB65_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_272
.LBB65_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_287
.LBB65_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB65_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB65_293
.LBB65_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_292
.LBB65_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB65_292:                             # %cond.end822
.LBB65_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB65_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB65_296
.LBB65_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB65_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB65_299
.LBB65_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB65_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB65_305
.LBB65_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB65_304
.LBB65_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB65_304:                             # %cond.end847
.LBB65_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB65_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB65_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB65_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB65_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB65_310
.LBB65_309:                             # %cond.false859
                                        #   in Loop: Header=BB65_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB65_310:                             # %cond.end861
                                        #   in Loop: Header=BB65_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB65_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_316
.LBB65_312:                             # %cond.false866
                                        #   in Loop: Header=BB65_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB65_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB65_315
.LBB65_314:                             # %cond.false871
                                        #   in Loop: Header=BB65_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB65_315:                             # %cond.end873
                                        #   in Loop: Header=BB65_306 Depth=1
.LBB65_316:                             # %cond.end875
                                        #   in Loop: Header=BB65_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB65_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_306
.LBB65_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_321
.LBB65_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB65_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB65_327
.LBB65_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_326
.LBB65_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB65_326:                             # %cond.end916
.LBB65_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB65_328:                             # %if.end922
	jmp	.LBB65_329
.LBB65_329:                             # %if.end923
	jmp	.LBB65_330
.LBB65_330:                             # %if.end924
	jmp	.LBB65_331
.LBB65_331:                             # %if.end925
	jmp	.LBB65_332
.LBB65_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1947335465, -100(%rbp) # imm = 0x7411FB29
	jne	.LBB65_334
.LBB65_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_333
.Lfunc_end65:
	.size	Get_Reference_Pixel.55, .Lfunc_end65-Get_Reference_Pixel.55
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.56    # -- Begin function Error_Concealment.56
	.p2align	4, 0x90
	.type	Error_Concealment.56,@function
Error_Concealment.56:                   # @Error_Concealment.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1754135899, -12(%rbp)  # imm = 0x688DFD5B
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB66_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB66_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -4(%rbp)
.LBB66_3:                               # %for.cond2
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB66_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB66_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB66_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB66_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB66_6:                               # %if.end
                                        #   in Loop: Header=BB66_3 Depth=2
	jmp	.LBB66_7
.LBB66_7:                               # %for.inc
                                        #   in Loop: Header=BB66_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_3
.LBB66_8:                               # %for.end
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_9
.LBB66_9:                               # %for.inc7
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_1
.LBB66_10:                              # %for.end9
	cmpl	$1754135899, -12(%rbp)  # imm = 0x688DFD5B
	jne	.LBB66_12
.LBB66_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_11
.Lfunc_end66:
	.size	Error_Concealment.56, .Lfunc_end66-Error_Concealment.56
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.57   # -- Begin function decode_one_b8block.57
	.p2align	4, 0x90
	.type	decode_one_b8block.57,@function
decode_one_b8block.57:                  # @decode_one_b8block.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$307539099, -84(%rbp)   # imm = 0x1254AC9B
	movl	%edi, -44(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB67_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB67_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB67_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB67_4:                               # %for.cond9
                                        #   Parent Loop BB67_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB67_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB67_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB67_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_4
.LBB67_7:                               # %for.end
                                        #   in Loop: Header=BB67_2 Depth=1
	jmp	.LBB67_8
.LBB67_8:                               # %for.inc26
                                        #   in Loop: Header=BB67_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_2
.LBB67_9:                               # %for.end28
	jmp	.LBB67_96
.LBB67_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB67_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB67_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB67_31
.LBB67_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB67_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB67_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB67_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB67_17:                              # %for.cond40
                                        #   Parent Loop BB67_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB67_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB67_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB67_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_17
.LBB67_20:                              # %for.end49
                                        #   in Loop: Header=BB67_15 Depth=1
	jmp	.LBB67_21
.LBB67_21:                              # %for.inc50
                                        #   in Loop: Header=BB67_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_15
.LBB67_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB67_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB67_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB67_25:                              # %for.cond56
                                        #   Parent Loop BB67_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB67_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB67_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB67_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_25
.LBB67_28:                              # %for.end71
                                        #   in Loop: Header=BB67_23 Depth=1
	jmp	.LBB67_29
.LBB67_29:                              # %for.inc72
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_23
.LBB67_30:                              # %for.end74
	jmp	.LBB67_60
.LBB67_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB67_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB67_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB67_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB67_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB67_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB67_36:                              # %for.cond83
                                        #   Parent Loop BB67_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB67_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB67_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB67_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_36
.LBB67_39:                              # %for.end120
                                        #   in Loop: Header=BB67_34 Depth=1
	jmp	.LBB67_40
.LBB67_40:                              # %for.inc121
                                        #   in Loop: Header=BB67_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_34
.LBB67_41:                              # %for.end123
	jmp	.LBB67_51
.LBB67_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB67_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB67_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB67_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB67_45:                              # %for.cond129
                                        #   Parent Loop BB67_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB67_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB67_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB67_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_45
.LBB67_48:                              # %for.end145
                                        #   in Loop: Header=BB67_43 Depth=1
	jmp	.LBB67_49
.LBB67_49:                              # %for.inc146
                                        #   in Loop: Header=BB67_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_43
.LBB67_50:                              # %for.end148
	jmp	.LBB67_51
.LBB67_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB67_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB67_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB67_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB67_54:                              # %for.cond153
                                        #   Parent Loop BB67_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB67_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB67_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB67_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_54
.LBB67_57:                              # %for.end167
                                        #   in Loop: Header=BB67_52 Depth=1
	jmp	.LBB67_58
.LBB67_58:                              # %for.inc168
                                        #   in Loop: Header=BB67_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_52
.LBB67_59:                              # %for.end170
	jmp	.LBB67_60
.LBB67_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB67_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB67_66
.LBB67_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB67_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB67_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB67_86
.LBB67_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB67_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_69 Depth 2
                                        #       Child Loop BB67_74 Depth 3
                                        #         Child Loop BB67_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB67_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB67_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB67_69:                              # %for.cond197
                                        #   Parent Loop BB67_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_74 Depth 3
                                        #         Child Loop BB67_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB67_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB67_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB67_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB67_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB67_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB67_73:                              # %if.end218
                                        #   in Loop: Header=BB67_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB67_74:                              # %for.cond233
                                        #   Parent Loop BB67_67 Depth=1
                                        #     Parent Loop BB67_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB67_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB67_74 Depth=3
	movl	$0, -4(%rbp)
.LBB67_76:                              # %for.cond237
                                        #   Parent Loop BB67_67 Depth=1
                                        #     Parent Loop BB67_69 Depth=2
                                        #       Parent Loop BB67_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB67_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB67_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB67_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_76
.LBB67_79:                              # %for.end269
                                        #   in Loop: Header=BB67_74 Depth=3
	jmp	.LBB67_80
.LBB67_80:                              # %for.inc270
                                        #   in Loop: Header=BB67_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_74
.LBB67_81:                              # %for.end272
                                        #   in Loop: Header=BB67_69 Depth=2
	jmp	.LBB67_82
.LBB67_82:                              # %for.inc273
                                        #   in Loop: Header=BB67_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_69
.LBB67_83:                              # %for.end275
                                        #   in Loop: Header=BB67_67 Depth=1
	jmp	.LBB67_84
.LBB67_84:                              # %for.inc276
                                        #   in Loop: Header=BB67_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_67
.LBB67_85:                              # %for.end278
	jmp	.LBB67_95
.LBB67_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB67_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB67_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB67_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB67_89:                              # %for.cond284
                                        #   Parent Loop BB67_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB67_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB67_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB67_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_89
.LBB67_92:                              # %for.end310
                                        #   in Loop: Header=BB67_87 Depth=1
	jmp	.LBB67_93
.LBB67_93:                              # %for.inc311
                                        #   in Loop: Header=BB67_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_87
.LBB67_94:                              # %for.end313
	jmp	.LBB67_95
.LBB67_95:                              # %if.end314
	jmp	.LBB67_96
.LBB67_96:                              # %if.end315
	cmpl	$307539099, -84(%rbp)   # imm = 0x1254AC9B
	jne	.LBB67_98
.LBB67_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_97
.Lfunc_end67:
	.size	decode_one_b8block.57, .Lfunc_end67-decode_one_b8block.57
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.58  # -- Begin function Get_Reference_Block.58
	.p2align	4, 0x90
	.type	Get_Reference_Block.58,@function
Get_Reference_Block.58:                 # @Get_Reference_Block.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$287498715, -32(%rbp)   # imm = 0x1122E1DB
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -56(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB68_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_3:                               # %for.cond5
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB68_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB68_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_3
.LBB68_6:                               # %for.end
                                        #   in Loop: Header=BB68_1 Depth=1
	jmp	.LBB68_7
.LBB68_7:                               # %for.inc14
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_1
.LBB68_8:                               # %for.end16
	cmpl	$287498715, -32(%rbp)   # imm = 0x1122E1DB
	jne	.LBB68_10
.LBB68_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_9
.Lfunc_end68:
	.size	Get_Reference_Block.58, .Lfunc_end68-Get_Reference_Block.58
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.59  # -- Begin function Get_Reference_Pixel.59
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.59,@function
Get_Reference_Pixel.59:                 # @Get_Reference_Pixel.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$873397360, -104(%rbp)  # imm = 0x340EFC70
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB69_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB69_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB69_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB69_5
.LBB69_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB69_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB69_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB69_11
.LBB69_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB69_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB69_10
.LBB69_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB69_10:                              # %cond.end14
.LBB69_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB69_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB69_14
.LBB69_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB69_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB69_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB69_20
.LBB69_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB69_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB69_19
.LBB69_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB69_19:                              # %cond.end29
.LBB69_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_332
.LBB69_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB69_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB69_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB69_25
.LBB69_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB69_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB69_31
.LBB69_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB69_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB69_30
.LBB69_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB69_30:                              # %cond.end52
.LBB69_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB69_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB69_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB69_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB69_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB69_36
.LBB69_35:                              # %cond.false61
                                        #   in Loop: Header=BB69_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB69_36:                              # %cond.end63
                                        #   in Loop: Header=BB69_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB69_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB69_42
.LBB69_38:                              # %cond.false68
                                        #   in Loop: Header=BB69_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB69_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB69_41
.LBB69_40:                              # %cond.false73
                                        #   in Loop: Header=BB69_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB69_41:                              # %cond.end75
                                        #   in Loop: Header=BB69_32 Depth=1
.LBB69_42:                              # %cond.end77
                                        #   in Loop: Header=BB69_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB69_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_32
.LBB69_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_47
.LBB69_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB69_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB69_53
.LBB69_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_52
.LBB69_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB69_52:                              # %cond.end113
.LBB69_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB69_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB69_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB69_57
.LBB69_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB69_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB69_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB69_63
.LBB69_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB69_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB69_62
.LBB69_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB69_62:                              # %cond.end136
.LBB69_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB69_76
.LBB69_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB69_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB69_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB69_68
.LBB69_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB69_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB69_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB69_74
.LBB69_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB69_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB69_73
.LBB69_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB69_73:                              # %cond.end169
.LBB69_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB69_75:                              # %if.end
	jmp	.LBB69_76
.LBB69_76:                              # %if.end178
	jmp	.LBB69_331
.LBB69_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB69_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB69_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB69_81
.LBB69_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB69_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB69_87
.LBB69_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB69_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB69_86
.LBB69_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB69_86:                              # %cond.end197
.LBB69_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB69_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB69_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB69_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB69_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB69_92
.LBB69_91:                              # %cond.false209
                                        #   in Loop: Header=BB69_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB69_92:                              # %cond.end211
                                        #   in Loop: Header=BB69_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB69_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB69_98
.LBB69_94:                              # %cond.false216
                                        #   in Loop: Header=BB69_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB69_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB69_97
.LBB69_96:                              # %cond.false221
                                        #   in Loop: Header=BB69_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB69_97:                              # %cond.end223
                                        #   in Loop: Header=BB69_88 Depth=1
.LBB69_98:                              # %cond.end225
                                        #   in Loop: Header=BB69_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB69_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_88
.LBB69_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_103
.LBB69_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB69_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB69_109
.LBB69_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_108
.LBB69_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB69_108:                             # %cond.end266
.LBB69_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB69_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB69_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB69_113
.LBB69_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB69_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB69_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB69_119
.LBB69_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB69_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB69_118
.LBB69_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB69_118:                             # %cond.end287
.LBB69_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB69_132
.LBB69_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB69_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB69_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB69_124
.LBB69_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB69_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB69_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB69_130
.LBB69_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB69_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB69_129
.LBB69_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB69_129:                             # %cond.end320
.LBB69_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB69_131:                             # %if.end331
	jmp	.LBB69_132
.LBB69_132:                             # %if.end332
	jmp	.LBB69_330
.LBB69_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB69_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB69_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB69_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB69_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB69_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB69_139
.LBB69_138:                             # %cond.false345
                                        #   in Loop: Header=BB69_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB69_139:                             # %cond.end347
                                        #   in Loop: Header=BB69_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB69_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB69_145
.LBB69_141:                             # %cond.false352
                                        #   in Loop: Header=BB69_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB69_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB69_144
.LBB69_143:                             # %cond.false357
                                        #   in Loop: Header=BB69_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB69_144:                             # %cond.end359
                                        #   in Loop: Header=BB69_135 Depth=1
.LBB69_145:                             # %cond.end361
                                        #   in Loop: Header=BB69_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB69_146:                             # %for.cond363
                                        #   Parent Loop BB69_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB69_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB69_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB69_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB69_150
.LBB69_149:                             # %cond.false371
                                        #   in Loop: Header=BB69_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB69_150:                             # %cond.end373
                                        #   in Loop: Header=BB69_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB69_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB69_156
.LBB69_152:                             # %cond.false378
                                        #   in Loop: Header=BB69_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB69_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB69_155
.LBB69_154:                             # %cond.false383
                                        #   in Loop: Header=BB69_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB69_155:                             # %cond.end385
                                        #   in Loop: Header=BB69_146 Depth=2
.LBB69_156:                             # %cond.end387
                                        #   in Loop: Header=BB69_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB69_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_146
.LBB69_158:                             # %for.end401
                                        #   in Loop: Header=BB69_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB69_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_135
.LBB69_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB69_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB69_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB69_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB69_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_161
.LBB69_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_167
.LBB69_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB69_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB69_173
.LBB69_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_172
.LBB69_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB69_172:                             # %cond.end449
.LBB69_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB69_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB69_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_177
.LBB69_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB69_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB69_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB69_183
.LBB69_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB69_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_182
.LBB69_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB69_182:                             # %cond.end486
.LBB69_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB69_196
.LBB69_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB69_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB69_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_188
.LBB69_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB69_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB69_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB69_194
.LBB69_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB69_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_193
.LBB69_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB69_193:                             # %cond.end526
.LBB69_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB69_195:                             # %if.end532
	jmp	.LBB69_196
.LBB69_196:                             # %if.end533
	jmp	.LBB69_329
.LBB69_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB69_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB69_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB69_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB69_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB69_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB69_203
.LBB69_202:                             # %cond.false546
                                        #   in Loop: Header=BB69_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB69_203:                             # %cond.end548
                                        #   in Loop: Header=BB69_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB69_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB69_209
.LBB69_205:                             # %cond.false553
                                        #   in Loop: Header=BB69_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB69_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB69_208
.LBB69_207:                             # %cond.false558
                                        #   in Loop: Header=BB69_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB69_208:                             # %cond.end560
                                        #   in Loop: Header=BB69_199 Depth=1
.LBB69_209:                             # %cond.end562
                                        #   in Loop: Header=BB69_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB69_210:                             # %for.cond564
                                        #   Parent Loop BB69_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB69_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB69_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB69_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB69_214
.LBB69_213:                             # %cond.false572
                                        #   in Loop: Header=BB69_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB69_214:                             # %cond.end574
                                        #   in Loop: Header=BB69_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB69_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB69_220
.LBB69_216:                             # %cond.false579
                                        #   in Loop: Header=BB69_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB69_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB69_219
.LBB69_218:                             # %cond.false584
                                        #   in Loop: Header=BB69_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB69_219:                             # %cond.end586
                                        #   in Loop: Header=BB69_210 Depth=2
.LBB69_220:                             # %cond.end588
                                        #   in Loop: Header=BB69_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB69_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_210
.LBB69_222:                             # %for.end602
                                        #   in Loop: Header=BB69_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB69_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_199
.LBB69_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB69_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB69_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB69_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB69_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_225
.LBB69_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_231
.LBB69_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB69_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB69_237
.LBB69_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_236
.LBB69_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB69_236:                             # %cond.end650
.LBB69_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB69_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB69_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_241
.LBB69_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB69_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB69_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB69_247
.LBB69_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB69_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_246
.LBB69_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB69_246:                             # %cond.end687
.LBB69_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB69_258
.LBB69_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB69_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_251
.LBB69_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB69_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB69_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB69_257
.LBB69_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB69_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_256
.LBB69_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB69_256:                             # %cond.end724
.LBB69_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB69_258:                             # %if.end730
	jmp	.LBB69_328
.LBB69_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB69_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB69_262
.LBB69_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB69_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB69_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB69_265
.LBB69_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB69_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB69_271
.LBB69_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB69_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB69_270
.LBB69_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB69_270:                             # %cond.end753
.LBB69_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB69_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB69_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB69_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB69_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB69_276
.LBB69_275:                             # %cond.false765
                                        #   in Loop: Header=BB69_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB69_276:                             # %cond.end767
                                        #   in Loop: Header=BB69_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB69_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB69_282
.LBB69_278:                             # %cond.false772
                                        #   in Loop: Header=BB69_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB69_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB69_281
.LBB69_280:                             # %cond.false777
                                        #   in Loop: Header=BB69_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB69_281:                             # %cond.end779
                                        #   in Loop: Header=BB69_272 Depth=1
.LBB69_282:                             # %cond.end781
                                        #   in Loop: Header=BB69_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB69_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_272
.LBB69_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_287
.LBB69_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB69_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB69_293
.LBB69_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_292
.LBB69_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB69_292:                             # %cond.end822
.LBB69_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB69_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB69_296
.LBB69_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB69_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB69_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB69_299
.LBB69_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB69_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB69_305
.LBB69_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB69_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB69_304
.LBB69_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB69_304:                             # %cond.end847
.LBB69_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB69_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB69_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB69_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB69_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB69_310
.LBB69_309:                             # %cond.false859
                                        #   in Loop: Header=BB69_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB69_310:                             # %cond.end861
                                        #   in Loop: Header=BB69_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB69_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB69_316
.LBB69_312:                             # %cond.false866
                                        #   in Loop: Header=BB69_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB69_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB69_315
.LBB69_314:                             # %cond.false871
                                        #   in Loop: Header=BB69_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB69_315:                             # %cond.end873
                                        #   in Loop: Header=BB69_306 Depth=1
.LBB69_316:                             # %cond.end875
                                        #   in Loop: Header=BB69_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB69_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_306
.LBB69_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_321
.LBB69_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB69_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB69_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB69_327
.LBB69_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB69_326
.LBB69_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB69_326:                             # %cond.end916
.LBB69_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB69_328:                             # %if.end922
	jmp	.LBB69_329
.LBB69_329:                             # %if.end923
	jmp	.LBB69_330
.LBB69_330:                             # %if.end924
	jmp	.LBB69_331
.LBB69_331:                             # %if.end925
	jmp	.LBB69_332
.LBB69_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$873397360, -104(%rbp)  # imm = 0x340EFC70
	jne	.LBB69_334
.LBB69_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_333
.Lfunc_end69:
	.size	Get_Reference_Pixel.59, .Lfunc_end69-Get_Reference_Pixel.59
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.60       # -- Begin function DecOneForthPix.60
	.p2align	4, 0x90
	.type	DecOneForthPix.60,@function
DecOneForthPix.60:                      # @DecOneForthPix.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$705169246, -12(%rbp)   # imm = 0x2A08075E
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB70_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB70_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB70_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_1
.LBB70_4:                               # %for.end
	cmpl	$705169246, -12(%rbp)   # imm = 0x2A08075E
	jne	.LBB70_6
.LBB70_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_5
.Lfunc_end70:
	.size	DecOneForthPix.60, .Lfunc_end70-DecOneForthPix.60
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.61 # -- Begin function compute_residue_b8block.61
	.p2align	4, 0x90
	.type	compute_residue_b8block.61,@function
compute_residue_b8block.61:             # @compute_residue_b8block.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$69769061, -36(%rbp)    # imm = 0x4289765
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB71_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB71_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB71_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB71_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB71_4:                               # %for.cond4
                                        #   Parent Loop BB71_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB71_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB71_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB71_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_4
.LBB71_7:                               # %for.end
                                        #   in Loop: Header=BB71_2 Depth=1
	jmp	.LBB71_8
.LBB71_8:                               # %for.inc22
                                        #   in Loop: Header=BB71_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_2
.LBB71_9:                               # %for.end24
	jmp	.LBB71_19
.LBB71_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB71_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB71_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB71_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB71_13:                              # %for.cond29
                                        #   Parent Loop BB71_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB71_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB71_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB71_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_13
.LBB71_16:                              # %for.end56
                                        #   in Loop: Header=BB71_11 Depth=1
	jmp	.LBB71_17
.LBB71_17:                              # %for.inc57
                                        #   in Loop: Header=BB71_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_11
.LBB71_18:                              # %for.end59
	jmp	.LBB71_19
.LBB71_19:                              # %if.end
	cmpl	$69769061, -36(%rbp)    # imm = 0x4289765
	jne	.LBB71_21
.LBB71_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_20
.Lfunc_end71:
	.size	compute_residue_b8block.61, .Lfunc_end71-compute_residue_b8block.61
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.62
.LCPI72_0:
	.quad	4636737291354636288     # double 100
.LCPI72_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.62
	.p2align	4, 0x90
	.type	Build_Status_Map.62,@function
Build_Status_Map.62:                    # @Build_Status_Map.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2052018675, -36(%rbp)  # imm = 0x7A4F51F3
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB72_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB72_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -12(%rbp)
.LBB72_3:                               # %for.cond2
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB72_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB72_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB72_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB72_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB72_13
.LBB72_6:                               # %if.then
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI72_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB72_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB72_8:                               # %if.end
                                        #   in Loop: Header=BB72_3 Depth=2
	callq	rand
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI72_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB72_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB72_10:                              # %if.end20
                                        #   in Loop: Header=BB72_3 Depth=2
	callq	rand
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI72_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB72_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	$1, -4(%rbp)
.LBB72_12:                              # %if.end29
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB72_13:                              # %if.end30
                                        #   in Loop: Header=BB72_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB72_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB72_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB72_18
.LBB72_15:                              # %if.else
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB72_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB72_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB72_17:                              # %if.end49
                                        #   in Loop: Header=BB72_3 Depth=2
	jmp	.LBB72_18
.LBB72_18:                              # %if.end50
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_3
.LBB72_20:                              # %for.end
                                        #   in Loop: Header=BB72_1 Depth=1
	jmp	.LBB72_21
.LBB72_21:                              # %for.inc53
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_1
.LBB72_22:                              # %for.end55
	cmpl	$2052018675, -36(%rbp)  # imm = 0x7A4F51F3
	jne	.LBB72_24
.LBB72_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_23
.Lfunc_end72:
	.size	Build_Status_Map.62, .Lfunc_end72-Build_Status_Map.62
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.63        # -- Begin function Conceal_Error.63
	.p2align	4, 0x90
	.type	Conceal_Error.63,@function
Conceal_Error.63:                       # @Conceal_Error.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$560012231, -68(%rbp)   # imm = 0x21611BC7
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB73_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB73_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB73_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB73_4:                               # %land.end
.LBB73_5:                               # %lor.end
.LBB73_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB73_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB73_9
.LBB73_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB73_14
.LBB73_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB73_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB73_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB73_12:                              # %land.end51
.LBB73_13:                              # %lor.end53
.LBB73_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB73_180
# %bb.15:                               # %land.end54
	movq	.LJTI73_0(,%rax,8), %rax
	jmpq	*%rax
.LBB73_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB73_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB73_18 Depth=1
	movl	$0, -4(%rbp)
.LBB73_20:                              # %for.cond68
                                        #   Parent Loop BB73_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB73_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB73_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_20
.LBB73_23:                              # %for.end
                                        #   in Loop: Header=BB73_18 Depth=1
	jmp	.LBB73_24
.LBB73_24:                              # %for.inc85
                                        #   in Loop: Header=BB73_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_18
.LBB73_25:                              # %for.end87
	jmp	.LBB73_35
.LBB73_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB73_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB73_27 Depth=1
	movl	$0, -4(%rbp)
.LBB73_29:                              # %for.cond92
                                        #   Parent Loop BB73_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB73_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB73_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_29
.LBB73_32:                              # %for.end104
                                        #   in Loop: Header=BB73_27 Depth=1
	jmp	.LBB73_33
.LBB73_33:                              # %for.inc105
                                        #   in Loop: Header=BB73_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_27
.LBB73_34:                              # %for.end107
	jmp	.LBB73_35
.LBB73_35:                              # %if.end
	jmp	.LBB73_180
.LBB73_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB73_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_39 Depth 2
                                        #       Child Loop BB73_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB73_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB73_37 Depth=1
	movl	$0, -16(%rbp)
.LBB73_39:                              # %for.cond113
                                        #   Parent Loop BB73_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB73_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB73_39 Depth=2
	movl	$0, -4(%rbp)
.LBB73_41:                              # %for.cond117
                                        #   Parent Loop BB73_37 Depth=1
                                        #     Parent Loop BB73_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB73_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB73_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB73_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_41
.LBB73_44:                              # %for.end141
                                        #   in Loop: Header=BB73_39 Depth=2
	jmp	.LBB73_45
.LBB73_45:                              # %for.inc142
                                        #   in Loop: Header=BB73_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_39
.LBB73_46:                              # %for.end144
                                        #   in Loop: Header=BB73_37 Depth=1
	jmp	.LBB73_47
.LBB73_47:                              # %for.inc145
                                        #   in Loop: Header=BB73_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_37
.LBB73_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB73_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB73_49 Depth=1
	movl	$0, -8(%rbp)
.LBB73_51:                              # %for.cond152
                                        #   Parent Loop BB73_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB73_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB73_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_51
.LBB73_54:                              # %for.end162
                                        #   in Loop: Header=BB73_49 Depth=1
	jmp	.LBB73_55
.LBB73_55:                              # %for.inc163
                                        #   in Loop: Header=BB73_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_49
.LBB73_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB73_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB73_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB73_59 Depth=1
	movl	$0, -4(%rbp)
.LBB73_61:                              # %for.cond175
                                        #   Parent Loop BB73_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB73_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB73_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_61
.LBB73_64:                              # %for.end195
                                        #   in Loop: Header=BB73_59 Depth=1
	jmp	.LBB73_65
.LBB73_65:                              # %for.inc196
                                        #   in Loop: Header=BB73_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_59
.LBB73_66:                              # %for.end198
	jmp	.LBB73_95
.LBB73_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB73_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB73_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_71 Depth 2
                                        #       Child Loop BB73_73 Depth 3
                                        #         Child Loop BB73_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB73_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB73_71:                              # %for.cond210
                                        #   Parent Loop BB73_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_73 Depth 3
                                        #         Child Loop BB73_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB73_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB73_73:                              # %for.cond236
                                        #   Parent Loop BB73_69 Depth=1
                                        #     Parent Loop BB73_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB73_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB73_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB73_73 Depth=3
	movl	$0, -4(%rbp)
.LBB73_75:                              # %for.cond240
                                        #   Parent Loop BB73_69 Depth=1
                                        #     Parent Loop BB73_71 Depth=2
                                        #       Parent Loop BB73_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB73_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB73_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB73_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_75
.LBB73_78:                              # %for.end259
                                        #   in Loop: Header=BB73_73 Depth=3
	jmp	.LBB73_79
.LBB73_79:                              # %for.inc260
                                        #   in Loop: Header=BB73_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_73
.LBB73_80:                              # %for.end262
                                        #   in Loop: Header=BB73_71 Depth=2
	jmp	.LBB73_81
.LBB73_81:                              # %for.inc263
                                        #   in Loop: Header=BB73_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_71
.LBB73_82:                              # %for.end265
                                        #   in Loop: Header=BB73_69 Depth=1
	jmp	.LBB73_83
.LBB73_83:                              # %for.inc266
                                        #   in Loop: Header=BB73_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_69
.LBB73_84:                              # %for.end268
	jmp	.LBB73_94
.LBB73_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB73_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB73_86 Depth=1
	movl	$0, -4(%rbp)
.LBB73_88:                              # %for.cond274
                                        #   Parent Loop BB73_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB73_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB73_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_88
.LBB73_91:                              # %for.end294
                                        #   in Loop: Header=BB73_86 Depth=1
	jmp	.LBB73_92
.LBB73_92:                              # %for.inc295
                                        #   in Loop: Header=BB73_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_86
.LBB73_93:                              # %for.end297
	jmp	.LBB73_94
.LBB73_94:                              # %if.end298
	jmp	.LBB73_95
.LBB73_95:                              # %if.end299
	jmp	.LBB73_105
.LBB73_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB73_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB73_97 Depth=1
	movl	$0, -4(%rbp)
.LBB73_99:                              # %for.cond305
                                        #   Parent Loop BB73_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB73_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB73_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_99
.LBB73_102:                             # %for.end317
                                        #   in Loop: Header=BB73_97 Depth=1
	jmp	.LBB73_103
.LBB73_103:                             # %for.inc318
                                        #   in Loop: Header=BB73_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_97
.LBB73_104:                             # %for.end320
	jmp	.LBB73_105
.LBB73_105:                             # %if.end321
	jmp	.LBB73_180
.LBB73_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB73_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_110 Depth 2
                                        #       Child Loop BB73_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB73_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB73_108 Depth=1
	movl	$0, -16(%rbp)
.LBB73_110:                             # %for.cond331
                                        #   Parent Loop BB73_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB73_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB73_110 Depth=2
	movl	$0, -4(%rbp)
.LBB73_112:                             # %for.cond335
                                        #   Parent Loop BB73_108 Depth=1
                                        #     Parent Loop BB73_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB73_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB73_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB73_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_112
.LBB73_115:                             # %for.end359
                                        #   in Loop: Header=BB73_110 Depth=2
	jmp	.LBB73_116
.LBB73_116:                             # %for.inc360
                                        #   in Loop: Header=BB73_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_110
.LBB73_117:                             # %for.end362
                                        #   in Loop: Header=BB73_108 Depth=1
	jmp	.LBB73_118
.LBB73_118:                             # %for.inc363
                                        #   in Loop: Header=BB73_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_108
.LBB73_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB73_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB73_120 Depth=1
	movl	$0, -8(%rbp)
.LBB73_122:                             # %for.cond370
                                        #   Parent Loop BB73_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB73_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB73_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_122
.LBB73_125:                             # %for.end380
                                        #   in Loop: Header=BB73_120 Depth=1
	jmp	.LBB73_126
.LBB73_126:                             # %for.inc381
                                        #   in Loop: Header=BB73_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_120
.LBB73_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB73_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB73_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB73_129 Depth=1
	movl	$0, -4(%rbp)
.LBB73_131:                             # %for.cond390
                                        #   Parent Loop BB73_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB73_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB73_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_131
.LBB73_134:                             # %for.end410
                                        #   in Loop: Header=BB73_129 Depth=1
	jmp	.LBB73_135
.LBB73_135:                             # %for.inc411
                                        #   in Loop: Header=BB73_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_129
.LBB73_136:                             # %for.end413
	jmp	.LBB73_156
.LBB73_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB73_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB73_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_141 Depth 2
                                        #       Child Loop BB73_143 Depth 3
                                        #         Child Loop BB73_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB73_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB73_141:                             # %for.cond425
                                        #   Parent Loop BB73_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_143 Depth 3
                                        #         Child Loop BB73_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB73_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB73_143:                             # %for.cond452
                                        #   Parent Loop BB73_139 Depth=1
                                        #     Parent Loop BB73_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB73_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB73_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB73_143 Depth=3
	movl	$0, -4(%rbp)
.LBB73_145:                             # %for.cond456
                                        #   Parent Loop BB73_139 Depth=1
                                        #     Parent Loop BB73_141 Depth=2
                                        #       Parent Loop BB73_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB73_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB73_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB73_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_145
.LBB73_148:                             # %for.end475
                                        #   in Loop: Header=BB73_143 Depth=3
	jmp	.LBB73_149
.LBB73_149:                             # %for.inc476
                                        #   in Loop: Header=BB73_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_143
.LBB73_150:                             # %for.end478
                                        #   in Loop: Header=BB73_141 Depth=2
	jmp	.LBB73_151
.LBB73_151:                             # %for.inc479
                                        #   in Loop: Header=BB73_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_141
.LBB73_152:                             # %for.end481
                                        #   in Loop: Header=BB73_139 Depth=1
	jmp	.LBB73_153
.LBB73_153:                             # %for.inc482
                                        #   in Loop: Header=BB73_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_139
.LBB73_154:                             # %for.end484
	jmp	.LBB73_155
.LBB73_155:                             # %if.end485
	jmp	.LBB73_156
.LBB73_156:                             # %if.end486
	jmp	.LBB73_157
.LBB73_157:                             # %if.end487
	jmp	.LBB73_180
.LBB73_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB73_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB73_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB73_161 Depth=1
	movl	$0, -4(%rbp)
.LBB73_163:                             # %for.cond499
                                        #   Parent Loop BB73_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB73_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB73_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_163
.LBB73_166:                             # %for.end519
                                        #   in Loop: Header=BB73_161 Depth=1
	jmp	.LBB73_167
.LBB73_167:                             # %for.inc520
                                        #   in Loop: Header=BB73_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_161
.LBB73_168:                             # %for.end522
	jmp	.LBB73_169
.LBB73_169:                             # %if.end523
	jmp	.LBB73_179
.LBB73_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB73_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB73_171 Depth=1
	movl	$0, -4(%rbp)
.LBB73_173:                             # %for.cond529
                                        #   Parent Loop BB73_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB73_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB73_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_173
.LBB73_176:                             # %for.end541
                                        #   in Loop: Header=BB73_171 Depth=1
	jmp	.LBB73_177
.LBB73_177:                             # %for.inc542
                                        #   in Loop: Header=BB73_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_171
.LBB73_178:                             # %for.end544
	jmp	.LBB73_179
.LBB73_179:                             # %if.end545
	jmp	.LBB73_180
.LBB73_180:                             # %sw.epilog
	cmpl	$560012231, -68(%rbp)   # imm = 0x21611BC7
	jne	.LBB73_182
.LBB73_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_181
.Lfunc_end73:
	.size	Conceal_Error.63, .Lfunc_end73-Conceal_Error.63
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI73_0:
	.quad	.LBB73_16
	.quad	.LBB73_158
	.quad	.LBB73_106
	.quad	.LBB73_180
	.quad	.LBB73_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.64   # -- Begin function decode_one_b8block.64
	.p2align	4, 0x90
	.type	decode_one_b8block.64,@function
decode_one_b8block.64:                  # @decode_one_b8block.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1736847360, -84(%rbp)  # imm = 0x67863000
	movl	%edi, -40(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB74_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB74_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB74_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB74_4:                               # %for.cond9
                                        #   Parent Loop BB74_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB74_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB74_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB74_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_4
.LBB74_7:                               # %for.end
                                        #   in Loop: Header=BB74_2 Depth=1
	jmp	.LBB74_8
.LBB74_8:                               # %for.inc26
                                        #   in Loop: Header=BB74_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_2
.LBB74_9:                               # %for.end28
	jmp	.LBB74_96
.LBB74_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB74_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB74_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB74_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB74_31
.LBB74_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB74_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB74_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB74_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB74_17:                              # %for.cond40
                                        #   Parent Loop BB74_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB74_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB74_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB74_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_17
.LBB74_20:                              # %for.end49
                                        #   in Loop: Header=BB74_15 Depth=1
	jmp	.LBB74_21
.LBB74_21:                              # %for.inc50
                                        #   in Loop: Header=BB74_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_15
.LBB74_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB74_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB74_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB74_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB74_25:                              # %for.cond56
                                        #   Parent Loop BB74_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB74_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB74_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB74_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_25
.LBB74_28:                              # %for.end71
                                        #   in Loop: Header=BB74_23 Depth=1
	jmp	.LBB74_29
.LBB74_29:                              # %for.inc72
                                        #   in Loop: Header=BB74_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_23
.LBB74_30:                              # %for.end74
	jmp	.LBB74_60
.LBB74_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB74_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB74_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB74_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB74_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB74_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB74_36:                              # %for.cond83
                                        #   Parent Loop BB74_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB74_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB74_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB74_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_36
.LBB74_39:                              # %for.end120
                                        #   in Loop: Header=BB74_34 Depth=1
	jmp	.LBB74_40
.LBB74_40:                              # %for.inc121
                                        #   in Loop: Header=BB74_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_34
.LBB74_41:                              # %for.end123
	jmp	.LBB74_51
.LBB74_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB74_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB74_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB74_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB74_45:                              # %for.cond129
                                        #   Parent Loop BB74_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB74_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB74_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB74_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_45
.LBB74_48:                              # %for.end145
                                        #   in Loop: Header=BB74_43 Depth=1
	jmp	.LBB74_49
.LBB74_49:                              # %for.inc146
                                        #   in Loop: Header=BB74_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_43
.LBB74_50:                              # %for.end148
	jmp	.LBB74_51
.LBB74_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB74_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB74_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB74_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB74_54:                              # %for.cond153
                                        #   Parent Loop BB74_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB74_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB74_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB74_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_54
.LBB74_57:                              # %for.end167
                                        #   in Loop: Header=BB74_52 Depth=1
	jmp	.LBB74_58
.LBB74_58:                              # %for.inc168
                                        #   in Loop: Header=BB74_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_52
.LBB74_59:                              # %for.end170
	jmp	.LBB74_60
.LBB74_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB74_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB74_66
.LBB74_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB74_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB74_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB74_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB74_86
.LBB74_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB74_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_69 Depth 2
                                        #       Child Loop BB74_74 Depth 3
                                        #         Child Loop BB74_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB74_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB74_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB74_69:                              # %for.cond197
                                        #   Parent Loop BB74_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_74 Depth 3
                                        #         Child Loop BB74_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB74_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB74_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB74_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB74_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB74_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB74_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB74_73:                              # %if.end218
                                        #   in Loop: Header=BB74_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB74_74:                              # %for.cond233
                                        #   Parent Loop BB74_67 Depth=1
                                        #     Parent Loop BB74_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB74_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB74_74 Depth=3
	movl	$0, -4(%rbp)
.LBB74_76:                              # %for.cond237
                                        #   Parent Loop BB74_67 Depth=1
                                        #     Parent Loop BB74_69 Depth=2
                                        #       Parent Loop BB74_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB74_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB74_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB74_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_76
.LBB74_79:                              # %for.end269
                                        #   in Loop: Header=BB74_74 Depth=3
	jmp	.LBB74_80
.LBB74_80:                              # %for.inc270
                                        #   in Loop: Header=BB74_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_74
.LBB74_81:                              # %for.end272
                                        #   in Loop: Header=BB74_69 Depth=2
	jmp	.LBB74_82
.LBB74_82:                              # %for.inc273
                                        #   in Loop: Header=BB74_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_69
.LBB74_83:                              # %for.end275
                                        #   in Loop: Header=BB74_67 Depth=1
	jmp	.LBB74_84
.LBB74_84:                              # %for.inc276
                                        #   in Loop: Header=BB74_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_67
.LBB74_85:                              # %for.end278
	jmp	.LBB74_95
.LBB74_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB74_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB74_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB74_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB74_89:                              # %for.cond284
                                        #   Parent Loop BB74_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB74_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB74_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB74_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_89
.LBB74_92:                              # %for.end310
                                        #   in Loop: Header=BB74_87 Depth=1
	jmp	.LBB74_93
.LBB74_93:                              # %for.inc311
                                        #   in Loop: Header=BB74_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_87
.LBB74_94:                              # %for.end313
	jmp	.LBB74_95
.LBB74_95:                              # %if.end314
	jmp	.LBB74_96
.LBB74_96:                              # %if.end315
	cmpl	$1736847360, -84(%rbp)  # imm = 0x67863000
	jne	.LBB74_98
.LBB74_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_97
.Lfunc_end74:
	.size	decode_one_b8block.64, .Lfunc_end74-decode_one_b8block.64
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.65        # -- Begin function Conceal_Error.65
	.p2align	4, 0x90
	.type	Conceal_Error.65,@function
Conceal_Error.65:                       # @Conceal_Error.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$360620976, -68(%rbp)   # imm = 0x157EA3B0
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB75_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB75_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB75_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB75_4:                               # %land.end
.LBB75_5:                               # %lor.end
.LBB75_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB75_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB75_9
.LBB75_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB75_14
.LBB75_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB75_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB75_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB75_12:                              # %land.end51
.LBB75_13:                              # %lor.end53
.LBB75_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB75_180
# %bb.15:                               # %land.end54
	movq	.LJTI75_0(,%rax,8), %rax
	jmpq	*%rax
.LBB75_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB75_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB75_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB75_18 Depth=1
	movl	$0, -4(%rbp)
.LBB75_20:                              # %for.cond68
                                        #   Parent Loop BB75_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB75_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB75_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_20
.LBB75_23:                              # %for.end
                                        #   in Loop: Header=BB75_18 Depth=1
	jmp	.LBB75_24
.LBB75_24:                              # %for.inc85
                                        #   in Loop: Header=BB75_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_18
.LBB75_25:                              # %for.end87
	jmp	.LBB75_35
.LBB75_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB75_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB75_27 Depth=1
	movl	$0, -4(%rbp)
.LBB75_29:                              # %for.cond92
                                        #   Parent Loop BB75_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB75_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB75_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_29
.LBB75_32:                              # %for.end104
                                        #   in Loop: Header=BB75_27 Depth=1
	jmp	.LBB75_33
.LBB75_33:                              # %for.inc105
                                        #   in Loop: Header=BB75_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_27
.LBB75_34:                              # %for.end107
	jmp	.LBB75_35
.LBB75_35:                              # %if.end
	jmp	.LBB75_180
.LBB75_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB75_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_39 Depth 2
                                        #       Child Loop BB75_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB75_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB75_37 Depth=1
	movl	$0, -12(%rbp)
.LBB75_39:                              # %for.cond113
                                        #   Parent Loop BB75_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB75_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB75_39 Depth=2
	movl	$0, -4(%rbp)
.LBB75_41:                              # %for.cond117
                                        #   Parent Loop BB75_37 Depth=1
                                        #     Parent Loop BB75_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB75_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB75_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB75_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_41
.LBB75_44:                              # %for.end141
                                        #   in Loop: Header=BB75_39 Depth=2
	jmp	.LBB75_45
.LBB75_45:                              # %for.inc142
                                        #   in Loop: Header=BB75_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_39
.LBB75_46:                              # %for.end144
                                        #   in Loop: Header=BB75_37 Depth=1
	jmp	.LBB75_47
.LBB75_47:                              # %for.inc145
                                        #   in Loop: Header=BB75_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_37
.LBB75_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB75_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB75_49 Depth=1
	movl	$0, -8(%rbp)
.LBB75_51:                              # %for.cond152
                                        #   Parent Loop BB75_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB75_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB75_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_51
.LBB75_54:                              # %for.end162
                                        #   in Loop: Header=BB75_49 Depth=1
	jmp	.LBB75_55
.LBB75_55:                              # %for.inc163
                                        #   in Loop: Header=BB75_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_49
.LBB75_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB75_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB75_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB75_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB75_59 Depth=1
	movl	$0, -4(%rbp)
.LBB75_61:                              # %for.cond175
                                        #   Parent Loop BB75_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB75_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB75_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_61
.LBB75_64:                              # %for.end195
                                        #   in Loop: Header=BB75_59 Depth=1
	jmp	.LBB75_65
.LBB75_65:                              # %for.inc196
                                        #   in Loop: Header=BB75_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_59
.LBB75_66:                              # %for.end198
	jmp	.LBB75_95
.LBB75_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB75_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB75_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_71 Depth 2
                                        #       Child Loop BB75_73 Depth 3
                                        #         Child Loop BB75_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB75_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB75_71:                              # %for.cond210
                                        #   Parent Loop BB75_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_73 Depth 3
                                        #         Child Loop BB75_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB75_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB75_73:                              # %for.cond236
                                        #   Parent Loop BB75_69 Depth=1
                                        #     Parent Loop BB75_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB75_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB75_73 Depth=3
	movl	$0, -4(%rbp)
.LBB75_75:                              # %for.cond240
                                        #   Parent Loop BB75_69 Depth=1
                                        #     Parent Loop BB75_71 Depth=2
                                        #       Parent Loop BB75_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB75_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB75_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB75_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_75
.LBB75_78:                              # %for.end259
                                        #   in Loop: Header=BB75_73 Depth=3
	jmp	.LBB75_79
.LBB75_79:                              # %for.inc260
                                        #   in Loop: Header=BB75_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_73
.LBB75_80:                              # %for.end262
                                        #   in Loop: Header=BB75_71 Depth=2
	jmp	.LBB75_81
.LBB75_81:                              # %for.inc263
                                        #   in Loop: Header=BB75_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_71
.LBB75_82:                              # %for.end265
                                        #   in Loop: Header=BB75_69 Depth=1
	jmp	.LBB75_83
.LBB75_83:                              # %for.inc266
                                        #   in Loop: Header=BB75_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_69
.LBB75_84:                              # %for.end268
	jmp	.LBB75_94
.LBB75_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB75_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB75_86 Depth=1
	movl	$0, -4(%rbp)
.LBB75_88:                              # %for.cond274
                                        #   Parent Loop BB75_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB75_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB75_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_88
.LBB75_91:                              # %for.end294
                                        #   in Loop: Header=BB75_86 Depth=1
	jmp	.LBB75_92
.LBB75_92:                              # %for.inc295
                                        #   in Loop: Header=BB75_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_86
.LBB75_93:                              # %for.end297
	jmp	.LBB75_94
.LBB75_94:                              # %if.end298
	jmp	.LBB75_95
.LBB75_95:                              # %if.end299
	jmp	.LBB75_105
.LBB75_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB75_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB75_97 Depth=1
	movl	$0, -4(%rbp)
.LBB75_99:                              # %for.cond305
                                        #   Parent Loop BB75_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB75_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB75_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_99
.LBB75_102:                             # %for.end317
                                        #   in Loop: Header=BB75_97 Depth=1
	jmp	.LBB75_103
.LBB75_103:                             # %for.inc318
                                        #   in Loop: Header=BB75_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_97
.LBB75_104:                             # %for.end320
	jmp	.LBB75_105
.LBB75_105:                             # %if.end321
	jmp	.LBB75_180
.LBB75_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB75_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB75_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_110 Depth 2
                                        #       Child Loop BB75_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB75_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB75_108 Depth=1
	movl	$0, -12(%rbp)
.LBB75_110:                             # %for.cond331
                                        #   Parent Loop BB75_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB75_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB75_110 Depth=2
	movl	$0, -4(%rbp)
.LBB75_112:                             # %for.cond335
                                        #   Parent Loop BB75_108 Depth=1
                                        #     Parent Loop BB75_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB75_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB75_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB75_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_112
.LBB75_115:                             # %for.end359
                                        #   in Loop: Header=BB75_110 Depth=2
	jmp	.LBB75_116
.LBB75_116:                             # %for.inc360
                                        #   in Loop: Header=BB75_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_110
.LBB75_117:                             # %for.end362
                                        #   in Loop: Header=BB75_108 Depth=1
	jmp	.LBB75_118
.LBB75_118:                             # %for.inc363
                                        #   in Loop: Header=BB75_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_108
.LBB75_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB75_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB75_120 Depth=1
	movl	$0, -8(%rbp)
.LBB75_122:                             # %for.cond370
                                        #   Parent Loop BB75_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB75_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB75_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_122
.LBB75_125:                             # %for.end380
                                        #   in Loop: Header=BB75_120 Depth=1
	jmp	.LBB75_126
.LBB75_126:                             # %for.inc381
                                        #   in Loop: Header=BB75_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_120
.LBB75_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB75_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB75_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB75_129 Depth=1
	movl	$0, -4(%rbp)
.LBB75_131:                             # %for.cond390
                                        #   Parent Loop BB75_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB75_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB75_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_131
.LBB75_134:                             # %for.end410
                                        #   in Loop: Header=BB75_129 Depth=1
	jmp	.LBB75_135
.LBB75_135:                             # %for.inc411
                                        #   in Loop: Header=BB75_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_129
.LBB75_136:                             # %for.end413
	jmp	.LBB75_156
.LBB75_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB75_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB75_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_141 Depth 2
                                        #       Child Loop BB75_143 Depth 3
                                        #         Child Loop BB75_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB75_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB75_141:                             # %for.cond425
                                        #   Parent Loop BB75_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_143 Depth 3
                                        #         Child Loop BB75_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB75_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB75_143:                             # %for.cond452
                                        #   Parent Loop BB75_139 Depth=1
                                        #     Parent Loop BB75_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB75_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB75_143 Depth=3
	movl	$0, -4(%rbp)
.LBB75_145:                             # %for.cond456
                                        #   Parent Loop BB75_139 Depth=1
                                        #     Parent Loop BB75_141 Depth=2
                                        #       Parent Loop BB75_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB75_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB75_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB75_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_145
.LBB75_148:                             # %for.end475
                                        #   in Loop: Header=BB75_143 Depth=3
	jmp	.LBB75_149
.LBB75_149:                             # %for.inc476
                                        #   in Loop: Header=BB75_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_143
.LBB75_150:                             # %for.end478
                                        #   in Loop: Header=BB75_141 Depth=2
	jmp	.LBB75_151
.LBB75_151:                             # %for.inc479
                                        #   in Loop: Header=BB75_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_141
.LBB75_152:                             # %for.end481
                                        #   in Loop: Header=BB75_139 Depth=1
	jmp	.LBB75_153
.LBB75_153:                             # %for.inc482
                                        #   in Loop: Header=BB75_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_139
.LBB75_154:                             # %for.end484
	jmp	.LBB75_155
.LBB75_155:                             # %if.end485
	jmp	.LBB75_156
.LBB75_156:                             # %if.end486
	jmp	.LBB75_157
.LBB75_157:                             # %if.end487
	jmp	.LBB75_180
.LBB75_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB75_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB75_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB75_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB75_161 Depth=1
	movl	$0, -4(%rbp)
.LBB75_163:                             # %for.cond499
                                        #   Parent Loop BB75_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB75_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB75_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_163
.LBB75_166:                             # %for.end519
                                        #   in Loop: Header=BB75_161 Depth=1
	jmp	.LBB75_167
.LBB75_167:                             # %for.inc520
                                        #   in Loop: Header=BB75_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_161
.LBB75_168:                             # %for.end522
	jmp	.LBB75_169
.LBB75_169:                             # %if.end523
	jmp	.LBB75_179
.LBB75_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB75_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB75_171 Depth=1
	movl	$0, -4(%rbp)
.LBB75_173:                             # %for.cond529
                                        #   Parent Loop BB75_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB75_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB75_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_173
.LBB75_176:                             # %for.end541
                                        #   in Loop: Header=BB75_171 Depth=1
	jmp	.LBB75_177
.LBB75_177:                             # %for.inc542
                                        #   in Loop: Header=BB75_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_171
.LBB75_178:                             # %for.end544
	jmp	.LBB75_179
.LBB75_179:                             # %if.end545
	jmp	.LBB75_180
.LBB75_180:                             # %sw.epilog
	cmpl	$360620976, -68(%rbp)   # imm = 0x157EA3B0
	jne	.LBB75_182
.LBB75_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_181
.Lfunc_end75:
	.size	Conceal_Error.65, .Lfunc_end75-Conceal_Error.65
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI75_0:
	.quad	.LBB75_16
	.quad	.LBB75_158
	.quad	.LBB75_106
	.quad	.LBB75_180
	.quad	.LBB75_36
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.66
.LCPI76_0:
	.quad	4636737291354636288     # double 100
.LCPI76_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.66
	.p2align	4, 0x90
	.type	Build_Status_Map.66,@function
Build_Status_Map.66:                    # @Build_Status_Map.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1517257635, -44(%rbp)  # imm = 0x5A6F83A3
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB76_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_3:                               # %for.cond2
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB76_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB76_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB76_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB76_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB76_13
.LBB76_6:                               # %if.then
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI76_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB76_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB76_8:                               # %if.end
                                        #   in Loop: Header=BB76_3 Depth=2
	callq	rand
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI76_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB76_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB76_10:                              # %if.end20
                                        #   in Loop: Header=BB76_3 Depth=2
	callq	rand
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI76_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB76_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	$1, -4(%rbp)
.LBB76_12:                              # %if.end29
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB76_13:                              # %if.end30
                                        #   in Loop: Header=BB76_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB76_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB76_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB76_18
.LBB76_15:                              # %if.else
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB76_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB76_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB76_17:                              # %if.end49
                                        #   in Loop: Header=BB76_3 Depth=2
	jmp	.LBB76_18
.LBB76_18:                              # %if.end50
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_3
.LBB76_20:                              # %for.end
                                        #   in Loop: Header=BB76_1 Depth=1
	jmp	.LBB76_21
.LBB76_21:                              # %for.inc53
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_1
.LBB76_22:                              # %for.end55
	cmpl	$1517257635, -44(%rbp)  # imm = 0x5A6F83A3
	jne	.LBB76_24
.LBB76_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_23
.Lfunc_end76:
	.size	Build_Status_Map.66, .Lfunc_end76-Build_Status_Map.66
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.67       # -- Begin function DecOneForthPix.67
	.p2align	4, 0x90
	.type	DecOneForthPix.67,@function
DecOneForthPix.67:                      # @DecOneForthPix.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$581261721, -12(%rbp)   # imm = 0x22A55999
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB77_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB77_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB77_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_1
.LBB77_4:                               # %for.end
	cmpl	$581261721, -12(%rbp)   # imm = 0x22A55999
	jne	.LBB77_6
.LBB77_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_5
.Lfunc_end77:
	.size	DecOneForthPix.67, .Lfunc_end77-DecOneForthPix.67
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.68        # -- Begin function Conceal_Error.68
	.p2align	4, 0x90
	.type	Conceal_Error.68,@function
Conceal_Error.68:                       # @Conceal_Error.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$448179060, -68(%rbp)   # imm = 0x1AB6AB74
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB78_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB78_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB78_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB78_4:                               # %land.end
.LBB78_5:                               # %lor.end
.LBB78_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB78_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB78_9
.LBB78_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB78_14
.LBB78_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB78_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB78_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB78_12:                              # %land.end51
.LBB78_13:                              # %lor.end53
.LBB78_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB78_180
# %bb.15:                               # %land.end54
	movq	.LJTI78_0(,%rax,8), %rax
	jmpq	*%rax
.LBB78_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB78_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB78_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB78_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB78_18 Depth=1
	movl	$0, -4(%rbp)
.LBB78_20:                              # %for.cond68
                                        #   Parent Loop BB78_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB78_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB78_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB78_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_20
.LBB78_23:                              # %for.end
                                        #   in Loop: Header=BB78_18 Depth=1
	jmp	.LBB78_24
.LBB78_24:                              # %for.inc85
                                        #   in Loop: Header=BB78_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_18
.LBB78_25:                              # %for.end87
	jmp	.LBB78_35
.LBB78_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB78_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB78_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB78_27 Depth=1
	movl	$0, -4(%rbp)
.LBB78_29:                              # %for.cond92
                                        #   Parent Loop BB78_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB78_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB78_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB78_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_29
.LBB78_32:                              # %for.end104
                                        #   in Loop: Header=BB78_27 Depth=1
	jmp	.LBB78_33
.LBB78_33:                              # %for.inc105
                                        #   in Loop: Header=BB78_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_27
.LBB78_34:                              # %for.end107
	jmp	.LBB78_35
.LBB78_35:                              # %if.end
	jmp	.LBB78_180
.LBB78_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB78_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_39 Depth 2
                                        #       Child Loop BB78_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB78_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB78_37 Depth=1
	movl	$0, -12(%rbp)
.LBB78_39:                              # %for.cond113
                                        #   Parent Loop BB78_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB78_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB78_39 Depth=2
	movl	$0, -4(%rbp)
.LBB78_41:                              # %for.cond117
                                        #   Parent Loop BB78_37 Depth=1
                                        #     Parent Loop BB78_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB78_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB78_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB78_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_41
.LBB78_44:                              # %for.end141
                                        #   in Loop: Header=BB78_39 Depth=2
	jmp	.LBB78_45
.LBB78_45:                              # %for.inc142
                                        #   in Loop: Header=BB78_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_39
.LBB78_46:                              # %for.end144
                                        #   in Loop: Header=BB78_37 Depth=1
	jmp	.LBB78_47
.LBB78_47:                              # %for.inc145
                                        #   in Loop: Header=BB78_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_37
.LBB78_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB78_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB78_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB78_49 Depth=1
	movl	$0, -8(%rbp)
.LBB78_51:                              # %for.cond152
                                        #   Parent Loop BB78_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB78_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB78_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB78_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_51
.LBB78_54:                              # %for.end162
                                        #   in Loop: Header=BB78_49 Depth=1
	jmp	.LBB78_55
.LBB78_55:                              # %for.inc163
                                        #   in Loop: Header=BB78_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_49
.LBB78_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB78_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB78_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB78_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB78_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB78_59 Depth=1
	movl	$0, -4(%rbp)
.LBB78_61:                              # %for.cond175
                                        #   Parent Loop BB78_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB78_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB78_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB78_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_61
.LBB78_64:                              # %for.end195
                                        #   in Loop: Header=BB78_59 Depth=1
	jmp	.LBB78_65
.LBB78_65:                              # %for.inc196
                                        #   in Loop: Header=BB78_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_59
.LBB78_66:                              # %for.end198
	jmp	.LBB78_95
.LBB78_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB78_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB78_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_71 Depth 2
                                        #       Child Loop BB78_73 Depth 3
                                        #         Child Loop BB78_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB78_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB78_71:                              # %for.cond210
                                        #   Parent Loop BB78_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_73 Depth 3
                                        #         Child Loop BB78_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB78_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB78_73:                              # %for.cond236
                                        #   Parent Loop BB78_69 Depth=1
                                        #     Parent Loop BB78_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB78_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB78_73 Depth=3
	movl	$0, -4(%rbp)
.LBB78_75:                              # %for.cond240
                                        #   Parent Loop BB78_69 Depth=1
                                        #     Parent Loop BB78_71 Depth=2
                                        #       Parent Loop BB78_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB78_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB78_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB78_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_75
.LBB78_78:                              # %for.end259
                                        #   in Loop: Header=BB78_73 Depth=3
	jmp	.LBB78_79
.LBB78_79:                              # %for.inc260
                                        #   in Loop: Header=BB78_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_73
.LBB78_80:                              # %for.end262
                                        #   in Loop: Header=BB78_71 Depth=2
	jmp	.LBB78_81
.LBB78_81:                              # %for.inc263
                                        #   in Loop: Header=BB78_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_71
.LBB78_82:                              # %for.end265
                                        #   in Loop: Header=BB78_69 Depth=1
	jmp	.LBB78_83
.LBB78_83:                              # %for.inc266
                                        #   in Loop: Header=BB78_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_69
.LBB78_84:                              # %for.end268
	jmp	.LBB78_94
.LBB78_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB78_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB78_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB78_86 Depth=1
	movl	$0, -4(%rbp)
.LBB78_88:                              # %for.cond274
                                        #   Parent Loop BB78_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB78_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB78_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB78_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_88
.LBB78_91:                              # %for.end294
                                        #   in Loop: Header=BB78_86 Depth=1
	jmp	.LBB78_92
.LBB78_92:                              # %for.inc295
                                        #   in Loop: Header=BB78_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_86
.LBB78_93:                              # %for.end297
	jmp	.LBB78_94
.LBB78_94:                              # %if.end298
	jmp	.LBB78_95
.LBB78_95:                              # %if.end299
	jmp	.LBB78_105
.LBB78_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB78_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB78_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB78_97 Depth=1
	movl	$0, -4(%rbp)
.LBB78_99:                              # %for.cond305
                                        #   Parent Loop BB78_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB78_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB78_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB78_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_99
.LBB78_102:                             # %for.end317
                                        #   in Loop: Header=BB78_97 Depth=1
	jmp	.LBB78_103
.LBB78_103:                             # %for.inc318
                                        #   in Loop: Header=BB78_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_97
.LBB78_104:                             # %for.end320
	jmp	.LBB78_105
.LBB78_105:                             # %if.end321
	jmp	.LBB78_180
.LBB78_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB78_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB78_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_110 Depth 2
                                        #       Child Loop BB78_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB78_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB78_108 Depth=1
	movl	$0, -12(%rbp)
.LBB78_110:                             # %for.cond331
                                        #   Parent Loop BB78_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB78_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB78_110 Depth=2
	movl	$0, -4(%rbp)
.LBB78_112:                             # %for.cond335
                                        #   Parent Loop BB78_108 Depth=1
                                        #     Parent Loop BB78_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB78_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB78_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB78_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_112
.LBB78_115:                             # %for.end359
                                        #   in Loop: Header=BB78_110 Depth=2
	jmp	.LBB78_116
.LBB78_116:                             # %for.inc360
                                        #   in Loop: Header=BB78_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_110
.LBB78_117:                             # %for.end362
                                        #   in Loop: Header=BB78_108 Depth=1
	jmp	.LBB78_118
.LBB78_118:                             # %for.inc363
                                        #   in Loop: Header=BB78_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_108
.LBB78_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB78_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB78_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB78_120 Depth=1
	movl	$0, -8(%rbp)
.LBB78_122:                             # %for.cond370
                                        #   Parent Loop BB78_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB78_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB78_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB78_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_122
.LBB78_125:                             # %for.end380
                                        #   in Loop: Header=BB78_120 Depth=1
	jmp	.LBB78_126
.LBB78_126:                             # %for.inc381
                                        #   in Loop: Header=BB78_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_120
.LBB78_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB78_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB78_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB78_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB78_129 Depth=1
	movl	$0, -4(%rbp)
.LBB78_131:                             # %for.cond390
                                        #   Parent Loop BB78_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB78_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB78_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB78_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_131
.LBB78_134:                             # %for.end410
                                        #   in Loop: Header=BB78_129 Depth=1
	jmp	.LBB78_135
.LBB78_135:                             # %for.inc411
                                        #   in Loop: Header=BB78_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_129
.LBB78_136:                             # %for.end413
	jmp	.LBB78_156
.LBB78_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB78_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB78_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_141 Depth 2
                                        #       Child Loop BB78_143 Depth 3
                                        #         Child Loop BB78_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB78_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB78_141:                             # %for.cond425
                                        #   Parent Loop BB78_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_143 Depth 3
                                        #         Child Loop BB78_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB78_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB78_143:                             # %for.cond452
                                        #   Parent Loop BB78_139 Depth=1
                                        #     Parent Loop BB78_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB78_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB78_143 Depth=3
	movl	$0, -4(%rbp)
.LBB78_145:                             # %for.cond456
                                        #   Parent Loop BB78_139 Depth=1
                                        #     Parent Loop BB78_141 Depth=2
                                        #       Parent Loop BB78_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB78_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB78_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB78_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_145
.LBB78_148:                             # %for.end475
                                        #   in Loop: Header=BB78_143 Depth=3
	jmp	.LBB78_149
.LBB78_149:                             # %for.inc476
                                        #   in Loop: Header=BB78_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_143
.LBB78_150:                             # %for.end478
                                        #   in Loop: Header=BB78_141 Depth=2
	jmp	.LBB78_151
.LBB78_151:                             # %for.inc479
                                        #   in Loop: Header=BB78_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_141
.LBB78_152:                             # %for.end481
                                        #   in Loop: Header=BB78_139 Depth=1
	jmp	.LBB78_153
.LBB78_153:                             # %for.inc482
                                        #   in Loop: Header=BB78_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_139
.LBB78_154:                             # %for.end484
	jmp	.LBB78_155
.LBB78_155:                             # %if.end485
	jmp	.LBB78_156
.LBB78_156:                             # %if.end486
	jmp	.LBB78_157
.LBB78_157:                             # %if.end487
	jmp	.LBB78_180
.LBB78_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB78_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB78_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB78_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB78_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB78_161 Depth=1
	movl	$0, -4(%rbp)
.LBB78_163:                             # %for.cond499
                                        #   Parent Loop BB78_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB78_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB78_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB78_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_163
.LBB78_166:                             # %for.end519
                                        #   in Loop: Header=BB78_161 Depth=1
	jmp	.LBB78_167
.LBB78_167:                             # %for.inc520
                                        #   in Loop: Header=BB78_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_161
.LBB78_168:                             # %for.end522
	jmp	.LBB78_169
.LBB78_169:                             # %if.end523
	jmp	.LBB78_179
.LBB78_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB78_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB78_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$0, -4(%rbp)
.LBB78_173:                             # %for.cond529
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB78_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB78_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB78_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_173
.LBB78_176:                             # %for.end541
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_177
.LBB78_177:                             # %for.inc542
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_171
.LBB78_178:                             # %for.end544
	jmp	.LBB78_179
.LBB78_179:                             # %if.end545
	jmp	.LBB78_180
.LBB78_180:                             # %sw.epilog
	cmpl	$448179060, -68(%rbp)   # imm = 0x1AB6AB74
	jne	.LBB78_182
.LBB78_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_181
.Lfunc_end78:
	.size	Conceal_Error.68, .Lfunc_end78-Conceal_Error.68
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI78_0:
	.quad	.LBB78_16
	.quad	.LBB78_158
	.quad	.LBB78_106
	.quad	.LBB78_180
	.quad	.LBB78_36
                                        # -- End function
	.text
	.globl	Conceal_Error.69        # -- Begin function Conceal_Error.69
	.p2align	4, 0x90
	.type	Conceal_Error.69,@function
Conceal_Error.69:                       # @Conceal_Error.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$299684770, -68(%rbp)   # imm = 0x11DCD3A2
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB79_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB79_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB79_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB79_4:                               # %land.end
.LBB79_5:                               # %lor.end
.LBB79_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB79_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB79_9
.LBB79_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB79_14
.LBB79_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB79_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB79_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB79_12:                              # %land.end51
.LBB79_13:                              # %lor.end53
.LBB79_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB79_180
# %bb.15:                               # %land.end54
	movq	.LJTI79_0(,%rax,8), %rax
	jmpq	*%rax
.LBB79_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB79_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB79_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB79_18 Depth=1
	movl	$0, -4(%rbp)
.LBB79_20:                              # %for.cond68
                                        #   Parent Loop BB79_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB79_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB79_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_20
.LBB79_23:                              # %for.end
                                        #   in Loop: Header=BB79_18 Depth=1
	jmp	.LBB79_24
.LBB79_24:                              # %for.inc85
                                        #   in Loop: Header=BB79_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_18
.LBB79_25:                              # %for.end87
	jmp	.LBB79_35
.LBB79_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB79_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB79_27 Depth=1
	movl	$0, -4(%rbp)
.LBB79_29:                              # %for.cond92
                                        #   Parent Loop BB79_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB79_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB79_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_29
.LBB79_32:                              # %for.end104
                                        #   in Loop: Header=BB79_27 Depth=1
	jmp	.LBB79_33
.LBB79_33:                              # %for.inc105
                                        #   in Loop: Header=BB79_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_27
.LBB79_34:                              # %for.end107
	jmp	.LBB79_35
.LBB79_35:                              # %if.end
	jmp	.LBB79_180
.LBB79_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB79_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_39 Depth 2
                                        #       Child Loop BB79_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB79_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB79_37 Depth=1
	movl	$0, -16(%rbp)
.LBB79_39:                              # %for.cond113
                                        #   Parent Loop BB79_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB79_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB79_39 Depth=2
	movl	$0, -4(%rbp)
.LBB79_41:                              # %for.cond117
                                        #   Parent Loop BB79_37 Depth=1
                                        #     Parent Loop BB79_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB79_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB79_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB79_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_41
.LBB79_44:                              # %for.end141
                                        #   in Loop: Header=BB79_39 Depth=2
	jmp	.LBB79_45
.LBB79_45:                              # %for.inc142
                                        #   in Loop: Header=BB79_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_39
.LBB79_46:                              # %for.end144
                                        #   in Loop: Header=BB79_37 Depth=1
	jmp	.LBB79_47
.LBB79_47:                              # %for.inc145
                                        #   in Loop: Header=BB79_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_37
.LBB79_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB79_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB79_49 Depth=1
	movl	$0, -8(%rbp)
.LBB79_51:                              # %for.cond152
                                        #   Parent Loop BB79_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB79_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB79_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_51
.LBB79_54:                              # %for.end162
                                        #   in Loop: Header=BB79_49 Depth=1
	jmp	.LBB79_55
.LBB79_55:                              # %for.inc163
                                        #   in Loop: Header=BB79_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_49
.LBB79_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB79_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB79_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB79_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB79_59 Depth=1
	movl	$0, -4(%rbp)
.LBB79_61:                              # %for.cond175
                                        #   Parent Loop BB79_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB79_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB79_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_61
.LBB79_64:                              # %for.end195
                                        #   in Loop: Header=BB79_59 Depth=1
	jmp	.LBB79_65
.LBB79_65:                              # %for.inc196
                                        #   in Loop: Header=BB79_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_59
.LBB79_66:                              # %for.end198
	jmp	.LBB79_95
.LBB79_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB79_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB79_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_71 Depth 2
                                        #       Child Loop BB79_73 Depth 3
                                        #         Child Loop BB79_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB79_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB79_71:                              # %for.cond210
                                        #   Parent Loop BB79_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_73 Depth 3
                                        #         Child Loop BB79_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB79_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB79_73:                              # %for.cond236
                                        #   Parent Loop BB79_69 Depth=1
                                        #     Parent Loop BB79_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB79_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB79_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB79_73 Depth=3
	movl	$0, -4(%rbp)
.LBB79_75:                              # %for.cond240
                                        #   Parent Loop BB79_69 Depth=1
                                        #     Parent Loop BB79_71 Depth=2
                                        #       Parent Loop BB79_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB79_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB79_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB79_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_75
.LBB79_78:                              # %for.end259
                                        #   in Loop: Header=BB79_73 Depth=3
	jmp	.LBB79_79
.LBB79_79:                              # %for.inc260
                                        #   in Loop: Header=BB79_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_73
.LBB79_80:                              # %for.end262
                                        #   in Loop: Header=BB79_71 Depth=2
	jmp	.LBB79_81
.LBB79_81:                              # %for.inc263
                                        #   in Loop: Header=BB79_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_71
.LBB79_82:                              # %for.end265
                                        #   in Loop: Header=BB79_69 Depth=1
	jmp	.LBB79_83
.LBB79_83:                              # %for.inc266
                                        #   in Loop: Header=BB79_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_69
.LBB79_84:                              # %for.end268
	jmp	.LBB79_94
.LBB79_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB79_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB79_86 Depth=1
	movl	$0, -4(%rbp)
.LBB79_88:                              # %for.cond274
                                        #   Parent Loop BB79_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB79_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB79_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_88
.LBB79_91:                              # %for.end294
                                        #   in Loop: Header=BB79_86 Depth=1
	jmp	.LBB79_92
.LBB79_92:                              # %for.inc295
                                        #   in Loop: Header=BB79_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_86
.LBB79_93:                              # %for.end297
	jmp	.LBB79_94
.LBB79_94:                              # %if.end298
	jmp	.LBB79_95
.LBB79_95:                              # %if.end299
	jmp	.LBB79_105
.LBB79_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB79_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB79_97 Depth=1
	movl	$0, -4(%rbp)
.LBB79_99:                              # %for.cond305
                                        #   Parent Loop BB79_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB79_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB79_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_99
.LBB79_102:                             # %for.end317
                                        #   in Loop: Header=BB79_97 Depth=1
	jmp	.LBB79_103
.LBB79_103:                             # %for.inc318
                                        #   in Loop: Header=BB79_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_97
.LBB79_104:                             # %for.end320
	jmp	.LBB79_105
.LBB79_105:                             # %if.end321
	jmp	.LBB79_180
.LBB79_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB79_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB79_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_110 Depth 2
                                        #       Child Loop BB79_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB79_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB79_108 Depth=1
	movl	$0, -16(%rbp)
.LBB79_110:                             # %for.cond331
                                        #   Parent Loop BB79_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB79_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB79_110 Depth=2
	movl	$0, -4(%rbp)
.LBB79_112:                             # %for.cond335
                                        #   Parent Loop BB79_108 Depth=1
                                        #     Parent Loop BB79_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB79_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB79_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB79_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_112
.LBB79_115:                             # %for.end359
                                        #   in Loop: Header=BB79_110 Depth=2
	jmp	.LBB79_116
.LBB79_116:                             # %for.inc360
                                        #   in Loop: Header=BB79_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_110
.LBB79_117:                             # %for.end362
                                        #   in Loop: Header=BB79_108 Depth=1
	jmp	.LBB79_118
.LBB79_118:                             # %for.inc363
                                        #   in Loop: Header=BB79_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_108
.LBB79_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB79_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB79_120 Depth=1
	movl	$0, -8(%rbp)
.LBB79_122:                             # %for.cond370
                                        #   Parent Loop BB79_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB79_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB79_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_122
.LBB79_125:                             # %for.end380
                                        #   in Loop: Header=BB79_120 Depth=1
	jmp	.LBB79_126
.LBB79_126:                             # %for.inc381
                                        #   in Loop: Header=BB79_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_120
.LBB79_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB79_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB79_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB79_129 Depth=1
	movl	$0, -4(%rbp)
.LBB79_131:                             # %for.cond390
                                        #   Parent Loop BB79_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB79_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB79_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_131
.LBB79_134:                             # %for.end410
                                        #   in Loop: Header=BB79_129 Depth=1
	jmp	.LBB79_135
.LBB79_135:                             # %for.inc411
                                        #   in Loop: Header=BB79_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_129
.LBB79_136:                             # %for.end413
	jmp	.LBB79_156
.LBB79_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB79_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB79_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_141 Depth 2
                                        #       Child Loop BB79_143 Depth 3
                                        #         Child Loop BB79_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB79_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB79_141:                             # %for.cond425
                                        #   Parent Loop BB79_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_143 Depth 3
                                        #         Child Loop BB79_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB79_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB79_143:                             # %for.cond452
                                        #   Parent Loop BB79_139 Depth=1
                                        #     Parent Loop BB79_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB79_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB79_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB79_143 Depth=3
	movl	$0, -4(%rbp)
.LBB79_145:                             # %for.cond456
                                        #   Parent Loop BB79_139 Depth=1
                                        #     Parent Loop BB79_141 Depth=2
                                        #       Parent Loop BB79_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB79_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB79_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB79_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_145
.LBB79_148:                             # %for.end475
                                        #   in Loop: Header=BB79_143 Depth=3
	jmp	.LBB79_149
.LBB79_149:                             # %for.inc476
                                        #   in Loop: Header=BB79_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_143
.LBB79_150:                             # %for.end478
                                        #   in Loop: Header=BB79_141 Depth=2
	jmp	.LBB79_151
.LBB79_151:                             # %for.inc479
                                        #   in Loop: Header=BB79_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_141
.LBB79_152:                             # %for.end481
                                        #   in Loop: Header=BB79_139 Depth=1
	jmp	.LBB79_153
.LBB79_153:                             # %for.inc482
                                        #   in Loop: Header=BB79_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_139
.LBB79_154:                             # %for.end484
	jmp	.LBB79_155
.LBB79_155:                             # %if.end485
	jmp	.LBB79_156
.LBB79_156:                             # %if.end486
	jmp	.LBB79_157
.LBB79_157:                             # %if.end487
	jmp	.LBB79_180
.LBB79_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB79_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB79_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB79_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB79_161 Depth=1
	movl	$0, -4(%rbp)
.LBB79_163:                             # %for.cond499
                                        #   Parent Loop BB79_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB79_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB79_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_163
.LBB79_166:                             # %for.end519
                                        #   in Loop: Header=BB79_161 Depth=1
	jmp	.LBB79_167
.LBB79_167:                             # %for.inc520
                                        #   in Loop: Header=BB79_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_161
.LBB79_168:                             # %for.end522
	jmp	.LBB79_169
.LBB79_169:                             # %if.end523
	jmp	.LBB79_179
.LBB79_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB79_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB79_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB79_171 Depth=1
	movl	$0, -4(%rbp)
.LBB79_173:                             # %for.cond529
                                        #   Parent Loop BB79_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB79_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB79_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB79_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_173
.LBB79_176:                             # %for.end541
                                        #   in Loop: Header=BB79_171 Depth=1
	jmp	.LBB79_177
.LBB79_177:                             # %for.inc542
                                        #   in Loop: Header=BB79_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_171
.LBB79_178:                             # %for.end544
	jmp	.LBB79_179
.LBB79_179:                             # %if.end545
	jmp	.LBB79_180
.LBB79_180:                             # %sw.epilog
	cmpl	$299684770, -68(%rbp)   # imm = 0x11DCD3A2
	jne	.LBB79_182
.LBB79_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_181
.Lfunc_end79:
	.size	Conceal_Error.69, .Lfunc_end79-Conceal_Error.69
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI79_0:
	.quad	.LBB79_16
	.quad	.LBB79_158
	.quad	.LBB79_106
	.quad	.LBB79_180
	.quad	.LBB79_36
                                        # -- End function
	.text
	.globl	Get_Reference_Block.70  # -- Begin function Get_Reference_Block.70
	.p2align	4, 0x90
	.type	Get_Reference_Block.70,@function
Get_Reference_Block.70:                 # @Get_Reference_Block.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$954218857, -28(%rbp)   # imm = 0x38E03969
	movq	%rdi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -20(%rbp)
	movq	%r9, -56(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB80_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB80_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -8(%rbp)
.LBB80_3:                               # %for.cond5
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB80_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB80_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB80_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_3
.LBB80_6:                               # %for.end
                                        #   in Loop: Header=BB80_1 Depth=1
	jmp	.LBB80_7
.LBB80_7:                               # %for.inc14
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_1
.LBB80_8:                               # %for.end16
	cmpl	$954218857, -28(%rbp)   # imm = 0x38E03969
	jne	.LBB80_10
.LBB80_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_9
.Lfunc_end80:
	.size	Get_Reference_Block.70, .Lfunc_end80-Get_Reference_Block.70
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.71  # -- Begin function Get_Reference_Pixel.71
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.71,@function
Get_Reference_Pixel.71:                 # @Get_Reference_Pixel.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$294267030, -104(%rbp)  # imm = 0x118A2896
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB81_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB81_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB81_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB81_5
.LBB81_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB81_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB81_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB81_11
.LBB81_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB81_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB81_10
.LBB81_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB81_10:                              # %cond.end14
.LBB81_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB81_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB81_14
.LBB81_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB81_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB81_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB81_20
.LBB81_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB81_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB81_19
.LBB81_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB81_19:                              # %cond.end29
.LBB81_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_332
.LBB81_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB81_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB81_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB81_25
.LBB81_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB81_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB81_31
.LBB81_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB81_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB81_30
.LBB81_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB81_30:                              # %cond.end52
.LBB81_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB81_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB81_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB81_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB81_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB81_36
.LBB81_35:                              # %cond.false61
                                        #   in Loop: Header=BB81_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB81_36:                              # %cond.end63
                                        #   in Loop: Header=BB81_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB81_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB81_42
.LBB81_38:                              # %cond.false68
                                        #   in Loop: Header=BB81_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB81_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB81_41
.LBB81_40:                              # %cond.false73
                                        #   in Loop: Header=BB81_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB81_41:                              # %cond.end75
                                        #   in Loop: Header=BB81_32 Depth=1
.LBB81_42:                              # %cond.end77
                                        #   in Loop: Header=BB81_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB81_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_32
.LBB81_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_47
.LBB81_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB81_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB81_53
.LBB81_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_52
.LBB81_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB81_52:                              # %cond.end113
.LBB81_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB81_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB81_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB81_57
.LBB81_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB81_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB81_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB81_63
.LBB81_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB81_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB81_62
.LBB81_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB81_62:                              # %cond.end136
.LBB81_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB81_76
.LBB81_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB81_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB81_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB81_68
.LBB81_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB81_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB81_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB81_74
.LBB81_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB81_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB81_73
.LBB81_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB81_73:                              # %cond.end169
.LBB81_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB81_75:                              # %if.end
	jmp	.LBB81_76
.LBB81_76:                              # %if.end178
	jmp	.LBB81_331
.LBB81_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB81_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB81_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB81_81
.LBB81_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB81_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB81_87
.LBB81_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB81_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB81_86
.LBB81_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB81_86:                              # %cond.end197
.LBB81_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB81_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB81_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB81_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB81_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB81_92
.LBB81_91:                              # %cond.false209
                                        #   in Loop: Header=BB81_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB81_92:                              # %cond.end211
                                        #   in Loop: Header=BB81_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB81_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB81_98
.LBB81_94:                              # %cond.false216
                                        #   in Loop: Header=BB81_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB81_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB81_97
.LBB81_96:                              # %cond.false221
                                        #   in Loop: Header=BB81_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB81_97:                              # %cond.end223
                                        #   in Loop: Header=BB81_88 Depth=1
.LBB81_98:                              # %cond.end225
                                        #   in Loop: Header=BB81_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB81_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_88
.LBB81_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_103
.LBB81_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB81_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB81_109
.LBB81_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_108
.LBB81_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB81_108:                             # %cond.end266
.LBB81_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB81_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB81_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB81_113
.LBB81_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB81_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB81_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB81_119
.LBB81_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB81_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB81_118
.LBB81_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB81_118:                             # %cond.end287
.LBB81_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB81_132
.LBB81_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB81_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB81_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB81_124
.LBB81_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB81_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB81_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB81_130
.LBB81_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB81_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB81_129
.LBB81_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB81_129:                             # %cond.end320
.LBB81_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB81_131:                             # %if.end331
	jmp	.LBB81_132
.LBB81_132:                             # %if.end332
	jmp	.LBB81_330
.LBB81_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB81_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB81_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB81_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB81_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB81_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB81_139
.LBB81_138:                             # %cond.false345
                                        #   in Loop: Header=BB81_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB81_139:                             # %cond.end347
                                        #   in Loop: Header=BB81_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB81_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB81_145
.LBB81_141:                             # %cond.false352
                                        #   in Loop: Header=BB81_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB81_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB81_144
.LBB81_143:                             # %cond.false357
                                        #   in Loop: Header=BB81_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB81_144:                             # %cond.end359
                                        #   in Loop: Header=BB81_135 Depth=1
.LBB81_145:                             # %cond.end361
                                        #   in Loop: Header=BB81_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB81_146:                             # %for.cond363
                                        #   Parent Loop BB81_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB81_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB81_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB81_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB81_150
.LBB81_149:                             # %cond.false371
                                        #   in Loop: Header=BB81_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB81_150:                             # %cond.end373
                                        #   in Loop: Header=BB81_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB81_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB81_156
.LBB81_152:                             # %cond.false378
                                        #   in Loop: Header=BB81_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB81_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB81_155
.LBB81_154:                             # %cond.false383
                                        #   in Loop: Header=BB81_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB81_155:                             # %cond.end385
                                        #   in Loop: Header=BB81_146 Depth=2
.LBB81_156:                             # %cond.end387
                                        #   in Loop: Header=BB81_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB81_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_146
.LBB81_158:                             # %for.end401
                                        #   in Loop: Header=BB81_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB81_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_135
.LBB81_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB81_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB81_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB81_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB81_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_161
.LBB81_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_167
.LBB81_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB81_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB81_173
.LBB81_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_172
.LBB81_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB81_172:                             # %cond.end449
.LBB81_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB81_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB81_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_177
.LBB81_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB81_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB81_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB81_183
.LBB81_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB81_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_182
.LBB81_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB81_182:                             # %cond.end486
.LBB81_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB81_196
.LBB81_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB81_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB81_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_188
.LBB81_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB81_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB81_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB81_194
.LBB81_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB81_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_193
.LBB81_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB81_193:                             # %cond.end526
.LBB81_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB81_195:                             # %if.end532
	jmp	.LBB81_196
.LBB81_196:                             # %if.end533
	jmp	.LBB81_329
.LBB81_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB81_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB81_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB81_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB81_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB81_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB81_203
.LBB81_202:                             # %cond.false546
                                        #   in Loop: Header=BB81_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB81_203:                             # %cond.end548
                                        #   in Loop: Header=BB81_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB81_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB81_209
.LBB81_205:                             # %cond.false553
                                        #   in Loop: Header=BB81_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB81_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB81_208
.LBB81_207:                             # %cond.false558
                                        #   in Loop: Header=BB81_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB81_208:                             # %cond.end560
                                        #   in Loop: Header=BB81_199 Depth=1
.LBB81_209:                             # %cond.end562
                                        #   in Loop: Header=BB81_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB81_210:                             # %for.cond564
                                        #   Parent Loop BB81_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB81_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB81_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB81_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB81_214
.LBB81_213:                             # %cond.false572
                                        #   in Loop: Header=BB81_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB81_214:                             # %cond.end574
                                        #   in Loop: Header=BB81_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB81_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB81_220
.LBB81_216:                             # %cond.false579
                                        #   in Loop: Header=BB81_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB81_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB81_219
.LBB81_218:                             # %cond.false584
                                        #   in Loop: Header=BB81_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB81_219:                             # %cond.end586
                                        #   in Loop: Header=BB81_210 Depth=2
.LBB81_220:                             # %cond.end588
                                        #   in Loop: Header=BB81_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB81_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_210
.LBB81_222:                             # %for.end602
                                        #   in Loop: Header=BB81_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB81_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_199
.LBB81_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB81_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB81_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB81_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB81_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_225
.LBB81_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_231
.LBB81_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB81_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB81_237
.LBB81_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_236
.LBB81_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB81_236:                             # %cond.end650
.LBB81_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB81_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB81_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_241
.LBB81_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB81_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB81_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB81_247
.LBB81_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB81_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_246
.LBB81_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB81_246:                             # %cond.end687
.LBB81_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB81_258
.LBB81_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB81_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_251
.LBB81_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB81_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB81_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB81_257
.LBB81_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB81_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_256
.LBB81_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB81_256:                             # %cond.end724
.LBB81_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB81_258:                             # %if.end730
	jmp	.LBB81_328
.LBB81_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB81_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB81_262
.LBB81_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB81_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB81_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB81_265
.LBB81_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB81_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB81_271
.LBB81_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB81_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB81_270
.LBB81_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB81_270:                             # %cond.end753
.LBB81_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB81_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB81_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB81_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB81_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB81_276
.LBB81_275:                             # %cond.false765
                                        #   in Loop: Header=BB81_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB81_276:                             # %cond.end767
                                        #   in Loop: Header=BB81_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB81_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB81_282
.LBB81_278:                             # %cond.false772
                                        #   in Loop: Header=BB81_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB81_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB81_281
.LBB81_280:                             # %cond.false777
                                        #   in Loop: Header=BB81_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB81_281:                             # %cond.end779
                                        #   in Loop: Header=BB81_272 Depth=1
.LBB81_282:                             # %cond.end781
                                        #   in Loop: Header=BB81_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB81_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_272
.LBB81_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_287
.LBB81_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB81_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB81_293
.LBB81_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_292
.LBB81_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB81_292:                             # %cond.end822
.LBB81_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB81_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB81_296
.LBB81_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB81_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB81_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB81_299
.LBB81_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB81_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB81_305
.LBB81_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB81_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB81_304
.LBB81_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB81_304:                             # %cond.end847
.LBB81_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB81_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB81_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB81_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB81_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB81_310
.LBB81_309:                             # %cond.false859
                                        #   in Loop: Header=BB81_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB81_310:                             # %cond.end861
                                        #   in Loop: Header=BB81_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB81_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB81_316
.LBB81_312:                             # %cond.false866
                                        #   in Loop: Header=BB81_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB81_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB81_315
.LBB81_314:                             # %cond.false871
                                        #   in Loop: Header=BB81_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB81_315:                             # %cond.end873
                                        #   in Loop: Header=BB81_306 Depth=1
.LBB81_316:                             # %cond.end875
                                        #   in Loop: Header=BB81_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB81_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_306
.LBB81_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_321
.LBB81_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB81_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB81_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB81_327
.LBB81_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB81_326
.LBB81_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB81_326:                             # %cond.end916
.LBB81_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB81_328:                             # %if.end922
	jmp	.LBB81_329
.LBB81_329:                             # %if.end923
	jmp	.LBB81_330
.LBB81_330:                             # %if.end924
	jmp	.LBB81_331
.LBB81_331:                             # %if.end925
	jmp	.LBB81_332
.LBB81_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$294267030, -104(%rbp)  # imm = 0x118A2896
	jne	.LBB81_334
.LBB81_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_333
.Lfunc_end81:
	.size	Get_Reference_Pixel.71, .Lfunc_end81-Get_Reference_Pixel.71
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.72        # -- Begin function Conceal_Error.72
	.p2align	4, 0x90
	.type	Conceal_Error.72,@function
Conceal_Error.72:                       # @Conceal_Error.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$586896591, -68(%rbp)   # imm = 0x22FB54CF
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB82_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB82_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB82_4:                               # %land.end
.LBB82_5:                               # %lor.end
.LBB82_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB82_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB82_9
.LBB82_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB82_14
.LBB82_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB82_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB82_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB82_12:                              # %land.end51
.LBB82_13:                              # %lor.end53
.LBB82_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB82_180
# %bb.15:                               # %land.end54
	movq	.LJTI82_0(,%rax,8), %rax
	jmpq	*%rax
.LBB82_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB82_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB82_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB82_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB82_18 Depth=1
	movl	$0, -4(%rbp)
.LBB82_20:                              # %for.cond68
                                        #   Parent Loop BB82_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB82_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB82_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB82_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_20
.LBB82_23:                              # %for.end
                                        #   in Loop: Header=BB82_18 Depth=1
	jmp	.LBB82_24
.LBB82_24:                              # %for.inc85
                                        #   in Loop: Header=BB82_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_18
.LBB82_25:                              # %for.end87
	jmp	.LBB82_35
.LBB82_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB82_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB82_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB82_27 Depth=1
	movl	$0, -4(%rbp)
.LBB82_29:                              # %for.cond92
                                        #   Parent Loop BB82_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB82_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB82_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB82_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_29
.LBB82_32:                              # %for.end104
                                        #   in Loop: Header=BB82_27 Depth=1
	jmp	.LBB82_33
.LBB82_33:                              # %for.inc105
                                        #   in Loop: Header=BB82_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_27
.LBB82_34:                              # %for.end107
	jmp	.LBB82_35
.LBB82_35:                              # %if.end
	jmp	.LBB82_180
.LBB82_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB82_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_39 Depth 2
                                        #       Child Loop BB82_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB82_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB82_37 Depth=1
	movl	$0, -12(%rbp)
.LBB82_39:                              # %for.cond113
                                        #   Parent Loop BB82_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB82_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB82_39 Depth=2
	movl	$0, -4(%rbp)
.LBB82_41:                              # %for.cond117
                                        #   Parent Loop BB82_37 Depth=1
                                        #     Parent Loop BB82_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB82_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB82_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB82_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_41
.LBB82_44:                              # %for.end141
                                        #   in Loop: Header=BB82_39 Depth=2
	jmp	.LBB82_45
.LBB82_45:                              # %for.inc142
                                        #   in Loop: Header=BB82_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_39
.LBB82_46:                              # %for.end144
                                        #   in Loop: Header=BB82_37 Depth=1
	jmp	.LBB82_47
.LBB82_47:                              # %for.inc145
                                        #   in Loop: Header=BB82_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_37
.LBB82_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB82_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB82_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB82_49 Depth=1
	movl	$0, -8(%rbp)
.LBB82_51:                              # %for.cond152
                                        #   Parent Loop BB82_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB82_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB82_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB82_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_51
.LBB82_54:                              # %for.end162
                                        #   in Loop: Header=BB82_49 Depth=1
	jmp	.LBB82_55
.LBB82_55:                              # %for.inc163
                                        #   in Loop: Header=BB82_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_49
.LBB82_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB82_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB82_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB82_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB82_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB82_59 Depth=1
	movl	$0, -4(%rbp)
.LBB82_61:                              # %for.cond175
                                        #   Parent Loop BB82_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB82_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB82_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB82_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_61
.LBB82_64:                              # %for.end195
                                        #   in Loop: Header=BB82_59 Depth=1
	jmp	.LBB82_65
.LBB82_65:                              # %for.inc196
                                        #   in Loop: Header=BB82_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_59
.LBB82_66:                              # %for.end198
	jmp	.LBB82_95
.LBB82_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB82_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB82_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_71 Depth 2
                                        #       Child Loop BB82_73 Depth 3
                                        #         Child Loop BB82_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB82_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB82_71:                              # %for.cond210
                                        #   Parent Loop BB82_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_73 Depth 3
                                        #         Child Loop BB82_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB82_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB82_73:                              # %for.cond236
                                        #   Parent Loop BB82_69 Depth=1
                                        #     Parent Loop BB82_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB82_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB82_73 Depth=3
	movl	$0, -4(%rbp)
.LBB82_75:                              # %for.cond240
                                        #   Parent Loop BB82_69 Depth=1
                                        #     Parent Loop BB82_71 Depth=2
                                        #       Parent Loop BB82_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB82_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB82_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB82_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_75
.LBB82_78:                              # %for.end259
                                        #   in Loop: Header=BB82_73 Depth=3
	jmp	.LBB82_79
.LBB82_79:                              # %for.inc260
                                        #   in Loop: Header=BB82_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_73
.LBB82_80:                              # %for.end262
                                        #   in Loop: Header=BB82_71 Depth=2
	jmp	.LBB82_81
.LBB82_81:                              # %for.inc263
                                        #   in Loop: Header=BB82_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_71
.LBB82_82:                              # %for.end265
                                        #   in Loop: Header=BB82_69 Depth=1
	jmp	.LBB82_83
.LBB82_83:                              # %for.inc266
                                        #   in Loop: Header=BB82_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_69
.LBB82_84:                              # %for.end268
	jmp	.LBB82_94
.LBB82_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB82_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB82_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB82_86 Depth=1
	movl	$0, -4(%rbp)
.LBB82_88:                              # %for.cond274
                                        #   Parent Loop BB82_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB82_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB82_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB82_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_88
.LBB82_91:                              # %for.end294
                                        #   in Loop: Header=BB82_86 Depth=1
	jmp	.LBB82_92
.LBB82_92:                              # %for.inc295
                                        #   in Loop: Header=BB82_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_86
.LBB82_93:                              # %for.end297
	jmp	.LBB82_94
.LBB82_94:                              # %if.end298
	jmp	.LBB82_95
.LBB82_95:                              # %if.end299
	jmp	.LBB82_105
.LBB82_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB82_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB82_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB82_97 Depth=1
	movl	$0, -4(%rbp)
.LBB82_99:                              # %for.cond305
                                        #   Parent Loop BB82_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB82_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB82_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB82_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_99
.LBB82_102:                             # %for.end317
                                        #   in Loop: Header=BB82_97 Depth=1
	jmp	.LBB82_103
.LBB82_103:                             # %for.inc318
                                        #   in Loop: Header=BB82_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_97
.LBB82_104:                             # %for.end320
	jmp	.LBB82_105
.LBB82_105:                             # %if.end321
	jmp	.LBB82_180
.LBB82_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB82_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB82_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_110 Depth 2
                                        #       Child Loop BB82_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB82_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB82_108 Depth=1
	movl	$0, -12(%rbp)
.LBB82_110:                             # %for.cond331
                                        #   Parent Loop BB82_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB82_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB82_110 Depth=2
	movl	$0, -4(%rbp)
.LBB82_112:                             # %for.cond335
                                        #   Parent Loop BB82_108 Depth=1
                                        #     Parent Loop BB82_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB82_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB82_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB82_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_112
.LBB82_115:                             # %for.end359
                                        #   in Loop: Header=BB82_110 Depth=2
	jmp	.LBB82_116
.LBB82_116:                             # %for.inc360
                                        #   in Loop: Header=BB82_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_110
.LBB82_117:                             # %for.end362
                                        #   in Loop: Header=BB82_108 Depth=1
	jmp	.LBB82_118
.LBB82_118:                             # %for.inc363
                                        #   in Loop: Header=BB82_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_108
.LBB82_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB82_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB82_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB82_120 Depth=1
	movl	$0, -8(%rbp)
.LBB82_122:                             # %for.cond370
                                        #   Parent Loop BB82_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB82_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB82_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB82_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_122
.LBB82_125:                             # %for.end380
                                        #   in Loop: Header=BB82_120 Depth=1
	jmp	.LBB82_126
.LBB82_126:                             # %for.inc381
                                        #   in Loop: Header=BB82_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_120
.LBB82_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB82_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB82_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB82_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB82_129 Depth=1
	movl	$0, -4(%rbp)
.LBB82_131:                             # %for.cond390
                                        #   Parent Loop BB82_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB82_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB82_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB82_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_131
.LBB82_134:                             # %for.end410
                                        #   in Loop: Header=BB82_129 Depth=1
	jmp	.LBB82_135
.LBB82_135:                             # %for.inc411
                                        #   in Loop: Header=BB82_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_129
.LBB82_136:                             # %for.end413
	jmp	.LBB82_156
.LBB82_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB82_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB82_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_141 Depth 2
                                        #       Child Loop BB82_143 Depth 3
                                        #         Child Loop BB82_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB82_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB82_141:                             # %for.cond425
                                        #   Parent Loop BB82_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_143 Depth 3
                                        #         Child Loop BB82_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB82_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB82_143:                             # %for.cond452
                                        #   Parent Loop BB82_139 Depth=1
                                        #     Parent Loop BB82_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB82_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB82_143 Depth=3
	movl	$0, -4(%rbp)
.LBB82_145:                             # %for.cond456
                                        #   Parent Loop BB82_139 Depth=1
                                        #     Parent Loop BB82_141 Depth=2
                                        #       Parent Loop BB82_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB82_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB82_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB82_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_145
.LBB82_148:                             # %for.end475
                                        #   in Loop: Header=BB82_143 Depth=3
	jmp	.LBB82_149
.LBB82_149:                             # %for.inc476
                                        #   in Loop: Header=BB82_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_143
.LBB82_150:                             # %for.end478
                                        #   in Loop: Header=BB82_141 Depth=2
	jmp	.LBB82_151
.LBB82_151:                             # %for.inc479
                                        #   in Loop: Header=BB82_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_141
.LBB82_152:                             # %for.end481
                                        #   in Loop: Header=BB82_139 Depth=1
	jmp	.LBB82_153
.LBB82_153:                             # %for.inc482
                                        #   in Loop: Header=BB82_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_139
.LBB82_154:                             # %for.end484
	jmp	.LBB82_155
.LBB82_155:                             # %if.end485
	jmp	.LBB82_156
.LBB82_156:                             # %if.end486
	jmp	.LBB82_157
.LBB82_157:                             # %if.end487
	jmp	.LBB82_180
.LBB82_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB82_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB82_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB82_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB82_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB82_161 Depth=1
	movl	$0, -4(%rbp)
.LBB82_163:                             # %for.cond499
                                        #   Parent Loop BB82_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB82_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB82_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB82_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_163
.LBB82_166:                             # %for.end519
                                        #   in Loop: Header=BB82_161 Depth=1
	jmp	.LBB82_167
.LBB82_167:                             # %for.inc520
                                        #   in Loop: Header=BB82_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_161
.LBB82_168:                             # %for.end522
	jmp	.LBB82_169
.LBB82_169:                             # %if.end523
	jmp	.LBB82_179
.LBB82_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB82_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB82_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$0, -4(%rbp)
.LBB82_173:                             # %for.cond529
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB82_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB82_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB82_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_173
.LBB82_176:                             # %for.end541
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_177
.LBB82_177:                             # %for.inc542
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_171
.LBB82_178:                             # %for.end544
	jmp	.LBB82_179
.LBB82_179:                             # %if.end545
	jmp	.LBB82_180
.LBB82_180:                             # %sw.epilog
	cmpl	$586896591, -68(%rbp)   # imm = 0x22FB54CF
	jne	.LBB82_182
.LBB82_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_181
.Lfunc_end82:
	.size	Conceal_Error.72, .Lfunc_end82-Conceal_Error.72
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI82_0:
	.quad	.LBB82_16
	.quad	.LBB82_158
	.quad	.LBB82_106
	.quad	.LBB82_180
	.quad	.LBB82_36
                                        # -- End function
	.text
	.globl	Error_Concealment.73    # -- Begin function Error_Concealment.73
	.p2align	4, 0x90
	.type	Error_Concealment.73,@function
Error_Concealment.73:                   # @Error_Concealment.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1877796626, -12(%rbp)  # imm = 0x6FECE712
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB83_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB83_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_3:                               # %for.cond2
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB83_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB83_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB83_6:                               # %if.end
                                        #   in Loop: Header=BB83_3 Depth=2
	jmp	.LBB83_7
.LBB83_7:                               # %for.inc
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_3
.LBB83_8:                               # %for.end
                                        #   in Loop: Header=BB83_1 Depth=1
	jmp	.LBB83_9
.LBB83_9:                               # %for.inc7
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_1
.LBB83_10:                              # %for.end9
	cmpl	$1877796626, -12(%rbp)  # imm = 0x6FECE712
	jne	.LBB83_12
.LBB83_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_11
.Lfunc_end83:
	.size	Error_Concealment.73, .Lfunc_end83-Error_Concealment.73
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.74
.LCPI84_0:
	.quad	4636737291354636288     # double 100
.LCPI84_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.74
	.p2align	4, 0x90
	.type	Build_Status_Map.74,@function
Build_Status_Map.74:                    # @Build_Status_Map.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1248763692, -36(%rbp)  # imm = 0x4A6E9F2C
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB84_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB84_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	$0, -8(%rbp)
.LBB84_3:                               # %for.cond2
                                        #   Parent Loop BB84_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB84_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB84_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB84_13
.LBB84_6:                               # %if.then
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI84_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI84_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB84_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB84_8:                               # %if.end
                                        #   in Loop: Header=BB84_3 Depth=2
	callq	rand
	vmovsd	.LCPI84_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI84_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB84_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB84_10:                              # %if.end20
                                        #   in Loop: Header=BB84_3 Depth=2
	callq	rand
	vmovsd	.LCPI84_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI84_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB84_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	$1, -4(%rbp)
.LBB84_12:                              # %if.end29
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB84_13:                              # %if.end30
                                        #   in Loop: Header=BB84_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB84_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB84_18
.LBB84_15:                              # %if.else
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB84_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB84_17:                              # %if.end49
                                        #   in Loop: Header=BB84_3 Depth=2
	jmp	.LBB84_18
.LBB84_18:                              # %if.end50
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_3
.LBB84_20:                              # %for.end
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_21
.LBB84_21:                              # %for.inc53
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_1
.LBB84_22:                              # %for.end55
	cmpl	$1248763692, -36(%rbp)  # imm = 0x4A6E9F2C
	jne	.LBB84_24
.LBB84_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_23
.Lfunc_end84:
	.size	Build_Status_Map.74, .Lfunc_end84-Build_Status_Map.74
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.75    # -- Begin function Error_Concealment.75
	.p2align	4, 0x90
	.type	Error_Concealment.75,@function
Error_Concealment.75:                   # @Error_Concealment.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$440291876, -16(%rbp)   # imm = 0x1A3E5224
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB85_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB85_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_3:                               # %for.cond2
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB85_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB85_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB85_6:                               # %if.end
                                        #   in Loop: Header=BB85_3 Depth=2
	jmp	.LBB85_7
.LBB85_7:                               # %for.inc
                                        #   in Loop: Header=BB85_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_3
.LBB85_8:                               # %for.end
                                        #   in Loop: Header=BB85_1 Depth=1
	jmp	.LBB85_9
.LBB85_9:                               # %for.inc7
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_1
.LBB85_10:                              # %for.end9
	cmpl	$440291876, -16(%rbp)   # imm = 0x1A3E5224
	jne	.LBB85_12
.LBB85_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_11
.Lfunc_end85:
	.size	Error_Concealment.75, .Lfunc_end85-Error_Concealment.75
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.76        # -- Begin function Conceal_Error.76
	.p2align	4, 0x90
	.type	Conceal_Error.76,@function
Conceal_Error.76:                       # @Conceal_Error.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1301697190, -68(%rbp)  # imm = 0x4D9652A6
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB86_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB86_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB86_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB86_4:                               # %land.end
.LBB86_5:                               # %lor.end
.LBB86_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB86_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB86_9
.LBB86_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB86_14
.LBB86_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB86_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB86_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB86_12:                              # %land.end51
.LBB86_13:                              # %lor.end53
.LBB86_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB86_180
# %bb.15:                               # %land.end54
	movq	.LJTI86_0(,%rax,8), %rax
	jmpq	*%rax
.LBB86_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB86_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB86_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB86_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB86_18 Depth=1
	movl	$0, -4(%rbp)
.LBB86_20:                              # %for.cond68
                                        #   Parent Loop BB86_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB86_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB86_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB86_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_20
.LBB86_23:                              # %for.end
                                        #   in Loop: Header=BB86_18 Depth=1
	jmp	.LBB86_24
.LBB86_24:                              # %for.inc85
                                        #   in Loop: Header=BB86_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_18
.LBB86_25:                              # %for.end87
	jmp	.LBB86_35
.LBB86_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB86_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB86_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB86_27 Depth=1
	movl	$0, -4(%rbp)
.LBB86_29:                              # %for.cond92
                                        #   Parent Loop BB86_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB86_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB86_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB86_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_29
.LBB86_32:                              # %for.end104
                                        #   in Loop: Header=BB86_27 Depth=1
	jmp	.LBB86_33
.LBB86_33:                              # %for.inc105
                                        #   in Loop: Header=BB86_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_27
.LBB86_34:                              # %for.end107
	jmp	.LBB86_35
.LBB86_35:                              # %if.end
	jmp	.LBB86_180
.LBB86_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB86_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_39 Depth 2
                                        #       Child Loop BB86_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB86_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB86_37 Depth=1
	movl	$0, -12(%rbp)
.LBB86_39:                              # %for.cond113
                                        #   Parent Loop BB86_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB86_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB86_39 Depth=2
	movl	$0, -4(%rbp)
.LBB86_41:                              # %for.cond117
                                        #   Parent Loop BB86_37 Depth=1
                                        #     Parent Loop BB86_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB86_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB86_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB86_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_41
.LBB86_44:                              # %for.end141
                                        #   in Loop: Header=BB86_39 Depth=2
	jmp	.LBB86_45
.LBB86_45:                              # %for.inc142
                                        #   in Loop: Header=BB86_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_39
.LBB86_46:                              # %for.end144
                                        #   in Loop: Header=BB86_37 Depth=1
	jmp	.LBB86_47
.LBB86_47:                              # %for.inc145
                                        #   in Loop: Header=BB86_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_37
.LBB86_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB86_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB86_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB86_49 Depth=1
	movl	$0, -8(%rbp)
.LBB86_51:                              # %for.cond152
                                        #   Parent Loop BB86_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB86_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB86_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB86_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_51
.LBB86_54:                              # %for.end162
                                        #   in Loop: Header=BB86_49 Depth=1
	jmp	.LBB86_55
.LBB86_55:                              # %for.inc163
                                        #   in Loop: Header=BB86_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_49
.LBB86_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB86_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB86_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB86_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB86_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB86_59 Depth=1
	movl	$0, -4(%rbp)
.LBB86_61:                              # %for.cond175
                                        #   Parent Loop BB86_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB86_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB86_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB86_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_61
.LBB86_64:                              # %for.end195
                                        #   in Loop: Header=BB86_59 Depth=1
	jmp	.LBB86_65
.LBB86_65:                              # %for.inc196
                                        #   in Loop: Header=BB86_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_59
.LBB86_66:                              # %for.end198
	jmp	.LBB86_95
.LBB86_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB86_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB86_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_71 Depth 2
                                        #       Child Loop BB86_73 Depth 3
                                        #         Child Loop BB86_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB86_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB86_71:                              # %for.cond210
                                        #   Parent Loop BB86_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_73 Depth 3
                                        #         Child Loop BB86_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB86_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB86_73:                              # %for.cond236
                                        #   Parent Loop BB86_69 Depth=1
                                        #     Parent Loop BB86_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB86_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB86_73 Depth=3
	movl	$0, -4(%rbp)
.LBB86_75:                              # %for.cond240
                                        #   Parent Loop BB86_69 Depth=1
                                        #     Parent Loop BB86_71 Depth=2
                                        #       Parent Loop BB86_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB86_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB86_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB86_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_75
.LBB86_78:                              # %for.end259
                                        #   in Loop: Header=BB86_73 Depth=3
	jmp	.LBB86_79
.LBB86_79:                              # %for.inc260
                                        #   in Loop: Header=BB86_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_73
.LBB86_80:                              # %for.end262
                                        #   in Loop: Header=BB86_71 Depth=2
	jmp	.LBB86_81
.LBB86_81:                              # %for.inc263
                                        #   in Loop: Header=BB86_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_71
.LBB86_82:                              # %for.end265
                                        #   in Loop: Header=BB86_69 Depth=1
	jmp	.LBB86_83
.LBB86_83:                              # %for.inc266
                                        #   in Loop: Header=BB86_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_69
.LBB86_84:                              # %for.end268
	jmp	.LBB86_94
.LBB86_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB86_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB86_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB86_86 Depth=1
	movl	$0, -4(%rbp)
.LBB86_88:                              # %for.cond274
                                        #   Parent Loop BB86_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB86_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB86_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB86_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_88
.LBB86_91:                              # %for.end294
                                        #   in Loop: Header=BB86_86 Depth=1
	jmp	.LBB86_92
.LBB86_92:                              # %for.inc295
                                        #   in Loop: Header=BB86_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_86
.LBB86_93:                              # %for.end297
	jmp	.LBB86_94
.LBB86_94:                              # %if.end298
	jmp	.LBB86_95
.LBB86_95:                              # %if.end299
	jmp	.LBB86_105
.LBB86_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB86_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB86_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB86_97 Depth=1
	movl	$0, -4(%rbp)
.LBB86_99:                              # %for.cond305
                                        #   Parent Loop BB86_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB86_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB86_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB86_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_99
.LBB86_102:                             # %for.end317
                                        #   in Loop: Header=BB86_97 Depth=1
	jmp	.LBB86_103
.LBB86_103:                             # %for.inc318
                                        #   in Loop: Header=BB86_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_97
.LBB86_104:                             # %for.end320
	jmp	.LBB86_105
.LBB86_105:                             # %if.end321
	jmp	.LBB86_180
.LBB86_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB86_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB86_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_110 Depth 2
                                        #       Child Loop BB86_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB86_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB86_108 Depth=1
	movl	$0, -12(%rbp)
.LBB86_110:                             # %for.cond331
                                        #   Parent Loop BB86_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB86_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB86_110 Depth=2
	movl	$0, -4(%rbp)
.LBB86_112:                             # %for.cond335
                                        #   Parent Loop BB86_108 Depth=1
                                        #     Parent Loop BB86_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB86_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB86_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB86_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_112
.LBB86_115:                             # %for.end359
                                        #   in Loop: Header=BB86_110 Depth=2
	jmp	.LBB86_116
.LBB86_116:                             # %for.inc360
                                        #   in Loop: Header=BB86_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_110
.LBB86_117:                             # %for.end362
                                        #   in Loop: Header=BB86_108 Depth=1
	jmp	.LBB86_118
.LBB86_118:                             # %for.inc363
                                        #   in Loop: Header=BB86_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_108
.LBB86_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB86_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB86_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB86_120 Depth=1
	movl	$0, -8(%rbp)
.LBB86_122:                             # %for.cond370
                                        #   Parent Loop BB86_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB86_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB86_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB86_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_122
.LBB86_125:                             # %for.end380
                                        #   in Loop: Header=BB86_120 Depth=1
	jmp	.LBB86_126
.LBB86_126:                             # %for.inc381
                                        #   in Loop: Header=BB86_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_120
.LBB86_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB86_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB86_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB86_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB86_129 Depth=1
	movl	$0, -4(%rbp)
.LBB86_131:                             # %for.cond390
                                        #   Parent Loop BB86_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB86_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB86_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB86_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_131
.LBB86_134:                             # %for.end410
                                        #   in Loop: Header=BB86_129 Depth=1
	jmp	.LBB86_135
.LBB86_135:                             # %for.inc411
                                        #   in Loop: Header=BB86_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_129
.LBB86_136:                             # %for.end413
	jmp	.LBB86_156
.LBB86_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB86_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB86_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_141 Depth 2
                                        #       Child Loop BB86_143 Depth 3
                                        #         Child Loop BB86_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB86_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB86_141:                             # %for.cond425
                                        #   Parent Loop BB86_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_143 Depth 3
                                        #         Child Loop BB86_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB86_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB86_143:                             # %for.cond452
                                        #   Parent Loop BB86_139 Depth=1
                                        #     Parent Loop BB86_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB86_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB86_143 Depth=3
	movl	$0, -4(%rbp)
.LBB86_145:                             # %for.cond456
                                        #   Parent Loop BB86_139 Depth=1
                                        #     Parent Loop BB86_141 Depth=2
                                        #       Parent Loop BB86_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB86_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB86_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB86_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_145
.LBB86_148:                             # %for.end475
                                        #   in Loop: Header=BB86_143 Depth=3
	jmp	.LBB86_149
.LBB86_149:                             # %for.inc476
                                        #   in Loop: Header=BB86_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_143
.LBB86_150:                             # %for.end478
                                        #   in Loop: Header=BB86_141 Depth=2
	jmp	.LBB86_151
.LBB86_151:                             # %for.inc479
                                        #   in Loop: Header=BB86_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_141
.LBB86_152:                             # %for.end481
                                        #   in Loop: Header=BB86_139 Depth=1
	jmp	.LBB86_153
.LBB86_153:                             # %for.inc482
                                        #   in Loop: Header=BB86_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_139
.LBB86_154:                             # %for.end484
	jmp	.LBB86_155
.LBB86_155:                             # %if.end485
	jmp	.LBB86_156
.LBB86_156:                             # %if.end486
	jmp	.LBB86_157
.LBB86_157:                             # %if.end487
	jmp	.LBB86_180
.LBB86_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB86_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB86_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB86_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB86_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB86_161 Depth=1
	movl	$0, -4(%rbp)
.LBB86_163:                             # %for.cond499
                                        #   Parent Loop BB86_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB86_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB86_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB86_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_163
.LBB86_166:                             # %for.end519
                                        #   in Loop: Header=BB86_161 Depth=1
	jmp	.LBB86_167
.LBB86_167:                             # %for.inc520
                                        #   in Loop: Header=BB86_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_161
.LBB86_168:                             # %for.end522
	jmp	.LBB86_169
.LBB86_169:                             # %if.end523
	jmp	.LBB86_179
.LBB86_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB86_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB86_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$0, -4(%rbp)
.LBB86_173:                             # %for.cond529
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB86_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB86_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB86_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_173
.LBB86_176:                             # %for.end541
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_177
.LBB86_177:                             # %for.inc542
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_171
.LBB86_178:                             # %for.end544
	jmp	.LBB86_179
.LBB86_179:                             # %if.end545
	jmp	.LBB86_180
.LBB86_180:                             # %sw.epilog
	cmpl	$1301697190, -68(%rbp)  # imm = 0x4D9652A6
	jne	.LBB86_182
.LBB86_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_181
.Lfunc_end86:
	.size	Conceal_Error.76, .Lfunc_end86-Conceal_Error.76
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI86_0:
	.quad	.LBB86_16
	.quad	.LBB86_158
	.quad	.LBB86_106
	.quad	.LBB86_180
	.quad	.LBB86_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.77 # -- Begin function compute_residue_b8block.77
	.p2align	4, 0x90
	.type	compute_residue_b8block.77,@function
compute_residue_b8block.77:             # @compute_residue_b8block.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$463925707, -36(%rbp)   # imm = 0x1BA6F1CB
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB87_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB87_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB87_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB87_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB87_4:                               # %for.cond4
                                        #   Parent Loop BB87_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB87_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB87_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB87_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_4
.LBB87_7:                               # %for.end
                                        #   in Loop: Header=BB87_2 Depth=1
	jmp	.LBB87_8
.LBB87_8:                               # %for.inc22
                                        #   in Loop: Header=BB87_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_2
.LBB87_9:                               # %for.end24
	jmp	.LBB87_19
.LBB87_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB87_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB87_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB87_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB87_13:                              # %for.cond29
                                        #   Parent Loop BB87_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB87_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB87_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB87_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_13
.LBB87_16:                              # %for.end56
                                        #   in Loop: Header=BB87_11 Depth=1
	jmp	.LBB87_17
.LBB87_17:                              # %for.inc57
                                        #   in Loop: Header=BB87_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_11
.LBB87_18:                              # %for.end59
	jmp	.LBB87_19
.LBB87_19:                              # %if.end
	cmpl	$463925707, -36(%rbp)   # imm = 0x1BA6F1CB
	jne	.LBB87_21
.LBB87_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_20
.Lfunc_end87:
	.size	compute_residue_b8block.77, .Lfunc_end87-compute_residue_b8block.77
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.78
.LCPI88_0:
	.quad	4636737291354636288     # double 100
.LCPI88_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.78
	.p2align	4, 0x90
	.type	Build_Status_Map.78,@function
Build_Status_Map.78:                    # @Build_Status_Map.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1032380048, -44(%rbp)  # imm = 0x3D88DE90
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB88_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB88_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -8(%rbp)
.LBB88_3:                               # %for.cond2
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB88_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB88_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB88_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB88_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB88_13
.LBB88_6:                               # %if.then
                                        #   in Loop: Header=BB88_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI88_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI88_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB88_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB88_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB88_8:                               # %if.end
                                        #   in Loop: Header=BB88_3 Depth=2
	callq	rand
	vmovsd	.LCPI88_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI88_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB88_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB88_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB88_10:                              # %if.end20
                                        #   in Loop: Header=BB88_3 Depth=2
	callq	rand
	vmovsd	.LCPI88_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI88_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB88_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB88_3 Depth=2
	movl	$1, -4(%rbp)
.LBB88_12:                              # %if.end29
                                        #   in Loop: Header=BB88_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB88_13:                              # %if.end30
                                        #   in Loop: Header=BB88_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB88_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB88_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB88_18
.LBB88_15:                              # %if.else
                                        #   in Loop: Header=BB88_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB88_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB88_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB88_17:                              # %if.end49
                                        #   in Loop: Header=BB88_3 Depth=2
	jmp	.LBB88_18
.LBB88_18:                              # %if.end50
                                        #   in Loop: Header=BB88_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB88_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_3
.LBB88_20:                              # %for.end
                                        #   in Loop: Header=BB88_1 Depth=1
	jmp	.LBB88_21
.LBB88_21:                              # %for.inc53
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_1
.LBB88_22:                              # %for.end55
	cmpl	$1032380048, -44(%rbp)  # imm = 0x3D88DE90
	jne	.LBB88_24
.LBB88_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_23
.Lfunc_end88:
	.size	Build_Status_Map.78, .Lfunc_end88-Build_Status_Map.78
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.79  # -- Begin function Get_Reference_Pixel.79
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.79,@function
Get_Reference_Pixel.79:                 # @Get_Reference_Pixel.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$346783452, -104(%rbp)  # imm = 0x14AB7EDC
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB89_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB89_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB89_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB89_5
.LBB89_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB89_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB89_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB89_11
.LBB89_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB89_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB89_10
.LBB89_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB89_10:                              # %cond.end14
.LBB89_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB89_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB89_14
.LBB89_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB89_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB89_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB89_20
.LBB89_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB89_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB89_19
.LBB89_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB89_19:                              # %cond.end29
.LBB89_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_332
.LBB89_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB89_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB89_25
.LBB89_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB89_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB89_31
.LBB89_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB89_30
.LBB89_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB89_30:                              # %cond.end52
.LBB89_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB89_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB89_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_36
.LBB89_35:                              # %cond.false61
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_36:                              # %cond.end63
                                        #   in Loop: Header=BB89_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB89_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_42
.LBB89_38:                              # %cond.false68
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_41
.LBB89_40:                              # %cond.false73
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_41:                              # %cond.end75
                                        #   in Loop: Header=BB89_32 Depth=1
.LBB89_42:                              # %cond.end77
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_32
.LBB89_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_47
.LBB89_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB89_53
.LBB89_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_52
.LBB89_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_52:                              # %cond.end113
.LBB89_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB89_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB89_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB89_57
.LBB89_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB89_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB89_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB89_63
.LBB89_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB89_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB89_62
.LBB89_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB89_62:                              # %cond.end136
.LBB89_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB89_76
.LBB89_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB89_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB89_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB89_68
.LBB89_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB89_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB89_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB89_74
.LBB89_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB89_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB89_73
.LBB89_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB89_73:                              # %cond.end169
.LBB89_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_75:                              # %if.end
	jmp	.LBB89_76
.LBB89_76:                              # %if.end178
	jmp	.LBB89_331
.LBB89_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB89_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB89_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB89_81
.LBB89_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB89_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB89_87
.LBB89_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB89_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB89_86
.LBB89_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB89_86:                              # %cond.end197
.LBB89_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB89_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB89_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_92
.LBB89_91:                              # %cond.false209
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_92:                              # %cond.end211
                                        #   in Loop: Header=BB89_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB89_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_98
.LBB89_94:                              # %cond.false216
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_97
.LBB89_96:                              # %cond.false221
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_97:                              # %cond.end223
                                        #   in Loop: Header=BB89_88 Depth=1
.LBB89_98:                              # %cond.end225
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_88
.LBB89_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_103
.LBB89_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB89_109
.LBB89_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_108
.LBB89_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_108:                             # %cond.end266
.LBB89_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB89_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB89_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB89_113
.LBB89_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB89_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB89_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB89_119
.LBB89_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB89_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB89_118
.LBB89_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB89_118:                             # %cond.end287
.LBB89_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB89_132
.LBB89_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB89_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB89_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB89_124
.LBB89_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB89_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB89_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB89_130
.LBB89_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB89_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB89_129
.LBB89_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB89_129:                             # %cond.end320
.LBB89_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_131:                             # %if.end331
	jmp	.LBB89_132
.LBB89_132:                             # %if.end332
	jmp	.LBB89_330
.LBB89_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB89_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB89_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB89_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_139
.LBB89_138:                             # %cond.false345
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_139:                             # %cond.end347
                                        #   in Loop: Header=BB89_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB89_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_145
.LBB89_141:                             # %cond.false352
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_144
.LBB89_143:                             # %cond.false357
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_144:                             # %cond.end359
                                        #   in Loop: Header=BB89_135 Depth=1
.LBB89_145:                             # %cond.end361
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB89_146:                             # %for.cond363
                                        #   Parent Loop BB89_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB89_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB89_150
.LBB89_149:                             # %cond.false371
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_150:                             # %cond.end373
                                        #   in Loop: Header=BB89_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB89_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_156
.LBB89_152:                             # %cond.false378
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB89_155
.LBB89_154:                             # %cond.false383
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_155:                             # %cond.end385
                                        #   in Loop: Header=BB89_146 Depth=2
.LBB89_156:                             # %cond.end387
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_146
.LBB89_158:                             # %for.end401
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_135
.LBB89_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB89_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB89_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB89_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB89_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_161
.LBB89_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_167
.LBB89_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB89_173
.LBB89_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_172
.LBB89_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_172:                             # %cond.end449
.LBB89_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB89_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_177
.LBB89_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB89_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB89_183
.LBB89_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_182
.LBB89_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_182:                             # %cond.end486
.LBB89_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB89_196
.LBB89_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB89_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_188
.LBB89_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB89_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB89_194
.LBB89_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_193
.LBB89_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_193:                             # %cond.end526
.LBB89_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_195:                             # %if.end532
	jmp	.LBB89_196
.LBB89_196:                             # %if.end533
	jmp	.LBB89_329
.LBB89_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB89_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB89_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB89_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_203
.LBB89_202:                             # %cond.false546
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_203:                             # %cond.end548
                                        #   in Loop: Header=BB89_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB89_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_209
.LBB89_205:                             # %cond.false553
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_208
.LBB89_207:                             # %cond.false558
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_208:                             # %cond.end560
                                        #   in Loop: Header=BB89_199 Depth=1
.LBB89_209:                             # %cond.end562
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB89_210:                             # %for.cond564
                                        #   Parent Loop BB89_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB89_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB89_214
.LBB89_213:                             # %cond.false572
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_214:                             # %cond.end574
                                        #   in Loop: Header=BB89_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB89_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_220
.LBB89_216:                             # %cond.false579
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB89_219
.LBB89_218:                             # %cond.false584
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_219:                             # %cond.end586
                                        #   in Loop: Header=BB89_210 Depth=2
.LBB89_220:                             # %cond.end588
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_210
.LBB89_222:                             # %for.end602
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_199
.LBB89_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB89_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB89_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB89_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB89_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_225
.LBB89_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_231
.LBB89_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB89_237
.LBB89_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_236
.LBB89_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_236:                             # %cond.end650
.LBB89_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB89_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_241
.LBB89_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB89_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB89_247
.LBB89_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_246
.LBB89_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_246:                             # %cond.end687
.LBB89_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB89_258
.LBB89_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_251
.LBB89_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB89_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB89_257
.LBB89_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_256
.LBB89_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_256:                             # %cond.end724
.LBB89_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_258:                             # %if.end730
	jmp	.LBB89_328
.LBB89_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB89_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB89_262
.LBB89_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB89_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB89_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB89_265
.LBB89_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB89_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB89_271
.LBB89_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB89_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB89_270
.LBB89_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB89_270:                             # %cond.end753
.LBB89_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB89_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB89_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_276
.LBB89_275:                             # %cond.false765
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_276:                             # %cond.end767
                                        #   in Loop: Header=BB89_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB89_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_282
.LBB89_278:                             # %cond.false772
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_281
.LBB89_280:                             # %cond.false777
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_281:                             # %cond.end779
                                        #   in Loop: Header=BB89_272 Depth=1
.LBB89_282:                             # %cond.end781
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_272
.LBB89_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_287
.LBB89_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB89_293
.LBB89_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_292
.LBB89_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_292:                             # %cond.end822
.LBB89_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB89_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB89_296
.LBB89_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB89_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB89_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB89_299
.LBB89_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB89_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB89_305
.LBB89_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB89_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB89_304
.LBB89_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB89_304:                             # %cond.end847
.LBB89_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB89_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB89_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_310
.LBB89_309:                             # %cond.false859
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_310:                             # %cond.end861
                                        #   in Loop: Header=BB89_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB89_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_316
.LBB89_312:                             # %cond.false866
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_315
.LBB89_314:                             # %cond.false871
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_315:                             # %cond.end873
                                        #   in Loop: Header=BB89_306 Depth=1
.LBB89_316:                             # %cond.end875
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_306
.LBB89_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_321
.LBB89_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB89_327
.LBB89_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_326
.LBB89_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_326:                             # %cond.end916
.LBB89_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_328:                             # %if.end922
	jmp	.LBB89_329
.LBB89_329:                             # %if.end923
	jmp	.LBB89_330
.LBB89_330:                             # %if.end924
	jmp	.LBB89_331
.LBB89_331:                             # %if.end925
	jmp	.LBB89_332
.LBB89_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$346783452, -104(%rbp)  # imm = 0x14AB7EDC
	jne	.LBB89_334
.LBB89_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_333
.Lfunc_end89:
	.size	Get_Reference_Pixel.79, .Lfunc_end89-Get_Reference_Pixel.79
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.80        # -- Begin function Conceal_Error.80
	.p2align	4, 0x90
	.type	Conceal_Error.80,@function
Conceal_Error.80:                       # @Conceal_Error.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$617389553, -68(%rbp)   # imm = 0x24CC9DF1
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB90_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB90_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB90_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB90_4:                               # %land.end
.LBB90_5:                               # %lor.end
.LBB90_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB90_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB90_9
.LBB90_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB90_14
.LBB90_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB90_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB90_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB90_12:                              # %land.end51
.LBB90_13:                              # %lor.end53
.LBB90_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB90_180
# %bb.15:                               # %land.end54
	movq	.LJTI90_0(,%rax,8), %rax
	jmpq	*%rax
.LBB90_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB90_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB90_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB90_18 Depth=1
	movl	$0, -4(%rbp)
.LBB90_20:                              # %for.cond68
                                        #   Parent Loop BB90_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB90_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB90_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_20
.LBB90_23:                              # %for.end
                                        #   in Loop: Header=BB90_18 Depth=1
	jmp	.LBB90_24
.LBB90_24:                              # %for.inc85
                                        #   in Loop: Header=BB90_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_18
.LBB90_25:                              # %for.end87
	jmp	.LBB90_35
.LBB90_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB90_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB90_27 Depth=1
	movl	$0, -4(%rbp)
.LBB90_29:                              # %for.cond92
                                        #   Parent Loop BB90_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB90_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB90_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_29
.LBB90_32:                              # %for.end104
                                        #   in Loop: Header=BB90_27 Depth=1
	jmp	.LBB90_33
.LBB90_33:                              # %for.inc105
                                        #   in Loop: Header=BB90_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_27
.LBB90_34:                              # %for.end107
	jmp	.LBB90_35
.LBB90_35:                              # %if.end
	jmp	.LBB90_180
.LBB90_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB90_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_39 Depth 2
                                        #       Child Loop BB90_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB90_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB90_37 Depth=1
	movl	$0, -16(%rbp)
.LBB90_39:                              # %for.cond113
                                        #   Parent Loop BB90_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB90_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB90_39 Depth=2
	movl	$0, -4(%rbp)
.LBB90_41:                              # %for.cond117
                                        #   Parent Loop BB90_37 Depth=1
                                        #     Parent Loop BB90_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB90_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB90_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB90_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_41
.LBB90_44:                              # %for.end141
                                        #   in Loop: Header=BB90_39 Depth=2
	jmp	.LBB90_45
.LBB90_45:                              # %for.inc142
                                        #   in Loop: Header=BB90_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_39
.LBB90_46:                              # %for.end144
                                        #   in Loop: Header=BB90_37 Depth=1
	jmp	.LBB90_47
.LBB90_47:                              # %for.inc145
                                        #   in Loop: Header=BB90_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_37
.LBB90_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB90_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB90_49 Depth=1
	movl	$0, -8(%rbp)
.LBB90_51:                              # %for.cond152
                                        #   Parent Loop BB90_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB90_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB90_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_51
.LBB90_54:                              # %for.end162
                                        #   in Loop: Header=BB90_49 Depth=1
	jmp	.LBB90_55
.LBB90_55:                              # %for.inc163
                                        #   in Loop: Header=BB90_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_49
.LBB90_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB90_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB90_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB90_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB90_59 Depth=1
	movl	$0, -4(%rbp)
.LBB90_61:                              # %for.cond175
                                        #   Parent Loop BB90_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB90_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB90_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_61
.LBB90_64:                              # %for.end195
                                        #   in Loop: Header=BB90_59 Depth=1
	jmp	.LBB90_65
.LBB90_65:                              # %for.inc196
                                        #   in Loop: Header=BB90_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_59
.LBB90_66:                              # %for.end198
	jmp	.LBB90_95
.LBB90_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB90_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB90_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_71 Depth 2
                                        #       Child Loop BB90_73 Depth 3
                                        #         Child Loop BB90_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB90_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB90_71:                              # %for.cond210
                                        #   Parent Loop BB90_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_73 Depth 3
                                        #         Child Loop BB90_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB90_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB90_73:                              # %for.cond236
                                        #   Parent Loop BB90_69 Depth=1
                                        #     Parent Loop BB90_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB90_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB90_73 Depth=3
	movl	$0, -4(%rbp)
.LBB90_75:                              # %for.cond240
                                        #   Parent Loop BB90_69 Depth=1
                                        #     Parent Loop BB90_71 Depth=2
                                        #       Parent Loop BB90_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB90_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB90_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB90_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_75
.LBB90_78:                              # %for.end259
                                        #   in Loop: Header=BB90_73 Depth=3
	jmp	.LBB90_79
.LBB90_79:                              # %for.inc260
                                        #   in Loop: Header=BB90_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_73
.LBB90_80:                              # %for.end262
                                        #   in Loop: Header=BB90_71 Depth=2
	jmp	.LBB90_81
.LBB90_81:                              # %for.inc263
                                        #   in Loop: Header=BB90_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_71
.LBB90_82:                              # %for.end265
                                        #   in Loop: Header=BB90_69 Depth=1
	jmp	.LBB90_83
.LBB90_83:                              # %for.inc266
                                        #   in Loop: Header=BB90_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_69
.LBB90_84:                              # %for.end268
	jmp	.LBB90_94
.LBB90_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB90_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB90_86 Depth=1
	movl	$0, -4(%rbp)
.LBB90_88:                              # %for.cond274
                                        #   Parent Loop BB90_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB90_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB90_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_88
.LBB90_91:                              # %for.end294
                                        #   in Loop: Header=BB90_86 Depth=1
	jmp	.LBB90_92
.LBB90_92:                              # %for.inc295
                                        #   in Loop: Header=BB90_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_86
.LBB90_93:                              # %for.end297
	jmp	.LBB90_94
.LBB90_94:                              # %if.end298
	jmp	.LBB90_95
.LBB90_95:                              # %if.end299
	jmp	.LBB90_105
.LBB90_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB90_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB90_97 Depth=1
	movl	$0, -4(%rbp)
.LBB90_99:                              # %for.cond305
                                        #   Parent Loop BB90_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB90_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB90_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_99
.LBB90_102:                             # %for.end317
                                        #   in Loop: Header=BB90_97 Depth=1
	jmp	.LBB90_103
.LBB90_103:                             # %for.inc318
                                        #   in Loop: Header=BB90_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_97
.LBB90_104:                             # %for.end320
	jmp	.LBB90_105
.LBB90_105:                             # %if.end321
	jmp	.LBB90_180
.LBB90_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB90_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB90_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_110 Depth 2
                                        #       Child Loop BB90_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB90_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB90_108 Depth=1
	movl	$0, -16(%rbp)
.LBB90_110:                             # %for.cond331
                                        #   Parent Loop BB90_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB90_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB90_110 Depth=2
	movl	$0, -4(%rbp)
.LBB90_112:                             # %for.cond335
                                        #   Parent Loop BB90_108 Depth=1
                                        #     Parent Loop BB90_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB90_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB90_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB90_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_112
.LBB90_115:                             # %for.end359
                                        #   in Loop: Header=BB90_110 Depth=2
	jmp	.LBB90_116
.LBB90_116:                             # %for.inc360
                                        #   in Loop: Header=BB90_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_110
.LBB90_117:                             # %for.end362
                                        #   in Loop: Header=BB90_108 Depth=1
	jmp	.LBB90_118
.LBB90_118:                             # %for.inc363
                                        #   in Loop: Header=BB90_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_108
.LBB90_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB90_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB90_120 Depth=1
	movl	$0, -8(%rbp)
.LBB90_122:                             # %for.cond370
                                        #   Parent Loop BB90_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB90_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB90_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_122
.LBB90_125:                             # %for.end380
                                        #   in Loop: Header=BB90_120 Depth=1
	jmp	.LBB90_126
.LBB90_126:                             # %for.inc381
                                        #   in Loop: Header=BB90_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_120
.LBB90_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB90_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB90_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB90_129 Depth=1
	movl	$0, -4(%rbp)
.LBB90_131:                             # %for.cond390
                                        #   Parent Loop BB90_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB90_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB90_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_131
.LBB90_134:                             # %for.end410
                                        #   in Loop: Header=BB90_129 Depth=1
	jmp	.LBB90_135
.LBB90_135:                             # %for.inc411
                                        #   in Loop: Header=BB90_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_129
.LBB90_136:                             # %for.end413
	jmp	.LBB90_156
.LBB90_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB90_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB90_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_141 Depth 2
                                        #       Child Loop BB90_143 Depth 3
                                        #         Child Loop BB90_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB90_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB90_141:                             # %for.cond425
                                        #   Parent Loop BB90_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_143 Depth 3
                                        #         Child Loop BB90_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB90_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB90_143:                             # %for.cond452
                                        #   Parent Loop BB90_139 Depth=1
                                        #     Parent Loop BB90_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB90_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB90_143 Depth=3
	movl	$0, -4(%rbp)
.LBB90_145:                             # %for.cond456
                                        #   Parent Loop BB90_139 Depth=1
                                        #     Parent Loop BB90_141 Depth=2
                                        #       Parent Loop BB90_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB90_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB90_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB90_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_145
.LBB90_148:                             # %for.end475
                                        #   in Loop: Header=BB90_143 Depth=3
	jmp	.LBB90_149
.LBB90_149:                             # %for.inc476
                                        #   in Loop: Header=BB90_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_143
.LBB90_150:                             # %for.end478
                                        #   in Loop: Header=BB90_141 Depth=2
	jmp	.LBB90_151
.LBB90_151:                             # %for.inc479
                                        #   in Loop: Header=BB90_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_141
.LBB90_152:                             # %for.end481
                                        #   in Loop: Header=BB90_139 Depth=1
	jmp	.LBB90_153
.LBB90_153:                             # %for.inc482
                                        #   in Loop: Header=BB90_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_139
.LBB90_154:                             # %for.end484
	jmp	.LBB90_155
.LBB90_155:                             # %if.end485
	jmp	.LBB90_156
.LBB90_156:                             # %if.end486
	jmp	.LBB90_157
.LBB90_157:                             # %if.end487
	jmp	.LBB90_180
.LBB90_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB90_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB90_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB90_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB90_161 Depth=1
	movl	$0, -4(%rbp)
.LBB90_163:                             # %for.cond499
                                        #   Parent Loop BB90_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB90_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB90_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_163
.LBB90_166:                             # %for.end519
                                        #   in Loop: Header=BB90_161 Depth=1
	jmp	.LBB90_167
.LBB90_167:                             # %for.inc520
                                        #   in Loop: Header=BB90_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_161
.LBB90_168:                             # %for.end522
	jmp	.LBB90_169
.LBB90_169:                             # %if.end523
	jmp	.LBB90_179
.LBB90_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB90_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB90_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB90_171 Depth=1
	movl	$0, -4(%rbp)
.LBB90_173:                             # %for.cond529
                                        #   Parent Loop BB90_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB90_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB90_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB90_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_173
.LBB90_176:                             # %for.end541
                                        #   in Loop: Header=BB90_171 Depth=1
	jmp	.LBB90_177
.LBB90_177:                             # %for.inc542
                                        #   in Loop: Header=BB90_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_171
.LBB90_178:                             # %for.end544
	jmp	.LBB90_179
.LBB90_179:                             # %if.end545
	jmp	.LBB90_180
.LBB90_180:                             # %sw.epilog
	cmpl	$617389553, -68(%rbp)   # imm = 0x24CC9DF1
	jne	.LBB90_182
.LBB90_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_181
.Lfunc_end90:
	.size	Conceal_Error.80, .Lfunc_end90-Conceal_Error.80
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI90_0:
	.quad	.LBB90_16
	.quad	.LBB90_158
	.quad	.LBB90_106
	.quad	.LBB90_180
	.quad	.LBB90_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.81   # -- Begin function decode_one_b8block.81
	.p2align	4, 0x90
	.type	decode_one_b8block.81,@function
decode_one_b8block.81:                  # @decode_one_b8block.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1676812979, -84(%rbp)  # imm = 0x63F222B3
	movl	%edi, -40(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB91_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB91_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB91_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB91_4:                               # %for.cond9
                                        #   Parent Loop BB91_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB91_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB91_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB91_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_4
.LBB91_7:                               # %for.end
                                        #   in Loop: Header=BB91_2 Depth=1
	jmp	.LBB91_8
.LBB91_8:                               # %for.inc26
                                        #   in Loop: Header=BB91_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_2
.LBB91_9:                               # %for.end28
	jmp	.LBB91_96
.LBB91_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB91_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB91_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB91_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB91_31
.LBB91_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB91_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB91_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB91_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB91_17:                              # %for.cond40
                                        #   Parent Loop BB91_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB91_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB91_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB91_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_17
.LBB91_20:                              # %for.end49
                                        #   in Loop: Header=BB91_15 Depth=1
	jmp	.LBB91_21
.LBB91_21:                              # %for.inc50
                                        #   in Loop: Header=BB91_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_15
.LBB91_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB91_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB91_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB91_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB91_25:                              # %for.cond56
                                        #   Parent Loop BB91_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB91_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB91_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB91_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_25
.LBB91_28:                              # %for.end71
                                        #   in Loop: Header=BB91_23 Depth=1
	jmp	.LBB91_29
.LBB91_29:                              # %for.inc72
                                        #   in Loop: Header=BB91_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_23
.LBB91_30:                              # %for.end74
	jmp	.LBB91_60
.LBB91_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB91_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB91_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB91_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB91_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB91_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB91_36:                              # %for.cond83
                                        #   Parent Loop BB91_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB91_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB91_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB91_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_36
.LBB91_39:                              # %for.end120
                                        #   in Loop: Header=BB91_34 Depth=1
	jmp	.LBB91_40
.LBB91_40:                              # %for.inc121
                                        #   in Loop: Header=BB91_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_34
.LBB91_41:                              # %for.end123
	jmp	.LBB91_51
.LBB91_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB91_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB91_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB91_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB91_45:                              # %for.cond129
                                        #   Parent Loop BB91_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB91_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB91_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB91_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_45
.LBB91_48:                              # %for.end145
                                        #   in Loop: Header=BB91_43 Depth=1
	jmp	.LBB91_49
.LBB91_49:                              # %for.inc146
                                        #   in Loop: Header=BB91_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_43
.LBB91_50:                              # %for.end148
	jmp	.LBB91_51
.LBB91_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB91_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB91_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB91_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB91_54:                              # %for.cond153
                                        #   Parent Loop BB91_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB91_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB91_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB91_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_54
.LBB91_57:                              # %for.end167
                                        #   in Loop: Header=BB91_52 Depth=1
	jmp	.LBB91_58
.LBB91_58:                              # %for.inc168
                                        #   in Loop: Header=BB91_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_52
.LBB91_59:                              # %for.end170
	jmp	.LBB91_60
.LBB91_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB91_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB91_66
.LBB91_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB91_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB91_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB91_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB91_86
.LBB91_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB91_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_69 Depth 2
                                        #       Child Loop BB91_74 Depth 3
                                        #         Child Loop BB91_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB91_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB91_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB91_69:                              # %for.cond197
                                        #   Parent Loop BB91_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_74 Depth 3
                                        #         Child Loop BB91_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB91_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB91_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB91_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB91_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB91_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB91_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB91_73:                              # %if.end218
                                        #   in Loop: Header=BB91_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB91_74:                              # %for.cond233
                                        #   Parent Loop BB91_67 Depth=1
                                        #     Parent Loop BB91_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB91_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB91_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB91_74 Depth=3
	movl	$0, -8(%rbp)
.LBB91_76:                              # %for.cond237
                                        #   Parent Loop BB91_67 Depth=1
                                        #     Parent Loop BB91_69 Depth=2
                                        #       Parent Loop BB91_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB91_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB91_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB91_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_76
.LBB91_79:                              # %for.end269
                                        #   in Loop: Header=BB91_74 Depth=3
	jmp	.LBB91_80
.LBB91_80:                              # %for.inc270
                                        #   in Loop: Header=BB91_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_74
.LBB91_81:                              # %for.end272
                                        #   in Loop: Header=BB91_69 Depth=2
	jmp	.LBB91_82
.LBB91_82:                              # %for.inc273
                                        #   in Loop: Header=BB91_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_69
.LBB91_83:                              # %for.end275
                                        #   in Loop: Header=BB91_67 Depth=1
	jmp	.LBB91_84
.LBB91_84:                              # %for.inc276
                                        #   in Loop: Header=BB91_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_67
.LBB91_85:                              # %for.end278
	jmp	.LBB91_95
.LBB91_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB91_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB91_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB91_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB91_89:                              # %for.cond284
                                        #   Parent Loop BB91_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB91_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB91_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB91_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_89
.LBB91_92:                              # %for.end310
                                        #   in Loop: Header=BB91_87 Depth=1
	jmp	.LBB91_93
.LBB91_93:                              # %for.inc311
                                        #   in Loop: Header=BB91_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_87
.LBB91_94:                              # %for.end313
	jmp	.LBB91_95
.LBB91_95:                              # %if.end314
	jmp	.LBB91_96
.LBB91_96:                              # %if.end315
	cmpl	$1676812979, -84(%rbp)  # imm = 0x63F222B3
	jne	.LBB91_98
.LBB91_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_97
.Lfunc_end91:
	.size	decode_one_b8block.81, .Lfunc_end91-decode_one_b8block.81
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.82   # -- Begin function decode_one_b8block.82
	.p2align	4, 0x90
	.type	decode_one_b8block.82,@function
decode_one_b8block.82:                  # @decode_one_b8block.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1378126854, -84(%rbp)  # imm = 0x52248C06
	movl	%edi, -52(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB92_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB92_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB92_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_4:                               # %for.cond9
                                        #   Parent Loop BB92_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB92_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB92_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB92_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_4
.LBB92_7:                               # %for.end
                                        #   in Loop: Header=BB92_2 Depth=1
	jmp	.LBB92_8
.LBB92_8:                               # %for.inc26
                                        #   in Loop: Header=BB92_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_2
.LBB92_9:                               # %for.end28
	jmp	.LBB92_96
.LBB92_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB92_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB92_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB92_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB92_31
.LBB92_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB92_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB92_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_17:                              # %for.cond40
                                        #   Parent Loop BB92_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB92_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB92_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB92_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_17
.LBB92_20:                              # %for.end49
                                        #   in Loop: Header=BB92_15 Depth=1
	jmp	.LBB92_21
.LBB92_21:                              # %for.inc50
                                        #   in Loop: Header=BB92_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_15
.LBB92_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB92_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB92_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB92_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB92_25:                              # %for.cond56
                                        #   Parent Loop BB92_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB92_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB92_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB92_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_25
.LBB92_28:                              # %for.end71
                                        #   in Loop: Header=BB92_23 Depth=1
	jmp	.LBB92_29
.LBB92_29:                              # %for.inc72
                                        #   in Loop: Header=BB92_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_23
.LBB92_30:                              # %for.end74
	jmp	.LBB92_60
.LBB92_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB92_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB92_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB92_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB92_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB92_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB92_36:                              # %for.cond83
                                        #   Parent Loop BB92_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB92_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB92_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB92_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_36
.LBB92_39:                              # %for.end120
                                        #   in Loop: Header=BB92_34 Depth=1
	jmp	.LBB92_40
.LBB92_40:                              # %for.inc121
                                        #   in Loop: Header=BB92_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_34
.LBB92_41:                              # %for.end123
	jmp	.LBB92_51
.LBB92_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB92_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB92_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB92_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB92_45:                              # %for.cond129
                                        #   Parent Loop BB92_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB92_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB92_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB92_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_45
.LBB92_48:                              # %for.end145
                                        #   in Loop: Header=BB92_43 Depth=1
	jmp	.LBB92_49
.LBB92_49:                              # %for.inc146
                                        #   in Loop: Header=BB92_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_43
.LBB92_50:                              # %for.end148
	jmp	.LBB92_51
.LBB92_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB92_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB92_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_54:                              # %for.cond153
                                        #   Parent Loop BB92_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB92_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB92_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB92_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_54
.LBB92_57:                              # %for.end167
                                        #   in Loop: Header=BB92_52 Depth=1
	jmp	.LBB92_58
.LBB92_58:                              # %for.inc168
                                        #   in Loop: Header=BB92_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_52
.LBB92_59:                              # %for.end170
	jmp	.LBB92_60
.LBB92_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB92_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB92_66
.LBB92_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB92_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB92_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB92_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB92_86
.LBB92_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB92_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_69 Depth 2
                                        #       Child Loop BB92_74 Depth 3
                                        #         Child Loop BB92_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB92_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB92_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB92_69:                              # %for.cond197
                                        #   Parent Loop BB92_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_74 Depth 3
                                        #         Child Loop BB92_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB92_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB92_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB92_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB92_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB92_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB92_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB92_73:                              # %if.end218
                                        #   in Loop: Header=BB92_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB92_74:                              # %for.cond233
                                        #   Parent Loop BB92_67 Depth=1
                                        #     Parent Loop BB92_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB92_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB92_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB92_74 Depth=3
	movl	$0, -4(%rbp)
.LBB92_76:                              # %for.cond237
                                        #   Parent Loop BB92_67 Depth=1
                                        #     Parent Loop BB92_69 Depth=2
                                        #       Parent Loop BB92_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB92_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB92_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB92_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_76
.LBB92_79:                              # %for.end269
                                        #   in Loop: Header=BB92_74 Depth=3
	jmp	.LBB92_80
.LBB92_80:                              # %for.inc270
                                        #   in Loop: Header=BB92_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_74
.LBB92_81:                              # %for.end272
                                        #   in Loop: Header=BB92_69 Depth=2
	jmp	.LBB92_82
.LBB92_82:                              # %for.inc273
                                        #   in Loop: Header=BB92_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_69
.LBB92_83:                              # %for.end275
                                        #   in Loop: Header=BB92_67 Depth=1
	jmp	.LBB92_84
.LBB92_84:                              # %for.inc276
                                        #   in Loop: Header=BB92_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_67
.LBB92_85:                              # %for.end278
	jmp	.LBB92_95
.LBB92_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB92_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB92_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_89:                              # %for.cond284
                                        #   Parent Loop BB92_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB92_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB92_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB92_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_89
.LBB92_92:                              # %for.end310
                                        #   in Loop: Header=BB92_87 Depth=1
	jmp	.LBB92_93
.LBB92_93:                              # %for.inc311
                                        #   in Loop: Header=BB92_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_87
.LBB92_94:                              # %for.end313
	jmp	.LBB92_95
.LBB92_95:                              # %if.end314
	jmp	.LBB92_96
.LBB92_96:                              # %if.end315
	cmpl	$1378126854, -84(%rbp)  # imm = 0x52248C06
	jne	.LBB92_98
.LBB92_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_97
.Lfunc_end92:
	.size	decode_one_b8block.82, .Lfunc_end92-decode_one_b8block.82
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.83   # -- Begin function decode_one_b8block.83
	.p2align	4, 0x90
	.type	decode_one_b8block.83,@function
decode_one_b8block.83:                  # @decode_one_b8block.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$484633652, -84(%rbp)   # imm = 0x1CE2EC34
	movl	%edi, -48(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB93_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB93_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_4:                               # %for.cond9
                                        #   Parent Loop BB93_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB93_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB93_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB93_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_4
.LBB93_7:                               # %for.end
                                        #   in Loop: Header=BB93_2 Depth=1
	jmp	.LBB93_8
.LBB93_8:                               # %for.inc26
                                        #   in Loop: Header=BB93_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_2
.LBB93_9:                               # %for.end28
	jmp	.LBB93_96
.LBB93_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB93_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB93_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB93_31
.LBB93_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB93_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_17:                              # %for.cond40
                                        #   Parent Loop BB93_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB93_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB93_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB93_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_17
.LBB93_20:                              # %for.end49
                                        #   in Loop: Header=BB93_15 Depth=1
	jmp	.LBB93_21
.LBB93_21:                              # %for.inc50
                                        #   in Loop: Header=BB93_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_15
.LBB93_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB93_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB93_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_25:                              # %for.cond56
                                        #   Parent Loop BB93_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB93_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB93_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB93_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_25
.LBB93_28:                              # %for.end71
                                        #   in Loop: Header=BB93_23 Depth=1
	jmp	.LBB93_29
.LBB93_29:                              # %for.inc72
                                        #   in Loop: Header=BB93_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_23
.LBB93_30:                              # %for.end74
	jmp	.LBB93_60
.LBB93_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB93_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB93_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB93_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB93_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_36:                              # %for.cond83
                                        #   Parent Loop BB93_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB93_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB93_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB93_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_36
.LBB93_39:                              # %for.end120
                                        #   in Loop: Header=BB93_34 Depth=1
	jmp	.LBB93_40
.LBB93_40:                              # %for.inc121
                                        #   in Loop: Header=BB93_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_34
.LBB93_41:                              # %for.end123
	jmp	.LBB93_51
.LBB93_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB93_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB93_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_45:                              # %for.cond129
                                        #   Parent Loop BB93_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB93_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB93_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB93_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_45
.LBB93_48:                              # %for.end145
                                        #   in Loop: Header=BB93_43 Depth=1
	jmp	.LBB93_49
.LBB93_49:                              # %for.inc146
                                        #   in Loop: Header=BB93_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_43
.LBB93_50:                              # %for.end148
	jmp	.LBB93_51
.LBB93_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB93_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_54:                              # %for.cond153
                                        #   Parent Loop BB93_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB93_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB93_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB93_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_54
.LBB93_57:                              # %for.end167
                                        #   in Loop: Header=BB93_52 Depth=1
	jmp	.LBB93_58
.LBB93_58:                              # %for.inc168
                                        #   in Loop: Header=BB93_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_52
.LBB93_59:                              # %for.end170
	jmp	.LBB93_60
.LBB93_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB93_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB93_66
.LBB93_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB93_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB93_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB93_86
.LBB93_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_69 Depth 2
                                        #       Child Loop BB93_74 Depth 3
                                        #         Child Loop BB93_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB93_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB93_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_69:                              # %for.cond197
                                        #   Parent Loop BB93_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_74 Depth 3
                                        #         Child Loop BB93_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB93_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB93_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB93_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB93_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB93_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB93_73:                              # %if.end218
                                        #   in Loop: Header=BB93_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB93_74:                              # %for.cond233
                                        #   Parent Loop BB93_67 Depth=1
                                        #     Parent Loop BB93_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB93_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB93_74 Depth=3
	movl	$0, -8(%rbp)
.LBB93_76:                              # %for.cond237
                                        #   Parent Loop BB93_67 Depth=1
                                        #     Parent Loop BB93_69 Depth=2
                                        #       Parent Loop BB93_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB93_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB93_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB93_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_76
.LBB93_79:                              # %for.end269
                                        #   in Loop: Header=BB93_74 Depth=3
	jmp	.LBB93_80
.LBB93_80:                              # %for.inc270
                                        #   in Loop: Header=BB93_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_74
.LBB93_81:                              # %for.end272
                                        #   in Loop: Header=BB93_69 Depth=2
	jmp	.LBB93_82
.LBB93_82:                              # %for.inc273
                                        #   in Loop: Header=BB93_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_69
.LBB93_83:                              # %for.end275
                                        #   in Loop: Header=BB93_67 Depth=1
	jmp	.LBB93_84
.LBB93_84:                              # %for.inc276
                                        #   in Loop: Header=BB93_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_67
.LBB93_85:                              # %for.end278
	jmp	.LBB93_95
.LBB93_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB93_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_89:                              # %for.cond284
                                        #   Parent Loop BB93_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB93_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB93_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB93_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_89
.LBB93_92:                              # %for.end310
                                        #   in Loop: Header=BB93_87 Depth=1
	jmp	.LBB93_93
.LBB93_93:                              # %for.inc311
                                        #   in Loop: Header=BB93_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_87
.LBB93_94:                              # %for.end313
	jmp	.LBB93_95
.LBB93_95:                              # %if.end314
	jmp	.LBB93_96
.LBB93_96:                              # %if.end315
	cmpl	$484633652, -84(%rbp)   # imm = 0x1CE2EC34
	jne	.LBB93_98
.LBB93_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_97
.Lfunc_end93:
	.size	decode_one_b8block.83, .Lfunc_end93-decode_one_b8block.83
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.84  # -- Begin function Get_Reference_Pixel.84
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.84,@function
Get_Reference_Pixel.84:                 # @Get_Reference_Pixel.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1349130101, -100(%rbp) # imm = 0x506A1775
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB94_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB94_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB94_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB94_5
.LBB94_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB94_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB94_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB94_11
.LBB94_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB94_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB94_10
.LBB94_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB94_10:                              # %cond.end14
.LBB94_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB94_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB94_14
.LBB94_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB94_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB94_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB94_20
.LBB94_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB94_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB94_19
.LBB94_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB94_19:                              # %cond.end29
.LBB94_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_332
.LBB94_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB94_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB94_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB94_25
.LBB94_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB94_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB94_31
.LBB94_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB94_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB94_30
.LBB94_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB94_30:                              # %cond.end52
.LBB94_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB94_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB94_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB94_36
.LBB94_35:                              # %cond.false61
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB94_36:                              # %cond.end63
                                        #   in Loop: Header=BB94_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB94_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB94_42
.LBB94_38:                              # %cond.false68
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB94_41
.LBB94_40:                              # %cond.false73
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB94_41:                              # %cond.end75
                                        #   in Loop: Header=BB94_32 Depth=1
.LBB94_42:                              # %cond.end77
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_32
.LBB94_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_47
.LBB94_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB94_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB94_53
.LBB94_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_52
.LBB94_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB94_52:                              # %cond.end113
.LBB94_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB94_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB94_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB94_57
.LBB94_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB94_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB94_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB94_63
.LBB94_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB94_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB94_62
.LBB94_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB94_62:                              # %cond.end136
.LBB94_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB94_76
.LBB94_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB94_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB94_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB94_68
.LBB94_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB94_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB94_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB94_74
.LBB94_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB94_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB94_73
.LBB94_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB94_73:                              # %cond.end169
.LBB94_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB94_75:                              # %if.end
	jmp	.LBB94_76
.LBB94_76:                              # %if.end178
	jmp	.LBB94_331
.LBB94_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB94_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB94_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB94_81
.LBB94_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB94_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB94_87
.LBB94_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB94_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB94_86
.LBB94_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB94_86:                              # %cond.end197
.LBB94_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB94_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB94_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB94_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB94_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB94_92
.LBB94_91:                              # %cond.false209
                                        #   in Loop: Header=BB94_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB94_92:                              # %cond.end211
                                        #   in Loop: Header=BB94_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB94_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB94_98
.LBB94_94:                              # %cond.false216
                                        #   in Loop: Header=BB94_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB94_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB94_97
.LBB94_96:                              # %cond.false221
                                        #   in Loop: Header=BB94_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB94_97:                              # %cond.end223
                                        #   in Loop: Header=BB94_88 Depth=1
.LBB94_98:                              # %cond.end225
                                        #   in Loop: Header=BB94_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB94_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_88
.LBB94_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_103
.LBB94_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB94_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB94_109
.LBB94_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_108
.LBB94_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB94_108:                             # %cond.end266
.LBB94_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB94_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB94_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB94_113
.LBB94_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB94_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB94_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB94_119
.LBB94_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB94_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB94_118
.LBB94_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB94_118:                             # %cond.end287
.LBB94_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB94_132
.LBB94_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB94_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB94_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB94_124
.LBB94_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB94_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB94_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB94_130
.LBB94_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB94_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB94_129
.LBB94_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB94_129:                             # %cond.end320
.LBB94_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB94_131:                             # %if.end331
	jmp	.LBB94_132
.LBB94_132:                             # %if.end332
	jmp	.LBB94_330
.LBB94_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB94_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB94_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB94_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB94_139
.LBB94_138:                             # %cond.false345
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB94_139:                             # %cond.end347
                                        #   in Loop: Header=BB94_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB94_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB94_145
.LBB94_141:                             # %cond.false352
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB94_144
.LBB94_143:                             # %cond.false357
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB94_144:                             # %cond.end359
                                        #   in Loop: Header=BB94_135 Depth=1
.LBB94_145:                             # %cond.end361
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB94_146:                             # %for.cond363
                                        #   Parent Loop BB94_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB94_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB94_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB94_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB94_150
.LBB94_149:                             # %cond.false371
                                        #   in Loop: Header=BB94_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB94_150:                             # %cond.end373
                                        #   in Loop: Header=BB94_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB94_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB94_156
.LBB94_152:                             # %cond.false378
                                        #   in Loop: Header=BB94_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB94_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB94_155
.LBB94_154:                             # %cond.false383
                                        #   in Loop: Header=BB94_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB94_155:                             # %cond.end385
                                        #   in Loop: Header=BB94_146 Depth=2
.LBB94_156:                             # %cond.end387
                                        #   in Loop: Header=BB94_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB94_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_146
.LBB94_158:                             # %for.end401
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_135
.LBB94_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB94_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB94_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB94_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB94_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_161
.LBB94_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_167
.LBB94_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB94_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB94_173
.LBB94_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_172
.LBB94_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB94_172:                             # %cond.end449
.LBB94_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB94_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB94_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_177
.LBB94_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB94_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB94_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB94_183
.LBB94_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB94_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_182
.LBB94_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB94_182:                             # %cond.end486
.LBB94_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB94_196
.LBB94_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB94_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB94_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_188
.LBB94_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB94_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB94_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB94_194
.LBB94_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB94_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_193
.LBB94_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB94_193:                             # %cond.end526
.LBB94_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB94_195:                             # %if.end532
	jmp	.LBB94_196
.LBB94_196:                             # %if.end533
	jmp	.LBB94_329
.LBB94_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB94_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB94_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB94_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB94_203
.LBB94_202:                             # %cond.false546
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB94_203:                             # %cond.end548
                                        #   in Loop: Header=BB94_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB94_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB94_209
.LBB94_205:                             # %cond.false553
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB94_208
.LBB94_207:                             # %cond.false558
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB94_208:                             # %cond.end560
                                        #   in Loop: Header=BB94_199 Depth=1
.LBB94_209:                             # %cond.end562
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB94_210:                             # %for.cond564
                                        #   Parent Loop BB94_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB94_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB94_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB94_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB94_214
.LBB94_213:                             # %cond.false572
                                        #   in Loop: Header=BB94_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB94_214:                             # %cond.end574
                                        #   in Loop: Header=BB94_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB94_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB94_220
.LBB94_216:                             # %cond.false579
                                        #   in Loop: Header=BB94_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB94_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB94_219
.LBB94_218:                             # %cond.false584
                                        #   in Loop: Header=BB94_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB94_219:                             # %cond.end586
                                        #   in Loop: Header=BB94_210 Depth=2
.LBB94_220:                             # %cond.end588
                                        #   in Loop: Header=BB94_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB94_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_210
.LBB94_222:                             # %for.end602
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_199
.LBB94_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB94_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB94_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB94_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB94_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_225
.LBB94_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_231
.LBB94_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB94_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB94_237
.LBB94_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_236
.LBB94_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB94_236:                             # %cond.end650
.LBB94_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB94_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB94_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_241
.LBB94_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB94_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB94_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB94_247
.LBB94_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB94_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_246
.LBB94_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB94_246:                             # %cond.end687
.LBB94_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB94_258
.LBB94_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB94_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_251
.LBB94_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB94_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB94_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB94_257
.LBB94_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB94_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_256
.LBB94_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB94_256:                             # %cond.end724
.LBB94_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB94_258:                             # %if.end730
	jmp	.LBB94_328
.LBB94_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB94_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB94_262
.LBB94_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB94_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB94_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB94_265
.LBB94_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB94_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB94_271
.LBB94_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB94_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB94_270
.LBB94_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB94_270:                             # %cond.end753
.LBB94_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB94_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB94_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB94_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB94_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB94_276
.LBB94_275:                             # %cond.false765
                                        #   in Loop: Header=BB94_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB94_276:                             # %cond.end767
                                        #   in Loop: Header=BB94_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB94_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB94_282
.LBB94_278:                             # %cond.false772
                                        #   in Loop: Header=BB94_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB94_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB94_281
.LBB94_280:                             # %cond.false777
                                        #   in Loop: Header=BB94_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB94_281:                             # %cond.end779
                                        #   in Loop: Header=BB94_272 Depth=1
.LBB94_282:                             # %cond.end781
                                        #   in Loop: Header=BB94_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB94_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_272
.LBB94_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_287
.LBB94_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB94_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB94_293
.LBB94_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_292
.LBB94_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB94_292:                             # %cond.end822
.LBB94_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB94_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB94_296
.LBB94_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB94_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB94_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB94_299
.LBB94_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB94_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB94_305
.LBB94_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB94_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB94_304
.LBB94_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB94_304:                             # %cond.end847
.LBB94_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB94_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB94_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB94_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB94_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB94_310
.LBB94_309:                             # %cond.false859
                                        #   in Loop: Header=BB94_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB94_310:                             # %cond.end861
                                        #   in Loop: Header=BB94_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB94_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB94_316
.LBB94_312:                             # %cond.false866
                                        #   in Loop: Header=BB94_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB94_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB94_315
.LBB94_314:                             # %cond.false871
                                        #   in Loop: Header=BB94_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB94_315:                             # %cond.end873
                                        #   in Loop: Header=BB94_306 Depth=1
.LBB94_316:                             # %cond.end875
                                        #   in Loop: Header=BB94_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB94_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_306
.LBB94_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_321
.LBB94_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB94_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB94_327
.LBB94_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_326
.LBB94_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB94_326:                             # %cond.end916
.LBB94_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB94_328:                             # %if.end922
	jmp	.LBB94_329
.LBB94_329:                             # %if.end923
	jmp	.LBB94_330
.LBB94_330:                             # %if.end924
	jmp	.LBB94_331
.LBB94_331:                             # %if.end925
	jmp	.LBB94_332
.LBB94_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1349130101, -100(%rbp) # imm = 0x506A1775
	jne	.LBB94_334
.LBB94_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_333
.Lfunc_end94:
	.size	Get_Reference_Pixel.84, .Lfunc_end94-Get_Reference_Pixel.84
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.85   # -- Begin function decode_one_b8block.85
	.p2align	4, 0x90
	.type	decode_one_b8block.85,@function
decode_one_b8block.85:                  # @decode_one_b8block.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1179232048, -84(%rbp)  # imm = 0x4649A730
	movl	%edi, -40(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB95_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB95_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB95_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB95_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB95_4:                               # %for.cond9
                                        #   Parent Loop BB95_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB95_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB95_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB95_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_4
.LBB95_7:                               # %for.end
                                        #   in Loop: Header=BB95_2 Depth=1
	jmp	.LBB95_8
.LBB95_8:                               # %for.inc26
                                        #   in Loop: Header=BB95_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_2
.LBB95_9:                               # %for.end28
	jmp	.LBB95_96
.LBB95_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB95_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB95_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB95_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB95_31
.LBB95_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB95_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB95_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB95_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB95_17:                              # %for.cond40
                                        #   Parent Loop BB95_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB95_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB95_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB95_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_17
.LBB95_20:                              # %for.end49
                                        #   in Loop: Header=BB95_15 Depth=1
	jmp	.LBB95_21
.LBB95_21:                              # %for.inc50
                                        #   in Loop: Header=BB95_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_15
.LBB95_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB95_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB95_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB95_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB95_25:                              # %for.cond56
                                        #   Parent Loop BB95_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB95_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB95_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB95_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_25
.LBB95_28:                              # %for.end71
                                        #   in Loop: Header=BB95_23 Depth=1
	jmp	.LBB95_29
.LBB95_29:                              # %for.inc72
                                        #   in Loop: Header=BB95_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_23
.LBB95_30:                              # %for.end74
	jmp	.LBB95_60
.LBB95_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB95_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB95_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB95_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB95_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB95_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB95_36:                              # %for.cond83
                                        #   Parent Loop BB95_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB95_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB95_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB95_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_36
.LBB95_39:                              # %for.end120
                                        #   in Loop: Header=BB95_34 Depth=1
	jmp	.LBB95_40
.LBB95_40:                              # %for.inc121
                                        #   in Loop: Header=BB95_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_34
.LBB95_41:                              # %for.end123
	jmp	.LBB95_51
.LBB95_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB95_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB95_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB95_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB95_45:                              # %for.cond129
                                        #   Parent Loop BB95_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB95_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB95_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB95_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_45
.LBB95_48:                              # %for.end145
                                        #   in Loop: Header=BB95_43 Depth=1
	jmp	.LBB95_49
.LBB95_49:                              # %for.inc146
                                        #   in Loop: Header=BB95_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_43
.LBB95_50:                              # %for.end148
	jmp	.LBB95_51
.LBB95_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB95_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB95_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB95_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB95_54:                              # %for.cond153
                                        #   Parent Loop BB95_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB95_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB95_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB95_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_54
.LBB95_57:                              # %for.end167
                                        #   in Loop: Header=BB95_52 Depth=1
	jmp	.LBB95_58
.LBB95_58:                              # %for.inc168
                                        #   in Loop: Header=BB95_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_52
.LBB95_59:                              # %for.end170
	jmp	.LBB95_60
.LBB95_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB95_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB95_66
.LBB95_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB95_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB95_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB95_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB95_86
.LBB95_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB95_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_69 Depth 2
                                        #       Child Loop BB95_74 Depth 3
                                        #         Child Loop BB95_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB95_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB95_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB95_69:                              # %for.cond197
                                        #   Parent Loop BB95_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_74 Depth 3
                                        #         Child Loop BB95_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB95_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB95_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB95_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB95_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB95_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB95_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB95_73:                              # %if.end218
                                        #   in Loop: Header=BB95_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB95_74:                              # %for.cond233
                                        #   Parent Loop BB95_67 Depth=1
                                        #     Parent Loop BB95_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB95_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB95_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB95_74 Depth=3
	movl	$0, -4(%rbp)
.LBB95_76:                              # %for.cond237
                                        #   Parent Loop BB95_67 Depth=1
                                        #     Parent Loop BB95_69 Depth=2
                                        #       Parent Loop BB95_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB95_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB95_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB95_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_76
.LBB95_79:                              # %for.end269
                                        #   in Loop: Header=BB95_74 Depth=3
	jmp	.LBB95_80
.LBB95_80:                              # %for.inc270
                                        #   in Loop: Header=BB95_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_74
.LBB95_81:                              # %for.end272
                                        #   in Loop: Header=BB95_69 Depth=2
	jmp	.LBB95_82
.LBB95_82:                              # %for.inc273
                                        #   in Loop: Header=BB95_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_69
.LBB95_83:                              # %for.end275
                                        #   in Loop: Header=BB95_67 Depth=1
	jmp	.LBB95_84
.LBB95_84:                              # %for.inc276
                                        #   in Loop: Header=BB95_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_67
.LBB95_85:                              # %for.end278
	jmp	.LBB95_95
.LBB95_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB95_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB95_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB95_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB95_89:                              # %for.cond284
                                        #   Parent Loop BB95_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB95_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB95_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB95_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_89
.LBB95_92:                              # %for.end310
                                        #   in Loop: Header=BB95_87 Depth=1
	jmp	.LBB95_93
.LBB95_93:                              # %for.inc311
                                        #   in Loop: Header=BB95_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_87
.LBB95_94:                              # %for.end313
	jmp	.LBB95_95
.LBB95_95:                              # %if.end314
	jmp	.LBB95_96
.LBB95_96:                              # %if.end315
	cmpl	$1179232048, -84(%rbp)  # imm = 0x4649A730
	jne	.LBB95_98
.LBB95_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_97
.Lfunc_end95:
	.size	decode_one_b8block.85, .Lfunc_end95-decode_one_b8block.85
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.86        # -- Begin function Conceal_Error.86
	.p2align	4, 0x90
	.type	Conceal_Error.86,@function
Conceal_Error.86:                       # @Conceal_Error.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1486158739, -68(%rbp)  # imm = 0x5894FB93
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB96_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB96_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB96_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB96_4:                               # %land.end
.LBB96_5:                               # %lor.end
.LBB96_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB96_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB96_9
.LBB96_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB96_14
.LBB96_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB96_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB96_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB96_12:                              # %land.end51
.LBB96_13:                              # %lor.end53
.LBB96_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB96_180
# %bb.15:                               # %land.end54
	movq	.LJTI96_0(,%rax,8), %rax
	jmpq	*%rax
.LBB96_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB96_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB96_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB96_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB96_18 Depth=1
	movl	$0, -4(%rbp)
.LBB96_20:                              # %for.cond68
                                        #   Parent Loop BB96_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB96_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB96_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB96_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_20
.LBB96_23:                              # %for.end
                                        #   in Loop: Header=BB96_18 Depth=1
	jmp	.LBB96_24
.LBB96_24:                              # %for.inc85
                                        #   in Loop: Header=BB96_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_18
.LBB96_25:                              # %for.end87
	jmp	.LBB96_35
.LBB96_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB96_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB96_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB96_27 Depth=1
	movl	$0, -4(%rbp)
.LBB96_29:                              # %for.cond92
                                        #   Parent Loop BB96_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB96_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB96_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB96_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_29
.LBB96_32:                              # %for.end104
                                        #   in Loop: Header=BB96_27 Depth=1
	jmp	.LBB96_33
.LBB96_33:                              # %for.inc105
                                        #   in Loop: Header=BB96_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_27
.LBB96_34:                              # %for.end107
	jmp	.LBB96_35
.LBB96_35:                              # %if.end
	jmp	.LBB96_180
.LBB96_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB96_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_39 Depth 2
                                        #       Child Loop BB96_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB96_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB96_37 Depth=1
	movl	$0, -16(%rbp)
.LBB96_39:                              # %for.cond113
                                        #   Parent Loop BB96_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB96_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB96_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB96_39 Depth=2
	movl	$0, -4(%rbp)
.LBB96_41:                              # %for.cond117
                                        #   Parent Loop BB96_37 Depth=1
                                        #     Parent Loop BB96_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB96_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB96_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB96_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_41
.LBB96_44:                              # %for.end141
                                        #   in Loop: Header=BB96_39 Depth=2
	jmp	.LBB96_45
.LBB96_45:                              # %for.inc142
                                        #   in Loop: Header=BB96_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_39
.LBB96_46:                              # %for.end144
                                        #   in Loop: Header=BB96_37 Depth=1
	jmp	.LBB96_47
.LBB96_47:                              # %for.inc145
                                        #   in Loop: Header=BB96_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_37
.LBB96_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB96_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB96_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB96_49 Depth=1
	movl	$0, -8(%rbp)
.LBB96_51:                              # %for.cond152
                                        #   Parent Loop BB96_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB96_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB96_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB96_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_51
.LBB96_54:                              # %for.end162
                                        #   in Loop: Header=BB96_49 Depth=1
	jmp	.LBB96_55
.LBB96_55:                              # %for.inc163
                                        #   in Loop: Header=BB96_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_49
.LBB96_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB96_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB96_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB96_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB96_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB96_59 Depth=1
	movl	$0, -4(%rbp)
.LBB96_61:                              # %for.cond175
                                        #   Parent Loop BB96_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB96_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB96_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB96_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_61
.LBB96_64:                              # %for.end195
                                        #   in Loop: Header=BB96_59 Depth=1
	jmp	.LBB96_65
.LBB96_65:                              # %for.inc196
                                        #   in Loop: Header=BB96_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_59
.LBB96_66:                              # %for.end198
	jmp	.LBB96_95
.LBB96_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB96_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB96_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_71 Depth 2
                                        #       Child Loop BB96_73 Depth 3
                                        #         Child Loop BB96_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB96_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB96_71:                              # %for.cond210
                                        #   Parent Loop BB96_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB96_73 Depth 3
                                        #         Child Loop BB96_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB96_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB96_73:                              # %for.cond236
                                        #   Parent Loop BB96_69 Depth=1
                                        #     Parent Loop BB96_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB96_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB96_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB96_73 Depth=3
	movl	$0, -4(%rbp)
.LBB96_75:                              # %for.cond240
                                        #   Parent Loop BB96_69 Depth=1
                                        #     Parent Loop BB96_71 Depth=2
                                        #       Parent Loop BB96_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB96_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB96_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB96_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_75
.LBB96_78:                              # %for.end259
                                        #   in Loop: Header=BB96_73 Depth=3
	jmp	.LBB96_79
.LBB96_79:                              # %for.inc260
                                        #   in Loop: Header=BB96_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_73
.LBB96_80:                              # %for.end262
                                        #   in Loop: Header=BB96_71 Depth=2
	jmp	.LBB96_81
.LBB96_81:                              # %for.inc263
                                        #   in Loop: Header=BB96_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_71
.LBB96_82:                              # %for.end265
                                        #   in Loop: Header=BB96_69 Depth=1
	jmp	.LBB96_83
.LBB96_83:                              # %for.inc266
                                        #   in Loop: Header=BB96_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_69
.LBB96_84:                              # %for.end268
	jmp	.LBB96_94
.LBB96_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB96_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB96_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB96_86 Depth=1
	movl	$0, -4(%rbp)
.LBB96_88:                              # %for.cond274
                                        #   Parent Loop BB96_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB96_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB96_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB96_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_88
.LBB96_91:                              # %for.end294
                                        #   in Loop: Header=BB96_86 Depth=1
	jmp	.LBB96_92
.LBB96_92:                              # %for.inc295
                                        #   in Loop: Header=BB96_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_86
.LBB96_93:                              # %for.end297
	jmp	.LBB96_94
.LBB96_94:                              # %if.end298
	jmp	.LBB96_95
.LBB96_95:                              # %if.end299
	jmp	.LBB96_105
.LBB96_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB96_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB96_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB96_97 Depth=1
	movl	$0, -4(%rbp)
.LBB96_99:                              # %for.cond305
                                        #   Parent Loop BB96_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB96_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB96_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB96_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_99
.LBB96_102:                             # %for.end317
                                        #   in Loop: Header=BB96_97 Depth=1
	jmp	.LBB96_103
.LBB96_103:                             # %for.inc318
                                        #   in Loop: Header=BB96_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_97
.LBB96_104:                             # %for.end320
	jmp	.LBB96_105
.LBB96_105:                             # %if.end321
	jmp	.LBB96_180
.LBB96_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB96_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB96_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_110 Depth 2
                                        #       Child Loop BB96_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB96_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB96_108 Depth=1
	movl	$0, -16(%rbp)
.LBB96_110:                             # %for.cond331
                                        #   Parent Loop BB96_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB96_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB96_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB96_110 Depth=2
	movl	$0, -4(%rbp)
.LBB96_112:                             # %for.cond335
                                        #   Parent Loop BB96_108 Depth=1
                                        #     Parent Loop BB96_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB96_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB96_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB96_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_112
.LBB96_115:                             # %for.end359
                                        #   in Loop: Header=BB96_110 Depth=2
	jmp	.LBB96_116
.LBB96_116:                             # %for.inc360
                                        #   in Loop: Header=BB96_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_110
.LBB96_117:                             # %for.end362
                                        #   in Loop: Header=BB96_108 Depth=1
	jmp	.LBB96_118
.LBB96_118:                             # %for.inc363
                                        #   in Loop: Header=BB96_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_108
.LBB96_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB96_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB96_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB96_120 Depth=1
	movl	$0, -8(%rbp)
.LBB96_122:                             # %for.cond370
                                        #   Parent Loop BB96_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB96_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB96_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB96_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_122
.LBB96_125:                             # %for.end380
                                        #   in Loop: Header=BB96_120 Depth=1
	jmp	.LBB96_126
.LBB96_126:                             # %for.inc381
                                        #   in Loop: Header=BB96_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_120
.LBB96_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB96_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB96_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB96_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB96_129 Depth=1
	movl	$0, -4(%rbp)
.LBB96_131:                             # %for.cond390
                                        #   Parent Loop BB96_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB96_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB96_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB96_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_131
.LBB96_134:                             # %for.end410
                                        #   in Loop: Header=BB96_129 Depth=1
	jmp	.LBB96_135
.LBB96_135:                             # %for.inc411
                                        #   in Loop: Header=BB96_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_129
.LBB96_136:                             # %for.end413
	jmp	.LBB96_156
.LBB96_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB96_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB96_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_141 Depth 2
                                        #       Child Loop BB96_143 Depth 3
                                        #         Child Loop BB96_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB96_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB96_141:                             # %for.cond425
                                        #   Parent Loop BB96_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB96_143 Depth 3
                                        #         Child Loop BB96_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB96_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB96_143:                             # %for.cond452
                                        #   Parent Loop BB96_139 Depth=1
                                        #     Parent Loop BB96_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB96_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB96_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB96_143 Depth=3
	movl	$0, -4(%rbp)
.LBB96_145:                             # %for.cond456
                                        #   Parent Loop BB96_139 Depth=1
                                        #     Parent Loop BB96_141 Depth=2
                                        #       Parent Loop BB96_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB96_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB96_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB96_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_145
.LBB96_148:                             # %for.end475
                                        #   in Loop: Header=BB96_143 Depth=3
	jmp	.LBB96_149
.LBB96_149:                             # %for.inc476
                                        #   in Loop: Header=BB96_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_143
.LBB96_150:                             # %for.end478
                                        #   in Loop: Header=BB96_141 Depth=2
	jmp	.LBB96_151
.LBB96_151:                             # %for.inc479
                                        #   in Loop: Header=BB96_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_141
.LBB96_152:                             # %for.end481
                                        #   in Loop: Header=BB96_139 Depth=1
	jmp	.LBB96_153
.LBB96_153:                             # %for.inc482
                                        #   in Loop: Header=BB96_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_139
.LBB96_154:                             # %for.end484
	jmp	.LBB96_155
.LBB96_155:                             # %if.end485
	jmp	.LBB96_156
.LBB96_156:                             # %if.end486
	jmp	.LBB96_157
.LBB96_157:                             # %if.end487
	jmp	.LBB96_180
.LBB96_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB96_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB96_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB96_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB96_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB96_161 Depth=1
	movl	$0, -4(%rbp)
.LBB96_163:                             # %for.cond499
                                        #   Parent Loop BB96_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB96_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB96_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB96_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_163
.LBB96_166:                             # %for.end519
                                        #   in Loop: Header=BB96_161 Depth=1
	jmp	.LBB96_167
.LBB96_167:                             # %for.inc520
                                        #   in Loop: Header=BB96_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_161
.LBB96_168:                             # %for.end522
	jmp	.LBB96_169
.LBB96_169:                             # %if.end523
	jmp	.LBB96_179
.LBB96_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB96_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB96_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB96_171 Depth=1
	movl	$0, -4(%rbp)
.LBB96_173:                             # %for.cond529
                                        #   Parent Loop BB96_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB96_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB96_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB96_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_173
.LBB96_176:                             # %for.end541
                                        #   in Loop: Header=BB96_171 Depth=1
	jmp	.LBB96_177
.LBB96_177:                             # %for.inc542
                                        #   in Loop: Header=BB96_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_171
.LBB96_178:                             # %for.end544
	jmp	.LBB96_179
.LBB96_179:                             # %if.end545
	jmp	.LBB96_180
.LBB96_180:                             # %sw.epilog
	cmpl	$1486158739, -68(%rbp)  # imm = 0x5894FB93
	jne	.LBB96_182
.LBB96_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_181
.Lfunc_end96:
	.size	Conceal_Error.86, .Lfunc_end96-Conceal_Error.86
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI96_0:
	.quad	.LBB96_16
	.quad	.LBB96_158
	.quad	.LBB96_106
	.quad	.LBB96_180
	.quad	.LBB96_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.87 # -- Begin function compute_residue_b8block.87
	.p2align	4, 0x90
	.type	compute_residue_b8block.87,@function
compute_residue_b8block.87:             # @compute_residue_b8block.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$567109106, -36(%rbp)   # imm = 0x21CD65F2
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB97_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB97_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB97_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB97_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB97_4:                               # %for.cond4
                                        #   Parent Loop BB97_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB97_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB97_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB97_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_4
.LBB97_7:                               # %for.end
                                        #   in Loop: Header=BB97_2 Depth=1
	jmp	.LBB97_8
.LBB97_8:                               # %for.inc22
                                        #   in Loop: Header=BB97_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_2
.LBB97_9:                               # %for.end24
	jmp	.LBB97_19
.LBB97_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB97_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB97_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB97_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB97_13:                              # %for.cond29
                                        #   Parent Loop BB97_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB97_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB97_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB97_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_13
.LBB97_16:                              # %for.end56
                                        #   in Loop: Header=BB97_11 Depth=1
	jmp	.LBB97_17
.LBB97_17:                              # %for.inc57
                                        #   in Loop: Header=BB97_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_11
.LBB97_18:                              # %for.end59
	jmp	.LBB97_19
.LBB97_19:                              # %if.end
	cmpl	$567109106, -36(%rbp)   # imm = 0x21CD65F2
	jne	.LBB97_21
.LBB97_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_20
.Lfunc_end97:
	.size	compute_residue_b8block.87, .Lfunc_end97-compute_residue_b8block.87
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.88 # -- Begin function compute_residue_b8block.88
	.p2align	4, 0x90
	.type	compute_residue_b8block.88,@function
compute_residue_b8block.88:             # @compute_residue_b8block.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1148680027, -36(%rbp)  # imm = 0x4477775B
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB98_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB98_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB98_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_4:                               # %for.cond4
                                        #   Parent Loop BB98_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB98_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB98_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB98_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_4
.LBB98_7:                               # %for.end
                                        #   in Loop: Header=BB98_2 Depth=1
	jmp	.LBB98_8
.LBB98_8:                               # %for.inc22
                                        #   in Loop: Header=BB98_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_2
.LBB98_9:                               # %for.end24
	jmp	.LBB98_19
.LBB98_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB98_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB98_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_13:                              # %for.cond29
                                        #   Parent Loop BB98_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB98_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB98_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB98_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_13
.LBB98_16:                              # %for.end56
                                        #   in Loop: Header=BB98_11 Depth=1
	jmp	.LBB98_17
.LBB98_17:                              # %for.inc57
                                        #   in Loop: Header=BB98_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_11
.LBB98_18:                              # %for.end59
	jmp	.LBB98_19
.LBB98_19:                              # %if.end
	cmpl	$1148680027, -36(%rbp)  # imm = 0x4477775B
	jne	.LBB98_21
.LBB98_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_20
.Lfunc_end98:
	.size	compute_residue_b8block.88, .Lfunc_end98-compute_residue_b8block.88
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.89
.LCPI99_0:
	.quad	4636737291354636288     # double 100
.LCPI99_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.89
	.p2align	4, 0x90
	.type	Build_Status_Map.89,@function
Build_Status_Map.89:                    # @Build_Status_Map.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1744707043, -44(%rbp)  # imm = 0x67FE1DE3
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB99_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	$0, -12(%rbp)
.LBB99_3:                               # %for.cond2
                                        #   Parent Loop BB99_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB99_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB99_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB99_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB99_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB99_13
.LBB99_6:                               # %if.then
                                        #   in Loop: Header=BB99_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI99_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI99_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB99_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB99_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB99_8:                               # %if.end
                                        #   in Loop: Header=BB99_3 Depth=2
	callq	rand
	vmovsd	.LCPI99_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI99_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB99_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB99_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB99_10:                              # %if.end20
                                        #   in Loop: Header=BB99_3 Depth=2
	callq	rand
	vmovsd	.LCPI99_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI99_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB99_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB99_3 Depth=2
	movl	$1, -4(%rbp)
.LBB99_12:                              # %if.end29
                                        #   in Loop: Header=BB99_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB99_13:                              # %if.end30
                                        #   in Loop: Header=BB99_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB99_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB99_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB99_18
.LBB99_15:                              # %if.else
                                        #   in Loop: Header=BB99_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB99_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB99_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB99_17:                              # %if.end49
                                        #   in Loop: Header=BB99_3 Depth=2
	jmp	.LBB99_18
.LBB99_18:                              # %if.end50
                                        #   in Loop: Header=BB99_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB99_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB99_3
.LBB99_20:                              # %for.end
                                        #   in Loop: Header=BB99_1 Depth=1
	jmp	.LBB99_21
.LBB99_21:                              # %for.inc53
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_1
.LBB99_22:                              # %for.end55
	cmpl	$1744707043, -44(%rbp)  # imm = 0x67FE1DE3
	jne	.LBB99_24
.LBB99_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_23
.Lfunc_end99:
	.size	Build_Status_Map.89, .Lfunc_end99-Build_Status_Map.89
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.90   # -- Begin function decode_one_b8block.90
	.p2align	4, 0x90
	.type	decode_one_b8block.90,@function
decode_one_b8block.90:                  # @decode_one_b8block.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$277374614, -84(%rbp)   # imm = 0x10886696
	movl	%edi, -56(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB100_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB100_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB100_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_4:                              # %for.cond9
                                        #   Parent Loop BB100_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB100_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB100_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB100_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_4
.LBB100_7:                              # %for.end
                                        #   in Loop: Header=BB100_2 Depth=1
	jmp	.LBB100_8
.LBB100_8:                              # %for.inc26
                                        #   in Loop: Header=BB100_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_2
.LBB100_9:                              # %for.end28
	jmp	.LBB100_96
.LBB100_10:                             # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB100_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB100_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB100_31
.LBB100_14:                             # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB100_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB100_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_17:                             # %for.cond40
                                        #   Parent Loop BB100_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB100_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB100_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB100_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_17
.LBB100_20:                             # %for.end49
                                        #   in Loop: Header=BB100_15 Depth=1
	jmp	.LBB100_21
.LBB100_21:                             # %for.inc50
                                        #   in Loop: Header=BB100_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_15
.LBB100_22:                             # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB100_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB100_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB100_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB100_25:                             # %for.cond56
                                        #   Parent Loop BB100_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB100_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB100_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB100_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_25
.LBB100_28:                             # %for.end71
                                        #   in Loop: Header=BB100_23 Depth=1
	jmp	.LBB100_29
.LBB100_29:                             # %for.inc72
                                        #   in Loop: Header=BB100_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_23
.LBB100_30:                             # %for.end74
	jmp	.LBB100_60
.LBB100_31:                             # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB100_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB100_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB100_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB100_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB100_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB100_36:                             # %for.cond83
                                        #   Parent Loop BB100_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB100_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB100_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB100_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_36
.LBB100_39:                             # %for.end120
                                        #   in Loop: Header=BB100_34 Depth=1
	jmp	.LBB100_40
.LBB100_40:                             # %for.inc121
                                        #   in Loop: Header=BB100_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_34
.LBB100_41:                             # %for.end123
	jmp	.LBB100_51
.LBB100_42:                             # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB100_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB100_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB100_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB100_45:                             # %for.cond129
                                        #   Parent Loop BB100_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB100_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB100_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB100_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_45
.LBB100_48:                             # %for.end145
                                        #   in Loop: Header=BB100_43 Depth=1
	jmp	.LBB100_49
.LBB100_49:                             # %for.inc146
                                        #   in Loop: Header=BB100_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_43
.LBB100_50:                             # %for.end148
	jmp	.LBB100_51
.LBB100_51:                             # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB100_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB100_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_54:                             # %for.cond153
                                        #   Parent Loop BB100_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB100_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB100_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB100_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_54
.LBB100_57:                             # %for.end167
                                        #   in Loop: Header=BB100_52 Depth=1
	jmp	.LBB100_58
.LBB100_58:                             # %for.inc168
                                        #   in Loop: Header=BB100_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_52
.LBB100_59:                             # %for.end170
	jmp	.LBB100_60
.LBB100_60:                             # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB100_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB100_66
.LBB100_62:                             # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB100_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB100_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB100_86
.LBB100_66:                             # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB100_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_69 Depth 2
                                        #       Child Loop BB100_74 Depth 3
                                        #         Child Loop BB100_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB100_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB100_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB100_69:                             # %for.cond197
                                        #   Parent Loop BB100_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_74 Depth 3
                                        #         Child Loop BB100_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB100_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB100_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB100_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB100_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB100_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB100_73:                             # %if.end218
                                        #   in Loop: Header=BB100_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB100_74:                             # %for.cond233
                                        #   Parent Loop BB100_67 Depth=1
                                        #     Parent Loop BB100_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB100_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB100_74 Depth=3
	movl	$0, -8(%rbp)
.LBB100_76:                             # %for.cond237
                                        #   Parent Loop BB100_67 Depth=1
                                        #     Parent Loop BB100_69 Depth=2
                                        #       Parent Loop BB100_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB100_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB100_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB100_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_76
.LBB100_79:                             # %for.end269
                                        #   in Loop: Header=BB100_74 Depth=3
	jmp	.LBB100_80
.LBB100_80:                             # %for.inc270
                                        #   in Loop: Header=BB100_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_74
.LBB100_81:                             # %for.end272
                                        #   in Loop: Header=BB100_69 Depth=2
	jmp	.LBB100_82
.LBB100_82:                             # %for.inc273
                                        #   in Loop: Header=BB100_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_69
.LBB100_83:                             # %for.end275
                                        #   in Loop: Header=BB100_67 Depth=1
	jmp	.LBB100_84
.LBB100_84:                             # %for.inc276
                                        #   in Loop: Header=BB100_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_67
.LBB100_85:                             # %for.end278
	jmp	.LBB100_95
.LBB100_86:                             # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB100_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB100_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_89:                             # %for.cond284
                                        #   Parent Loop BB100_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB100_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB100_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB100_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_89
.LBB100_92:                             # %for.end310
                                        #   in Loop: Header=BB100_87 Depth=1
	jmp	.LBB100_93
.LBB100_93:                             # %for.inc311
                                        #   in Loop: Header=BB100_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_87
.LBB100_94:                             # %for.end313
	jmp	.LBB100_95
.LBB100_95:                             # %if.end314
	jmp	.LBB100_96
.LBB100_96:                             # %if.end315
	cmpl	$277374614, -84(%rbp)   # imm = 0x10886696
	jne	.LBB100_98
.LBB100_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_97
.Lfunc_end100:
	.size	decode_one_b8block.90, .Lfunc_end100-decode_one_b8block.90
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.91
.LCPI101_0:
	.quad	4636737291354636288     # double 100
.LCPI101_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.91
	.p2align	4, 0x90
	.type	Build_Status_Map.91,@function
Build_Status_Map.91:                    # @Build_Status_Map.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1464226407, -44(%rbp)  # imm = 0x57465267
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB101_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB101_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	$0, -8(%rbp)
.LBB101_3:                              # %for.cond2
                                        #   Parent Loop BB101_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB101_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB101_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB101_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB101_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB101_13
.LBB101_6:                              # %if.then
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI101_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI101_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB101_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB101_8:                              # %if.end
                                        #   in Loop: Header=BB101_3 Depth=2
	callq	rand
	vmovsd	.LCPI101_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI101_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB101_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB101_10:                             # %if.end20
                                        #   in Loop: Header=BB101_3 Depth=2
	callq	rand
	vmovsd	.LCPI101_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI101_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB101_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	$1, -4(%rbp)
.LBB101_12:                             # %if.end29
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB101_13:                             # %if.end30
                                        #   in Loop: Header=BB101_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB101_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB101_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB101_18
.LBB101_15:                             # %if.else
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB101_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB101_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB101_17:                             # %if.end49
                                        #   in Loop: Header=BB101_3 Depth=2
	jmp	.LBB101_18
.LBB101_18:                             # %if.end50
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_3
.LBB101_20:                             # %for.end
                                        #   in Loop: Header=BB101_1 Depth=1
	jmp	.LBB101_21
.LBB101_21:                             # %for.inc53
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_1
.LBB101_22:                             # %for.end55
	cmpl	$1464226407, -44(%rbp)  # imm = 0x57465267
	jne	.LBB101_24
.LBB101_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_23
.Lfunc_end101:
	.size	Build_Status_Map.91, .Lfunc_end101-Build_Status_Map.91
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.92
.LCPI102_0:
	.quad	4636737291354636288     # double 100
.LCPI102_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.92
	.p2align	4, 0x90
	.type	Build_Status_Map.92,@function
Build_Status_Map.92:                    # @Build_Status_Map.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1340807078, -40(%rbp)  # imm = 0x4FEB17A6
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB102_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB102_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB102_1 Depth=1
	movl	$0, -12(%rbp)
.LBB102_3:                              # %for.cond2
                                        #   Parent Loop BB102_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB102_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB102_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB102_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB102_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB102_13
.LBB102_6:                              # %if.then
                                        #   in Loop: Header=BB102_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI102_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI102_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB102_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB102_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB102_8:                              # %if.end
                                        #   in Loop: Header=BB102_3 Depth=2
	callq	rand
	vmovsd	.LCPI102_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI102_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB102_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB102_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB102_10:                             # %if.end20
                                        #   in Loop: Header=BB102_3 Depth=2
	callq	rand
	vmovsd	.LCPI102_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI102_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB102_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB102_3 Depth=2
	movl	$1, -4(%rbp)
.LBB102_12:                             # %if.end29
                                        #   in Loop: Header=BB102_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB102_13:                             # %if.end30
                                        #   in Loop: Header=BB102_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB102_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB102_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB102_18
.LBB102_15:                             # %if.else
                                        #   in Loop: Header=BB102_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB102_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB102_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB102_17:                             # %if.end49
                                        #   in Loop: Header=BB102_3 Depth=2
	jmp	.LBB102_18
.LBB102_18:                             # %if.end50
                                        #   in Loop: Header=BB102_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB102_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_3
.LBB102_20:                             # %for.end
                                        #   in Loop: Header=BB102_1 Depth=1
	jmp	.LBB102_21
.LBB102_21:                             # %for.inc53
                                        #   in Loop: Header=BB102_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_1
.LBB102_22:                             # %for.end55
	cmpl	$1340807078, -40(%rbp)  # imm = 0x4FEB17A6
	jne	.LBB102_24
.LBB102_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_23
.Lfunc_end102:
	.size	Build_Status_Map.92, .Lfunc_end102-Build_Status_Map.92
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.93   # -- Begin function decode_one_b8block.93
	.p2align	4, 0x90
	.type	decode_one_b8block.93,@function
decode_one_b8block.93:                  # @decode_one_b8block.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$665447065, -84(%rbp)   # imm = 0x27A9EA99
	movl	%edi, -52(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB103_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB103_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_4:                              # %for.cond9
                                        #   Parent Loop BB103_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB103_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB103_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB103_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_4
.LBB103_7:                              # %for.end
                                        #   in Loop: Header=BB103_2 Depth=1
	jmp	.LBB103_8
.LBB103_8:                              # %for.inc26
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_2
.LBB103_9:                              # %for.end28
	jmp	.LBB103_96
.LBB103_10:                             # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB103_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB103_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB103_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB103_31
.LBB103_14:                             # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB103_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB103_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_17:                             # %for.cond40
                                        #   Parent Loop BB103_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB103_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB103_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB103_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_17
.LBB103_20:                             # %for.end49
                                        #   in Loop: Header=BB103_15 Depth=1
	jmp	.LBB103_21
.LBB103_21:                             # %for.inc50
                                        #   in Loop: Header=BB103_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_15
.LBB103_22:                             # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB103_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB103_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB103_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB103_25:                             # %for.cond56
                                        #   Parent Loop BB103_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB103_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB103_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB103_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_25
.LBB103_28:                             # %for.end71
                                        #   in Loop: Header=BB103_23 Depth=1
	jmp	.LBB103_29
.LBB103_29:                             # %for.inc72
                                        #   in Loop: Header=BB103_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_23
.LBB103_30:                             # %for.end74
	jmp	.LBB103_60
.LBB103_31:                             # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB103_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB103_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB103_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB103_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB103_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB103_36:                             # %for.cond83
                                        #   Parent Loop BB103_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB103_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB103_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB103_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_36
.LBB103_39:                             # %for.end120
                                        #   in Loop: Header=BB103_34 Depth=1
	jmp	.LBB103_40
.LBB103_40:                             # %for.inc121
                                        #   in Loop: Header=BB103_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_34
.LBB103_41:                             # %for.end123
	jmp	.LBB103_51
.LBB103_42:                             # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB103_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB103_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB103_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB103_45:                             # %for.cond129
                                        #   Parent Loop BB103_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB103_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB103_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB103_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_45
.LBB103_48:                             # %for.end145
                                        #   in Loop: Header=BB103_43 Depth=1
	jmp	.LBB103_49
.LBB103_49:                             # %for.inc146
                                        #   in Loop: Header=BB103_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_43
.LBB103_50:                             # %for.end148
	jmp	.LBB103_51
.LBB103_51:                             # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB103_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB103_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_54:                             # %for.cond153
                                        #   Parent Loop BB103_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB103_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB103_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB103_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_54
.LBB103_57:                             # %for.end167
                                        #   in Loop: Header=BB103_52 Depth=1
	jmp	.LBB103_58
.LBB103_58:                             # %for.inc168
                                        #   in Loop: Header=BB103_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_52
.LBB103_59:                             # %for.end170
	jmp	.LBB103_60
.LBB103_60:                             # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB103_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB103_66
.LBB103_62:                             # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB103_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB103_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB103_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB103_86
.LBB103_66:                             # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB103_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_69 Depth 2
                                        #       Child Loop BB103_74 Depth 3
                                        #         Child Loop BB103_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB103_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB103_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB103_69:                             # %for.cond197
                                        #   Parent Loop BB103_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB103_74 Depth 3
                                        #         Child Loop BB103_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB103_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB103_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB103_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB103_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB103_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB103_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB103_73:                             # %if.end218
                                        #   in Loop: Header=BB103_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB103_74:                             # %for.cond233
                                        #   Parent Loop BB103_67 Depth=1
                                        #     Parent Loop BB103_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB103_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB103_74 Depth=3
	movl	$0, -8(%rbp)
.LBB103_76:                             # %for.cond237
                                        #   Parent Loop BB103_67 Depth=1
                                        #     Parent Loop BB103_69 Depth=2
                                        #       Parent Loop BB103_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB103_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB103_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB103_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_76
.LBB103_79:                             # %for.end269
                                        #   in Loop: Header=BB103_74 Depth=3
	jmp	.LBB103_80
.LBB103_80:                             # %for.inc270
                                        #   in Loop: Header=BB103_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_74
.LBB103_81:                             # %for.end272
                                        #   in Loop: Header=BB103_69 Depth=2
	jmp	.LBB103_82
.LBB103_82:                             # %for.inc273
                                        #   in Loop: Header=BB103_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_69
.LBB103_83:                             # %for.end275
                                        #   in Loop: Header=BB103_67 Depth=1
	jmp	.LBB103_84
.LBB103_84:                             # %for.inc276
                                        #   in Loop: Header=BB103_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_67
.LBB103_85:                             # %for.end278
	jmp	.LBB103_95
.LBB103_86:                             # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB103_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB103_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_89:                             # %for.cond284
                                        #   Parent Loop BB103_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB103_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB103_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB103_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_89
.LBB103_92:                             # %for.end310
                                        #   in Loop: Header=BB103_87 Depth=1
	jmp	.LBB103_93
.LBB103_93:                             # %for.inc311
                                        #   in Loop: Header=BB103_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_87
.LBB103_94:                             # %for.end313
	jmp	.LBB103_95
.LBB103_95:                             # %if.end314
	jmp	.LBB103_96
.LBB103_96:                             # %if.end315
	cmpl	$665447065, -84(%rbp)   # imm = 0x27A9EA99
	jne	.LBB103_98
.LBB103_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_97
.Lfunc_end103:
	.size	decode_one_b8block.93, .Lfunc_end103-decode_one_b8block.93
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.94 # -- Begin function compute_residue_b8block.94
	.p2align	4, 0x90
	.type	compute_residue_b8block.94,@function
compute_residue_b8block.94:             # @compute_residue_b8block.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$848443366, -36(%rbp)   # imm = 0x329237E6
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB104_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB104_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB104_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB104_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB104_4:                              # %for.cond4
                                        #   Parent Loop BB104_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB104_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB104_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB104_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_4
.LBB104_7:                              # %for.end
                                        #   in Loop: Header=BB104_2 Depth=1
	jmp	.LBB104_8
.LBB104_8:                              # %for.inc22
                                        #   in Loop: Header=BB104_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_2
.LBB104_9:                              # %for.end24
	jmp	.LBB104_19
.LBB104_10:                             # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB104_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB104_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB104_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB104_13:                             # %for.cond29
                                        #   Parent Loop BB104_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB104_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB104_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB104_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_13
.LBB104_16:                             # %for.end56
                                        #   in Loop: Header=BB104_11 Depth=1
	jmp	.LBB104_17
.LBB104_17:                             # %for.inc57
                                        #   in Loop: Header=BB104_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_11
.LBB104_18:                             # %for.end59
	jmp	.LBB104_19
.LBB104_19:                             # %if.end
	cmpl	$848443366, -36(%rbp)   # imm = 0x329237E6
	jne	.LBB104_21
.LBB104_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_20
.Lfunc_end104:
	.size	compute_residue_b8block.94, .Lfunc_end104-compute_residue_b8block.94
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.95 # -- Begin function compute_residue_b8block.95
	.p2align	4, 0x90
	.type	compute_residue_b8block.95,@function
compute_residue_b8block.95:             # @compute_residue_b8block.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1967422713, -36(%rbp)  # imm = 0x75447CF9
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB105_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB105_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB105_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB105_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB105_4:                              # %for.cond4
                                        #   Parent Loop BB105_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB105_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB105_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB105_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_4
.LBB105_7:                              # %for.end
                                        #   in Loop: Header=BB105_2 Depth=1
	jmp	.LBB105_8
.LBB105_8:                              # %for.inc22
                                        #   in Loop: Header=BB105_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_2
.LBB105_9:                              # %for.end24
	jmp	.LBB105_19
.LBB105_10:                             # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB105_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB105_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB105_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB105_13:                             # %for.cond29
                                        #   Parent Loop BB105_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB105_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB105_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB105_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_13
.LBB105_16:                             # %for.end56
                                        #   in Loop: Header=BB105_11 Depth=1
	jmp	.LBB105_17
.LBB105_17:                             # %for.inc57
                                        #   in Loop: Header=BB105_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_11
.LBB105_18:                             # %for.end59
	jmp	.LBB105_19
.LBB105_19:                             # %if.end
	cmpl	$1967422713, -36(%rbp)  # imm = 0x75447CF9
	jne	.LBB105_21
.LBB105_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_20
.Lfunc_end105:
	.size	compute_residue_b8block.95, .Lfunc_end105-compute_residue_b8block.95
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.96       # -- Begin function DecOneForthPix.96
	.p2align	4, 0x90
	.type	DecOneForthPix.96,@function
DecOneForthPix.96:                      # @DecOneForthPix.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1845529822, -12(%rbp)  # imm = 0x6E008CDE
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB106_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB106_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB106_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_1
.LBB106_4:                              # %for.end
	cmpl	$1845529822, -12(%rbp)  # imm = 0x6E008CDE
	jne	.LBB106_6
.LBB106_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_5
.Lfunc_end106:
	.size	DecOneForthPix.96, .Lfunc_end106-DecOneForthPix.96
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.97       # -- Begin function DecOneForthPix.97
	.p2align	4, 0x90
	.type	DecOneForthPix.97,@function
DecOneForthPix.97:                      # @DecOneForthPix.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1774323841, -12(%rbp)  # imm = 0x69C20881
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB107_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB107_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB107_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB107_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_1
.LBB107_4:                              # %for.end
	cmpl	$1774323841, -12(%rbp)  # imm = 0x69C20881
	jne	.LBB107_6
.LBB107_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_5
.Lfunc_end107:
	.size	DecOneForthPix.97, .Lfunc_end107-DecOneForthPix.97
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.98
.LCPI108_0:
	.quad	4636737291354636288     # double 100
.LCPI108_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.98
	.p2align	4, 0x90
	.type	Build_Status_Map.98,@function
Build_Status_Map.98:                    # @Build_Status_Map.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$185173454, -44(%rbp)   # imm = 0xB0985CE
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB108_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB108_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	$0, -12(%rbp)
.LBB108_3:                              # %for.cond2
                                        #   Parent Loop BB108_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB108_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB108_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB108_13
.LBB108_6:                              # %if.then
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI108_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI108_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB108_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB108_8:                              # %if.end
                                        #   in Loop: Header=BB108_3 Depth=2
	callq	rand
	vmovsd	.LCPI108_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI108_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB108_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB108_10:                             # %if.end20
                                        #   in Loop: Header=BB108_3 Depth=2
	callq	rand
	vmovsd	.LCPI108_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI108_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB108_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	$1, -4(%rbp)
.LBB108_12:                             # %if.end29
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB108_13:                             # %if.end30
                                        #   in Loop: Header=BB108_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB108_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB108_18
.LBB108_15:                             # %if.else
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB108_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB108_17:                             # %if.end49
                                        #   in Loop: Header=BB108_3 Depth=2
	jmp	.LBB108_18
.LBB108_18:                             # %if.end50
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_3
.LBB108_20:                             # %for.end
                                        #   in Loop: Header=BB108_1 Depth=1
	jmp	.LBB108_21
.LBB108_21:                             # %for.inc53
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_1
.LBB108_22:                             # %for.end55
	cmpl	$185173454, -44(%rbp)   # imm = 0xB0985CE
	jne	.LBB108_24
.LBB108_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_23
.Lfunc_end108:
	.size	Build_Status_Map.98, .Lfunc_end108-Build_Status_Map.98
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.99    # -- Begin function Error_Concealment.99
	.p2align	4, 0x90
	.type	Error_Concealment.99,@function
Error_Concealment.99:                   # @Error_Concealment.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$335753935, -16(%rbp)   # imm = 0x140332CF
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB109_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB109_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB109_1 Depth=1
	movl	$0, -8(%rbp)
.LBB109_3:                              # %for.cond2
                                        #   Parent Loop BB109_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB109_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB109_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB109_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB109_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB109_6:                              # %if.end
                                        #   in Loop: Header=BB109_3 Depth=2
	jmp	.LBB109_7
.LBB109_7:                              # %for.inc
                                        #   in Loop: Header=BB109_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_3
.LBB109_8:                              # %for.end
                                        #   in Loop: Header=BB109_1 Depth=1
	jmp	.LBB109_9
.LBB109_9:                              # %for.inc7
                                        #   in Loop: Header=BB109_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_1
.LBB109_10:                             # %for.end9
	cmpl	$335753935, -16(%rbp)   # imm = 0x140332CF
	jne	.LBB109_12
.LBB109_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_11
.Lfunc_end109:
	.size	Error_Concealment.99, .Lfunc_end109-Error_Concealment.99
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.100  # -- Begin function decode_one_b8block.100
	.p2align	4, 0x90
	.type	decode_one_b8block.100,@function
decode_one_b8block.100:                 # @decode_one_b8block.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$768597879, -84(%rbp)   # imm = 0x2DCFDF77
	movl	%edi, -40(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB110_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB110_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB110_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB110_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB110_4:                              # %for.cond9
                                        #   Parent Loop BB110_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB110_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB110_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB110_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_4
.LBB110_7:                              # %for.end
                                        #   in Loop: Header=BB110_2 Depth=1
	jmp	.LBB110_8
.LBB110_8:                              # %for.inc26
                                        #   in Loop: Header=BB110_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_2
.LBB110_9:                              # %for.end28
	jmp	.LBB110_96
.LBB110_10:                             # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB110_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB110_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB110_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB110_31
.LBB110_14:                             # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB110_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB110_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB110_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB110_17:                             # %for.cond40
                                        #   Parent Loop BB110_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB110_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB110_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB110_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_17
.LBB110_20:                             # %for.end49
                                        #   in Loop: Header=BB110_15 Depth=1
	jmp	.LBB110_21
.LBB110_21:                             # %for.inc50
                                        #   in Loop: Header=BB110_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_15
.LBB110_22:                             # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB110_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB110_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB110_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB110_25:                             # %for.cond56
                                        #   Parent Loop BB110_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB110_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB110_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB110_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_25
.LBB110_28:                             # %for.end71
                                        #   in Loop: Header=BB110_23 Depth=1
	jmp	.LBB110_29
.LBB110_29:                             # %for.inc72
                                        #   in Loop: Header=BB110_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_23
.LBB110_30:                             # %for.end74
	jmp	.LBB110_60
.LBB110_31:                             # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB110_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB110_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB110_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB110_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB110_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB110_36:                             # %for.cond83
                                        #   Parent Loop BB110_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB110_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB110_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB110_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_36
.LBB110_39:                             # %for.end120
                                        #   in Loop: Header=BB110_34 Depth=1
	jmp	.LBB110_40
.LBB110_40:                             # %for.inc121
                                        #   in Loop: Header=BB110_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_34
.LBB110_41:                             # %for.end123
	jmp	.LBB110_51
.LBB110_42:                             # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB110_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB110_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB110_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB110_45:                             # %for.cond129
                                        #   Parent Loop BB110_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB110_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB110_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB110_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_45
.LBB110_48:                             # %for.end145
                                        #   in Loop: Header=BB110_43 Depth=1
	jmp	.LBB110_49
.LBB110_49:                             # %for.inc146
                                        #   in Loop: Header=BB110_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_43
.LBB110_50:                             # %for.end148
	jmp	.LBB110_51
.LBB110_51:                             # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB110_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB110_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB110_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB110_54:                             # %for.cond153
                                        #   Parent Loop BB110_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB110_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB110_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB110_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_54
.LBB110_57:                             # %for.end167
                                        #   in Loop: Header=BB110_52 Depth=1
	jmp	.LBB110_58
.LBB110_58:                             # %for.inc168
                                        #   in Loop: Header=BB110_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_52
.LBB110_59:                             # %for.end170
	jmp	.LBB110_60
.LBB110_60:                             # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB110_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB110_66
.LBB110_62:                             # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB110_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB110_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB110_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB110_86
.LBB110_66:                             # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB110_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_69 Depth 2
                                        #       Child Loop BB110_74 Depth 3
                                        #         Child Loop BB110_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB110_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB110_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB110_69:                             # %for.cond197
                                        #   Parent Loop BB110_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_74 Depth 3
                                        #         Child Loop BB110_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB110_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB110_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB110_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB110_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB110_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB110_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB110_73:                             # %if.end218
                                        #   in Loop: Header=BB110_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB110_74:                             # %for.cond233
                                        #   Parent Loop BB110_67 Depth=1
                                        #     Parent Loop BB110_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB110_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB110_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB110_74 Depth=3
	movl	$0, -4(%rbp)
.LBB110_76:                             # %for.cond237
                                        #   Parent Loop BB110_67 Depth=1
                                        #     Parent Loop BB110_69 Depth=2
                                        #       Parent Loop BB110_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB110_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB110_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB110_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_76
.LBB110_79:                             # %for.end269
                                        #   in Loop: Header=BB110_74 Depth=3
	jmp	.LBB110_80
.LBB110_80:                             # %for.inc270
                                        #   in Loop: Header=BB110_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_74
.LBB110_81:                             # %for.end272
                                        #   in Loop: Header=BB110_69 Depth=2
	jmp	.LBB110_82
.LBB110_82:                             # %for.inc273
                                        #   in Loop: Header=BB110_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_69
.LBB110_83:                             # %for.end275
                                        #   in Loop: Header=BB110_67 Depth=1
	jmp	.LBB110_84
.LBB110_84:                             # %for.inc276
                                        #   in Loop: Header=BB110_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_67
.LBB110_85:                             # %for.end278
	jmp	.LBB110_95
.LBB110_86:                             # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB110_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB110_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB110_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB110_89:                             # %for.cond284
                                        #   Parent Loop BB110_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB110_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB110_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB110_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_89
.LBB110_92:                             # %for.end310
                                        #   in Loop: Header=BB110_87 Depth=1
	jmp	.LBB110_93
.LBB110_93:                             # %for.inc311
                                        #   in Loop: Header=BB110_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_87
.LBB110_94:                             # %for.end313
	jmp	.LBB110_95
.LBB110_95:                             # %if.end314
	jmp	.LBB110_96
.LBB110_96:                             # %if.end315
	cmpl	$768597879, -84(%rbp)   # imm = 0x2DCFDF77
	jne	.LBB110_98
.LBB110_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_97
.Lfunc_end110:
	.size	decode_one_b8block.100, .Lfunc_end110-decode_one_b8block.100
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.101
.LCPI111_0:
	.quad	4636737291354636288     # double 100
.LCPI111_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.101
	.p2align	4, 0x90
	.type	Build_Status_Map.101,@function
Build_Status_Map.101:                   # @Build_Status_Map.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$660106364, -40(%rbp)   # imm = 0x27586C7C
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB111_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB111_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	$0, -8(%rbp)
.LBB111_3:                              # %for.cond2
                                        #   Parent Loop BB111_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB111_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB111_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB111_13
.LBB111_6:                              # %if.then
                                        #   in Loop: Header=BB111_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI111_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI111_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB111_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB111_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB111_8:                              # %if.end
                                        #   in Loop: Header=BB111_3 Depth=2
	callq	rand
	vmovsd	.LCPI111_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI111_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB111_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB111_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB111_10:                             # %if.end20
                                        #   in Loop: Header=BB111_3 Depth=2
	callq	rand
	vmovsd	.LCPI111_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI111_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB111_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB111_3 Depth=2
	movl	$1, -4(%rbp)
.LBB111_12:                             # %if.end29
                                        #   in Loop: Header=BB111_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB111_13:                             # %if.end30
                                        #   in Loop: Header=BB111_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB111_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB111_18
.LBB111_15:                             # %if.else
                                        #   in Loop: Header=BB111_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB111_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB111_17:                             # %if.end49
                                        #   in Loop: Header=BB111_3 Depth=2
	jmp	.LBB111_18
.LBB111_18:                             # %if.end50
                                        #   in Loop: Header=BB111_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB111_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_3
.LBB111_20:                             # %for.end
                                        #   in Loop: Header=BB111_1 Depth=1
	jmp	.LBB111_21
.LBB111_21:                             # %for.inc53
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_1
.LBB111_22:                             # %for.end55
	cmpl	$660106364, -40(%rbp)   # imm = 0x27586C7C
	jne	.LBB111_24
.LBB111_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_23
.Lfunc_end111:
	.size	Build_Status_Map.101, .Lfunc_end111-Build_Status_Map.101
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.102 # -- Begin function Get_Reference_Block.102
	.p2align	4, 0x90
	.type	Get_Reference_Block.102,@function
Get_Reference_Block.102:                # @Get_Reference_Block.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$927057029, -20(%rbp)   # imm = 0x3741C485
	movq	%rdi, -56(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -48(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB112_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB112_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB112_1 Depth=1
	movl	$0, -4(%rbp)
.LBB112_3:                              # %for.cond5
                                        #   Parent Loop BB112_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB112_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB112_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB112_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_3
.LBB112_6:                              # %for.end
                                        #   in Loop: Header=BB112_1 Depth=1
	jmp	.LBB112_7
.LBB112_7:                              # %for.inc14
                                        #   in Loop: Header=BB112_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_1
.LBB112_8:                              # %for.end16
	cmpl	$927057029, -20(%rbp)   # imm = 0x3741C485
	jne	.LBB112_10
.LBB112_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_9
.Lfunc_end112:
	.size	Get_Reference_Block.102, .Lfunc_end112-Get_Reference_Block.102
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.103 # -- Begin function Get_Reference_Pixel.103
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.103,@function
Get_Reference_Pixel.103:                # @Get_Reference_Pixel.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$668491205, -100(%rbp)  # imm = 0x27D85DC5
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB113_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB113_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB113_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB113_5
.LBB113_4:                              # %cond.false
	movl	-24(%rbp), %ecx
.LBB113_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB113_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB113_11
.LBB113_7:                              # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB113_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB113_10
.LBB113_9:                              # %cond.false13
	movl	-24(%rbp), %ecx
.LBB113_10:                             # %cond.end14
.LBB113_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB113_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB113_14
.LBB113_13:                             # %cond.false20
	movl	-28(%rbp), %ecx
.LBB113_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB113_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB113_20
.LBB113_16:                             # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB113_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB113_19
.LBB113_18:                             # %cond.false28
	movl	-28(%rbp), %ecx
.LBB113_19:                             # %cond.end29
.LBB113_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_332
.LBB113_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB113_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB113_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB113_25
.LBB113_24:                             # %cond.false41
	movl	-24(%rbp), %eax
.LBB113_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB113_31
.LBB113_27:                             # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB113_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB113_30
.LBB113_29:                             # %cond.false51
	movl	-24(%rbp), %eax
.LBB113_30:                             # %cond.end52
.LBB113_31:                             # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB113_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB113_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB113_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB113_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB113_36
.LBB113_35:                             # %cond.false61
                                        #   in Loop: Header=BB113_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB113_36:                             # %cond.end63
                                        #   in Loop: Header=BB113_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB113_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB113_42
.LBB113_38:                             # %cond.false68
                                        #   in Loop: Header=BB113_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB113_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB113_41
.LBB113_40:                             # %cond.false73
                                        #   in Loop: Header=BB113_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB113_41:                             # %cond.end75
                                        #   in Loop: Header=BB113_32 Depth=1
.LBB113_42:                             # %cond.end77
                                        #   in Loop: Header=BB113_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB113_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_32
.LBB113_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB113_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_47
.LBB113_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB113_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB113_53
.LBB113_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB113_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_52
.LBB113_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB113_52:                             # %cond.end113
.LBB113_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB113_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB113_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB113_57
.LBB113_56:                             # %cond.false125
	movl	-28(%rbp), %edx
.LBB113_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB113_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB113_63
.LBB113_59:                             # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB113_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB113_62
.LBB113_61:                             # %cond.false135
	movl	-28(%rbp), %edx
.LBB113_62:                             # %cond.end136
.LBB113_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB113_76
.LBB113_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB113_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB113_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB113_68
.LBB113_67:                             # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB113_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB113_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB113_74
.LBB113_70:                             # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB113_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB113_73
.LBB113_72:                             # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB113_73:                             # %cond.end169
.LBB113_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB113_75:                             # %if.end
	jmp	.LBB113_76
.LBB113_76:                             # %if.end178
	jmp	.LBB113_331
.LBB113_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB113_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB113_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB113_81
.LBB113_80:                             # %cond.false186
	movl	-28(%rbp), %eax
.LBB113_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB113_87
.LBB113_83:                             # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB113_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB113_86
.LBB113_85:                             # %cond.false196
	movl	-28(%rbp), %eax
.LBB113_86:                             # %cond.end197
.LBB113_87:                             # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB113_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB113_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB113_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB113_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB113_92
.LBB113_91:                             # %cond.false209
                                        #   in Loop: Header=BB113_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB113_92:                             # %cond.end211
                                        #   in Loop: Header=BB113_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB113_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB113_98
.LBB113_94:                             # %cond.false216
                                        #   in Loop: Header=BB113_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB113_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB113_97
.LBB113_96:                             # %cond.false221
                                        #   in Loop: Header=BB113_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB113_97:                             # %cond.end223
                                        #   in Loop: Header=BB113_88 Depth=1
.LBB113_98:                             # %cond.end225
                                        #   in Loop: Header=BB113_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB113_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB113_88
.LBB113_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB113_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_103
.LBB113_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB113_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB113_109
.LBB113_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB113_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_108
.LBB113_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB113_108:                            # %cond.end266
.LBB113_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB113_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB113_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB113_113
.LBB113_112:                            # %cond.false276
	movl	-24(%rbp), %edx
.LBB113_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB113_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB113_119
.LBB113_115:                            # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB113_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB113_118
.LBB113_117:                            # %cond.false286
	movl	-24(%rbp), %edx
.LBB113_118:                            # %cond.end287
.LBB113_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB113_132
.LBB113_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB113_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB113_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB113_124
.LBB113_123:                            # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB113_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB113_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB113_130
.LBB113_126:                            # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB113_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB113_129
.LBB113_128:                            # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB113_129:                            # %cond.end320
.LBB113_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB113_131:                            # %if.end331
	jmp	.LBB113_132
.LBB113_132:                            # %if.end332
	jmp	.LBB113_330
.LBB113_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB113_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB113_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB113_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB113_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB113_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB113_139
.LBB113_138:                            # %cond.false345
                                        #   in Loop: Header=BB113_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB113_139:                            # %cond.end347
                                        #   in Loop: Header=BB113_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB113_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB113_145
.LBB113_141:                            # %cond.false352
                                        #   in Loop: Header=BB113_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB113_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB113_144
.LBB113_143:                            # %cond.false357
                                        #   in Loop: Header=BB113_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB113_144:                            # %cond.end359
                                        #   in Loop: Header=BB113_135 Depth=1
.LBB113_145:                            # %cond.end361
                                        #   in Loop: Header=BB113_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB113_146:                            # %for.cond363
                                        #   Parent Loop BB113_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB113_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB113_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB113_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB113_150
.LBB113_149:                            # %cond.false371
                                        #   in Loop: Header=BB113_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB113_150:                            # %cond.end373
                                        #   in Loop: Header=BB113_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB113_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_156
.LBB113_152:                            # %cond.false378
                                        #   in Loop: Header=BB113_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB113_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB113_155
.LBB113_154:                            # %cond.false383
                                        #   in Loop: Header=BB113_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB113_155:                            # %cond.end385
                                        #   in Loop: Header=BB113_146 Depth=2
.LBB113_156:                            # %cond.end387
                                        #   in Loop: Header=BB113_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB113_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_146
.LBB113_158:                            # %for.end401
                                        #   in Loop: Header=BB113_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB113_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB113_135
.LBB113_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB113_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB113_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB113_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB113_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB113_161
.LBB113_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB113_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_167
.LBB113_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB113_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB113_173
.LBB113_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB113_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_172
.LBB113_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB113_172:                            # %cond.end449
.LBB113_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB113_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB113_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_177
.LBB113_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB113_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB113_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB113_183
.LBB113_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB113_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_182
.LBB113_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB113_182:                            # %cond.end486
.LBB113_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB113_196
.LBB113_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB113_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB113_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_188
.LBB113_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB113_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB113_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB113_194
.LBB113_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB113_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_193
.LBB113_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB113_193:                            # %cond.end526
.LBB113_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB113_195:                            # %if.end532
	jmp	.LBB113_196
.LBB113_196:                            # %if.end533
	jmp	.LBB113_329
.LBB113_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB113_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB113_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB113_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB113_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB113_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB113_203
.LBB113_202:                            # %cond.false546
                                        #   in Loop: Header=BB113_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB113_203:                            # %cond.end548
                                        #   in Loop: Header=BB113_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB113_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB113_209
.LBB113_205:                            # %cond.false553
                                        #   in Loop: Header=BB113_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB113_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB113_208
.LBB113_207:                            # %cond.false558
                                        #   in Loop: Header=BB113_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB113_208:                            # %cond.end560
                                        #   in Loop: Header=BB113_199 Depth=1
.LBB113_209:                            # %cond.end562
                                        #   in Loop: Header=BB113_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB113_210:                            # %for.cond564
                                        #   Parent Loop BB113_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB113_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB113_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB113_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB113_214
.LBB113_213:                            # %cond.false572
                                        #   in Loop: Header=BB113_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB113_214:                            # %cond.end574
                                        #   in Loop: Header=BB113_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB113_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_220
.LBB113_216:                            # %cond.false579
                                        #   in Loop: Header=BB113_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB113_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB113_219
.LBB113_218:                            # %cond.false584
                                        #   in Loop: Header=BB113_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB113_219:                            # %cond.end586
                                        #   in Loop: Header=BB113_210 Depth=2
.LBB113_220:                            # %cond.end588
                                        #   in Loop: Header=BB113_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB113_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB113_210
.LBB113_222:                            # %for.end602
                                        #   in Loop: Header=BB113_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB113_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_199
.LBB113_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB113_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB113_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB113_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB113_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_225
.LBB113_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB113_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_231
.LBB113_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB113_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB113_237
.LBB113_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB113_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_236
.LBB113_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB113_236:                            # %cond.end650
.LBB113_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB113_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB113_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_241
.LBB113_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB113_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB113_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB113_247
.LBB113_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB113_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_246
.LBB113_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB113_246:                            # %cond.end687
.LBB113_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB113_258
.LBB113_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB113_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_251
.LBB113_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB113_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB113_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB113_257
.LBB113_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB113_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_256
.LBB113_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB113_256:                            # %cond.end724
.LBB113_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB113_258:                            # %if.end730
	jmp	.LBB113_328
.LBB113_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB113_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB113_262
.LBB113_261:                            # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB113_262:                            # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB113_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB113_265
.LBB113_264:                            # %cond.false742
	movl	-40(%rbp), %eax
.LBB113_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB113_271
.LBB113_267:                            # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB113_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB113_270
.LBB113_269:                            # %cond.false752
	movl	-40(%rbp), %eax
.LBB113_270:                            # %cond.end753
.LBB113_271:                            # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB113_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB113_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB113_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB113_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB113_276
.LBB113_275:                            # %cond.false765
                                        #   in Loop: Header=BB113_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB113_276:                            # %cond.end767
                                        #   in Loop: Header=BB113_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB113_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB113_282
.LBB113_278:                            # %cond.false772
                                        #   in Loop: Header=BB113_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB113_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB113_281
.LBB113_280:                            # %cond.false777
                                        #   in Loop: Header=BB113_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB113_281:                            # %cond.end779
                                        #   in Loop: Header=BB113_272 Depth=1
.LBB113_282:                            # %cond.end781
                                        #   in Loop: Header=BB113_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB113_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_272
.LBB113_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB113_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_287
.LBB113_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB113_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB113_293
.LBB113_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB113_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_292
.LBB113_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB113_292:                            # %cond.end822
.LBB113_293:                            # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB113_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB113_296
.LBB113_295:                            # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB113_296:                            # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB113_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB113_299
.LBB113_298:                            # %cond.false836
	movl	-44(%rbp), %eax
.LBB113_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB113_305
.LBB113_301:                            # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB113_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB113_304
.LBB113_303:                            # %cond.false846
	movl	-44(%rbp), %eax
.LBB113_304:                            # %cond.end847
.LBB113_305:                            # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB113_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB113_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB113_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB113_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB113_310
.LBB113_309:                            # %cond.false859
                                        #   in Loop: Header=BB113_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB113_310:                            # %cond.end861
                                        #   in Loop: Header=BB113_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB113_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB113_316
.LBB113_312:                            # %cond.false866
                                        #   in Loop: Header=BB113_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB113_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB113_315
.LBB113_314:                            # %cond.false871
                                        #   in Loop: Header=BB113_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB113_315:                            # %cond.end873
                                        #   in Loop: Header=BB113_306 Depth=1
.LBB113_316:                            # %cond.end875
                                        #   in Loop: Header=BB113_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB113_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB113_306
.LBB113_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB113_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_321
.LBB113_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB113_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB113_327
.LBB113_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB113_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_326
.LBB113_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB113_326:                            # %cond.end916
.LBB113_327:                            # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB113_328:                            # %if.end922
	jmp	.LBB113_329
.LBB113_329:                            # %if.end923
	jmp	.LBB113_330
.LBB113_330:                            # %if.end924
	jmp	.LBB113_331
.LBB113_331:                            # %if.end925
	jmp	.LBB113_332
.LBB113_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$668491205, -100(%rbp)  # imm = 0x27D85DC5
	jne	.LBB113_334
.LBB113_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_333
.Lfunc_end113:
	.size	Get_Reference_Pixel.103, .Lfunc_end113-Get_Reference_Pixel.103
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.104 # -- Begin function compute_residue_b8block.104
	.p2align	4, 0x90
	.type	compute_residue_b8block.104,@function
compute_residue_b8block.104:            # @compute_residue_b8block.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1361962106, -36(%rbp)  # imm = 0x512DE47A
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB114_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB114_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_4:                              # %for.cond4
                                        #   Parent Loop BB114_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB114_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB114_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB114_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_4
.LBB114_7:                              # %for.end
                                        #   in Loop: Header=BB114_2 Depth=1
	jmp	.LBB114_8
.LBB114_8:                              # %for.inc22
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_2
.LBB114_9:                              # %for.end24
	jmp	.LBB114_19
.LBB114_10:                             # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB114_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB114_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_13:                             # %for.cond29
                                        #   Parent Loop BB114_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB114_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB114_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB114_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_13
.LBB114_16:                             # %for.end56
                                        #   in Loop: Header=BB114_11 Depth=1
	jmp	.LBB114_17
.LBB114_17:                             # %for.inc57
                                        #   in Loop: Header=BB114_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_11
.LBB114_18:                             # %for.end59
	jmp	.LBB114_19
.LBB114_19:                             # %if.end
	cmpl	$1361962106, -36(%rbp)  # imm = 0x512DE47A
	jne	.LBB114_21
.LBB114_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_20
.Lfunc_end114:
	.size	compute_residue_b8block.104, .Lfunc_end114-compute_residue_b8block.104
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.105  # -- Begin function decode_one_b8block.105
	.p2align	4, 0x90
	.type	decode_one_b8block.105,@function
decode_one_b8block.105:                 # @decode_one_b8block.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$948765312, -84(%rbp)   # imm = 0x388D0280
	movl	%edi, -56(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB115_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB115_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB115_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB115_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB115_4:                              # %for.cond9
                                        #   Parent Loop BB115_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB115_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB115_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB115_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_4
.LBB115_7:                              # %for.end
                                        #   in Loop: Header=BB115_2 Depth=1
	jmp	.LBB115_8
.LBB115_8:                              # %for.inc26
                                        #   in Loop: Header=BB115_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_2
.LBB115_9:                              # %for.end28
	jmp	.LBB115_96
.LBB115_10:                             # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB115_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB115_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB115_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB115_31
.LBB115_14:                             # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB115_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB115_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB115_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB115_17:                             # %for.cond40
                                        #   Parent Loop BB115_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB115_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB115_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB115_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_17
.LBB115_20:                             # %for.end49
                                        #   in Loop: Header=BB115_15 Depth=1
	jmp	.LBB115_21
.LBB115_21:                             # %for.inc50
                                        #   in Loop: Header=BB115_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_15
.LBB115_22:                             # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB115_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB115_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB115_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB115_25:                             # %for.cond56
                                        #   Parent Loop BB115_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB115_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB115_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB115_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_25
.LBB115_28:                             # %for.end71
                                        #   in Loop: Header=BB115_23 Depth=1
	jmp	.LBB115_29
.LBB115_29:                             # %for.inc72
                                        #   in Loop: Header=BB115_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_23
.LBB115_30:                             # %for.end74
	jmp	.LBB115_60
.LBB115_31:                             # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB115_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB115_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB115_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB115_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB115_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB115_36:                             # %for.cond83
                                        #   Parent Loop BB115_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB115_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB115_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB115_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_36
.LBB115_39:                             # %for.end120
                                        #   in Loop: Header=BB115_34 Depth=1
	jmp	.LBB115_40
.LBB115_40:                             # %for.inc121
                                        #   in Loop: Header=BB115_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_34
.LBB115_41:                             # %for.end123
	jmp	.LBB115_51
.LBB115_42:                             # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB115_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB115_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB115_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB115_45:                             # %for.cond129
                                        #   Parent Loop BB115_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB115_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB115_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB115_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_45
.LBB115_48:                             # %for.end145
                                        #   in Loop: Header=BB115_43 Depth=1
	jmp	.LBB115_49
.LBB115_49:                             # %for.inc146
                                        #   in Loop: Header=BB115_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_43
.LBB115_50:                             # %for.end148
	jmp	.LBB115_51
.LBB115_51:                             # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB115_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB115_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB115_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB115_54:                             # %for.cond153
                                        #   Parent Loop BB115_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB115_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB115_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB115_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_54
.LBB115_57:                             # %for.end167
                                        #   in Loop: Header=BB115_52 Depth=1
	jmp	.LBB115_58
.LBB115_58:                             # %for.inc168
                                        #   in Loop: Header=BB115_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_52
.LBB115_59:                             # %for.end170
	jmp	.LBB115_60
.LBB115_60:                             # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB115_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB115_66
.LBB115_62:                             # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB115_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB115_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB115_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB115_86
.LBB115_66:                             # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB115_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_69 Depth 2
                                        #       Child Loop BB115_74 Depth 3
                                        #         Child Loop BB115_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB115_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB115_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB115_69:                             # %for.cond197
                                        #   Parent Loop BB115_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_74 Depth 3
                                        #         Child Loop BB115_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB115_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB115_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB115_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB115_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB115_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB115_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB115_73:                             # %if.end218
                                        #   in Loop: Header=BB115_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB115_74:                             # %for.cond233
                                        #   Parent Loop BB115_67 Depth=1
                                        #     Parent Loop BB115_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB115_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB115_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB115_74 Depth=3
	movl	$0, -8(%rbp)
.LBB115_76:                             # %for.cond237
                                        #   Parent Loop BB115_67 Depth=1
                                        #     Parent Loop BB115_69 Depth=2
                                        #       Parent Loop BB115_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB115_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB115_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB115_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_76
.LBB115_79:                             # %for.end269
                                        #   in Loop: Header=BB115_74 Depth=3
	jmp	.LBB115_80
.LBB115_80:                             # %for.inc270
                                        #   in Loop: Header=BB115_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_74
.LBB115_81:                             # %for.end272
                                        #   in Loop: Header=BB115_69 Depth=2
	jmp	.LBB115_82
.LBB115_82:                             # %for.inc273
                                        #   in Loop: Header=BB115_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_69
.LBB115_83:                             # %for.end275
                                        #   in Loop: Header=BB115_67 Depth=1
	jmp	.LBB115_84
.LBB115_84:                             # %for.inc276
                                        #   in Loop: Header=BB115_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_67
.LBB115_85:                             # %for.end278
	jmp	.LBB115_95
.LBB115_86:                             # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB115_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB115_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB115_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB115_89:                             # %for.cond284
                                        #   Parent Loop BB115_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB115_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB115_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB115_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_89
.LBB115_92:                             # %for.end310
                                        #   in Loop: Header=BB115_87 Depth=1
	jmp	.LBB115_93
.LBB115_93:                             # %for.inc311
                                        #   in Loop: Header=BB115_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_87
.LBB115_94:                             # %for.end313
	jmp	.LBB115_95
.LBB115_95:                             # %if.end314
	jmp	.LBB115_96
.LBB115_96:                             # %if.end315
	cmpl	$948765312, -84(%rbp)   # imm = 0x388D0280
	jne	.LBB115_98
.LBB115_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_97
.Lfunc_end115:
	.size	decode_one_b8block.105, .Lfunc_end115-decode_one_b8block.105
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.106 # -- Begin function compute_residue_b8block.106
	.p2align	4, 0x90
	.type	compute_residue_b8block.106,@function
compute_residue_b8block.106:            # @compute_residue_b8block.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1877131968, -36(%rbp)  # imm = 0x6FE2C2C0
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB116_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB116_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB116_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB116_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB116_4:                              # %for.cond4
                                        #   Parent Loop BB116_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB116_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB116_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB116_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_4
.LBB116_7:                              # %for.end
                                        #   in Loop: Header=BB116_2 Depth=1
	jmp	.LBB116_8
.LBB116_8:                              # %for.inc22
                                        #   in Loop: Header=BB116_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_2
.LBB116_9:                              # %for.end24
	jmp	.LBB116_19
.LBB116_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB116_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB116_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB116_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB116_13:                             # %for.cond29
                                        #   Parent Loop BB116_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB116_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB116_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB116_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_13
.LBB116_16:                             # %for.end56
                                        #   in Loop: Header=BB116_11 Depth=1
	jmp	.LBB116_17
.LBB116_17:                             # %for.inc57
                                        #   in Loop: Header=BB116_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_11
.LBB116_18:                             # %for.end59
	jmp	.LBB116_19
.LBB116_19:                             # %if.end
	cmpl	$1877131968, -36(%rbp)  # imm = 0x6FE2C2C0
	jne	.LBB116_21
.LBB116_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_20
.Lfunc_end116:
	.size	compute_residue_b8block.106, .Lfunc_end116-compute_residue_b8block.106
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.107 # -- Begin function Get_Reference_Block.107
	.p2align	4, 0x90
	.type	Get_Reference_Block.107,@function
Get_Reference_Block.107:                # @Get_Reference_Block.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$805245614, -36(%rbp)   # imm = 0x2FFF12AE
	movq	%rdi, -56(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB117_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB117_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB117_1 Depth=1
	movl	$0, -4(%rbp)
.LBB117_3:                              # %for.cond5
                                        #   Parent Loop BB117_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB117_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB117_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB117_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_3
.LBB117_6:                              # %for.end
                                        #   in Loop: Header=BB117_1 Depth=1
	jmp	.LBB117_7
.LBB117_7:                              # %for.inc14
                                        #   in Loop: Header=BB117_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_1
.LBB117_8:                              # %for.end16
	cmpl	$805245614, -36(%rbp)   # imm = 0x2FFF12AE
	jne	.LBB117_10
.LBB117_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_9
.Lfunc_end117:
	.size	Get_Reference_Block.107, .Lfunc_end117-Get_Reference_Block.107
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.108 # -- Begin function Get_Reference_Block.108
	.p2align	4, 0x90
	.type	Get_Reference_Block.108,@function
Get_Reference_Block.108:                # @Get_Reference_Block.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1772428819, -20(%rbp)  # imm = 0x69A51E13
	movq	%rdi, -56(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -48(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB118_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB118_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	$0, -8(%rbp)
.LBB118_3:                              # %for.cond5
                                        #   Parent Loop BB118_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB118_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB118_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB118_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_3
.LBB118_6:                              # %for.end
                                        #   in Loop: Header=BB118_1 Depth=1
	jmp	.LBB118_7
.LBB118_7:                              # %for.inc14
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_1
.LBB118_8:                              # %for.end16
	cmpl	$1772428819, -20(%rbp)  # imm = 0x69A51E13
	jne	.LBB118_10
.LBB118_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_9
.Lfunc_end118:
	.size	Get_Reference_Block.108, .Lfunc_end118-Get_Reference_Block.108
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.109  # -- Begin function decode_one_b8block.109
	.p2align	4, 0x90
	.type	decode_one_b8block.109,@function
decode_one_b8block.109:                 # @decode_one_b8block.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1666516595, -84(%rbp)  # imm = 0x63550673
	movl	%edi, -52(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB119_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB119_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB119_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB119_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_4:                              # %for.cond9
                                        #   Parent Loop BB119_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB119_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB119_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB119_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_4
.LBB119_7:                              # %for.end
                                        #   in Loop: Header=BB119_2 Depth=1
	jmp	.LBB119_8
.LBB119_8:                              # %for.inc26
                                        #   in Loop: Header=BB119_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_2
.LBB119_9:                              # %for.end28
	jmp	.LBB119_96
.LBB119_10:                             # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB119_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB119_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB119_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB119_31
.LBB119_14:                             # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB119_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB119_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB119_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_17:                             # %for.cond40
                                        #   Parent Loop BB119_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB119_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB119_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB119_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_17
.LBB119_20:                             # %for.end49
                                        #   in Loop: Header=BB119_15 Depth=1
	jmp	.LBB119_21
.LBB119_21:                             # %for.inc50
                                        #   in Loop: Header=BB119_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_15
.LBB119_22:                             # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB119_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB119_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB119_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB119_25:                             # %for.cond56
                                        #   Parent Loop BB119_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB119_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB119_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB119_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB119_25
.LBB119_28:                             # %for.end71
                                        #   in Loop: Header=BB119_23 Depth=1
	jmp	.LBB119_29
.LBB119_29:                             # %for.inc72
                                        #   in Loop: Header=BB119_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB119_23
.LBB119_30:                             # %for.end74
	jmp	.LBB119_60
.LBB119_31:                             # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB119_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB119_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB119_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB119_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB119_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB119_36:                             # %for.cond83
                                        #   Parent Loop BB119_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB119_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB119_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB119_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB119_36
.LBB119_39:                             # %for.end120
                                        #   in Loop: Header=BB119_34 Depth=1
	jmp	.LBB119_40
.LBB119_40:                             # %for.inc121
                                        #   in Loop: Header=BB119_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB119_34
.LBB119_41:                             # %for.end123
	jmp	.LBB119_51
.LBB119_42:                             # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB119_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB119_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB119_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB119_45:                             # %for.cond129
                                        #   Parent Loop BB119_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB119_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB119_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB119_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB119_45
.LBB119_48:                             # %for.end145
                                        #   in Loop: Header=BB119_43 Depth=1
	jmp	.LBB119_49
.LBB119_49:                             # %for.inc146
                                        #   in Loop: Header=BB119_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB119_43
.LBB119_50:                             # %for.end148
	jmp	.LBB119_51
.LBB119_51:                             # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB119_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB119_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB119_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_54:                             # %for.cond153
                                        #   Parent Loop BB119_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB119_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB119_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB119_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_54
.LBB119_57:                             # %for.end167
                                        #   in Loop: Header=BB119_52 Depth=1
	jmp	.LBB119_58
.LBB119_58:                             # %for.inc168
                                        #   in Loop: Header=BB119_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_52
.LBB119_59:                             # %for.end170
	jmp	.LBB119_60
.LBB119_60:                             # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB119_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB119_66
.LBB119_62:                             # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB119_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB119_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB119_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB119_86
.LBB119_66:                             # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB119_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_69 Depth 2
                                        #       Child Loop BB119_74 Depth 3
                                        #         Child Loop BB119_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB119_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB119_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB119_69:                             # %for.cond197
                                        #   Parent Loop BB119_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_74 Depth 3
                                        #         Child Loop BB119_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB119_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB119_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB119_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB119_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB119_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB119_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB119_73:                             # %if.end218
                                        #   in Loop: Header=BB119_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB119_74:                             # %for.cond233
                                        #   Parent Loop BB119_67 Depth=1
                                        #     Parent Loop BB119_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB119_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB119_74 Depth=3
	movl	$0, -8(%rbp)
.LBB119_76:                             # %for.cond237
                                        #   Parent Loop BB119_67 Depth=1
                                        #     Parent Loop BB119_69 Depth=2
                                        #       Parent Loop BB119_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB119_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB119_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB119_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_76
.LBB119_79:                             # %for.end269
                                        #   in Loop: Header=BB119_74 Depth=3
	jmp	.LBB119_80
.LBB119_80:                             # %for.inc270
                                        #   in Loop: Header=BB119_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_74
.LBB119_81:                             # %for.end272
                                        #   in Loop: Header=BB119_69 Depth=2
	jmp	.LBB119_82
.LBB119_82:                             # %for.inc273
                                        #   in Loop: Header=BB119_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB119_69
.LBB119_83:                             # %for.end275
                                        #   in Loop: Header=BB119_67 Depth=1
	jmp	.LBB119_84
.LBB119_84:                             # %for.inc276
                                        #   in Loop: Header=BB119_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB119_67
.LBB119_85:                             # %for.end278
	jmp	.LBB119_95
.LBB119_86:                             # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB119_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB119_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB119_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_89:                             # %for.cond284
                                        #   Parent Loop BB119_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB119_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB119_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB119_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_89
.LBB119_92:                             # %for.end310
                                        #   in Loop: Header=BB119_87 Depth=1
	jmp	.LBB119_93
.LBB119_93:                             # %for.inc311
                                        #   in Loop: Header=BB119_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_87
.LBB119_94:                             # %for.end313
	jmp	.LBB119_95
.LBB119_95:                             # %if.end314
	jmp	.LBB119_96
.LBB119_96:                             # %if.end315
	cmpl	$1666516595, -84(%rbp)  # imm = 0x63550673
	jne	.LBB119_98
.LBB119_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_97
.Lfunc_end119:
	.size	decode_one_b8block.109, .Lfunc_end119-decode_one_b8block.109
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.110 # -- Begin function Get_Reference_Pixel.110
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.110,@function
Get_Reference_Pixel.110:                # @Get_Reference_Pixel.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1774808716, -104(%rbp) # imm = 0x69C96E8C
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB120_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB120_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB120_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB120_5
.LBB120_4:                              # %cond.false
	movl	-28(%rbp), %ecx
.LBB120_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB120_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB120_11
.LBB120_7:                              # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB120_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB120_10
.LBB120_9:                              # %cond.false13
	movl	-28(%rbp), %ecx
.LBB120_10:                             # %cond.end14
.LBB120_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB120_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB120_14
.LBB120_13:                             # %cond.false20
	movl	-24(%rbp), %ecx
.LBB120_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB120_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB120_20
.LBB120_16:                             # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB120_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB120_19
.LBB120_18:                             # %cond.false28
	movl	-24(%rbp), %ecx
.LBB120_19:                             # %cond.end29
.LBB120_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_332
.LBB120_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB120_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB120_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB120_25
.LBB120_24:                             # %cond.false41
	movl	-28(%rbp), %eax
.LBB120_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB120_31
.LBB120_27:                             # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB120_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB120_30
.LBB120_29:                             # %cond.false51
	movl	-28(%rbp), %eax
.LBB120_30:                             # %cond.end52
.LBB120_31:                             # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB120_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB120_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB120_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB120_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB120_36
.LBB120_35:                             # %cond.false61
                                        #   in Loop: Header=BB120_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB120_36:                             # %cond.end63
                                        #   in Loop: Header=BB120_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB120_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB120_42
.LBB120_38:                             # %cond.false68
                                        #   in Loop: Header=BB120_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB120_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB120_41
.LBB120_40:                             # %cond.false73
                                        #   in Loop: Header=BB120_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB120_41:                             # %cond.end75
                                        #   in Loop: Header=BB120_32 Depth=1
.LBB120_42:                             # %cond.end77
                                        #   in Loop: Header=BB120_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB120_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_32
.LBB120_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_47
.LBB120_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB120_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB120_53
.LBB120_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_52
.LBB120_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB120_52:                             # %cond.end113
.LBB120_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB120_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB120_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB120_57
.LBB120_56:                             # %cond.false125
	movl	-24(%rbp), %edx
.LBB120_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB120_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB120_63
.LBB120_59:                             # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB120_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB120_62
.LBB120_61:                             # %cond.false135
	movl	-24(%rbp), %edx
.LBB120_62:                             # %cond.end136
.LBB120_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB120_76
.LBB120_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB120_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB120_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB120_68
.LBB120_67:                             # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB120_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB120_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB120_74
.LBB120_70:                             # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB120_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB120_73
.LBB120_72:                             # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB120_73:                             # %cond.end169
.LBB120_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB120_75:                             # %if.end
	jmp	.LBB120_76
.LBB120_76:                             # %if.end178
	jmp	.LBB120_331
.LBB120_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB120_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB120_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB120_81
.LBB120_80:                             # %cond.false186
	movl	-24(%rbp), %eax
.LBB120_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB120_87
.LBB120_83:                             # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB120_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB120_86
.LBB120_85:                             # %cond.false196
	movl	-24(%rbp), %eax
.LBB120_86:                             # %cond.end197
.LBB120_87:                             # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB120_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB120_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB120_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB120_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB120_92
.LBB120_91:                             # %cond.false209
                                        #   in Loop: Header=BB120_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB120_92:                             # %cond.end211
                                        #   in Loop: Header=BB120_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB120_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB120_98
.LBB120_94:                             # %cond.false216
                                        #   in Loop: Header=BB120_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB120_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB120_97
.LBB120_96:                             # %cond.false221
                                        #   in Loop: Header=BB120_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB120_97:                             # %cond.end223
                                        #   in Loop: Header=BB120_88 Depth=1
.LBB120_98:                             # %cond.end225
                                        #   in Loop: Header=BB120_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB120_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_88
.LBB120_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_103
.LBB120_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB120_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB120_109
.LBB120_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_108
.LBB120_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB120_108:                            # %cond.end266
.LBB120_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB120_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB120_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB120_113
.LBB120_112:                            # %cond.false276
	movl	-28(%rbp), %edx
.LBB120_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB120_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB120_119
.LBB120_115:                            # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB120_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB120_118
.LBB120_117:                            # %cond.false286
	movl	-28(%rbp), %edx
.LBB120_118:                            # %cond.end287
.LBB120_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB120_132
.LBB120_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB120_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB120_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB120_124
.LBB120_123:                            # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB120_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB120_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB120_130
.LBB120_126:                            # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB120_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB120_129
.LBB120_128:                            # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB120_129:                            # %cond.end320
.LBB120_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB120_131:                            # %if.end331
	jmp	.LBB120_132
.LBB120_132:                            # %if.end332
	jmp	.LBB120_330
.LBB120_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB120_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB120_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB120_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB120_139
.LBB120_138:                            # %cond.false345
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB120_139:                            # %cond.end347
                                        #   in Loop: Header=BB120_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB120_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB120_145
.LBB120_141:                            # %cond.false352
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB120_144
.LBB120_143:                            # %cond.false357
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB120_144:                            # %cond.end359
                                        #   in Loop: Header=BB120_135 Depth=1
.LBB120_145:                            # %cond.end361
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB120_146:                            # %for.cond363
                                        #   Parent Loop BB120_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB120_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB120_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB120_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB120_150
.LBB120_149:                            # %cond.false371
                                        #   in Loop: Header=BB120_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB120_150:                            # %cond.end373
                                        #   in Loop: Header=BB120_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB120_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB120_156
.LBB120_152:                            # %cond.false378
                                        #   in Loop: Header=BB120_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB120_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB120_155
.LBB120_154:                            # %cond.false383
                                        #   in Loop: Header=BB120_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB120_155:                            # %cond.end385
                                        #   in Loop: Header=BB120_146 Depth=2
.LBB120_156:                            # %cond.end387
                                        #   in Loop: Header=BB120_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB120_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_146
.LBB120_158:                            # %for.end401
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_135
.LBB120_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB120_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB120_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB120_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB120_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_161
.LBB120_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_167
.LBB120_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB120_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB120_173
.LBB120_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_172
.LBB120_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB120_172:                            # %cond.end449
.LBB120_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB120_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB120_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_177
.LBB120_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB120_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB120_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB120_183
.LBB120_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB120_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_182
.LBB120_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB120_182:                            # %cond.end486
.LBB120_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB120_196
.LBB120_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB120_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB120_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_188
.LBB120_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB120_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB120_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB120_194
.LBB120_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB120_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_193
.LBB120_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB120_193:                            # %cond.end526
.LBB120_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB120_195:                            # %if.end532
	jmp	.LBB120_196
.LBB120_196:                            # %if.end533
	jmp	.LBB120_329
.LBB120_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB120_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB120_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB120_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB120_203
.LBB120_202:                            # %cond.false546
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB120_203:                            # %cond.end548
                                        #   in Loop: Header=BB120_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB120_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB120_209
.LBB120_205:                            # %cond.false553
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB120_208
.LBB120_207:                            # %cond.false558
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB120_208:                            # %cond.end560
                                        #   in Loop: Header=BB120_199 Depth=1
.LBB120_209:                            # %cond.end562
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB120_210:                            # %for.cond564
                                        #   Parent Loop BB120_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB120_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB120_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB120_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB120_214
.LBB120_213:                            # %cond.false572
                                        #   in Loop: Header=BB120_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB120_214:                            # %cond.end574
                                        #   in Loop: Header=BB120_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB120_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB120_220
.LBB120_216:                            # %cond.false579
                                        #   in Loop: Header=BB120_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB120_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB120_219
.LBB120_218:                            # %cond.false584
                                        #   in Loop: Header=BB120_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB120_219:                            # %cond.end586
                                        #   in Loop: Header=BB120_210 Depth=2
.LBB120_220:                            # %cond.end588
                                        #   in Loop: Header=BB120_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB120_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_210
.LBB120_222:                            # %for.end602
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_199
.LBB120_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB120_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB120_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB120_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB120_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_225
.LBB120_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_231
.LBB120_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB120_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB120_237
.LBB120_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_236
.LBB120_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB120_236:                            # %cond.end650
.LBB120_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB120_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB120_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_241
.LBB120_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB120_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB120_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB120_247
.LBB120_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB120_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_246
.LBB120_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB120_246:                            # %cond.end687
.LBB120_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB120_258
.LBB120_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB120_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_251
.LBB120_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB120_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB120_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB120_257
.LBB120_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB120_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_256
.LBB120_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB120_256:                            # %cond.end724
.LBB120_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB120_258:                            # %if.end730
	jmp	.LBB120_328
.LBB120_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB120_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB120_262
.LBB120_261:                            # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB120_262:                            # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB120_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB120_265
.LBB120_264:                            # %cond.false742
	movl	-44(%rbp), %eax
.LBB120_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB120_271
.LBB120_267:                            # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB120_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB120_270
.LBB120_269:                            # %cond.false752
	movl	-44(%rbp), %eax
.LBB120_270:                            # %cond.end753
.LBB120_271:                            # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB120_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB120_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB120_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB120_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB120_276
.LBB120_275:                            # %cond.false765
                                        #   in Loop: Header=BB120_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB120_276:                            # %cond.end767
                                        #   in Loop: Header=BB120_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB120_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB120_282
.LBB120_278:                            # %cond.false772
                                        #   in Loop: Header=BB120_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB120_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB120_281
.LBB120_280:                            # %cond.false777
                                        #   in Loop: Header=BB120_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB120_281:                            # %cond.end779
                                        #   in Loop: Header=BB120_272 Depth=1
.LBB120_282:                            # %cond.end781
                                        #   in Loop: Header=BB120_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB120_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_272
.LBB120_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_287
.LBB120_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB120_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB120_293
.LBB120_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_292
.LBB120_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB120_292:                            # %cond.end822
.LBB120_293:                            # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB120_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB120_296
.LBB120_295:                            # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB120_296:                            # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB120_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB120_299
.LBB120_298:                            # %cond.false836
	movl	-40(%rbp), %eax
.LBB120_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB120_305
.LBB120_301:                            # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB120_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB120_304
.LBB120_303:                            # %cond.false846
	movl	-40(%rbp), %eax
.LBB120_304:                            # %cond.end847
.LBB120_305:                            # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB120_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB120_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB120_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB120_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB120_310
.LBB120_309:                            # %cond.false859
                                        #   in Loop: Header=BB120_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB120_310:                            # %cond.end861
                                        #   in Loop: Header=BB120_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB120_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB120_316
.LBB120_312:                            # %cond.false866
                                        #   in Loop: Header=BB120_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB120_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB120_315
.LBB120_314:                            # %cond.false871
                                        #   in Loop: Header=BB120_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB120_315:                            # %cond.end873
                                        #   in Loop: Header=BB120_306 Depth=1
.LBB120_316:                            # %cond.end875
                                        #   in Loop: Header=BB120_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB120_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_306
.LBB120_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_321
.LBB120_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB120_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB120_327
.LBB120_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_326
.LBB120_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB120_326:                            # %cond.end916
.LBB120_327:                            # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB120_328:                            # %if.end922
	jmp	.LBB120_329
.LBB120_329:                            # %if.end923
	jmp	.LBB120_330
.LBB120_330:                            # %if.end924
	jmp	.LBB120_331
.LBB120_331:                            # %if.end925
	jmp	.LBB120_332
.LBB120_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1774808716, -104(%rbp) # imm = 0x69C96E8C
	jne	.LBB120_334
.LBB120_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_333
.Lfunc_end120:
	.size	Get_Reference_Pixel.110, .Lfunc_end120-Get_Reference_Pixel.110
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.111 # -- Begin function compute_residue_b8block.111
	.p2align	4, 0x90
	.type	compute_residue_b8block.111,@function
compute_residue_b8block.111:            # @compute_residue_b8block.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$126916245, -36(%rbp)   # imm = 0x7909695
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB121_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB121_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB121_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB121_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_4:                              # %for.cond4
                                        #   Parent Loop BB121_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB121_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB121_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB121_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_4
.LBB121_7:                              # %for.end
                                        #   in Loop: Header=BB121_2 Depth=1
	jmp	.LBB121_8
.LBB121_8:                              # %for.inc22
                                        #   in Loop: Header=BB121_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_2
.LBB121_9:                              # %for.end24
	jmp	.LBB121_19
.LBB121_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB121_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB121_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB121_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_13:                             # %for.cond29
                                        #   Parent Loop BB121_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB121_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB121_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB121_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_13
.LBB121_16:                             # %for.end56
                                        #   in Loop: Header=BB121_11 Depth=1
	jmp	.LBB121_17
.LBB121_17:                             # %for.inc57
                                        #   in Loop: Header=BB121_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_11
.LBB121_18:                             # %for.end59
	jmp	.LBB121_19
.LBB121_19:                             # %if.end
	cmpl	$126916245, -36(%rbp)   # imm = 0x7909695
	jne	.LBB121_21
.LBB121_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_20
.Lfunc_end121:
	.size	compute_residue_b8block.111, .Lfunc_end121-compute_residue_b8block.111
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.112   # -- Begin function Error_Concealment.112
	.p2align	4, 0x90
	.type	Error_Concealment.112,@function
Error_Concealment.112:                  # @Error_Concealment.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1582892941, -20(%rbp)  # imm = 0x5E59078D
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB122_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB122_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	$0, -8(%rbp)
.LBB122_3:                              # %for.cond2
                                        #   Parent Loop BB122_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB122_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB122_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB122_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB122_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB122_6:                              # %if.end
                                        #   in Loop: Header=BB122_3 Depth=2
	jmp	.LBB122_7
.LBB122_7:                              # %for.inc
                                        #   in Loop: Header=BB122_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_3
.LBB122_8:                              # %for.end
                                        #   in Loop: Header=BB122_1 Depth=1
	jmp	.LBB122_9
.LBB122_9:                              # %for.inc7
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_1
.LBB122_10:                             # %for.end9
	cmpl	$1582892941, -20(%rbp)  # imm = 0x5E59078D
	jne	.LBB122_12
.LBB122_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_11
.Lfunc_end122:
	.size	Error_Concealment.112, .Lfunc_end122-Error_Concealment.112
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.113 # -- Begin function Get_Reference_Pixel.113
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.113,@function
Get_Reference_Pixel.113:                # @Get_Reference_Pixel.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1655596005, -108(%rbp) # imm = 0x62AE63E5
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB123_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB123_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB123_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB123_5
.LBB123_4:                              # %cond.false
	movl	-28(%rbp), %ecx
.LBB123_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB123_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB123_11
.LBB123_7:                              # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB123_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB123_10
.LBB123_9:                              # %cond.false13
	movl	-28(%rbp), %ecx
.LBB123_10:                             # %cond.end14
.LBB123_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB123_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB123_14
.LBB123_13:                             # %cond.false20
	movl	-24(%rbp), %ecx
.LBB123_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB123_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB123_20
.LBB123_16:                             # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB123_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB123_19
.LBB123_18:                             # %cond.false28
	movl	-24(%rbp), %ecx
.LBB123_19:                             # %cond.end29
.LBB123_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_332
.LBB123_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB123_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB123_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB123_25
.LBB123_24:                             # %cond.false41
	movl	-28(%rbp), %eax
.LBB123_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB123_31
.LBB123_27:                             # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB123_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB123_30
.LBB123_29:                             # %cond.false51
	movl	-28(%rbp), %eax
.LBB123_30:                             # %cond.end52
.LBB123_31:                             # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB123_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB123_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB123_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB123_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB123_36
.LBB123_35:                             # %cond.false61
                                        #   in Loop: Header=BB123_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB123_36:                             # %cond.end63
                                        #   in Loop: Header=BB123_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB123_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB123_42
.LBB123_38:                             # %cond.false68
                                        #   in Loop: Header=BB123_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB123_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB123_41
.LBB123_40:                             # %cond.false73
                                        #   in Loop: Header=BB123_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB123_41:                             # %cond.end75
                                        #   in Loop: Header=BB123_32 Depth=1
.LBB123_42:                             # %cond.end77
                                        #   in Loop: Header=BB123_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB123_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_32
.LBB123_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_47
.LBB123_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB123_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB123_53
.LBB123_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_52
.LBB123_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB123_52:                             # %cond.end113
.LBB123_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB123_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB123_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB123_57
.LBB123_56:                             # %cond.false125
	movl	-24(%rbp), %edx
.LBB123_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB123_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB123_63
.LBB123_59:                             # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB123_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB123_62
.LBB123_61:                             # %cond.false135
	movl	-24(%rbp), %edx
.LBB123_62:                             # %cond.end136
.LBB123_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB123_76
.LBB123_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB123_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB123_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB123_68
.LBB123_67:                             # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB123_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB123_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB123_74
.LBB123_70:                             # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB123_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB123_73
.LBB123_72:                             # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB123_73:                             # %cond.end169
.LBB123_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB123_75:                             # %if.end
	jmp	.LBB123_76
.LBB123_76:                             # %if.end178
	jmp	.LBB123_331
.LBB123_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB123_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB123_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB123_81
.LBB123_80:                             # %cond.false186
	movl	-24(%rbp), %eax
.LBB123_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB123_87
.LBB123_83:                             # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB123_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB123_86
.LBB123_85:                             # %cond.false196
	movl	-24(%rbp), %eax
.LBB123_86:                             # %cond.end197
.LBB123_87:                             # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB123_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB123_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB123_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB123_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB123_92
.LBB123_91:                             # %cond.false209
                                        #   in Loop: Header=BB123_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB123_92:                             # %cond.end211
                                        #   in Loop: Header=BB123_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB123_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB123_98
.LBB123_94:                             # %cond.false216
                                        #   in Loop: Header=BB123_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB123_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB123_97
.LBB123_96:                             # %cond.false221
                                        #   in Loop: Header=BB123_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB123_97:                             # %cond.end223
                                        #   in Loop: Header=BB123_88 Depth=1
.LBB123_98:                             # %cond.end225
                                        #   in Loop: Header=BB123_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB123_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB123_88
.LBB123_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_103
.LBB123_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB123_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB123_109
.LBB123_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_108
.LBB123_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB123_108:                            # %cond.end266
.LBB123_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB123_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB123_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB123_113
.LBB123_112:                            # %cond.false276
	movl	-28(%rbp), %edx
.LBB123_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB123_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB123_119
.LBB123_115:                            # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB123_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB123_118
.LBB123_117:                            # %cond.false286
	movl	-28(%rbp), %edx
.LBB123_118:                            # %cond.end287
.LBB123_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB123_132
.LBB123_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB123_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB123_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB123_124
.LBB123_123:                            # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB123_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB123_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB123_130
.LBB123_126:                            # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB123_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB123_129
.LBB123_128:                            # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB123_129:                            # %cond.end320
.LBB123_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB123_131:                            # %if.end331
	jmp	.LBB123_132
.LBB123_132:                            # %if.end332
	jmp	.LBB123_330
.LBB123_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB123_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB123_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB123_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB123_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB123_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB123_139
.LBB123_138:                            # %cond.false345
                                        #   in Loop: Header=BB123_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB123_139:                            # %cond.end347
                                        #   in Loop: Header=BB123_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB123_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB123_145
.LBB123_141:                            # %cond.false352
                                        #   in Loop: Header=BB123_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB123_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB123_144
.LBB123_143:                            # %cond.false357
                                        #   in Loop: Header=BB123_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB123_144:                            # %cond.end359
                                        #   in Loop: Header=BB123_135 Depth=1
.LBB123_145:                            # %cond.end361
                                        #   in Loop: Header=BB123_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB123_146:                            # %for.cond363
                                        #   Parent Loop BB123_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB123_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB123_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB123_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB123_150
.LBB123_149:                            # %cond.false371
                                        #   in Loop: Header=BB123_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB123_150:                            # %cond.end373
                                        #   in Loop: Header=BB123_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB123_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB123_156
.LBB123_152:                            # %cond.false378
                                        #   in Loop: Header=BB123_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB123_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB123_155
.LBB123_154:                            # %cond.false383
                                        #   in Loop: Header=BB123_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB123_155:                            # %cond.end385
                                        #   in Loop: Header=BB123_146 Depth=2
.LBB123_156:                            # %cond.end387
                                        #   in Loop: Header=BB123_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB123_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_146
.LBB123_158:                            # %for.end401
                                        #   in Loop: Header=BB123_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB123_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB123_135
.LBB123_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB123_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB123_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB123_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB123_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB123_161
.LBB123_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_167
.LBB123_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB123_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB123_173
.LBB123_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_172
.LBB123_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB123_172:                            # %cond.end449
.LBB123_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB123_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB123_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_177
.LBB123_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB123_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB123_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB123_183
.LBB123_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB123_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_182
.LBB123_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB123_182:                            # %cond.end486
.LBB123_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB123_196
.LBB123_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB123_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB123_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_188
.LBB123_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB123_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB123_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB123_194
.LBB123_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB123_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_193
.LBB123_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB123_193:                            # %cond.end526
.LBB123_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB123_195:                            # %if.end532
	jmp	.LBB123_196
.LBB123_196:                            # %if.end533
	jmp	.LBB123_329
.LBB123_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB123_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB123_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB123_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB123_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB123_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB123_203
.LBB123_202:                            # %cond.false546
                                        #   in Loop: Header=BB123_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB123_203:                            # %cond.end548
                                        #   in Loop: Header=BB123_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB123_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB123_209
.LBB123_205:                            # %cond.false553
                                        #   in Loop: Header=BB123_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB123_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB123_208
.LBB123_207:                            # %cond.false558
                                        #   in Loop: Header=BB123_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB123_208:                            # %cond.end560
                                        #   in Loop: Header=BB123_199 Depth=1
.LBB123_209:                            # %cond.end562
                                        #   in Loop: Header=BB123_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB123_210:                            # %for.cond564
                                        #   Parent Loop BB123_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB123_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB123_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB123_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB123_214
.LBB123_213:                            # %cond.false572
                                        #   in Loop: Header=BB123_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB123_214:                            # %cond.end574
                                        #   in Loop: Header=BB123_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB123_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB123_220
.LBB123_216:                            # %cond.false579
                                        #   in Loop: Header=BB123_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB123_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB123_219
.LBB123_218:                            # %cond.false584
                                        #   in Loop: Header=BB123_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB123_219:                            # %cond.end586
                                        #   in Loop: Header=BB123_210 Depth=2
.LBB123_220:                            # %cond.end588
                                        #   in Loop: Header=BB123_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB123_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB123_210
.LBB123_222:                            # %for.end602
                                        #   in Loop: Header=BB123_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB123_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_199
.LBB123_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB123_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB123_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB123_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB123_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_225
.LBB123_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_231
.LBB123_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB123_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB123_237
.LBB123_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_236
.LBB123_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB123_236:                            # %cond.end650
.LBB123_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB123_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB123_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_241
.LBB123_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB123_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB123_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB123_247
.LBB123_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB123_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_246
.LBB123_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB123_246:                            # %cond.end687
.LBB123_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB123_258
.LBB123_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB123_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_251
.LBB123_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB123_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB123_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB123_257
.LBB123_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB123_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_256
.LBB123_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB123_256:                            # %cond.end724
.LBB123_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB123_258:                            # %if.end730
	jmp	.LBB123_328
.LBB123_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB123_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB123_262
.LBB123_261:                            # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB123_262:                            # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB123_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB123_265
.LBB123_264:                            # %cond.false742
	movl	-44(%rbp), %eax
.LBB123_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB123_271
.LBB123_267:                            # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB123_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB123_270
.LBB123_269:                            # %cond.false752
	movl	-44(%rbp), %eax
.LBB123_270:                            # %cond.end753
.LBB123_271:                            # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB123_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB123_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB123_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB123_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB123_276
.LBB123_275:                            # %cond.false765
                                        #   in Loop: Header=BB123_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB123_276:                            # %cond.end767
                                        #   in Loop: Header=BB123_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB123_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB123_282
.LBB123_278:                            # %cond.false772
                                        #   in Loop: Header=BB123_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB123_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB123_281
.LBB123_280:                            # %cond.false777
                                        #   in Loop: Header=BB123_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB123_281:                            # %cond.end779
                                        #   in Loop: Header=BB123_272 Depth=1
.LBB123_282:                            # %cond.end781
                                        #   in Loop: Header=BB123_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB123_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_272
.LBB123_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_287
.LBB123_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB123_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB123_293
.LBB123_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_292
.LBB123_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB123_292:                            # %cond.end822
.LBB123_293:                            # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB123_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB123_296
.LBB123_295:                            # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB123_296:                            # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB123_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB123_299
.LBB123_298:                            # %cond.false836
	movl	-40(%rbp), %eax
.LBB123_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB123_305
.LBB123_301:                            # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB123_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB123_304
.LBB123_303:                            # %cond.false846
	movl	-40(%rbp), %eax
.LBB123_304:                            # %cond.end847
.LBB123_305:                            # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB123_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB123_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB123_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB123_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB123_310
.LBB123_309:                            # %cond.false859
                                        #   in Loop: Header=BB123_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB123_310:                            # %cond.end861
                                        #   in Loop: Header=BB123_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB123_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB123_316
.LBB123_312:                            # %cond.false866
                                        #   in Loop: Header=BB123_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB123_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB123_315
.LBB123_314:                            # %cond.false871
                                        #   in Loop: Header=BB123_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB123_315:                            # %cond.end873
                                        #   in Loop: Header=BB123_306 Depth=1
.LBB123_316:                            # %cond.end875
                                        #   in Loop: Header=BB123_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB123_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB123_306
.LBB123_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_321
.LBB123_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB123_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB123_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB123_327
.LBB123_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_326
.LBB123_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB123_326:                            # %cond.end916
.LBB123_327:                            # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB123_328:                            # %if.end922
	jmp	.LBB123_329
.LBB123_329:                            # %if.end923
	jmp	.LBB123_330
.LBB123_330:                            # %if.end924
	jmp	.LBB123_331
.LBB123_331:                            # %if.end925
	jmp	.LBB123_332
.LBB123_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1655596005, -108(%rbp) # imm = 0x62AE63E5
	jne	.LBB123_334
.LBB123_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_333
.Lfunc_end123:
	.size	Get_Reference_Pixel.113, .Lfunc_end123-Get_Reference_Pixel.113
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.114  # -- Begin function decode_one_b8block.114
	.p2align	4, 0x90
	.type	decode_one_b8block.114,@function
decode_one_b8block.114:                 # @decode_one_b8block.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$181029389, -84(%rbp)   # imm = 0xACA4A0D
	movl	%edi, -52(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB124_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB124_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB124_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_4:                              # %for.cond9
                                        #   Parent Loop BB124_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB124_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB124_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB124_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_4
.LBB124_7:                              # %for.end
                                        #   in Loop: Header=BB124_2 Depth=1
	jmp	.LBB124_8
.LBB124_8:                              # %for.inc26
                                        #   in Loop: Header=BB124_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_2
.LBB124_9:                              # %for.end28
	jmp	.LBB124_96
.LBB124_10:                             # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB124_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB124_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB124_31
.LBB124_14:                             # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB124_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB124_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_17:                             # %for.cond40
                                        #   Parent Loop BB124_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB124_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB124_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB124_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_17
.LBB124_20:                             # %for.end49
                                        #   in Loop: Header=BB124_15 Depth=1
	jmp	.LBB124_21
.LBB124_21:                             # %for.inc50
                                        #   in Loop: Header=BB124_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_15
.LBB124_22:                             # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB124_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB124_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB124_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB124_25:                             # %for.cond56
                                        #   Parent Loop BB124_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB124_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB124_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB124_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_25
.LBB124_28:                             # %for.end71
                                        #   in Loop: Header=BB124_23 Depth=1
	jmp	.LBB124_29
.LBB124_29:                             # %for.inc72
                                        #   in Loop: Header=BB124_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_23
.LBB124_30:                             # %for.end74
	jmp	.LBB124_60
.LBB124_31:                             # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB124_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB124_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB124_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB124_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB124_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB124_36:                             # %for.cond83
                                        #   Parent Loop BB124_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB124_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB124_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB124_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_36
.LBB124_39:                             # %for.end120
                                        #   in Loop: Header=BB124_34 Depth=1
	jmp	.LBB124_40
.LBB124_40:                             # %for.inc121
                                        #   in Loop: Header=BB124_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_34
.LBB124_41:                             # %for.end123
	jmp	.LBB124_51
.LBB124_42:                             # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB124_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB124_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB124_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB124_45:                             # %for.cond129
                                        #   Parent Loop BB124_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB124_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB124_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB124_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_45
.LBB124_48:                             # %for.end145
                                        #   in Loop: Header=BB124_43 Depth=1
	jmp	.LBB124_49
.LBB124_49:                             # %for.inc146
                                        #   in Loop: Header=BB124_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_43
.LBB124_50:                             # %for.end148
	jmp	.LBB124_51
.LBB124_51:                             # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB124_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB124_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_54:                             # %for.cond153
                                        #   Parent Loop BB124_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB124_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB124_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB124_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_54
.LBB124_57:                             # %for.end167
                                        #   in Loop: Header=BB124_52 Depth=1
	jmp	.LBB124_58
.LBB124_58:                             # %for.inc168
                                        #   in Loop: Header=BB124_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_52
.LBB124_59:                             # %for.end170
	jmp	.LBB124_60
.LBB124_60:                             # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB124_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB124_66
.LBB124_62:                             # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB124_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB124_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB124_86
.LBB124_66:                             # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB124_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_69 Depth 2
                                        #       Child Loop BB124_74 Depth 3
                                        #         Child Loop BB124_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB124_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB124_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB124_69:                             # %for.cond197
                                        #   Parent Loop BB124_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_74 Depth 3
                                        #         Child Loop BB124_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB124_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB124_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB124_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB124_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB124_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB124_73:                             # %if.end218
                                        #   in Loop: Header=BB124_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB124_74:                             # %for.cond233
                                        #   Parent Loop BB124_67 Depth=1
                                        #     Parent Loop BB124_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB124_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB124_74 Depth=3
	movl	$0, -4(%rbp)
.LBB124_76:                             # %for.cond237
                                        #   Parent Loop BB124_67 Depth=1
                                        #     Parent Loop BB124_69 Depth=2
                                        #       Parent Loop BB124_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB124_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB124_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB124_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_76
.LBB124_79:                             # %for.end269
                                        #   in Loop: Header=BB124_74 Depth=3
	jmp	.LBB124_80
.LBB124_80:                             # %for.inc270
                                        #   in Loop: Header=BB124_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_74
.LBB124_81:                             # %for.end272
                                        #   in Loop: Header=BB124_69 Depth=2
	jmp	.LBB124_82
.LBB124_82:                             # %for.inc273
                                        #   in Loop: Header=BB124_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_69
.LBB124_83:                             # %for.end275
                                        #   in Loop: Header=BB124_67 Depth=1
	jmp	.LBB124_84
.LBB124_84:                             # %for.inc276
                                        #   in Loop: Header=BB124_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_67
.LBB124_85:                             # %for.end278
	jmp	.LBB124_95
.LBB124_86:                             # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB124_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB124_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_89:                             # %for.cond284
                                        #   Parent Loop BB124_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB124_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB124_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB124_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_89
.LBB124_92:                             # %for.end310
                                        #   in Loop: Header=BB124_87 Depth=1
	jmp	.LBB124_93
.LBB124_93:                             # %for.inc311
                                        #   in Loop: Header=BB124_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_87
.LBB124_94:                             # %for.end313
	jmp	.LBB124_95
.LBB124_95:                             # %if.end314
	jmp	.LBB124_96
.LBB124_96:                             # %if.end315
	cmpl	$181029389, -84(%rbp)   # imm = 0xACA4A0D
	jne	.LBB124_98
.LBB124_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_97
.Lfunc_end124:
	.size	decode_one_b8block.114, .Lfunc_end124-decode_one_b8block.114
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.115  # -- Begin function decode_one_b8block.115
	.p2align	4, 0x90
	.type	decode_one_b8block.115,@function
decode_one_b8block.115:                 # @decode_one_b8block.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1493071646, -84(%rbp)  # imm = 0x58FE771E
	movl	%edi, -44(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB125_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB125_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB125_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_4:                              # %for.cond9
                                        #   Parent Loop BB125_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB125_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB125_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB125_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_4
.LBB125_7:                              # %for.end
                                        #   in Loop: Header=BB125_2 Depth=1
	jmp	.LBB125_8
.LBB125_8:                              # %for.inc26
                                        #   in Loop: Header=BB125_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_2
.LBB125_9:                              # %for.end28
	jmp	.LBB125_96
.LBB125_10:                             # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB125_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB125_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB125_31
.LBB125_14:                             # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB125_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB125_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_17:                             # %for.cond40
                                        #   Parent Loop BB125_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB125_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB125_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB125_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_17
.LBB125_20:                             # %for.end49
                                        #   in Loop: Header=BB125_15 Depth=1
	jmp	.LBB125_21
.LBB125_21:                             # %for.inc50
                                        #   in Loop: Header=BB125_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_15
.LBB125_22:                             # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB125_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB125_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB125_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB125_25:                             # %for.cond56
                                        #   Parent Loop BB125_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB125_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB125_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB125_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_25
.LBB125_28:                             # %for.end71
                                        #   in Loop: Header=BB125_23 Depth=1
	jmp	.LBB125_29
.LBB125_29:                             # %for.inc72
                                        #   in Loop: Header=BB125_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_23
.LBB125_30:                             # %for.end74
	jmp	.LBB125_60
.LBB125_31:                             # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB125_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB125_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB125_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB125_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB125_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB125_36:                             # %for.cond83
                                        #   Parent Loop BB125_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB125_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB125_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB125_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_36
.LBB125_39:                             # %for.end120
                                        #   in Loop: Header=BB125_34 Depth=1
	jmp	.LBB125_40
.LBB125_40:                             # %for.inc121
                                        #   in Loop: Header=BB125_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_34
.LBB125_41:                             # %for.end123
	jmp	.LBB125_51
.LBB125_42:                             # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB125_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB125_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB125_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB125_45:                             # %for.cond129
                                        #   Parent Loop BB125_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB125_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB125_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB125_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_45
.LBB125_48:                             # %for.end145
                                        #   in Loop: Header=BB125_43 Depth=1
	jmp	.LBB125_49
.LBB125_49:                             # %for.inc146
                                        #   in Loop: Header=BB125_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_43
.LBB125_50:                             # %for.end148
	jmp	.LBB125_51
.LBB125_51:                             # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB125_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB125_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_54:                             # %for.cond153
                                        #   Parent Loop BB125_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB125_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB125_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB125_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_54
.LBB125_57:                             # %for.end167
                                        #   in Loop: Header=BB125_52 Depth=1
	jmp	.LBB125_58
.LBB125_58:                             # %for.inc168
                                        #   in Loop: Header=BB125_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_52
.LBB125_59:                             # %for.end170
	jmp	.LBB125_60
.LBB125_60:                             # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB125_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB125_66
.LBB125_62:                             # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB125_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB125_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB125_86
.LBB125_66:                             # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB125_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_69 Depth 2
                                        #       Child Loop BB125_74 Depth 3
                                        #         Child Loop BB125_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB125_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB125_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB125_69:                             # %for.cond197
                                        #   Parent Loop BB125_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_74 Depth 3
                                        #         Child Loop BB125_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB125_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB125_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB125_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB125_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB125_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB125_73:                             # %if.end218
                                        #   in Loop: Header=BB125_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB125_74:                             # %for.cond233
                                        #   Parent Loop BB125_67 Depth=1
                                        #     Parent Loop BB125_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB125_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB125_74 Depth=3
	movl	$0, -4(%rbp)
.LBB125_76:                             # %for.cond237
                                        #   Parent Loop BB125_67 Depth=1
                                        #     Parent Loop BB125_69 Depth=2
                                        #       Parent Loop BB125_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB125_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB125_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB125_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_76
.LBB125_79:                             # %for.end269
                                        #   in Loop: Header=BB125_74 Depth=3
	jmp	.LBB125_80
.LBB125_80:                             # %for.inc270
                                        #   in Loop: Header=BB125_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_74
.LBB125_81:                             # %for.end272
                                        #   in Loop: Header=BB125_69 Depth=2
	jmp	.LBB125_82
.LBB125_82:                             # %for.inc273
                                        #   in Loop: Header=BB125_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_69
.LBB125_83:                             # %for.end275
                                        #   in Loop: Header=BB125_67 Depth=1
	jmp	.LBB125_84
.LBB125_84:                             # %for.inc276
                                        #   in Loop: Header=BB125_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_67
.LBB125_85:                             # %for.end278
	jmp	.LBB125_95
.LBB125_86:                             # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB125_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB125_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_89:                             # %for.cond284
                                        #   Parent Loop BB125_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB125_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB125_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB125_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_89
.LBB125_92:                             # %for.end310
                                        #   in Loop: Header=BB125_87 Depth=1
	jmp	.LBB125_93
.LBB125_93:                             # %for.inc311
                                        #   in Loop: Header=BB125_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_87
.LBB125_94:                             # %for.end313
	jmp	.LBB125_95
.LBB125_95:                             # %if.end314
	jmp	.LBB125_96
.LBB125_96:                             # %if.end315
	cmpl	$1493071646, -84(%rbp)  # imm = 0x58FE771E
	jne	.LBB125_98
.LBB125_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_97
.Lfunc_end125:
	.size	decode_one_b8block.115, .Lfunc_end125-decode_one_b8block.115
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.116   # -- Begin function Error_Concealment.116
	.p2align	4, 0x90
	.type	Error_Concealment.116,@function
Error_Concealment.116:                  # @Error_Concealment.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$356987318, -20(%rbp)   # imm = 0x154731B6
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB126_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB126_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	$0, -8(%rbp)
.LBB126_3:                              # %for.cond2
                                        #   Parent Loop BB126_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB126_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB126_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB126_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB126_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB126_6:                              # %if.end
                                        #   in Loop: Header=BB126_3 Depth=2
	jmp	.LBB126_7
.LBB126_7:                              # %for.inc
                                        #   in Loop: Header=BB126_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_3
.LBB126_8:                              # %for.end
                                        #   in Loop: Header=BB126_1 Depth=1
	jmp	.LBB126_9
.LBB126_9:                              # %for.inc7
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_1
.LBB126_10:                             # %for.end9
	cmpl	$356987318, -20(%rbp)   # imm = 0x154731B6
	jne	.LBB126_12
.LBB126_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_11
.Lfunc_end126:
	.size	Error_Concealment.116, .Lfunc_end126-Error_Concealment.116
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.117   # -- Begin function Error_Concealment.117
	.p2align	4, 0x90
	.type	Error_Concealment.117,@function
Error_Concealment.117:                  # @Error_Concealment.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1048018985, -20(%rbp)  # imm = 0x3E778029
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB127_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB127_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB127_1 Depth=1
	movl	$0, -4(%rbp)
.LBB127_3:                              # %for.cond2
                                        #   Parent Loop BB127_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB127_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB127_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB127_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB127_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB127_6:                              # %if.end
                                        #   in Loop: Header=BB127_3 Depth=2
	jmp	.LBB127_7
.LBB127_7:                              # %for.inc
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_3
.LBB127_8:                              # %for.end
                                        #   in Loop: Header=BB127_1 Depth=1
	jmp	.LBB127_9
.LBB127_9:                              # %for.inc7
                                        #   in Loop: Header=BB127_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_1
.LBB127_10:                             # %for.end9
	cmpl	$1048018985, -20(%rbp)  # imm = 0x3E778029
	jne	.LBB127_12
.LBB127_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_11
.Lfunc_end127:
	.size	Error_Concealment.117, .Lfunc_end127-Error_Concealment.117
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.118 # -- Begin function Get_Reference_Block.118
	.p2align	4, 0x90
	.type	Get_Reference_Block.118,@function
Get_Reference_Block.118:                # @Get_Reference_Block.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$948912488, -24(%rbp)   # imm = 0x388F4168
	movq	%rdi, -56(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -48(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -8(%rbp)
.LBB128_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB128_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	$0, -4(%rbp)
.LBB128_3:                              # %for.cond5
                                        #   Parent Loop BB128_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB128_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB128_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-32(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB128_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_3
.LBB128_6:                              # %for.end
                                        #   in Loop: Header=BB128_1 Depth=1
	jmp	.LBB128_7
.LBB128_7:                              # %for.inc14
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_1
.LBB128_8:                              # %for.end16
	cmpl	$948912488, -24(%rbp)   # imm = 0x388F4168
	jne	.LBB128_10
.LBB128_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_9
.Lfunc_end128:
	.size	Get_Reference_Block.118, .Lfunc_end128-Get_Reference_Block.118
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.119 # -- Begin function Get_Reference_Pixel.119
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.119,@function
Get_Reference_Pixel.119:                # @Get_Reference_Pixel.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1567231497, -108(%rbp) # imm = 0x5D6A0E09
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB129_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB129_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB129_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB129_5
.LBB129_4:                              # %cond.false
	movl	-28(%rbp), %ecx
.LBB129_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB129_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB129_11
.LBB129_7:                              # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB129_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB129_10
.LBB129_9:                              # %cond.false13
	movl	-28(%rbp), %ecx
.LBB129_10:                             # %cond.end14
.LBB129_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB129_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB129_14
.LBB129_13:                             # %cond.false20
	movl	-24(%rbp), %ecx
.LBB129_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB129_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB129_20
.LBB129_16:                             # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB129_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB129_19
.LBB129_18:                             # %cond.false28
	movl	-24(%rbp), %ecx
.LBB129_19:                             # %cond.end29
.LBB129_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB129_332
.LBB129_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB129_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB129_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB129_25
.LBB129_24:                             # %cond.false41
	movl	-28(%rbp), %eax
.LBB129_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB129_31
.LBB129_27:                             # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB129_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB129_30
.LBB129_29:                             # %cond.false51
	movl	-28(%rbp), %eax
.LBB129_30:                             # %cond.end52
.LBB129_31:                             # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB129_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB129_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB129_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB129_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB129_36
.LBB129_35:                             # %cond.false61
                                        #   in Loop: Header=BB129_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB129_36:                             # %cond.end63
                                        #   in Loop: Header=BB129_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB129_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB129_42
.LBB129_38:                             # %cond.false68
                                        #   in Loop: Header=BB129_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB129_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB129_41
.LBB129_40:                             # %cond.false73
                                        #   in Loop: Header=BB129_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB129_41:                             # %cond.end75
                                        #   in Loop: Header=BB129_32 Depth=1
.LBB129_42:                             # %cond.end77
                                        #   in Loop: Header=BB129_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB129_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB129_32
.LBB129_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB129_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_47
.LBB129_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB129_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB129_53
.LBB129_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB129_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_52
.LBB129_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB129_52:                             # %cond.end113
.LBB129_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB129_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB129_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB129_57
.LBB129_56:                             # %cond.false125
	movl	-24(%rbp), %edx
.LBB129_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB129_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB129_63
.LBB129_59:                             # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB129_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB129_62
.LBB129_61:                             # %cond.false135
	movl	-24(%rbp), %edx
.LBB129_62:                             # %cond.end136
.LBB129_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB129_76
.LBB129_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB129_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB129_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB129_68
.LBB129_67:                             # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB129_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB129_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB129_74
.LBB129_70:                             # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB129_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB129_73
.LBB129_72:                             # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB129_73:                             # %cond.end169
.LBB129_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB129_75:                             # %if.end
	jmp	.LBB129_76
.LBB129_76:                             # %if.end178
	jmp	.LBB129_331
.LBB129_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB129_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB129_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB129_81
.LBB129_80:                             # %cond.false186
	movl	-24(%rbp), %eax
.LBB129_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB129_87
.LBB129_83:                             # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB129_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB129_86
.LBB129_85:                             # %cond.false196
	movl	-24(%rbp), %eax
.LBB129_86:                             # %cond.end197
.LBB129_87:                             # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB129_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB129_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB129_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB129_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB129_92
.LBB129_91:                             # %cond.false209
                                        #   in Loop: Header=BB129_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB129_92:                             # %cond.end211
                                        #   in Loop: Header=BB129_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB129_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB129_98
.LBB129_94:                             # %cond.false216
                                        #   in Loop: Header=BB129_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB129_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB129_97
.LBB129_96:                             # %cond.false221
                                        #   in Loop: Header=BB129_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB129_97:                             # %cond.end223
                                        #   in Loop: Header=BB129_88 Depth=1
.LBB129_98:                             # %cond.end225
                                        #   in Loop: Header=BB129_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB129_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB129_88
.LBB129_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB129_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_103
.LBB129_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB129_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB129_109
.LBB129_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB129_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_108
.LBB129_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB129_108:                            # %cond.end266
.LBB129_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB129_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB129_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB129_113
.LBB129_112:                            # %cond.false276
	movl	-28(%rbp), %edx
.LBB129_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB129_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB129_119
.LBB129_115:                            # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB129_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB129_118
.LBB129_117:                            # %cond.false286
	movl	-28(%rbp), %edx
.LBB129_118:                            # %cond.end287
.LBB129_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB129_132
.LBB129_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB129_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB129_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB129_124
.LBB129_123:                            # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB129_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB129_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB129_130
.LBB129_126:                            # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB129_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB129_129
.LBB129_128:                            # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB129_129:                            # %cond.end320
.LBB129_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB129_131:                            # %if.end331
	jmp	.LBB129_132
.LBB129_132:                            # %if.end332
	jmp	.LBB129_330
.LBB129_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB129_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB129_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB129_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB129_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB129_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB129_139
.LBB129_138:                            # %cond.false345
                                        #   in Loop: Header=BB129_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB129_139:                            # %cond.end347
                                        #   in Loop: Header=BB129_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB129_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB129_145
.LBB129_141:                            # %cond.false352
                                        #   in Loop: Header=BB129_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB129_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB129_144
.LBB129_143:                            # %cond.false357
                                        #   in Loop: Header=BB129_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB129_144:                            # %cond.end359
                                        #   in Loop: Header=BB129_135 Depth=1
.LBB129_145:                            # %cond.end361
                                        #   in Loop: Header=BB129_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB129_146:                            # %for.cond363
                                        #   Parent Loop BB129_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB129_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB129_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB129_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB129_150
.LBB129_149:                            # %cond.false371
                                        #   in Loop: Header=BB129_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB129_150:                            # %cond.end373
                                        #   in Loop: Header=BB129_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB129_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB129_156
.LBB129_152:                            # %cond.false378
                                        #   in Loop: Header=BB129_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB129_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB129_155
.LBB129_154:                            # %cond.false383
                                        #   in Loop: Header=BB129_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB129_155:                            # %cond.end385
                                        #   in Loop: Header=BB129_146 Depth=2
.LBB129_156:                            # %cond.end387
                                        #   in Loop: Header=BB129_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB129_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB129_146
.LBB129_158:                            # %for.end401
                                        #   in Loop: Header=BB129_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB129_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB129_135
.LBB129_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB129_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB129_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB129_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB129_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB129_161
.LBB129_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB129_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_167
.LBB129_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB129_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB129_173
.LBB129_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB129_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_172
.LBB129_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB129_172:                            # %cond.end449
.LBB129_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB129_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB129_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_177
.LBB129_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB129_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB129_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB129_183
.LBB129_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB129_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_182
.LBB129_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB129_182:                            # %cond.end486
.LBB129_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB129_196
.LBB129_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB129_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB129_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_188
.LBB129_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB129_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB129_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB129_194
.LBB129_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB129_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_193
.LBB129_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB129_193:                            # %cond.end526
.LBB129_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB129_195:                            # %if.end532
	jmp	.LBB129_196
.LBB129_196:                            # %if.end533
	jmp	.LBB129_329
.LBB129_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB129_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB129_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB129_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB129_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB129_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB129_203
.LBB129_202:                            # %cond.false546
                                        #   in Loop: Header=BB129_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB129_203:                            # %cond.end548
                                        #   in Loop: Header=BB129_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB129_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB129_209
.LBB129_205:                            # %cond.false553
                                        #   in Loop: Header=BB129_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB129_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB129_208
.LBB129_207:                            # %cond.false558
                                        #   in Loop: Header=BB129_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB129_208:                            # %cond.end560
                                        #   in Loop: Header=BB129_199 Depth=1
.LBB129_209:                            # %cond.end562
                                        #   in Loop: Header=BB129_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB129_210:                            # %for.cond564
                                        #   Parent Loop BB129_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB129_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB129_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB129_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB129_214
.LBB129_213:                            # %cond.false572
                                        #   in Loop: Header=BB129_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB129_214:                            # %cond.end574
                                        #   in Loop: Header=BB129_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB129_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB129_220
.LBB129_216:                            # %cond.false579
                                        #   in Loop: Header=BB129_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB129_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB129_219
.LBB129_218:                            # %cond.false584
                                        #   in Loop: Header=BB129_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB129_219:                            # %cond.end586
                                        #   in Loop: Header=BB129_210 Depth=2
.LBB129_220:                            # %cond.end588
                                        #   in Loop: Header=BB129_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB129_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB129_210
.LBB129_222:                            # %for.end602
                                        #   in Loop: Header=BB129_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB129_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB129_199
.LBB129_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB129_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB129_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB129_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB129_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB129_225
.LBB129_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB129_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_231
.LBB129_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB129_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB129_237
.LBB129_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB129_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_236
.LBB129_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB129_236:                            # %cond.end650
.LBB129_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB129_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB129_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_241
.LBB129_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB129_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB129_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB129_247
.LBB129_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB129_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_246
.LBB129_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB129_246:                            # %cond.end687
.LBB129_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB129_258
.LBB129_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB129_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_251
.LBB129_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB129_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB129_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB129_257
.LBB129_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB129_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_256
.LBB129_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB129_256:                            # %cond.end724
.LBB129_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB129_258:                            # %if.end730
	jmp	.LBB129_328
.LBB129_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB129_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB129_262
.LBB129_261:                            # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB129_262:                            # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB129_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB129_265
.LBB129_264:                            # %cond.false742
	movl	-40(%rbp), %eax
.LBB129_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB129_271
.LBB129_267:                            # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB129_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB129_270
.LBB129_269:                            # %cond.false752
	movl	-40(%rbp), %eax
.LBB129_270:                            # %cond.end753
.LBB129_271:                            # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB129_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB129_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB129_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB129_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB129_276
.LBB129_275:                            # %cond.false765
                                        #   in Loop: Header=BB129_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB129_276:                            # %cond.end767
                                        #   in Loop: Header=BB129_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB129_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB129_282
.LBB129_278:                            # %cond.false772
                                        #   in Loop: Header=BB129_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB129_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB129_281
.LBB129_280:                            # %cond.false777
                                        #   in Loop: Header=BB129_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB129_281:                            # %cond.end779
                                        #   in Loop: Header=BB129_272 Depth=1
.LBB129_282:                            # %cond.end781
                                        #   in Loop: Header=BB129_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB129_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB129_272
.LBB129_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB129_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_287
.LBB129_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB129_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB129_293
.LBB129_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB129_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_292
.LBB129_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB129_292:                            # %cond.end822
.LBB129_293:                            # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB129_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB129_296
.LBB129_295:                            # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB129_296:                            # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB129_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB129_299
.LBB129_298:                            # %cond.false836
	movl	-44(%rbp), %eax
.LBB129_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB129_305
.LBB129_301:                            # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB129_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB129_304
.LBB129_303:                            # %cond.false846
	movl	-44(%rbp), %eax
.LBB129_304:                            # %cond.end847
.LBB129_305:                            # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB129_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB129_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB129_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB129_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB129_310
.LBB129_309:                            # %cond.false859
                                        #   in Loop: Header=BB129_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB129_310:                            # %cond.end861
                                        #   in Loop: Header=BB129_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB129_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB129_316
.LBB129_312:                            # %cond.false866
                                        #   in Loop: Header=BB129_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB129_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB129_315
.LBB129_314:                            # %cond.false871
                                        #   in Loop: Header=BB129_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB129_315:                            # %cond.end873
                                        #   in Loop: Header=BB129_306 Depth=1
.LBB129_316:                            # %cond.end875
                                        #   in Loop: Header=BB129_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB129_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB129_306
.LBB129_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB129_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_321
.LBB129_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB129_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB129_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB129_327
.LBB129_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB129_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_326
.LBB129_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB129_326:                            # %cond.end916
.LBB129_327:                            # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB129_328:                            # %if.end922
	jmp	.LBB129_329
.LBB129_329:                            # %if.end923
	jmp	.LBB129_330
.LBB129_330:                            # %if.end924
	jmp	.LBB129_331
.LBB129_331:                            # %if.end925
	jmp	.LBB129_332
.LBB129_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1567231497, -108(%rbp) # imm = 0x5D6A0E09
	jne	.LBB129_334
.LBB129_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_333
.Lfunc_end129:
	.size	Get_Reference_Pixel.119, .Lfunc_end129-Get_Reference_Pixel.119
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.120   # -- Begin function Error_Concealment.120
	.p2align	4, 0x90
	.type	Error_Concealment.120,@function
Error_Concealment.120:                  # @Error_Concealment.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$401675330, -20(%rbp)   # imm = 0x17F11442
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB130_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB130_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB130_1 Depth=1
	movl	$0, -8(%rbp)
.LBB130_3:                              # %for.cond2
                                        #   Parent Loop BB130_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB130_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB130_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB130_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB130_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB130_6:                              # %if.end
                                        #   in Loop: Header=BB130_3 Depth=2
	jmp	.LBB130_7
.LBB130_7:                              # %for.inc
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_3
.LBB130_8:                              # %for.end
                                        #   in Loop: Header=BB130_1 Depth=1
	jmp	.LBB130_9
.LBB130_9:                              # %for.inc7
                                        #   in Loop: Header=BB130_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_1
.LBB130_10:                             # %for.end9
	cmpl	$401675330, -20(%rbp)   # imm = 0x17F11442
	jne	.LBB130_12
.LBB130_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_11
.Lfunc_end130:
	.size	Error_Concealment.120, .Lfunc_end130-Error_Concealment.120
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.121 # -- Begin function Get_Reference_Block.121
	.p2align	4, 0x90
	.type	Get_Reference_Block.121,@function
Get_Reference_Block.121:                # @Get_Reference_Block.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2107664196, -16(%rbp)  # imm = 0x7DA06744
	movq	%rdi, -48(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -56(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB131_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB131_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB131_1 Depth=1
	movl	$0, -4(%rbp)
.LBB131_3:                              # %for.cond5
                                        #   Parent Loop BB131_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB131_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB131_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB131_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_3
.LBB131_6:                              # %for.end
                                        #   in Loop: Header=BB131_1 Depth=1
	jmp	.LBB131_7
.LBB131_7:                              # %for.inc14
                                        #   in Loop: Header=BB131_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB131_1
.LBB131_8:                              # %for.end16
	cmpl	$2107664196, -16(%rbp)  # imm = 0x7DA06744
	jne	.LBB131_10
.LBB131_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_9
.Lfunc_end131:
	.size	Get_Reference_Block.121, .Lfunc_end131-Get_Reference_Block.121
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.122 # -- Begin function Get_Reference_Block.122
	.p2align	4, 0x90
	.type	Get_Reference_Block.122,@function
Get_Reference_Block.122:                # @Get_Reference_Block.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1453102741, -24(%rbp)  # imm = 0x569C9695
	movq	%rdi, -56(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -48(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB132_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB132_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB132_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	$0, -4(%rbp)
.LBB132_3:                              # %for.cond5
                                        #   Parent Loop BB132_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB132_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB132_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-36(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB132_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB132_3
.LBB132_6:                              # %for.end
                                        #   in Loop: Header=BB132_1 Depth=1
	jmp	.LBB132_7
.LBB132_7:                              # %for.inc14
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB132_1
.LBB132_8:                              # %for.end16
	cmpl	$1453102741, -24(%rbp)  # imm = 0x569C9695
	jne	.LBB132_10
.LBB132_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_9
.Lfunc_end132:
	.size	Get_Reference_Block.122, .Lfunc_end132-Get_Reference_Block.122
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.123 # -- Begin function Get_Reference_Block.123
	.p2align	4, 0x90
	.type	Get_Reference_Block.123,@function
Get_Reference_Block.123:                # @Get_Reference_Block.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1040243645, -20(%rbp)  # imm = 0x3E00DBBD
	movq	%rdi, -48(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -56(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB133_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB133_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	$0, -8(%rbp)
.LBB133_3:                              # %for.cond5
                                        #   Parent Loop BB133_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB133_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB133_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-24(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB133_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB133_3
.LBB133_6:                              # %for.end
                                        #   in Loop: Header=BB133_1 Depth=1
	jmp	.LBB133_7
.LBB133_7:                              # %for.inc14
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB133_1
.LBB133_8:                              # %for.end16
	cmpl	$1040243645, -20(%rbp)  # imm = 0x3E00DBBD
	jne	.LBB133_10
.LBB133_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_9
.Lfunc_end133:
	.size	Get_Reference_Block.123, .Lfunc_end133-Get_Reference_Block.123
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.124 # -- Begin function Get_Reference_Block.124
	.p2align	4, 0x90
	.type	Get_Reference_Block.124,@function
Get_Reference_Block.124:                # @Get_Reference_Block.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1602922585, -28(%rbp)  # imm = 0x5F8AA859
	movq	%rdi, -56(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -48(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB134_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB134_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB134_1 Depth=1
	movl	$0, -8(%rbp)
.LBB134_3:                              # %for.cond5
                                        #   Parent Loop BB134_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB134_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB134_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-24(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB134_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB134_3
.LBB134_6:                              # %for.end
                                        #   in Loop: Header=BB134_1 Depth=1
	jmp	.LBB134_7
.LBB134_7:                              # %for.inc14
                                        #   in Loop: Header=BB134_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_1
.LBB134_8:                              # %for.end16
	cmpl	$1602922585, -28(%rbp)  # imm = 0x5F8AA859
	jne	.LBB134_10
.LBB134_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_9
.Lfunc_end134:
	.size	Get_Reference_Block.124, .Lfunc_end134-Get_Reference_Block.124
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.125 # -- Begin function Get_Reference_Block.125
	.p2align	4, 0x90
	.type	Get_Reference_Block.125,@function
Get_Reference_Block.125:                # @Get_Reference_Block.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2072340574, -20(%rbp)  # imm = 0x7B85685E
	movq	%rdi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -16(%rbp)
	movq	%r9, -56(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB135_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB135_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	$0, -4(%rbp)
.LBB135_3:                              # %for.cond5
                                        #   Parent Loop BB135_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB135_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB135_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_3
.LBB135_6:                              # %for.end
                                        #   in Loop: Header=BB135_1 Depth=1
	jmp	.LBB135_7
.LBB135_7:                              # %for.inc14
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_1
.LBB135_8:                              # %for.end16
	cmpl	$2072340574, -20(%rbp)  # imm = 0x7B85685E
	jne	.LBB135_10
.LBB135_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_9
.Lfunc_end135:
	.size	Get_Reference_Block.125, .Lfunc_end135-Get_Reference_Block.125
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.126 # -- Begin function Get_Reference_Block.126
	.p2align	4, 0x90
	.type	Get_Reference_Block.126,@function
Get_Reference_Block.126:                # @Get_Reference_Block.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1766743294, -32(%rbp)  # imm = 0x694E5CFE
	movq	%rdi, -56(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -48(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB136_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB136_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	$0, -8(%rbp)
.LBB136_3:                              # %for.cond5
                                        #   Parent Loop BB136_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB136_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB136_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-20(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB136_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_3
.LBB136_6:                              # %for.end
                                        #   in Loop: Header=BB136_1 Depth=1
	jmp	.LBB136_7
.LBB136_7:                              # %for.inc14
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_1
.LBB136_8:                              # %for.end16
	cmpl	$1766743294, -32(%rbp)  # imm = 0x694E5CFE
	jne	.LBB136_10
.LBB136_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_9
.Lfunc_end136:
	.size	Get_Reference_Block.126, .Lfunc_end136-Get_Reference_Block.126
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.127      # -- Begin function DecOneForthPix.127
	.p2align	4, 0x90
	.type	DecOneForthPix.127,@function
DecOneForthPix.127:                     # @DecOneForthPix.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1753069038, -12(%rbp)  # imm = 0x687DB5EE
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB137_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB137_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB137_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_1
.LBB137_4:                              # %for.end
	cmpl	$1753069038, -12(%rbp)  # imm = 0x687DB5EE
	jne	.LBB137_6
.LBB137_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_5
.Lfunc_end137:
	.size	DecOneForthPix.127, .Lfunc_end137-DecOneForthPix.127
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.128      # -- Begin function DecOneForthPix.128
	.p2align	4, 0x90
	.type	DecOneForthPix.128,@function
DecOneForthPix.128:                     # @DecOneForthPix.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$191679011, -8(%rbp)    # imm = 0xB6CCA23
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB138_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB138_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB138_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB138_1
.LBB138_4:                              # %for.end
	cmpl	$191679011, -8(%rbp)    # imm = 0xB6CCA23
	jne	.LBB138_6
.LBB138_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_5
.Lfunc_end138:
	.size	DecOneForthPix.128, .Lfunc_end138-DecOneForthPix.128
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.129      # -- Begin function DecOneForthPix.129
	.p2align	4, 0x90
	.type	DecOneForthPix.129,@function
DecOneForthPix.129:                     # @DecOneForthPix.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$339607838, -12(%rbp)   # imm = 0x143E011E
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB139_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB139_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB139_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_1
.LBB139_4:                              # %for.end
	cmpl	$339607838, -12(%rbp)   # imm = 0x143E011E
	jne	.LBB139_6
.LBB139_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_5
.Lfunc_end139:
	.size	DecOneForthPix.129, .Lfunc_end139-DecOneForthPix.129
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.130      # -- Begin function DecOneForthPix.130
	.p2align	4, 0x90
	.type	DecOneForthPix.130,@function
DecOneForthPix.130:                     # @DecOneForthPix.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$812845367, -12(%rbp)   # imm = 0x30730937
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB140_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB140_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB140_1
.LBB140_4:                              # %for.end
	cmpl	$812845367, -12(%rbp)   # imm = 0x30730937
	jne	.LBB140_6
.LBB140_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_5
.Lfunc_end140:
	.size	DecOneForthPix.130, .Lfunc_end140-DecOneForthPix.130
	.cfi_endproc
                                        # -- End function
	.type	Get_Reference_Pixel.COEF,@object # @Get_Reference_Pixel.COEF
	.section	.rodata,"a",@progbits
	.p2align	4
Get_Reference_Pixel.COEF:
	.long	1                       # 0x1
	.long	4294967291              # 0xfffffffb
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	4294967291              # 0xfffffffb
	.long	1                       # 0x1
	.size	Get_Reference_Pixel.COEF, 24

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
